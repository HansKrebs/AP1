
AP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012d8c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08012f4c  08012f4c  00022f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801310c  0801310c  00030194  2**0
                  CONTENTS
  4 .ARM          00000008  0801310c  0801310c  0002310c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013114  08013114  00030194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013114  08013114  00023114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013118  08013118  00023118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0801311c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004588  20000194  080132b0  00030194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000471c  080132b0  0003471c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b75b  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007eef  00000000  00000000  0007b91f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000030b8  00000000  00000000  00083810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002d90  00000000  00000000  000868c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd7a  00000000  00000000  00089658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c96e  00000000  00000000  000953d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015d04d  00000000  00000000  000d1d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022ed8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ce84  00000000  00000000  0022ede0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000194 	.word	0x20000194
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012f34 	.word	0x08012f34

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000198 	.word	0x20000198
 80001fc:	08012f34 	.word	0x08012f34

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f001 fb3f 	bl	8001b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f876 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 fcdc 	bl	8000ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 fcb0 	bl	8000e6c <MX_DMA_Init>
  MX_ADC1_Init();
 800050c:	f000 f918 	bl	8000740 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000510:	f000 f97a 	bl	8000808 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000514:	f000 f9dc 	bl	80008d0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000518:	f000 fa1a 	bl	8000950 <MX_I2C3_Init>
  MX_RTC_Init();
 800051c:	f000 fa58 	bl	80009d0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000520:	f000 fab2 	bl	8000a88 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000524:	f000 fad2 	bl	8000acc <MX_SPI1_Init>
  MX_SPI3_Init();
 8000528:	f000 fb0e 	bl	8000b48 <MX_SPI3_Init>
  MX_TIM2_Init();
 800052c:	f000 fb4a 	bl	8000bc4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000530:	f000 fbe4 	bl	8000cfc <MX_TIM6_Init>
  MX_TIM7_Init();
 8000534:	f000 fc18 	bl	8000d68 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000538:	f00c faa2 	bl	800ca80 <MX_FATFS_Init>
  MX_TIM5_Init();
 800053c:	f000 fb90 	bl	8000c60 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8000540:	f000 fc48 	bl	8000dd4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000544:	f00e fa26 	bl	800e994 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000548:	4a1a      	ldr	r2, [pc, #104]	; (80005b4 <main+0xbc>)
 800054a:	2100      	movs	r1, #0
 800054c:	481a      	ldr	r0, [pc, #104]	; (80005b8 <main+0xc0>)
 800054e:	f00e faa2 	bl	800ea96 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a19      	ldr	r2, [pc, #100]	; (80005bc <main+0xc4>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of fastTask */
  fastTaskHandle = osThreadNew(StartFastTask, NULL, &fastTask_attributes);
 8000558:	4a19      	ldr	r2, [pc, #100]	; (80005c0 <main+0xc8>)
 800055a:	2100      	movs	r1, #0
 800055c:	4819      	ldr	r0, [pc, #100]	; (80005c4 <main+0xcc>)
 800055e:	f00e fa9a 	bl	800ea96 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <main+0xd0>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of normalTask */
  normalTaskHandle = osThreadNew(StartNormalTask, NULL, &normalTask_attributes);
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <main+0xd4>)
 800056a:	2100      	movs	r1, #0
 800056c:	4818      	ldr	r0, [pc, #96]	; (80005d0 <main+0xd8>)
 800056e:	f00e fa92 	bl	800ea96 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <main+0xdc>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of slowTask */
  slowTaskHandle = osThreadNew(StartSlowTask, NULL, &slowTask_attributes);
 8000578:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <main+0xe0>)
 800057a:	2100      	movs	r1, #0
 800057c:	4817      	ldr	r0, [pc, #92]	; (80005dc <main+0xe4>)
 800057e:	f00e fa8a 	bl	800ea96 <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a16      	ldr	r2, [pc, #88]	; (80005e0 <main+0xe8>)
 8000586:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  HAL_TIM_Base_Start_IT(&htim5);
 8000588:	4816      	ldr	r0, [pc, #88]	; (80005e4 <main+0xec>)
 800058a:	f009 f89d 	bl	80096c8 <HAL_TIM_Base_Start_IT>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of taskEvent */
  taskEventHandle = osEventFlagsNew(&taskEvent_attributes);
 800058e:	4816      	ldr	r0, [pc, #88]	; (80005e8 <main+0xf0>)
 8000590:	f00e fb2e 	bl	800ebf0 <osEventFlagsNew>
 8000594:	4603      	mov	r3, r0
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <main+0xf4>)
 8000598:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  InitFastTask(&taskEventHandle);
 800059a:	4814      	ldr	r0, [pc, #80]	; (80005ec <main+0xf4>)
 800059c:	f011 fdde 	bl	801215c <InitFastTask>
  InitNormalTask(&taskEventHandle);
 80005a0:	4812      	ldr	r0, [pc, #72]	; (80005ec <main+0xf4>)
 80005a2:	f011 fe17 	bl	80121d4 <InitNormalTask>
  InitSlowTask(&taskEventHandle);
 80005a6:	4811      	ldr	r0, [pc, #68]	; (80005ec <main+0xf4>)
 80005a8:	f011 fe50 	bl	801224c <InitSlowTask>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f00e fa38 	bl	800ea20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0xb8>
 80005b2:	bf00      	nop
 80005b4:	08012fe8 	.word	0x08012fe8
 80005b8:	080011cd 	.word	0x080011cd
 80005bc:	20001d04 	.word	0x20001d04
 80005c0:	0801300c 	.word	0x0801300c
 80005c4:	0801217d 	.word	0x0801217d
 80005c8:	20002530 	.word	0x20002530
 80005cc:	08013030 	.word	0x08013030
 80005d0:	080121f5 	.word	0x080121f5
 80005d4:	200022d4 	.word	0x200022d4
 80005d8:	08013054 	.word	0x08013054
 80005dc:	0801226d 	.word	0x0801226d
 80005e0:	200023f0 	.word	0x200023f0
 80005e4:	200022d8 	.word	0x200022d8
 80005e8:	08013078 	.word	0x08013078
 80005ec:	20001f54 	.word	0x20001f54

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b0be      	sub	sp, #248	; 0xf8
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80005fa:	2244      	movs	r2, #68	; 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f012 fc90 	bl	8012f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	229c      	movs	r2, #156	; 0x9c
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f012 fc82 	bl	8012f24 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000620:	2000      	movs	r0, #0
 8000622:	f004 fa8b 	bl	8004b3c <HAL_PWREx_ControlVoltageScaling>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800062c:	f000 fe14 	bl	8001258 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000630:	f004 fa54 	bl	8004adc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000634:	4b40      	ldr	r3, [pc, #256]	; (8000738 <SystemClock_Config+0x148>)
 8000636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800063a:	4a3f      	ldr	r2, [pc, #252]	; (8000738 <SystemClock_Config+0x148>)
 800063c:	f023 0318 	bic.w	r3, r3, #24
 8000640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8000644:	2325      	movs	r3, #37	; 0x25
 8000646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000664:	2303      	movs	r3, #3
 8000666:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 4;
 800066a:	2304      	movs	r3, #4
 800066c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000670:	233c      	movs	r3, #60	; 0x3c
 8000672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000676:	2305      	movs	r3, #5
 8000678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fb19 	bl	8004cc4 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000698:	f000 fdde 	bl	8001258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006be:	2105      	movs	r1, #5
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 ff25 	bl	8005510 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80006cc:	f000 fdc4 	bl	8001258 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <SystemClock_Config+0x14c>)
 80006d2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006d8:	2300      	movs	r3, #0
 80006da:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80006dc:	2300      	movs	r3, #0
 80006de:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006f6:	2300      	movs	r3, #0
 80006f8:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80006fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000700:	2303      	movs	r3, #3
 8000702:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000704:	2305      	movs	r3, #5
 8000706:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8000708:	2360      	movs	r3, #96	; 0x60
 800070a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000710:	2304      	movs	r3, #4
 8000712:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000714:	2304      	movs	r3, #4
 8000716:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800071c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f005 f9d5 	bl	8005ad0 <HAL_RCCEx_PeriphCLKConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x140>
  {
    Error_Handler();
 800072c:	f000 fd94 	bl	8001258 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	37f8      	adds	r7, #248	; 0xf8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	000b6142 	.word	0x000b6142

08000740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <MX_ADC1_Init+0xbc>)
 8000758:	4a29      	ldr	r2, [pc, #164]	; (8000800 <MX_ADC1_Init+0xc0>)
 800075a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_ADC1_Init+0xbc>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_ADC1_Init+0xbc>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_ADC1_Init+0xbc>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <MX_ADC1_Init+0xbc>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC1_Init+0xbc>)
 8000776:	2204      	movs	r2, #4
 8000778:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_ADC1_Init+0xbc>)
 800077c:	2200      	movs	r2, #0
 800077e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_ADC1_Init+0xbc>)
 8000782:	2201      	movs	r2, #1
 8000784:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_ADC1_Init+0xbc>)
 8000788:	2201      	movs	r2, #1
 800078a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_ADC1_Init+0xbc>)
 800078e:	2200      	movs	r2, #0
 8000790:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ADC1_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_ADC1_Init+0xbc>)
 800079c:	2200      	movs	r2, #0
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a0:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_ADC1_Init+0xbc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ADC1_Init+0xbc>)
 80007aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_ADC1_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b8:	4810      	ldr	r0, [pc, #64]	; (80007fc <MX_ADC1_Init+0xbc>)
 80007ba:	f001 fbdd 	bl	8001f78 <HAL_ADC_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80007c4:	f000 fd48 	bl	8001258 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_ADC1_Init+0xc4>)
 80007ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007cc:	2306      	movs	r3, #6
 80007ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80007d0:	2302      	movs	r3, #2
 80007d2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d4:	237f      	movs	r3, #127	; 0x7f
 80007d6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d8:	2304      	movs	r3, #4
 80007da:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_ADC1_Init+0xbc>)
 80007e6:	f001 fd13 	bl	8002210 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80007f0:	f000 fd32 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20002388 	.word	0x20002388
 8000800:	50040000 	.word	0x50040000
 8000804:	21800100 	.word	0x21800100

08000808 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MX_DFSDM1_Init+0xb8>)
 800080e:	4a2d      	ldr	r2, [pc, #180]	; (80008c4 <MX_DFSDM1_Init+0xbc>)
 8000810:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000812:	4b2b      	ldr	r3, [pc, #172]	; (80008c0 <MX_DFSDM1_Init+0xb8>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <MX_DFSDM1_Init+0xb8>)
 800081a:	2201      	movs	r2, #1
 800081c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <MX_DFSDM1_Init+0xb8>)
 8000820:	2201      	movs	r2, #1
 8000822:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_DFSDM1_Init+0xb8>)
 8000826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MX_DFSDM1_Init+0xb8>)
 800082e:	22c0      	movs	r2, #192	; 0xc0
 8000830:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <MX_DFSDM1_Init+0xb8>)
 8000834:	2201      	movs	r2, #1
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000838:	4821      	ldr	r0, [pc, #132]	; (80008c0 <MX_DFSDM1_Init+0xb8>)
 800083a:	f002 fa87 	bl	8002d4c <HAL_DFSDM_FilterInit>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000844:	f000 fd08 	bl	8001258 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 800084a:	4a20      	ldr	r2, [pc, #128]	; (80008cc <MX_DFSDM1_Init+0xc4>)
 800084c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 800085c:	2202      	movs	r2, #2
 800085e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 8000862:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000866:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 8000888:	2201      	movs	r2, #1
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 800088e:	2200      	movs	r2, #0
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 8000894:	2207      	movs	r2, #7
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <MX_DFSDM1_Init+0xc0>)
 800089a:	f002 f997 	bl	8002bcc <HAL_DFSDM_ChannelInit>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80008a4:	f000 fcd8 	bl	8001258 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80008a8:	2201      	movs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_DFSDM1_Init+0xb8>)
 80008ae:	f002 fb27 	bl	8002f00 <HAL_DFSDM_FilterConfigRegChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 80008b8:	f000 fcce 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20001fa4 	.word	0x20001fa4
 80008c4:	40016100 	.word	0x40016100
 80008c8:	20002580 	.word	0x20002580
 80008cc:	40016000 	.word	0x40016000

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C1_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C1_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C1_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C1_Init+0x74>)
 800090c:	f002 ff20 	bl	8003750 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000916:	f000 fc9f 	bl	8001258 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C1_Init+0x74>)
 800091e:	f002 ffa6 	bl	800386e <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 fc96 	bl	8001258 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C1_Init+0x74>)
 8000930:	f002 ffe8 	bl	8003904 <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 fc8d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20001f58 	.word	0x20001f58
 8000948:	40005400 	.word	0x40005400
 800094c:	00b03fdb 	.word	0x00b03fdb

08000950 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_I2C3_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_I2C3_Init+0x74>)
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_I2C3_Init+0x7c>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_I2C3_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_I2C3_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <MX_I2C3_Init+0x74>)
 800098c:	f002 fee0 	bl	8003750 <HAL_I2C_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000996:	f000 fc5f 	bl	8001258 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_I2C3_Init+0x74>)
 800099e:	f002 ff66 	bl	800386e <HAL_I2CEx_ConfigAnalogFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009a8:	f000 fc56 	bl	8001258 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_I2C3_Init+0x74>)
 80009b0:	f002 ffa8 	bl	8003904 <HAL_I2CEx_ConfigDigitalFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 fc4d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20001d08 	.word	0x20001d08
 80009c8:	40005c00 	.word	0x40005c00
 80009cc:	00b03fdb 	.word	0x00b03fdb

080009d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <MX_RTC_Init+0xb0>)
 80009ea:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <MX_RTC_Init+0xb4>)
 80009ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_RTC_Init+0xb0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009f4:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <MX_RTC_Init+0xb0>)
 80009f6:	227f      	movs	r2, #127	; 0x7f
 80009f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009fa:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <MX_RTC_Init+0xb0>)
 80009fc:	22ff      	movs	r2, #255	; 0xff
 80009fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a00:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <MX_RTC_Init+0xb0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a06:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <MX_RTC_Init+0xb0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MX_RTC_Init+0xb0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_RTC_Init+0xb0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a18:	4819      	ldr	r0, [pc, #100]	; (8000a80 <MX_RTC_Init+0xb0>)
 8000a1a:	f006 fdff 	bl	800761c <HAL_RTC_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000a24:	f000 fc18 	bl	8001258 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	480f      	ldr	r0, [pc, #60]	; (8000a80 <MX_RTC_Init+0xb0>)
 8000a44:	f006 fe65 	bl	8007712 <HAL_RTC_SetTime>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000a4e:	f000 fc03 	bl	8001258 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000a52:	2302      	movs	r3, #2
 8000a54:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8000a56:	2304      	movs	r3, #4
 8000a58:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 8000a5e:	2314      	movs	r3, #20
 8000a60:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_RTC_Init+0xb0>)
 8000a6a:	f006 feef 	bl	800784c <HAL_RTC_SetDate>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000a74:	f000 fbf0 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000250c 	.word	0x2000250c
 8000a84:	40002800 	.word	0x40002800

08000a88 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_SDMMC1_SD_Init+0x3c>)
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <MX_SDMMC1_SD_Init+0x40>)
 8000a90:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_SDMMC1_SD_Init+0x3c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_SDMMC1_SD_Init+0x3c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_SDMMC1_SD_Init+0x3c>)
 8000aa0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <MX_SDMMC1_SD_Init+0x3c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <MX_SDMMC1_SD_Init+0x3c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <MX_SDMMC1_SD_Init+0x3c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20001ff8 	.word	0x20001ff8
 8000ac8:	50062400 	.word	0x50062400

08000acc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <MX_SPI1_Init+0x78>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000aea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b02:	2218      	movs	r2, #24
 8000b04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b1a:	2207      	movs	r2, #7
 8000b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_SPI1_Init+0x74>)
 8000b2c:	f008 fcd1 	bl	80094d2 <HAL_SPI_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b36:	f000 fb8f 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200025b8 	.word	0x200025b8
 8000b44:	40013000 	.word	0x40013000

08000b48 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <MX_SPI3_Init+0x78>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b7e:	2218      	movs	r2, #24
 8000b80:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b96:	2207      	movs	r2, #7
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_SPI3_Init+0x74>)
 8000ba8:	f008 fc93 	bl	80094d2 <HAL_SPI_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000bb2:	f000 fb51 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20002324 	.word	0x20002324
 8000bc0:	40003c00 	.word	0x40003c00

08000bc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000bec:	2277      	movs	r2, #119	; 0x77
 8000bee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000c0c:	f008 fd04 	bl	8009618 <HAL_TIM_Base_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c16:	f000 fb1f 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000c28:	f008 fedd 	bl	80099e6 <HAL_TIM_ConfigClockSource>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c32:	f000 fb11 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <MX_TIM2_Init+0x98>)
 8000c44:	f009 f8f2 	bl	8009e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c4e:	f000 fb03 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000261c 	.word	0x2000261c

08000c60 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <MX_TIM5_Init+0x94>)
 8000c80:	4a1d      	ldr	r2, [pc, #116]	; (8000cf8 <MX_TIM5_Init+0x98>)
 8000c82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 120;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_TIM5_Init+0x94>)
 8000c86:	2278      	movs	r2, #120	; 0x78
 8000c88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_TIM5_Init+0x94>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_TIM5_Init+0x94>)
 8000c92:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_TIM5_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_TIM5_Init+0x94>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ca4:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <MX_TIM5_Init+0x94>)
 8000ca6:	f008 fcb7 	bl	8009618 <HAL_TIM_Base_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000cb0:	f000 fad2 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cba:	f107 0310 	add.w	r3, r7, #16
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <MX_TIM5_Init+0x94>)
 8000cc2:	f008 fe90 	bl	80099e6 <HAL_TIM_ConfigClockSource>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ccc:	f000 fac4 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_TIM5_Init+0x94>)
 8000cde:	f009 f8a5 	bl	8009e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ce8:	f000 fab6 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200022d8 	.word	0x200022d8
 8000cf8:	40000c00 	.word	0x40000c00

08000cfc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <MX_TIM6_Init+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d14:	2277      	movs	r2, #119	; 0x77
 8000d16:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d24:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d2e:	f008 fc73 	bl	8009618 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000d38:	f000 fa8e 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_TIM6_Init+0x64>)
 8000d4a:	f009 f86f 	bl	8009e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000d54:	f000 fa80 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20002534 	.word	0x20002534
 8000d64:	40001000 	.word	0x40001000

08000d68 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_TIM7_Init+0x64>)
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <MX_TIM7_Init+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_TIM7_Init+0x64>)
 8000d80:	2277      	movs	r2, #119	; 0x77
 8000d82:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_TIM7_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_TIM7_Init+0x64>)
 8000d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d90:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_TIM7_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <MX_TIM7_Init+0x64>)
 8000d9a:	f008 fc3d 	bl	8009618 <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000da4:	f000 fa58 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_TIM7_Init+0x64>)
 8000db6:	f009 f839 	bl	8009e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000dc0:	f000 fa4a 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200026f8 	.word	0x200026f8
 8000dd0:	40001400 	.word	0x40001400

08000dd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000dda:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <MX_USART2_UART_Init+0x94>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1c:	4811      	ldr	r0, [pc, #68]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e1e:	f009 f8ab 	bl	8009f78 <HAL_UART_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e28:	f000 fa16 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	480d      	ldr	r0, [pc, #52]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e30:	f009 fd62 	bl	800a8f8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e3a:	f000 fa0d 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4808      	ldr	r0, [pc, #32]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e42:	f009 fd97 	bl	800a974 <HAL_UARTEx_SetRxFifoThreshold>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e4c:	f000 fa04 	bl	8001258 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <MX_USART2_UART_Init+0x90>)
 8000e52:	f009 fd18 	bl	800a886 <HAL_UARTEx_DisableFifoMode>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e5c:	f000 f9fc 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20002668 	.word	0x20002668
 8000e68:	40004400 	.word	0x40004400

08000e6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_DMA_Init+0x50>)
 8000e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e76:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <MX_DMA_Init+0x50>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_DMA_Init+0x50>)
 8000e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_DMA_Init+0x50>)
 8000e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <MX_DMA_Init+0x50>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6493      	str	r3, [r2, #72]	; 0x48
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_DMA_Init+0x50>)
 8000e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2105      	movs	r1, #5
 8000ea6:	200e      	movs	r0, #14
 8000ea8:	f001 fe66 	bl	8002b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000eac:	200e      	movs	r0, #14
 8000eae:	f001 fe7f 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	; 0x38
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4bb4      	ldr	r3, [pc, #720]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4ab3      	ldr	r2, [pc, #716]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4bb1      	ldr	r3, [pc, #708]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	4bae      	ldr	r3, [pc, #696]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4aad      	ldr	r2, [pc, #692]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4bab      	ldr	r3, [pc, #684]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4ba8      	ldr	r3, [pc, #672]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4aa7      	ldr	r2, [pc, #668]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4ba5      	ldr	r3, [pc, #660]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	61bb      	str	r3, [r7, #24]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1e:	4ba2      	ldr	r3, [pc, #648]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4aa1      	ldr	r2, [pc, #644]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b9f      	ldr	r3, [pc, #636]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b9c      	ldr	r3, [pc, #624]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a9b      	ldr	r2, [pc, #620]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b99      	ldr	r3, [pc, #612]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4e:	4b96      	ldr	r3, [pc, #600]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a95      	ldr	r2, [pc, #596]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b93      	ldr	r3, [pc, #588]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f66:	4b90      	ldr	r3, [pc, #576]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a8f      	ldr	r2, [pc, #572]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b8d      	ldr	r3, [pc, #564]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000f7e:	f003 fe91 	bl	8004ca4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f82:	4b89      	ldr	r3, [pc, #548]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a88      	ldr	r2, [pc, #544]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b86      	ldr	r3, [pc, #536]	; (80011a8 <MX_GPIO_Init+0x2e8>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f002 fba2 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f641 4130 	movw	r1, #7216	; 0x1c30
 8000fae:	487f      	ldr	r0, [pc, #508]	; (80011ac <MX_GPIO_Init+0x2ec>)
 8000fb0:	f002 fb9c 	bl	80036ec <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	487d      	ldr	r0, [pc, #500]	; (80011b0 <MX_GPIO_Init+0x2f0>)
 8000fba:	f002 fb97 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_BLE_GPIO_Port, NRST_BLE_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc8:	f002 fb90 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2105      	movs	r1, #5
 8000fd0:	4878      	ldr	r0, [pc, #480]	; (80011b4 <MX_GPIO_Init+0x2f4>)
 8000fd2:	f002 fb8b 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fdc:	4876      	ldr	r0, [pc, #472]	; (80011b8 <MX_GPIO_Init+0x2f8>)
 8000fde:	f002 fb85 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	4873      	ldr	r0, [pc, #460]	; (80011b4 <MX_GPIO_Init+0x2f4>)
 8000fe8:	f002 fb80 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4871      	ldr	r0, [pc, #452]	; (80011b8 <MX_GPIO_Init+0x2f8>)
 8000ff2:	f002 fb7b 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	486f      	ldr	r0, [pc, #444]	; (80011bc <MX_GPIO_Init+0x2fc>)
 8000ffe:	f002 fb75 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 8001002:	2348      	movs	r3, #72	; 0x48
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001006:	4b6e      	ldr	r3, [pc, #440]	; (80011c0 <MX_GPIO_Init+0x300>)
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	4865      	ldr	r0, [pc, #404]	; (80011ac <MX_GPIO_Init+0x2ec>)
 8001016:	f002 f9bf 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 800101a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001020:	2311      	movs	r3, #17
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f002 f9af 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 800103a:	2330      	movs	r3, #48	; 0x30
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4856      	ldr	r0, [pc, #344]	; (80011ac <MX_GPIO_Init+0x2ec>)
 8001052:	f002 f9a1 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_INT_Pin INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin|INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8001056:	f24e 0310 	movw	r3, #57360	; 0xe010
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105c:	4b58      	ldr	r3, [pc, #352]	; (80011c0 <MX_GPIO_Init+0x300>)
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	4851      	ldr	r0, [pc, #324]	; (80011b0 <MX_GPIO_Init+0x2f0>)
 800106c:	f002 f994 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001070:	2301      	movs	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	484a      	ldr	r0, [pc, #296]	; (80011b0 <MX_GPIO_Init+0x2f0>)
 8001088:	f002 f986 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRST_BLE_Pin */
  GPIO_InitStruct.Pin = NRST_BLE_Pin;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NRST_BLE_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f002 f976 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 80010ac:	2385      	movs	r3, #133	; 0x85
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	483c      	ldr	r0, [pc, #240]	; (80011b4 <MX_GPIO_Init+0x2f4>)
 80010c4:	f002 f968 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 80010c8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4835      	ldr	r0, [pc, #212]	; (80011b8 <MX_GPIO_Init+0x2f8>)
 80010e2:	f002 f959 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 80010e6:	2308      	movs	r3, #8
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	4619      	mov	r1, r3
 80010f8:	482f      	ldr	r0, [pc, #188]	; (80011b8 <MX_GPIO_Init+0x2f8>)
 80010fa:	f002 f94d 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 80010fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001104:	2311      	movs	r3, #17
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001114:	4619      	mov	r1, r3
 8001116:	4825      	ldr	r0, [pc, #148]	; (80011ac <MX_GPIO_Init+0x2ec>)
 8001118:	f002 f93e 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 800111c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	4821      	ldr	r0, [pc, #132]	; (80011bc <MX_GPIO_Init+0x2fc>)
 8001136:	f002 f92f 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 800113a:	2320      	movs	r3, #32
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <MX_GPIO_Init+0x300>)
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	481d      	ldr	r0, [pc, #116]	; (80011c4 <MX_GPIO_Init+0x304>)
 800114e:	f002 f923 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 8001152:	2304      	movs	r3, #4
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_GPIO_Init+0x300>)
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f002 f916 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	480e      	ldr	r0, [pc, #56]	; (80011bc <MX_GPIO_Init+0x2fc>)
 8001182:	f002 f909 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 8001186:	2302      	movs	r3, #2
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_GPIO_Init+0x308>)
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <MX_GPIO_Init+0x2f8>)
 800119a:	f002 f8fd 	bl	8003398 <HAL_GPIO_Init>

}
 800119e:	bf00      	nop
 80011a0:	3738      	adds	r7, #56	; 0x38
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	48001000 	.word	0x48001000
 80011b0:	48000c00 	.word	0x48000c00
 80011b4:	48001400 	.word	0x48001400
 80011b8:	48001800 	.word	0x48001800
 80011bc:	48000400 	.word	0x48000400
 80011c0:	10110000 	.word	0x10110000
 80011c4:	48000800 	.word	0x48000800
 80011c8:	10210000 	.word	0x10210000

080011cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80011d4:	f011 f86c 	bl	80122b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011d8:	2001      	movs	r0, #1
 80011da:	f00d fcee 	bl	800ebba <osDelay>
 80011de:	e7fb      	b.n	80011d8 <StartDefaultTask+0xc>

080011e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d102      	bne.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80011f2:	f000 fcdd 	bl	8001bb0 <HAL_IncTick>
  else if (htim->Instance == TIM7) {
	  ;
  }

  /* USER CODE END Callback 1 */
}
 80011f6:	e01e      	b.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim->Instance == TIM1) {
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a11      	ldr	r2, [pc, #68]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d019      	beq.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim->Instance == TIM2) {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800120a:	d014      	beq.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim->Instance == TIM4) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00f      	beq.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim->Instance == TIM5) {
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d106      	bne.n	800122e <HAL_TIM_PeriodElapsedCallback+0x4e>
	  osEventFlagsSet(taskEventHandle, FAST_TASK_EVENT);
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	4618      	mov	r0, r3
 8001228:	f00d fd22 	bl	800ec70 <osEventFlagsSet>
}
 800122c:	e003      	b.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim->Instance == TIM6) {
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001234:	4293      	cmp	r3, r2
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40000400 	.word	0x40000400
 8001244:	40012c00 	.word	0x40012c00
 8001248:	40000800 	.word	0x40000800
 800124c:	40000c00 	.word	0x40000c00
 8001250:	20001f54 	.word	0x20001f54
 8001254:	40001000 	.word	0x40001000

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_MspInit+0x4c>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_MspInit+0x4c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6613      	str	r3, [r2, #96]	; 0x60
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_MspInit+0x4c>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_MspInit+0x4c>)
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <HAL_MspInit+0x4c>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6593      	str	r3, [r2, #88]	; 0x58
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_MspInit+0x4c>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	210f      	movs	r1, #15
 800129e:	f06f 0001 	mvn.w	r0, #1
 80012a2:	f001 fc69 	bl	8002b78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a21      	ldr	r2, [pc, #132]	; (8001358 <HAL_ADC_MspInit+0xa4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d13c      	bne.n	8001350 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_ADC_MspInit+0xa8>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a20      	ldr	r2, [pc, #128]	; (800135c <HAL_ADC_MspInit+0xa8>)
 80012dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HAL_ADC_MspInit+0xa8>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <HAL_ADC_MspInit+0xa8>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a1a      	ldr	r2, [pc, #104]	; (800135c <HAL_ADC_MspInit+0xa8>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_ADC_MspInit+0xa8>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_ADC_MspInit+0xa8>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a14      	ldr	r2, [pc, #80]	; (800135c <HAL_ADC_MspInit+0xa8>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_ADC_MspInit+0xa8>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 800131e:	2310      	movs	r3, #16
 8001320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001322:	230b      	movs	r3, #11
 8001324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <HAL_ADC_MspInit+0xac>)
 8001332:	f002 f831 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8001336:	2308      	movs	r3, #8
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800133a:	230b      	movs	r3, #11
 800133c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f002 f824 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	50040000 	.word	0x50040000
 800135c:	40021000 	.word	0x40021000
 8001360:	48000800 	.word	0x48000800

08001364 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 800136c:	4b2c      	ldr	r3, [pc, #176]	; (8001420 <HAL_DFSDM_FilterMspInit+0xbc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d119      	bne.n	80013a8 <HAL_DFSDM_FilterMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <HAL_DFSDM_FilterMspInit+0xc0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <HAL_DFSDM_FilterMspInit+0xc0>)
 800137c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_DFSDM_FilterMspInit+0xc0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d10b      	bne.n	800139e <HAL_DFSDM_FilterMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001386:	4b28      	ldr	r3, [pc, #160]	; (8001428 <HAL_DFSDM_FilterMspInit+0xc4>)
 8001388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138a:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_DFSDM_FilterMspInit+0xc4>)
 800138c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001390:	6613      	str	r3, [r2, #96]	; 0x60
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HAL_DFSDM_FilterMspInit+0xc4>)
 8001394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_DFSDM_FilterMspInit+0xbc>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	3301      	adds	r3, #1
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_DFSDM_FilterMspInit+0xbc>)
 80013a6:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1f      	ldr	r2, [pc, #124]	; (800142c <HAL_DFSDM_FilterMspInit+0xc8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d131      	bne.n	8001416 <HAL_DFSDM_FilterMspInit+0xb2>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 80013b4:	4a1f      	ldr	r2, [pc, #124]	; (8001434 <HAL_DFSDM_FilterMspInit+0xd0>)
 80013b6:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 80013ba:	2256      	movs	r2, #86	; 0x56
 80013bc:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 80013d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 80013da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013de:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 80013e2:	2220      	movs	r2, #32
 80013e4:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 80013e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80013ee:	4810      	ldr	r0, [pc, #64]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 80013f0:	f001 fe18 	bl	8003024 <HAL_DMA_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_DFSDM_FilterMspInit+0x9a>
    {
      Error_Handler();
 80013fa:	f7ff ff2d 	bl	8001258 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001402:	62da      	str	r2, [r3, #44]	; 0x2c
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_DFSDM_FilterMspInit+0xcc>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001b4 	.word	0x200001b4
 8001424:	200001b0 	.word	0x200001b0
 8001428:	40021000 	.word	0x40021000
 800142c:	40016100 	.word	0x40016100
 8001430:	200023f4 	.word	0x200023f4
 8001434:	40020044 	.word	0x40020044

08001438 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <HAL_DFSDM_ChannelMspInit+0x50>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d119      	bne.n	800147c <HAL_DFSDM_ChannelMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_DFSDM_ChannelMspInit+0x54>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_DFSDM_ChannelMspInit+0x54>)
 8001450:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_DFSDM_ChannelMspInit+0x54>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d10b      	bne.n	8001472 <HAL_DFSDM_ChannelMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <HAL_DFSDM_ChannelMspInit+0x58>)
 800145c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <HAL_DFSDM_ChannelMspInit+0x58>)
 8001460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001464:	6613      	str	r3, [r2, #96]	; 0x60
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_DFSDM_ChannelMspInit+0x58>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_DFSDM_ChannelMspInit+0x50>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a03      	ldr	r2, [pc, #12]	; (8001488 <HAL_DFSDM_ChannelMspInit+0x50>)
 800147a:	6013      	str	r3, [r2, #0]
  }

}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	200001b4 	.word	0x200001b4
 800148c:	200001b0 	.word	0x200001b0
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	; 0x30
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <HAL_I2C_MspInit+0xdc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d128      	bne.n	8001508 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 80014ce:	23c0      	movs	r3, #192	; 0xc0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014de:	2304      	movs	r3, #4
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4823      	ldr	r0, [pc, #140]	; (8001578 <HAL_I2C_MspInit+0xe4>)
 80014ea:	f001 ff55 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	4a20      	ldr	r2, [pc, #128]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 80014f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f8:	6593      	str	r3, [r2, #88]	; 0x58
 80014fa:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001506:	e02f      	b.n	8001568 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1b      	ldr	r2, [pc, #108]	; (800157c <HAL_I2C_MspInit+0xe8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12a      	bne.n	8001568 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 8001518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800152a:	f003 fbbb 	bl	8004ca4 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 800152e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001534:	2312      	movs	r3, #18
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001538:	2301      	movs	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001540:	2304      	movs	r3, #4
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	480d      	ldr	r0, [pc, #52]	; (8001580 <HAL_I2C_MspInit+0xec>)
 800154c:	f001 ff24 	bl	8003398 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 8001556:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800155a:	6593      	str	r3, [r2, #88]	; 0x58
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_I2C_MspInit+0xe0>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	bf00      	nop
 800156a:	3730      	adds	r7, #48	; 0x30
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40005400 	.word	0x40005400
 8001574:	40021000 	.word	0x40021000
 8001578:	48000400 	.word	0x48000400
 800157c:	40005c00 	.word	0x40005c00
 8001580:	48001800 	.word	0x48001800

08001584 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_RTC_MspInit+0x30>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d107      	bne.n	80015a6 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_RTC_MspInit+0x34>)
 8001598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159c:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <HAL_RTC_MspInit+0x34>)
 800159e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40002800 	.word	0x40002800
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a40      	ldr	r2, [pc, #256]	; (80016dc <HAL_SD_MspInit+0x120>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d179      	bne.n	80016d2 <HAL_SD_MspInit+0x116>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015de:	4b40      	ldr	r3, [pc, #256]	; (80016e0 <HAL_SD_MspInit+0x124>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a3f      	ldr	r2, [pc, #252]	; (80016e0 <HAL_SD_MspInit+0x124>)
 80015e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <HAL_SD_MspInit+0x124>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <HAL_SD_MspInit+0x124>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a39      	ldr	r2, [pc, #228]	; (80016e0 <HAL_SD_MspInit+0x124>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <HAL_SD_MspInit+0x124>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_SD_MspInit+0x124>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a33      	ldr	r2, [pc, #204]	; (80016e0 <HAL_SD_MspInit+0x124>)
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <HAL_SD_MspInit+0x124>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001626:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <HAL_SD_MspInit+0x124>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a2d      	ldr	r2, [pc, #180]	; (80016e0 <HAL_SD_MspInit+0x124>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_SD_MspInit+0x124>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 800163e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001650:	2308      	movs	r3, #8
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4822      	ldr	r0, [pc, #136]	; (80016e4 <HAL_SD_MspInit+0x128>)
 800165c:	f001 fe9c 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 8001660:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001664:	61fb      	str	r3, [r7, #28]
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001672:	230c      	movs	r3, #12
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	481a      	ldr	r0, [pc, #104]	; (80016e8 <HAL_SD_MspInit+0x12c>)
 800167e:	f001 fe8b 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 8001682:	2304      	movs	r3, #4
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001692:	230c      	movs	r3, #12
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <HAL_SD_MspInit+0x130>)
 800169e:	f001 fe7b 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 80016a2:	23c0      	movs	r3, #192	; 0xc0
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80016b2:	2308      	movs	r3, #8
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	480a      	ldr	r0, [pc, #40]	; (80016e8 <HAL_SD_MspInit+0x12c>)
 80016be:	f001 fe6b 	bl	8003398 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2105      	movs	r1, #5
 80016c6:	2031      	movs	r0, #49	; 0x31
 80016c8:	f001 fa56 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80016cc:	2031      	movs	r0, #49	; 0x31
 80016ce:	f001 fa6f 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3730      	adds	r7, #48	; 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	50062400 	.word	0x50062400
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48000c00 	.word	0x48000c00

080016f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	; 0x30
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a3f      	ldr	r2, [pc, #252]	; (800180c <HAL_SPI_MspInit+0x11c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d13a      	bne.n	8001788 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001712:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <HAL_SPI_MspInit+0x120>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	4a3e      	ldr	r2, [pc, #248]	; (8001810 <HAL_SPI_MspInit+0x120>)
 8001718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800171c:	6613      	str	r3, [r2, #96]	; 0x60
 800171e:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <HAL_SPI_MspInit+0x120>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	4b39      	ldr	r3, [pc, #228]	; (8001810 <HAL_SPI_MspInit+0x120>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a38      	ldr	r2, [pc, #224]	; (8001810 <HAL_SPI_MspInit+0x120>)
 8001730:	f043 0310 	orr.w	r3, r3, #16
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b36      	ldr	r3, [pc, #216]	; (8001810 <HAL_SPI_MspInit+0x120>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 8001742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001754:	2305      	movs	r3, #5
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	482d      	ldr	r0, [pc, #180]	; (8001814 <HAL_SPI_MspInit+0x124>)
 8001760:	f001 fe1a 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 8001764:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001776:	2305      	movs	r3, #5
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4824      	ldr	r0, [pc, #144]	; (8001814 <HAL_SPI_MspInit+0x124>)
 8001782:	f001 fe09 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001786:	e03c      	b.n	8001802 <HAL_SPI_MspInit+0x112>
  else if(hspi->Instance==SPI3)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a22      	ldr	r2, [pc, #136]	; (8001818 <HAL_SPI_MspInit+0x128>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d137      	bne.n	8001802 <HAL_SPI_MspInit+0x112>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_SPI_MspInit+0x120>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_SPI_MspInit+0x120>)
 8001798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800179c:	6593      	str	r3, [r2, #88]	; 0x58
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_SPI_MspInit+0x120>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_SPI_MspInit+0x120>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_SPI_MspInit+0x120>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b6:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_SPI_MspInit+0x120>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 80017c2:	2330      	movs	r3, #48	; 0x30
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d2:	2306      	movs	r3, #6
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	480f      	ldr	r0, [pc, #60]	; (800181c <HAL_SPI_MspInit+0x12c>)
 80017de:	f001 fddb 	bl	8003398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 80017e2:	2308      	movs	r3, #8
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f2:	2306      	movs	r3, #6
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	4807      	ldr	r0, [pc, #28]	; (800181c <HAL_SPI_MspInit+0x12c>)
 80017fe:	f001 fdcb 	bl	8003398 <HAL_GPIO_Init>
}
 8001802:	bf00      	nop
 8001804:	3730      	adds	r7, #48	; 0x30
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40013000 	.word	0x40013000
 8001810:	40021000 	.word	0x40021000
 8001814:	48001000 	.word	0x48001000
 8001818:	40003c00 	.word	0x40003c00
 800181c:	48000400 	.word	0x48000400

08001820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001830:	d10c      	bne.n	800184c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6593      	str	r3, [r2, #88]	; 0x58
 800183e:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800184a:	e044      	b.n	80018d6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <HAL_TIM_Base_MspInit+0xc4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d114      	bne.n	8001880 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6593      	str	r3, [r2, #88]	; 0x58
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2105      	movs	r1, #5
 8001872:	2032      	movs	r0, #50	; 0x32
 8001874:	f001 f980 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001878:	2032      	movs	r0, #50	; 0x32
 800187a:	f001 f999 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
}
 800187e:	e02a      	b.n	80018d6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <HAL_TIM_Base_MspInit+0xc8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d114      	bne.n	80018b4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 8001890:	f043 0310 	orr.w	r3, r3, #16
 8001894:	6593      	str	r3, [r2, #88]	; 0x58
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2105      	movs	r1, #5
 80018a6:	2036      	movs	r0, #54	; 0x36
 80018a8:	f001 f966 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018ac:	2036      	movs	r0, #54	; 0x36
 80018ae:	f001 f97f 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
}
 80018b2:	e010      	b.n	80018d6 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <HAL_TIM_Base_MspInit+0xcc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d10b      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_TIM_Base_MspInit+0xc0>)
 80018cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40000c00 	.word	0x40000c00
 80018e8:	40001000 	.word	0x40001000
 80018ec:	40001400 	.word	0x40001400

080018f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a17      	ldr	r2, [pc, #92]	; (800196c <HAL_UART_MspInit+0x7c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d127      	bne.n	8001962 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_UART_MspInit+0x80>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	4a16      	ldr	r2, [pc, #88]	; (8001970 <HAL_UART_MspInit+0x80>)
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	6593      	str	r3, [r2, #88]	; 0x58
 800191e:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_UART_MspInit+0x80>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_UART_MspInit+0x80>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a10      	ldr	r2, [pc, #64]	; (8001970 <HAL_UART_MspInit+0x80>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_UART_MspInit+0x80>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8001942:	2360      	movs	r3, #96	; 0x60
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001952:	2307      	movs	r3, #7
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <HAL_UART_MspInit+0x84>)
 800195e:	f001 fd1b 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	; 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40004400 	.word	0x40004400
 8001970:	40021000 	.word	0x40021000
 8001974:	48000c00 	.word	0x48000c00

08001978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	201d      	movs	r0, #29
 800198e:	f001 f8f3 	bl	8002b78 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001992:	201d      	movs	r0, #29
 8001994:	f001 f90c 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001998:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <HAL_InitTick+0x9c>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_InitTick+0x9c>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	6593      	str	r3, [r2, #88]	; 0x58
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_InitTick+0x9c>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b0:	f107 0210 	add.w	r2, r7, #16
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f003 ff96 	bl	80058ec <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019c0:	f003 ff68 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 80019c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c8:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <HAL_InitTick+0xa0>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	3b01      	subs	r3, #1
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_InitTick+0xa4>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_InitTick+0xa8>)
 80019d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_InitTick+0xa4>)
 80019dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019e0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_InitTick+0xa4>)
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_InitTick+0xa4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_InitTick+0xa4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80019f4:	4809      	ldr	r0, [pc, #36]	; (8001a1c <HAL_InitTick+0xa4>)
 80019f6:	f007 fe0f 	bl	8009618 <HAL_TIM_Base_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d104      	bne.n	8001a0a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001a00:	4806      	ldr	r0, [pc, #24]	; (8001a1c <HAL_InitTick+0xa4>)
 8001a02:	f007 fe61 	bl	80096c8 <HAL_TIM_Base_Start_IT>
 8001a06:	4603      	mov	r3, r0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3730      	adds	r7, #48	; 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	20002944 	.word	0x20002944
 8001a20:	40000400 	.word	0x40000400

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <NMI_Handler+0x4>

08001a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <MemManage_Handler+0x4>

08001a36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3a:	e7fe      	b.n	8001a3a <BusFault_Handler+0x4>

08001a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <UsageFault_Handler+0x4>

08001a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <DMA1_Channel4_IRQHandler+0x10>)
 8001a56:	f001 fb8d 	bl	8003174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200023f4 	.word	0x200023f4

08001a64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <TIM3_IRQHandler+0x10>)
 8001a6a:	f007 fe9d 	bl	80097a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20002944 	.word	0x20002944

08001a78 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <SDMMC1_IRQHandler+0x10>)
 8001a7e:	f006 faad 	bl	8007fdc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20001ff8 	.word	0x20001ff8

08001a8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <TIM5_IRQHandler+0x10>)
 8001a92:	f007 fe89 	bl	80097a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200022d8 	.word	0x200022d8

08001aa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <TIM6_DAC_IRQHandler+0x10>)
 8001aa6:	f007 fe7f 	bl	80097a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20002534 	.word	0x20002534

08001ab4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <OTG_FS_IRQHandler+0x10>)
 8001aba:	f002 f8c2 	bl	8003c42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20004314 	.word	0x20004314

08001ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <SystemInit+0x5c>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <SystemInit+0x5c>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <SystemInit+0x60>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <SystemInit+0x60>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <SystemInit+0x60>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <SystemInit+0x60>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <SystemInit+0x60>)
 8001af4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001af8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001afc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <SystemInit+0x60>)
 8001b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <SystemInit+0x60>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <SystemInit+0x60>)
 8001b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SystemInit+0x60>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00
 8001b28:	40021000 	.word	0x40021000

08001b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b30:	f7ff ffca 	bl	8001ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b36:	e003      	b.n	8001b40 <LoopCopyDataInit>

08001b38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b3e:	3104      	adds	r1, #4

08001b40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b40:	480a      	ldr	r0, [pc, #40]	; (8001b6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b48:	d3f6      	bcc.n	8001b38 <CopyDataInit>
	ldr	r2, =_sbss
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b4c:	e002      	b.n	8001b54 <LoopFillZerobss>

08001b4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b50:	f842 3b04 	str.w	r3, [r2], #4

08001b54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <LoopForever+0x16>)
	cmp	r2, r3
 8001b56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b58:	d3f9      	bcc.n	8001b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5a:	f011 f9b1 	bl	8012ec0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b5e:	f7fe fccb 	bl	80004f8 <main>

08001b62 <LoopForever>:

LoopForever:
    b LoopForever
 8001b62:	e7fe      	b.n	8001b62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b64:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001b68:	0801311c 	.word	0x0801311c
	ldr	r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b70:	20000194 	.word	0x20000194
	ldr	r2, =_sbss
 8001b74:	20000194 	.word	0x20000194
	ldr	r3, = _ebss
 8001b78:	2000471c 	.word	0x2000471c

08001b7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC1_IRQHandler>

08001b7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 ffea 	bl	8002b62 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fef2 	bl	8001978 <HAL_InitTick>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	71fb      	strb	r3, [r7, #7]
 8001b9e:	e001      	b.n	8001ba4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ba0:	f7ff fb60 	bl	8001264 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20002990 	.word	0x20002990

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20002990 	.word	0x20002990

08001bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff ffee 	bl	8001bd8 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d005      	beq.n	8001c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_Delay+0x44>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c16:	bf00      	nop
 8001c18:	f7ff ffde 	bl	8001bd8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8f7      	bhi.n	8001c18 <HAL_Delay+0x28>
  {
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000008 	.word	0x20000008

08001c38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	609a      	str	r2, [r3, #8]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3360      	adds	r3, #96	; 0x60
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <LL_ADC_SetOffset+0x44>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	03fff000 	.word	0x03fff000

08001ce8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3360      	adds	r3, #96	; 0x60
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3360      	adds	r3, #96	; 0x60
 8001d24:	461a      	mov	r2, r3
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d3e:	bf00      	nop
 8001d40:	371c      	adds	r7, #28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	615a      	str	r2, [r3, #20]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3330      	adds	r3, #48	; 0x30
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	4413      	add	r3, r2
 8001d8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	211f      	movs	r1, #31
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	0e9b      	lsrs	r3, r3, #26
 8001da8:	f003 011f 	and.w	r1, r3, #31
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	431a      	orrs	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dbc:	bf00      	nop
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3314      	adds	r3, #20
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	0e5b      	lsrs	r3, r3, #25
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	4413      	add	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	0d1b      	lsrs	r3, r3, #20
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	2107      	movs	r1, #7
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	0d1b      	lsrs	r3, r3, #20
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0318 	and.w	r3, r3, #24
 8001e42:	4908      	ldr	r1, [pc, #32]	; (8001e64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e44:	40d9      	lsrs	r1, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	400b      	ands	r3, r1
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	0007ffff 	.word	0x0007ffff

08001e68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001e78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6093      	str	r3, [r2, #8]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ec8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ef0:	d101      	bne.n	8001ef6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <LL_ADC_IsEnabled+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_ADC_IsEnabled+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d101      	bne.n	8001f68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f80:	2300      	movs	r3, #0
 8001f82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e12f      	b.n	80021f2 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff f987 	bl	80012b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff67 	bl	8001e8c <LL_ADC_IsDeepPowerDownEnabled>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff4d 	bl	8001e68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff82 	bl	8001edc <LL_ADC_IsInternalRegulatorEnabled>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d115      	bne.n	800200a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff66 	bl	8001eb4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe8:	4b84      	ldr	r3, [pc, #528]	; (80021fc <HAL_ADC_Init+0x284>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	4a84      	ldr	r2, [pc, #528]	; (8002200 <HAL_ADC_Init+0x288>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ffc:	e002      	b.n	8002004 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3b01      	subs	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff64 	bl	8001edc <LL_ADC_IsInternalRegulatorEnabled>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10d      	bne.n	8002036 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	f043 0210 	orr.w	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff75 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002040:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	f003 0310 	and.w	r3, r3, #16
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 80c8 	bne.w	80021e0 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 80c4 	bne.w	80021e0 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff49 	bl	8001f04 <LL_ADC_IsEnabled>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10b      	bne.n	8002090 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002078:	4862      	ldr	r0, [pc, #392]	; (8002204 <HAL_ADC_Init+0x28c>)
 800207a:	f7ff ff43 	bl	8001f04 <LL_ADC_IsEnabled>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4619      	mov	r1, r3
 800208a:	485f      	ldr	r0, [pc, #380]	; (8002208 <HAL_ADC_Init+0x290>)
 800208c:	f7ff fdd4 	bl	8001c38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7e5b      	ldrb	r3, [r3, #25]
 8002094:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800209a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80020a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80020a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d106      	bne.n	80020cc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	3b01      	subs	r3, #1
 80020c4:	045b      	lsls	r3, r3, #17
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	4b47      	ldr	r3, [pc, #284]	; (800220c <HAL_ADC_Init+0x294>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	69b9      	ldr	r1, [r7, #24]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff12 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002106:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff1f 	bl	8001f50 <LL_ADC_INJ_IsConversionOngoing>
 8002112:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d140      	bne.n	800219c <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d13d      	bne.n	800219c <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7e1b      	ldrb	r3, [r3, #24]
 8002128:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800212a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002132:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002142:	f023 0306 	bic.w	r3, r3, #6
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	430b      	orrs	r3, r1
 800214e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002156:	2b01      	cmp	r3, #1
 8002158:	d118      	bne.n	800218c <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800217c:	430a      	orrs	r2, r1
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	611a      	str	r2, [r3, #16]
 800218a:	e007      	b.n	800219c <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0201 	bic.w	r2, r2, #1
 800219a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d10c      	bne.n	80021be <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f023 010f 	bic.w	r1, r3, #15
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	1e5a      	subs	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
 80021bc:	e007      	b.n	80021ce <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 020f 	bic.w	r2, r2, #15
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	659a      	str	r2, [r3, #88]	; 0x58
 80021de:	e007      	b.n	80021f0 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	f043 0210 	orr.w	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000000 	.word	0x20000000
 8002200:	053e2d63 	.word	0x053e2d63
 8002204:	50040000 	.word	0x50040000
 8002208:	50040300 	.word	0x50040300
 800220c:	fff0c007 	.word	0xfff0c007

08002210 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0b6      	sub	sp, #216	; 0xd8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x22>
 800222e:	2302      	movs	r3, #2
 8002230:	e3d5      	b.n	80029de <HAL_ADC_ConfigChannel+0x7ce>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fe73 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	f040 83ba 	bne.w	80029c0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d824      	bhi.n	800229e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	3b02      	subs	r3, #2
 800225a:	2b03      	cmp	r3, #3
 800225c:	d81b      	bhi.n	8002296 <HAL_ADC_ConfigChannel+0x86>
 800225e:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <HAL_ADC_ConfigChannel+0x54>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002275 	.word	0x08002275
 8002268:	0800227d 	.word	0x0800227d
 800226c:	08002285 	.word	0x08002285
 8002270:	0800228d 	.word	0x0800228d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	220c      	movs	r2, #12
 8002278:	605a      	str	r2, [r3, #4]
          break;
 800227a:	e011      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2212      	movs	r2, #18
 8002280:	605a      	str	r2, [r3, #4]
          break;
 8002282:	e00d      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2218      	movs	r2, #24
 8002288:	605a      	str	r2, [r3, #4]
          break;
 800228a:	e009      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002292:	605a      	str	r2, [r3, #4]
          break;
 8002294:	e004      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2206      	movs	r2, #6
 800229a:	605a      	str	r2, [r3, #4]
          break;
 800229c:	e000      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800229e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6818      	ldr	r0, [r3, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	f7ff fd5f 	bl	8001d70 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fe37 	bl	8001f2a <LL_ADC_REG_IsConversionOngoing>
 80022bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fe43 	bl	8001f50 <LL_ADC_INJ_IsConversionOngoing>
 80022ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 81c1 	bne.w	800265a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 81bc 	bne.w	800265a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022ea:	d10f      	bne.n	800230c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2200      	movs	r2, #0
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7ff fd66 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fd20 	bl	8001d4a <LL_ADC_SetSamplingTimeCommonConfig>
 800230a:	e00e      	b.n	800232a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	461a      	mov	r2, r3
 800231a:	f7ff fd55 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fd10 	bl	8001d4a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d00a      	beq.n	8002362 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6919      	ldr	r1, [r3, #16]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800235c:	f7ff fca0 	bl	8001ca0 <LL_ADC_SetOffset>
 8002360:	e17b      	b.n	800265a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fcbd 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <HAL_ADC_ConfigChannel+0x17e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fcb2 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002384:	4603      	mov	r3, r0
 8002386:	0e9b      	lsrs	r3, r3, #26
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	e01e      	b.n	80023cc <HAL_ADC_ConfigChannel+0x1bc>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fca7 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e004      	b.n	80023ca <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80023c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1d4>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	e018      	b.n	8002416 <HAL_ADC_ConfigChannel+0x206>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e004      	b.n	8002416 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800240c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002416:	429a      	cmp	r2, r3
 8002418:	d106      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fc76 	bl	8001d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fc5a 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x244>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2101      	movs	r1, #1
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fc4f 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	f003 021f 	and.w	r2, r3, #31
 8002452:	e01e      	b.n	8002492 <HAL_ADC_ConfigChannel+0x282>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2101      	movs	r1, #1
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fc44 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800247a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002482:	2320      	movs	r3, #32
 8002484:	e004      	b.n	8002490 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x29a>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	0e9b      	lsrs	r3, r3, #26
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	e018      	b.n	80024dc <HAL_ADC_ConfigChannel+0x2cc>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e004      	b.n	80024dc <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80024d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024dc:	429a      	cmp	r2, r3
 80024de:	d106      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fc13 	bl	8001d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2102      	movs	r1, #2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fbf7 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <HAL_ADC_ConfigChannel+0x30a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2102      	movs	r1, #2
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fbec 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002510:	4603      	mov	r3, r0
 8002512:	0e9b      	lsrs	r3, r3, #26
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	e01e      	b.n	8002558 <HAL_ADC_ConfigChannel+0x348>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2102      	movs	r1, #2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fbe1 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800253c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e004      	b.n	8002556 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800254c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x360>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0e9b      	lsrs	r3, r3, #26
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	e016      	b.n	800259e <HAL_ADC_ConfigChannel+0x38e>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002590:	2320      	movs	r3, #32
 8002592:	e004      	b.n	800259e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800259e:	429a      	cmp	r2, r3
 80025a0:	d106      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	2102      	movs	r1, #2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fbb2 	bl	8001d14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2103      	movs	r1, #3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fb96 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x3cc>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2103      	movs	r1, #3
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fb8b 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	f003 021f 	and.w	r2, r3, #31
 80025da:	e017      	b.n	800260c <HAL_ADC_ConfigChannel+0x3fc>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2103      	movs	r1, #3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fb80 	bl	8001ce8 <LL_ADC_GetOffsetChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x414>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	e011      	b.n	8002648 <HAL_ADC_ConfigChannel+0x438>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002634:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002648:	429a      	cmp	r2, r3
 800264a:	d106      	bne.n	800265a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	2103      	movs	r1, #3
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fb5d 	bl	8001d14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fc50 	bl	8001f04 <LL_ADC_IsEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 8140 	bne.w	80028ec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	461a      	mov	r2, r3
 800267a:	f7ff fbd1 	bl	8001e20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a8f      	ldr	r2, [pc, #572]	; (80028c0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	f040 8131 	bne.w	80028ec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x4a2>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	3301      	adds	r3, #1
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	bf94      	ite	ls
 80026aa:	2301      	movls	r3, #1
 80026ac:	2300      	movhi	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e019      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x4d6>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80026ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b09      	cmp	r3, #9
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d079      	beq.n	80027de <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x4f6>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	3301      	adds	r3, #1
 80026fe:	069b      	lsls	r3, r3, #26
 8002700:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002704:	e015      	b.n	8002732 <HAL_ADC_ConfigChannel+0x522>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002716:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e003      	b.n	800272a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3301      	adds	r3, #1
 800272c:	069b      	lsls	r3, r3, #26
 800272e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x542>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	3301      	adds	r3, #1
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	e017      	b.n	8002782 <HAL_ADC_ConfigChannel+0x572>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e003      	b.n	8002776 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800276e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	ea42 0103 	orr.w	r1, r2, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x598>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0e9b      	lsrs	r3, r3, #26
 8002798:	3301      	adds	r3, #1
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	051b      	lsls	r3, r3, #20
 80027a6:	e018      	b.n	80027da <HAL_ADC_ConfigChannel+0x5ca>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e003      	b.n	80027cc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80027c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027da:	430b      	orrs	r3, r1
 80027dc:	e081      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x5ea>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	3301      	adds	r3, #1
 80027f2:	069b      	lsls	r3, r3, #26
 80027f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027f8:	e015      	b.n	8002826 <HAL_ADC_ConfigChannel+0x616>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e003      	b.n	800281e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	069b      	lsls	r3, r3, #26
 8002822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x636>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	3301      	adds	r3, #1
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	e017      	b.n	8002876 <HAL_ADC_ConfigChannel+0x666>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	61fb      	str	r3, [r7, #28]
  return result;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e003      	b.n	800286a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	ea42 0103 	orr.w	r1, r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10d      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x692>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	3301      	adds	r3, #1
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	3b1e      	subs	r3, #30
 800289a:	051b      	lsls	r3, r3, #20
 800289c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028a0:	e01e      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x6d0>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	613b      	str	r3, [r7, #16]
  return result;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d104      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e006      	b.n	80028cc <HAL_ADC_ConfigChannel+0x6bc>
 80028be:	bf00      	nop
 80028c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f003 021f 	and.w	r2, r3, #31
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	3b1e      	subs	r3, #30
 80028da:	051b      	lsls	r3, r3, #20
 80028dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e0:	430b      	orrs	r3, r1
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7ff fa6e 	bl	8001dc8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_ADC_ConfigChannel+0x7d8>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d06c      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f8:	483c      	ldr	r0, [pc, #240]	; (80029ec <HAL_ADC_ConfigChannel+0x7dc>)
 80028fa:	f7ff f9c3 	bl	8001c84 <LL_ADC_GetCommonPathInternalCh>
 80028fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a3a      	ldr	r2, [pc, #232]	; (80029f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d127      	bne.n	800295c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800290c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d121      	bne.n	800295c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a35      	ldr	r2, [pc, #212]	; (80029f4 <HAL_ADC_ConfigChannel+0x7e4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d157      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002926:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800292a:	4619      	mov	r1, r3
 800292c:	482f      	ldr	r0, [pc, #188]	; (80029ec <HAL_ADC_ConfigChannel+0x7dc>)
 800292e:	f7ff f996 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002932:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_ADC_ConfigChannel+0x7e8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	4a30      	ldr	r2, [pc, #192]	; (80029fc <HAL_ADC_ConfigChannel+0x7ec>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	099b      	lsrs	r3, r3, #6
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800294c:	e002      	b.n	8002954 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3b01      	subs	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f9      	bne.n	800294e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800295a:	e03a      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <HAL_ADC_ConfigChannel+0x7f0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d113      	bne.n	800298e <HAL_ADC_ConfigChannel+0x77e>
 8002966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800296a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10d      	bne.n	800298e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d12a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002984:	4619      	mov	r1, r3
 8002986:	4819      	ldr	r0, [pc, #100]	; (80029ec <HAL_ADC_ConfigChannel+0x7dc>)
 8002988:	f7ff f969 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800298c:	e021      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_ADC_ConfigChannel+0x7f4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d11c      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d116      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <HAL_ADC_ConfigChannel+0x7e4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d111      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b6:	4619      	mov	r1, r3
 80029b8:	480c      	ldr	r0, [pc, #48]	; (80029ec <HAL_ADC_ConfigChannel+0x7dc>)
 80029ba:	f7ff f950 	bl	8001c5e <LL_ADC_SetCommonPathInternalCh>
 80029be:	e008      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80029da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	37d8      	adds	r7, #216	; 0xd8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	80080000 	.word	0x80080000
 80029ec:	50040300 	.word	0x50040300
 80029f0:	c7520000 	.word	0xc7520000
 80029f4:	50040000 	.word	0x50040000
 80029f8:	20000000 	.word	0x20000000
 80029fc:	053e2d63 	.word	0x053e2d63
 8002a00:	cb840000 	.word	0xcb840000
 8002a04:	80000001 	.word	0x80000001

08002a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a24:	4013      	ands	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3a:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	60d3      	str	r3, [r2, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <__NVIC_GetPriorityGrouping+0x18>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 0307 	and.w	r3, r3, #7
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	db0b      	blt.n	8002a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	f003 021f 	and.w	r2, r3, #31
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <__NVIC_EnableIRQ+0x38>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	; (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	; (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	4313      	orrs	r3, r2
         );
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	; 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff4c 	bl	8002a08 <__NVIC_SetPriorityGrouping>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8a:	f7ff ff61 	bl	8002a50 <__NVIC_GetPriorityGrouping>
 8002b8e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	6978      	ldr	r0, [r7, #20]
 8002b96:	f7ff ffb1 	bl	8002afc <NVIC_EncodePriority>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff80 	bl	8002aa8 <__NVIC_SetPriority>
}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff54 	bl	8002a6c <__NVIC_EnableIRQ>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0ac      	b.n	8002d38 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f9d2 	bl	8002f8c <DFSDM_GetChannelFromInstance>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_DFSDM_ChannelInit+0x174>)
 8002bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e09f      	b.n	8002d38 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7fe fc1d 	bl	8001438 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002bfe:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_DFSDM_ChannelInit+0x178>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3301      	adds	r3, #1
 8002c04:	4a4f      	ldr	r2, [pc, #316]	; (8002d44 <HAL_DFSDM_ChannelInit+0x178>)
 8002c06:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002c08:	4b4e      	ldr	r3, [pc, #312]	; (8002d44 <HAL_DFSDM_ChannelInit+0x178>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d125      	bne.n	8002c5c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002c10:	4b4d      	ldr	r3, [pc, #308]	; (8002d48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a4c      	ldr	r2, [pc, #304]	; (8002d48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c1a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002c1c:	4b4a      	ldr	r3, [pc, #296]	; (8002d48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4948      	ldr	r1, [pc, #288]	; (8002d48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002c2a:	4b47      	ldr	r3, [pc, #284]	; (8002d48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c30:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002c34:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	791b      	ldrb	r3, [r3, #4]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d108      	bne.n	8002c50 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	041b      	lsls	r3, r3, #16
 8002c4a:	493f      	ldr	r1, [pc, #252]	; (8002d48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002c50:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a3c      	ldr	r2, [pc, #240]	; (8002d48 <HAL_DFSDM_ChannelInit+0x17c>)
 8002c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c5a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002c6a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c7a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002c80:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 020f 	bic.w	r2, r2, #15
 8002c98:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6819      	ldr	r1, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002cc0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f002 0207 	and.w	r2, r2, #7
 8002cec:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d18:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f930 	bl	8002f8c <DFSDM_GetChannelFromInstance>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	4904      	ldr	r1, [pc, #16]	; (8002d40 <HAL_DFSDM_ChannelInit+0x174>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	200001bc 	.word	0x200001bc
 8002d44:	200001b8 	.word	0x200001b8
 8002d48:	40016000 	.word	0x40016000

08002d4c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0ca      	b.n	8002ef4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a66      	ldr	r2, [pc, #408]	; (8002efc <HAL_DFSDM_FilterInit+0x1b0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d109      	bne.n	8002d7c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d003      	beq.n	8002d78 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0bb      	b.n	8002ef4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7fe fae5 	bl	8001364 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002da8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	7a1b      	ldrb	r3, [r3, #8]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d108      	bne.n	8002dc4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e007      	b.n	8002dd4 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002dd2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7a5b      	ldrb	r3, [r3, #9]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d108      	bne.n	8002dee <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e007      	b.n	8002dfe <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e0c:	f023 0308 	bic.w	r3, r3, #8
 8002e10:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d108      	bne.n	8002e2c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6819      	ldr	r1, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7c1b      	ldrb	r3, [r3, #16]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d108      	bne.n	8002e46 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0210 	orr.w	r2, r2, #16
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e007      	b.n	8002e56 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0210 	bic.w	r2, r2, #16
 8002e54:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7c5b      	ldrb	r3, [r3, #17]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d108      	bne.n	8002e70 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0220 	orr.w	r2, r2, #32
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e007      	b.n	8002e80 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0220 	bic.w	r2, r2, #32
 8002e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002e8e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002e92:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6959      	ldr	r1, [r3, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002ea6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002eae:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7c1a      	ldrb	r2, [r3, #16]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40016100 	.word	0x40016100

08002f00 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02e      	beq.n	8002f78 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002f20:	2bff      	cmp	r3, #255	; 0xff
 8002f22:	d029      	beq.n	8002f78 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f36:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d10d      	bne.n	8002f5a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	e00a      	b.n	8002f70 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
 8002f76:	e001      	b.n	8002f7c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <DFSDM_GetChannelFromInstance+0x7c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d102      	bne.n	8002fa2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	e02b      	b.n	8002ffa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a19      	ldr	r2, [pc, #100]	; (800300c <DFSDM_GetChannelFromInstance+0x80>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d102      	bne.n	8002fb0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002faa:	2301      	movs	r3, #1
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	e024      	b.n	8002ffa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <DFSDM_GetChannelFromInstance+0x84>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d102      	bne.n	8002fbe <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e01d      	b.n	8002ffa <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <DFSDM_GetChannelFromInstance+0x88>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d102      	bne.n	8002fcc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e016      	b.n	8002ffa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <DFSDM_GetChannelFromInstance+0x8c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d102      	bne.n	8002fda <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002fd4:	2305      	movs	r3, #5
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	e00f      	b.n	8002ffa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a0f      	ldr	r2, [pc, #60]	; (800301c <DFSDM_GetChannelFromInstance+0x90>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d102      	bne.n	8002fe8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	e008      	b.n	8002ffa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <DFSDM_GetChannelFromInstance+0x94>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d102      	bne.n	8002ff6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002ff0:	2307      	movs	r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	e001      	b.n	8002ffa <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40016000 	.word	0x40016000
 800300c:	40016020 	.word	0x40016020
 8003010:	40016040 	.word	0x40016040
 8003014:	40016080 	.word	0x40016080
 8003018:	400160a0 	.word	0x400160a0
 800301c:	400160c0 	.word	0x400160c0
 8003020:	400160e0 	.word	0x400160e0

08003024 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e08d      	b.n	8003152 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_DMA_Init+0x138>)
 800303e:	429a      	cmp	r2, r3
 8003040:	d80f      	bhi.n	8003062 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	4b45      	ldr	r3, [pc, #276]	; (8003160 <HAL_DMA_Init+0x13c>)
 800304a:	4413      	add	r3, r2
 800304c:	4a45      	ldr	r2, [pc, #276]	; (8003164 <HAL_DMA_Init+0x140>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	009a      	lsls	r2, r3, #2
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a42      	ldr	r2, [pc, #264]	; (8003168 <HAL_DMA_Init+0x144>)
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
 8003060:	e00e      	b.n	8003080 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4b40      	ldr	r3, [pc, #256]	; (800316c <HAL_DMA_Init+0x148>)
 800306a:	4413      	add	r3, r2
 800306c:	4a3d      	ldr	r2, [pc, #244]	; (8003164 <HAL_DMA_Init+0x140>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	009a      	lsls	r2, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a3c      	ldr	r2, [pc, #240]	; (8003170 <HAL_DMA_Init+0x14c>)
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800309a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f8fe 	bl	80032d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e0:	d102      	bne.n	80030e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030fc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d010      	beq.n	8003128 <HAL_DMA_Init+0x104>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b04      	cmp	r3, #4
 800310c:	d80c      	bhi.n	8003128 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f91e 	bl	8003350 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	e008      	b.n	800313a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40020407 	.word	0x40020407
 8003160:	bffdfff8 	.word	0xbffdfff8
 8003164:	cccccccd 	.word	0xcccccccd
 8003168:	40020000 	.word	0x40020000
 800316c:	bffdfbf8 	.word	0xbffdfbf8
 8003170:	40020400 	.word	0x40020400

08003174 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	f003 031c 	and.w	r3, r3, #28
 8003194:	2204      	movs	r2, #4
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d026      	beq.n	80031ee <HAL_DMA_IRQHandler+0x7a>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d021      	beq.n	80031ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d107      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	f003 021c 	and.w	r2, r3, #28
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	2104      	movs	r1, #4
 80031d6:	fa01 f202 	lsl.w	r2, r1, r2
 80031da:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d071      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80031ec:	e06c      	b.n	80032c8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f003 031c 	and.w	r3, r3, #28
 80031f6:	2202      	movs	r2, #2
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02e      	beq.n	8003260 <HAL_DMA_IRQHandler+0xec>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d029      	beq.n	8003260 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 020a 	bic.w	r2, r2, #10
 8003228:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f003 021c 	and.w	r2, r3, #28
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2102      	movs	r1, #2
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d038      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800325e:	e033      	b.n	80032c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003264:	f003 031c 	and.w	r3, r3, #28
 8003268:	2208      	movs	r2, #8
 800326a:	409a      	lsls	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02a      	beq.n	80032ca <HAL_DMA_IRQHandler+0x156>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d025      	beq.n	80032ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 020e 	bic.w	r2, r2, #14
 800328c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f003 021c 	and.w	r2, r3, #28
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2101      	movs	r1, #1
 800329c:	fa01 f202 	lsl.w	r2, r1, r2
 80032a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d004      	beq.n	80032ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
}
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d80a      	bhi.n	80032fe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6493      	str	r3, [r2, #72]	; 0x48
 80032fc:	e007      	b.n	800330e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	009a      	lsls	r2, r3, #2
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003308:	4413      	add	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3b08      	subs	r3, #8
 8003316:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003324:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	2201      	movs	r2, #1
 800332e:	409a      	lsls	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40020407 	.word	0x40020407
 8003344:	4002081c 	.word	0x4002081c
 8003348:	cccccccd 	.word	0xcccccccd
 800334c:	40020880 	.word	0x40020880

08003350 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a08      	ldr	r2, [pc, #32]	; (8003394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003372:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3b01      	subs	r3, #1
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2201      	movs	r2, #1
 800337e:	409a      	lsls	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	1000823f 	.word	0x1000823f
 8003394:	40020940 	.word	0x40020940

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a6:	e166      	b.n	8003676 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2101      	movs	r1, #1
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	4013      	ands	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8158 	beq.w	8003670 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d00b      	beq.n	80033e0 <HAL_GPIO_Init+0x48>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d007      	beq.n	80033e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d4:	2b11      	cmp	r3, #17
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b12      	cmp	r3, #18
 80033de:	d130      	bne.n	8003442 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	2203      	movs	r2, #3
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003416:	2201      	movs	r2, #1
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0201 	and.w	r2, r3, #1
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	2203      	movs	r2, #3
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0xea>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b12      	cmp	r3, #18
 8003480:	d123      	bne.n	80034ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	08da      	lsrs	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	220f      	movs	r2, #15
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	08da      	lsrs	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3208      	adds	r2, #8
 80034c4:	6939      	ldr	r1, [r7, #16]
 80034c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2203      	movs	r2, #3
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0203 	and.w	r2, r3, #3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80b2 	beq.w	8003670 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350c:	4b61      	ldr	r3, [pc, #388]	; (8003694 <HAL_GPIO_Init+0x2fc>)
 800350e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003510:	4a60      	ldr	r2, [pc, #384]	; (8003694 <HAL_GPIO_Init+0x2fc>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6613      	str	r3, [r2, #96]	; 0x60
 8003518:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <HAL_GPIO_Init+0x2fc>)
 800351a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003524:	4a5c      	ldr	r2, [pc, #368]	; (8003698 <HAL_GPIO_Init+0x300>)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800354e:	d02b      	beq.n	80035a8 <HAL_GPIO_Init+0x210>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a52      	ldr	r2, [pc, #328]	; (800369c <HAL_GPIO_Init+0x304>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d025      	beq.n	80035a4 <HAL_GPIO_Init+0x20c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a51      	ldr	r2, [pc, #324]	; (80036a0 <HAL_GPIO_Init+0x308>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d01f      	beq.n	80035a0 <HAL_GPIO_Init+0x208>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a50      	ldr	r2, [pc, #320]	; (80036a4 <HAL_GPIO_Init+0x30c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d019      	beq.n	800359c <HAL_GPIO_Init+0x204>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a4f      	ldr	r2, [pc, #316]	; (80036a8 <HAL_GPIO_Init+0x310>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d013      	beq.n	8003598 <HAL_GPIO_Init+0x200>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a4e      	ldr	r2, [pc, #312]	; (80036ac <HAL_GPIO_Init+0x314>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00d      	beq.n	8003594 <HAL_GPIO_Init+0x1fc>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a4d      	ldr	r2, [pc, #308]	; (80036b0 <HAL_GPIO_Init+0x318>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <HAL_GPIO_Init+0x1f8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a4c      	ldr	r2, [pc, #304]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_GPIO_Init+0x1f4>
 8003588:	2307      	movs	r3, #7
 800358a:	e00e      	b.n	80035aa <HAL_GPIO_Init+0x212>
 800358c:	2308      	movs	r3, #8
 800358e:	e00c      	b.n	80035aa <HAL_GPIO_Init+0x212>
 8003590:	2306      	movs	r3, #6
 8003592:	e00a      	b.n	80035aa <HAL_GPIO_Init+0x212>
 8003594:	2305      	movs	r3, #5
 8003596:	e008      	b.n	80035aa <HAL_GPIO_Init+0x212>
 8003598:	2304      	movs	r3, #4
 800359a:	e006      	b.n	80035aa <HAL_GPIO_Init+0x212>
 800359c:	2303      	movs	r3, #3
 800359e:	e004      	b.n	80035aa <HAL_GPIO_Init+0x212>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e002      	b.n	80035aa <HAL_GPIO_Init+0x212>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_GPIO_Init+0x212>
 80035a8:	2300      	movs	r3, #0
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	f002 0203 	and.w	r2, r2, #3
 80035b0:	0092      	lsls	r2, r2, #2
 80035b2:	4093      	lsls	r3, r2
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035ba:	4937      	ldr	r1, [pc, #220]	; (8003698 <HAL_GPIO_Init+0x300>)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	3302      	adds	r3, #2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035c8:	4b3b      	ldr	r3, [pc, #236]	; (80036b8 <HAL_GPIO_Init+0x320>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ec:	4a32      	ldr	r2, [pc, #200]	; (80036b8 <HAL_GPIO_Init+0x320>)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80035f2:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <HAL_GPIO_Init+0x320>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4013      	ands	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003616:	4a28      	ldr	r2, [pc, #160]	; (80036b8 <HAL_GPIO_Init+0x320>)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800361c:	4b26      	ldr	r3, [pc, #152]	; (80036b8 <HAL_GPIO_Init+0x320>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	43db      	mvns	r3, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <HAL_GPIO_Init+0x320>)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003646:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <HAL_GPIO_Init+0x320>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	43db      	mvns	r3, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <HAL_GPIO_Init+0x320>)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3301      	adds	r3, #1
 8003674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	f47f ae91 	bne.w	80033a8 <HAL_GPIO_Init+0x10>
  }
}
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	40021000 	.word	0x40021000
 8003698:	40010000 	.word	0x40010000
 800369c:	48000400 	.word	0x48000400
 80036a0:	48000800 	.word	0x48000800
 80036a4:	48000c00 	.word	0x48000c00
 80036a8:	48001000 	.word	0x48001000
 80036ac:	48001400 	.word	0x48001400
 80036b0:	48001800 	.word	0x48001800
 80036b4:	48001c00 	.word	0x48001c00
 80036b8:	40010400 	.word	0x40010400

080036bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e001      	b.n	80036de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036da:	2300      	movs	r3, #0
 80036dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	807b      	strh	r3, [r7, #2]
 80036f8:	4613      	mov	r3, r2
 80036fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036fc:	787b      	ldrb	r3, [r7, #1]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003708:	e002      	b.n	8003710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4013      	ands	r3, r2
 8003734:	041a      	lsls	r2, r3, #16
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	43d9      	mvns	r1, r3
 800373a:	887b      	ldrh	r3, [r7, #2]
 800373c:	400b      	ands	r3, r1
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e081      	b.n	8003866 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fd fe8c 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2224      	movs	r2, #36	; 0x24
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	e006      	b.n	80037d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d104      	bne.n	80037ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800380c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	ea42 0103 	orr.w	r1, r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	021a      	lsls	r2, r3, #8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1a      	ldr	r2, [r3, #32]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b20      	cmp	r3, #32
 8003882:	d138      	bne.n	80038f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800388e:	2302      	movs	r3, #2
 8003890:	e032      	b.n	80038f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2224      	movs	r2, #36	; 0x24
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038f6:	2302      	movs	r3, #2
  }
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b20      	cmp	r3, #32
 8003918:	d139      	bne.n	800398e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003924:	2302      	movs	r3, #2
 8003926:	e033      	b.n	8003990 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	; 0x24
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003956:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0201 	orr.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	b08f      	sub	sp, #60	; 0x3c
 80039a0:	af0a      	add	r7, sp, #40	; 0x28
 80039a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e116      	b.n	8003bdc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d106      	bne.n	80039ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f00e fe63 	bl	8012694 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2203      	movs	r2, #3
 80039d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f007 ff0c 	bl	800b80a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	687e      	ldr	r6, [r7, #4]
 80039fa:	466d      	mov	r5, sp
 80039fc:	f106 0410 	add.w	r4, r6, #16
 8003a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a10:	1d33      	adds	r3, r6, #4
 8003a12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a14:	6838      	ldr	r0, [r7, #0]
 8003a16:	f007 fe1f 	bl	800b658 <USB_CoreInit>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d7      	b.n	8003bdc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f007 fefa 	bl	800b82c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	73fb      	strb	r3, [r7, #15]
 8003a3c:	e04a      	b.n	8003ad4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a3e:	7bfa      	ldrb	r2, [r7, #15]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	333d      	adds	r3, #61	; 0x3d
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	333c      	adds	r3, #60	; 0x3c
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a66:	7bfa      	ldrb	r2, [r7, #15]
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	b298      	uxth	r0, r3
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	3342      	adds	r3, #66	; 0x42
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	333f      	adds	r3, #63	; 0x3f
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3344      	adds	r3, #68	; 0x44
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3348      	adds	r3, #72	; 0x48
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3350      	adds	r3, #80	; 0x50
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
 8003ad4:	7bfa      	ldrb	r2, [r7, #15]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d3af      	bcc.n	8003a3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	e044      	b.n	8003b6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b3c:	7bfa      	ldrb	r2, [r7, #15]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d3b5      	bcc.n	8003ae4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	687e      	ldr	r6, [r7, #4]
 8003b80:	466d      	mov	r5, sp
 8003b82:	f106 0410 	add.w	r4, r6, #16
 8003b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b92:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b96:	1d33      	adds	r3, r6, #4
 8003b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f007 fe70 	bl	800b880 <USB_DevInit>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e014      	b.n	8003bdc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d102      	bne.n	8003bd0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 ff62 	bl	8004a94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f008 fdf2 	bl	800c7be <USB_DevDisconnect>

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003be4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_PCD_Start+0x1c>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e01c      	b.n	8003c3a <HAL_PCD_Start+0x56>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f007 fde1 	bl	800b7e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f008 fda6 	bl	800c77c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c42:	b590      	push	{r4, r7, lr}
 8003c44:	b08d      	sub	sp, #52	; 0x34
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f008 fe64 	bl	800c926 <USB_GetMode>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f040 838f 	bne.w	8004384 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f008 fdc8 	bl	800c800 <USB_ReadInterrupts>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 8385 	beq.w	8004382 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f008 fdbf 	bl	800c800 <USB_ReadInterrupts>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d107      	bne.n	8003c9c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f002 0202 	and.w	r2, r2, #2
 8003c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f008 fdad 	bl	800c800 <USB_ReadInterrupts>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d161      	bne.n	8003d74 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0210 	bic.w	r2, r2, #16
 8003cbe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f003 020f 	and.w	r2, r3, #15
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	4413      	add	r3, r2
 8003cdc:	3304      	adds	r3, #4
 8003cde:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	0c5b      	lsrs	r3, r3, #17
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d124      	bne.n	8003d36 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d035      	beq.n	8003d64 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	091b      	lsrs	r3, r3, #4
 8003d00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6a38      	ldr	r0, [r7, #32]
 8003d0c:	f008 fc13 	bl	800c536 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1c:	441a      	add	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d2e:	441a      	add	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	619a      	str	r2, [r3, #24]
 8003d34:	e016      	b.n	8003d64 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	0c5b      	lsrs	r3, r3, #17
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d110      	bne.n	8003d64 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d48:	2208      	movs	r2, #8
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6a38      	ldr	r0, [r7, #32]
 8003d4e:	f008 fbf2 	bl	800c536 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d5e:	441a      	add	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0210 	orr.w	r2, r2, #16
 8003d72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f008 fd41 	bl	800c800 <USB_ReadInterrupts>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d88:	d16e      	bne.n	8003e68 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f008 fd47 	bl	800c826 <USB_ReadDevAllOutEpInterrupt>
 8003d98:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d9a:	e062      	b.n	8003e62 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d057      	beq.n	8003e56 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f008 fd6c 	bl	800c88e <USB_ReadDevOutEPInterrupt>
 8003db6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00c      	beq.n	8003ddc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fd82 	bl	80048e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00c      	beq.n	8003e00 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df2:	461a      	mov	r2, r3
 8003df4:	2308      	movs	r3, #8
 8003df6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fdbe 	bl	800497c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e16:	461a      	mov	r2, r3
 8003e18:	2310      	movs	r3, #16
 8003e1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e32:	461a      	mov	r2, r3
 8003e34:	2320      	movs	r3, #32
 8003e36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e54:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	3301      	adds	r3, #1
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d199      	bne.n	8003d9c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f008 fcc7 	bl	800c800 <USB_ReadInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e7c:	f040 8087 	bne.w	8003f8e <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f008 fce8 	bl	800c85a <USB_ReadDevAllInEpInterrupt>
 8003e8a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003e90:	e07a      	b.n	8003f88 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d06f      	beq.n	8003f7c <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f008 fd0f 	bl	800c8ca <USB_ReadDevInEPInterrupt>
 8003eac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	69f9      	ldr	r1, [r7, #28]
 8003ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ed8:	4013      	ands	r3, r2
 8003eda:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2301      	movs	r3, #1
 8003eec:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f00e fc60 	bl	80127ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d008      	beq.n	8003f16 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f10:	461a      	mov	r2, r3
 8003f12:	2308      	movs	r3, #8
 8003f14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2310      	movs	r3, #16
 8003f30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2340      	movs	r3, #64	; 0x40
 8003f4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f64:	461a      	mov	r2, r3
 8003f66:	2302      	movs	r3, #2
 8003f68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fc29 	bl	80047ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	3301      	adds	r3, #1
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d181      	bne.n	8003e92 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f008 fc34 	bl	800c800 <USB_ReadInterrupts>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fa2:	d122      	bne.n	8003fea <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	69fa      	ldr	r2, [r7, #28]
 8003fae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d108      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003fca:	2100      	movs	r1, #0
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f00e ff0b 	bl	8012de8 <HAL_PCDEx_LPM_Callback>
 8003fd2:	e002      	b.n	8003fda <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f00e fc5d 	bl	8012894 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f008 fc06 	bl	800c800 <USB_ReadInterrupts>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffe:	d112      	bne.n	8004026 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d102      	bne.n	8004016 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f00e fc19 	bl	8012848 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695a      	ldr	r2, [r3, #20]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004024:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f008 fbe8 	bl	800c800 <USB_ReadInterrupts>
 8004030:	4603      	mov	r3, r0
 8004032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800403a:	d121      	bne.n	8004080 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800404a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d111      	bne.n	800407a <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	f003 020f 	and.w	r2, r3, #15
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004070:	2101      	movs	r1, #1
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f00e feb8 	bl	8012de8 <HAL_PCDEx_LPM_Callback>
 8004078:	e002      	b.n	8004080 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f00e fbe4 	bl	8012848 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f008 fbbb 	bl	800c800 <USB_ReadInterrupts>
 800408a:	4603      	mov	r3, r0
 800408c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004094:	f040 80c5 	bne.w	8004222 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2110      	movs	r1, #16
 80040b2:	4618      	mov	r0, r3
 80040b4:	f007 fd30 	bl	800bb18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040bc:	e056      	b.n	800416c <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80040be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ca:	461a      	mov	r2, r3
 80040cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040f0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004102:	0151      	lsls	r1, r2, #5
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	440a      	add	r2, r1
 8004108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004110:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	461a      	mov	r2, r3
 8004120:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004124:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	440a      	add	r2, r1
 800413c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004140:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004144:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004160:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004164:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	3301      	adds	r3, #1
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004172:	429a      	cmp	r2, r3
 8004174:	d3a3      	bcc.n	80040be <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004184:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004188:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	2b00      	cmp	r3, #0
 8004190:	d016      	beq.n	80041c0 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041a2:	f043 030b 	orr.w	r3, r3, #11
 80041a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b8:	f043 030b 	orr.w	r3, r3, #11
 80041bc:	6453      	str	r3, [r2, #68]	; 0x44
 80041be:	e015      	b.n	80041ec <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041d2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80041d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041e6:	f043 030b 	orr.w	r3, r3, #11
 80041ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f008 fbbb 	bl	800c988 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004220:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f008 faea 	bl	800c800 <USB_ReadInterrupts>
 800422c:	4603      	mov	r3, r0
 800422e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004236:	d124      	bne.n	8004282 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f008 fb80 	bl	800c942 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f007 fcc7 	bl	800bbda <USB_GetDevSpeed>
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681c      	ldr	r4, [r3, #0]
 8004258:	f001 fb10 	bl	800587c <HAL_RCC_GetHCLKFreq>
 800425c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004262:	b2db      	uxtb	r3, r3
 8004264:	461a      	mov	r2, r3
 8004266:	4620      	mov	r0, r4
 8004268:	f007 fa22 	bl	800b6b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f00e facc 	bl	801280a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004280:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f008 faba 	bl	800c800 <USB_ReadInterrupts>
 800428c:	4603      	mov	r3, r0
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b08      	cmp	r3, #8
 8004294:	d10a      	bne.n	80042ac <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f00e faa9 	bl	80127ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f002 0208 	and.w	r2, r2, #8
 80042aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f008 faa5 	bl	800c800 <USB_ReadInterrupts>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c0:	d10f      	bne.n	80042e2 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	4619      	mov	r1, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f00e fb1b 	bl	8012908 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80042e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f008 fa8a 	bl	800c800 <USB_ReadInterrupts>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f6:	d10f      	bne.n	8004318 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f00e faee 	bl	80128e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004316:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f008 fa6f 	bl	800c800 <USB_ReadInterrupts>
 8004322:	4603      	mov	r3, r0
 8004324:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d10a      	bne.n	8004344 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f00e fafc 	bl	801292c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f008 fa59 	bl	800c800 <USB_ReadInterrupts>
 800434e:	4603      	mov	r3, r0
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b04      	cmp	r3, #4
 8004356:	d115      	bne.n	8004384 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f00e faec 	bl	8012948 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	430a      	orrs	r2, r1
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	e000      	b.n	8004384 <HAL_PCD_IRQHandler+0x742>
      return;
 8004382:	bf00      	nop
    }
  }
}
 8004384:	3734      	adds	r7, #52	; 0x34
 8004386:	46bd      	mov	sp, r7
 8004388:	bd90      	pop	{r4, r7, pc}

0800438a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_PCD_SetAddress+0x1a>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e013      	b.n	80043cc <HAL_PCD_SetAddress+0x42>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f008 f9b7 	bl	800c730 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	70fb      	strb	r3, [r7, #3]
 80043e6:	460b      	mov	r3, r1
 80043e8:	803b      	strh	r3, [r7, #0]
 80043ea:	4613      	mov	r3, r2
 80043ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da0f      	bge.n	800441a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 020f 	and.w	r2, r3, #15
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	3338      	adds	r3, #56	; 0x38
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	3304      	adds	r3, #4
 8004410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	705a      	strb	r2, [r3, #1]
 8004418:	e00f      	b.n	800443a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	f003 020f 	and.w	r2, r3, #15
 8004420:	4613      	mov	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	4413      	add	r3, r2
 8004430:	3304      	adds	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004446:	883a      	ldrh	r2, [r7, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	78ba      	ldrb	r2, [r7, #2]
 8004450:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	785b      	ldrb	r3, [r3, #1]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004464:	78bb      	ldrb	r3, [r7, #2]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d102      	bne.n	8004470 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_PCD_EP_Open+0xaa>
 800447a:	2302      	movs	r3, #2
 800447c:	e00e      	b.n	800449c <HAL_PCD_EP_Open+0xc8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	4618      	mov	r0, r3
 800448e:	f007 fbc3 	bl	800bc18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800449a:	7afb      	ldrb	r3, [r7, #11]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	da0f      	bge.n	80044d8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	3338      	adds	r3, #56	; 0x38
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4413      	add	r3, r2
 80044cc:	3304      	adds	r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2201      	movs	r2, #1
 80044d4:	705a      	strb	r2, [r3, #1]
 80044d6:	e00f      	b.n	80044f8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	f003 020f 	and.w	r2, r3, #15
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	3304      	adds	r3, #4
 80044f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_PCD_EP_Close+0x6e>
 800450e:	2302      	movs	r3, #2
 8004510:	e00e      	b.n	8004530 <HAL_PCD_EP_Close+0x8c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	4618      	mov	r0, r3
 8004522:	f007 fc01 	bl	800bd28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	460b      	mov	r3, r1
 8004546:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004548:	7afb      	ldrb	r3, [r7, #11]
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	4613      	mov	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	3304      	adds	r3, #4
 8004560:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2200      	movs	r2, #0
 8004578:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800457a:	7afb      	ldrb	r3, [r7, #11]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	b2da      	uxtb	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004586:	7afb      	ldrb	r3, [r7, #11]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	2b00      	cmp	r3, #0
 800458e:	d106      	bne.n	800459e <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6979      	ldr	r1, [r7, #20]
 8004596:	4618      	mov	r0, r3
 8004598:	f007 fe7e 	bl	800c298 <USB_EP0StartXfer>
 800459c:	e005      	b.n	80045aa <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6979      	ldr	r1, [r7, #20]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f007 fc9b 	bl	800bee0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	460b      	mov	r3, r1
 80045f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f4:	7afb      	ldrb	r3, [r7, #11]
 80045f6:	f003 020f 	and.w	r2, r3, #15
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	3338      	adds	r3, #56	; 0x38
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	3304      	adds	r3, #4
 800460a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2200      	movs	r2, #0
 800461c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2201      	movs	r2, #1
 8004622:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004624:	7afb      	ldrb	r3, [r7, #11]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	b2da      	uxtb	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004630:	7afb      	ldrb	r3, [r7, #11]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6979      	ldr	r1, [r7, #20]
 8004640:	4618      	mov	r0, r3
 8004642:	f007 fe29 	bl	800c298 <USB_EP0StartXfer>
 8004646:	e005      	b.n	8004654 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6979      	ldr	r1, [r7, #20]
 800464e:	4618      	mov	r0, r3
 8004650:	f007 fc46 	bl	800bee0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	460b      	mov	r3, r1
 8004668:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800466a:	78fb      	ldrb	r3, [r7, #3]
 800466c:	f003 020f 	and.w	r2, r3, #15
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	429a      	cmp	r2, r3
 8004676:	d901      	bls.n	800467c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e04e      	b.n	800471a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800467c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004680:	2b00      	cmp	r3, #0
 8004682:	da0f      	bge.n	80046a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	f003 020f 	and.w	r2, r3, #15
 800468a:	4613      	mov	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	3338      	adds	r3, #56	; 0x38
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4413      	add	r3, r2
 8004698:	3304      	adds	r3, #4
 800469a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	705a      	strb	r2, [r3, #1]
 80046a2:	e00d      	b.n	80046c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	4613      	mov	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	4413      	add	r3, r2
 80046b6:	3304      	adds	r3, #4
 80046b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_PCD_EP_SetStall+0x82>
 80046dc:	2302      	movs	r3, #2
 80046de:	e01c      	b.n	800471a <HAL_PCD_EP_SetStall+0xbc>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68f9      	ldr	r1, [r7, #12]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f007 ff4a 	bl	800c588 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f008 f93c 	bl	800c988 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800472e:	78fb      	ldrb	r3, [r7, #3]
 8004730:	f003 020f 	and.w	r2, r3, #15
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	429a      	cmp	r2, r3
 800473a:	d901      	bls.n	8004740 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e042      	b.n	80047c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004744:	2b00      	cmp	r3, #0
 8004746:	da0f      	bge.n	8004768 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	3338      	adds	r3, #56	; 0x38
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4413      	add	r3, r2
 800475c:	3304      	adds	r3, #4
 800475e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	705a      	strb	r2, [r3, #1]
 8004766:	e00f      	b.n	8004788 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	f003 020f 	and.w	r2, r3, #15
 800476e:	4613      	mov	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	3304      	adds	r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800478e:	78fb      	ldrb	r3, [r7, #3]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_PCD_EP_ClrStall+0x86>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e00e      	b.n	80047c6 <HAL_PCD_EP_ClrStall+0xa4>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f007 ff54 	bl	800c664 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b088      	sub	sp, #32
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	3338      	adds	r3, #56	; 0x38
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	3304      	adds	r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d901      	bls.n	8004806 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e067      	b.n	80048d6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	695a      	ldr	r2, [r3, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	429a      	cmp	r2, r3
 800481a:	d902      	bls.n	8004822 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3303      	adds	r3, #3
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800482a:	e026      	b.n	800487a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	429a      	cmp	r2, r3
 8004840:	d902      	bls.n	8004848 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	3303      	adds	r3, #3
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	68d9      	ldr	r1, [r3, #12]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	b2da      	uxtb	r2, r3
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	b29b      	uxth	r3, r3
 800485c:	6978      	ldr	r0, [r7, #20]
 800485e:	f007 fe39 	bl	800c4d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	441a      	add	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	441a      	add	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	b29b      	uxth	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	429a      	cmp	r2, r3
 800488e:	d809      	bhi.n	80048a4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004898:	429a      	cmp	r2, r3
 800489a:	d203      	bcs.n	80048a4 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1c3      	bne.n	800482c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d811      	bhi.n	80048d4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	2201      	movs	r2, #1
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	6939      	ldr	r1, [r7, #16]
 80048cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048d0:	4013      	ands	r3, r2
 80048d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	333c      	adds	r3, #60	; 0x3c
 80048f8:	3304      	adds	r3, #4
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a19      	ldr	r2, [pc, #100]	; (8004978 <PCD_EP_OutXfrComplete_int+0x98>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d124      	bne.n	8004960 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	461a      	mov	r2, r3
 800492e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004932:	6093      	str	r3, [r2, #8]
 8004934:	e01a      	b.n	800496c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	461a      	mov	r2, r3
 800494e:	2320      	movs	r3, #32
 8004950:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	4619      	mov	r1, r3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f00d ff13 	bl	8012784 <HAL_PCD_DataOutStageCallback>
 800495e:	e005      	b.n	800496c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	b2db      	uxtb	r3, r3
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f00d ff0c 	bl	8012784 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	4f54310a 	.word	0x4f54310a

0800497c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	333c      	adds	r3, #60	; 0x3c
 8004994:	3304      	adds	r3, #4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a0c      	ldr	r2, [pc, #48]	; (80049e0 <PCD_EP_OutSetupPacket_int+0x64>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d90e      	bls.n	80049d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c8:	461a      	mov	r2, r3
 80049ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f00d fec5 	bl	8012760 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	4f54300a 	.word	0x4f54300a

080049e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
 80049f0:	4613      	mov	r3, r2
 80049f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a02:	883b      	ldrh	r3, [r7, #0]
 8004a04:	0419      	lsls	r1, r3, #16
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a10:	e028      	b.n	8004a64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	73fb      	strb	r3, [r7, #15]
 8004a24:	e00d      	b.n	8004a42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	3340      	adds	r3, #64	; 0x40
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	0c1b      	lsrs	r3, r3, #16
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	4413      	add	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	73fb      	strb	r3, [r7, #15]
 8004a42:	7bfa      	ldrb	r2, [r7, #15]
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d3ec      	bcc.n	8004a26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a4c:	883b      	ldrh	r3, [r7, #0]
 8004a4e:	0418      	lsls	r0, r3, #16
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	4302      	orrs	r2, r0
 8004a5c:	3340      	adds	r3, #64	; 0x40
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	f043 0303 	orr.w	r3, r3, #3
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a04      	ldr	r2, [pc, #16]	; (8004af8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aea:	6013      	str	r3, [r2, #0]
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40007000 	.word	0x40007000

08004afc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b00:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d102      	bne.n	8004b14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b12:	e00b      	b.n	8004b2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004b14:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b22:	d102      	bne.n	8004b2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b28:	e000      	b.n	8004b2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004b2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40007000 	.word	0x40007000

08004b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d141      	bne.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b4a:	4b4b      	ldr	r3, [pc, #300]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b56:	d131      	bne.n	8004bbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b58:	4b47      	ldr	r3, [pc, #284]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b5e:	4a46      	ldr	r2, [pc, #280]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b68:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b70:	4a41      	ldr	r2, [pc, #260]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004b78:	4b40      	ldr	r3, [pc, #256]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2232      	movs	r2, #50	; 0x32
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	4a3f      	ldr	r2, [pc, #252]	; (8004c80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	0c9b      	lsrs	r3, r3, #18
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b8e:	e002      	b.n	8004b96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b96:	4b38      	ldr	r3, [pc, #224]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba2:	d102      	bne.n	8004baa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f2      	bne.n	8004b90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004baa:	4b33      	ldr	r3, [pc, #204]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb6:	d158      	bne.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e057      	b.n	8004c6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bbc:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc2:	4a2d      	ldr	r2, [pc, #180]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004bcc:	e04d      	b.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd4:	d141      	bne.n	8004c5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bd6:	4b28      	ldr	r3, [pc, #160]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be2:	d131      	bne.n	8004c48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004be4:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bea:	4a23      	ldr	r2, [pc, #140]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bf4:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bfc:	4a1e      	ldr	r2, [pc, #120]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004c04:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2232      	movs	r2, #50	; 0x32
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	0c9b      	lsrs	r3, r3, #18
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c1a:	e002      	b.n	8004c22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c22:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2e:	d102      	bne.n	8004c36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f2      	bne.n	8004c1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c42:	d112      	bne.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e011      	b.n	8004c6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c58:	e007      	b.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c62:	4a05      	ldr	r2, [pc, #20]	; (8004c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	40007000 	.word	0x40007000
 8004c7c:	20000000 	.word	0x20000000
 8004c80:	431bde83 	.word	0x431bde83

08004c84 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a04      	ldr	r2, [pc, #16]	; (8004ca0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c92:	6053      	str	r3, [r2, #4]
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40007000 	.word	0x40007000

08004ca4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4a04      	ldr	r2, [pc, #16]	; (8004cc0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cb2:	6053      	str	r3, [r2, #4]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40007000 	.word	0x40007000

08004cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b088      	sub	sp, #32
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f000 bc16 	b.w	8005504 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cd8:	4ba0      	ldr	r3, [pc, #640]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ce2:	4b9e      	ldr	r3, [pc, #632]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80e4 	beq.w	8004ec2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_RCC_OscConfig+0x4c>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	f040 808b 	bne.w	8004e1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	f040 8087 	bne.w	8004e1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d10:	4b92      	ldr	r3, [pc, #584]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_OscConfig+0x64>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e3ed      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1a      	ldr	r2, [r3, #32]
 8004d2c:	4b8b      	ldr	r3, [pc, #556]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <HAL_RCC_OscConfig+0x7e>
 8004d38:	4b88      	ldr	r3, [pc, #544]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d40:	e005      	b.n	8004d4e <HAL_RCC_OscConfig+0x8a>
 8004d42:	4b86      	ldr	r3, [pc, #536]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d223      	bcs.n	8004d9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fdfa 	bl	8005950 <RCC_SetFlashLatencyFromMSIRange>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e3ce      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d66:	4b7d      	ldr	r3, [pc, #500]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a7c      	ldr	r2, [pc, #496]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d6c:	f043 0308 	orr.w	r3, r3, #8
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	4b7a      	ldr	r3, [pc, #488]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	4977      	ldr	r1, [pc, #476]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d84:	4b75      	ldr	r3, [pc, #468]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	4972      	ldr	r1, [pc, #456]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
 8004d98:	e025      	b.n	8004de6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d9a:	4b70      	ldr	r3, [pc, #448]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6f      	ldr	r2, [pc, #444]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004da0:	f043 0308 	orr.w	r3, r3, #8
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	4b6d      	ldr	r3, [pc, #436]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	496a      	ldr	r1, [pc, #424]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004db8:	4b68      	ldr	r3, [pc, #416]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	4965      	ldr	r1, [pc, #404]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fdba 	bl	8005950 <RCC_SetFlashLatencyFromMSIRange>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e38e      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004de6:	f000 fcbf 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8004dea:	4602      	mov	r2, r0
 8004dec:	4b5b      	ldr	r3, [pc, #364]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	495a      	ldr	r1, [pc, #360]	; (8004f60 <HAL_RCC_OscConfig+0x29c>)
 8004df8:	5ccb      	ldrb	r3, [r1, r3]
 8004dfa:	f003 031f 	and.w	r3, r3, #31
 8004dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004e02:	4a58      	ldr	r2, [pc, #352]	; (8004f64 <HAL_RCC_OscConfig+0x2a0>)
 8004e04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e06:	4b58      	ldr	r3, [pc, #352]	; (8004f68 <HAL_RCC_OscConfig+0x2a4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fc fdb4 	bl	8001978 <HAL_InitTick>
 8004e10:	4603      	mov	r3, r0
 8004e12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d052      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	e372      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d032      	beq.n	8004e8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e26:	4b4d      	ldr	r3, [pc, #308]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4c      	ldr	r2, [pc, #304]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e32:	f7fc fed1 	bl	8001bd8 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e3a:	f7fc fecd 	bl	8001bd8 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e35b      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e4c:	4b43      	ldr	r3, [pc, #268]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e58:	4b40      	ldr	r3, [pc, #256]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a3f      	ldr	r2, [pc, #252]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e5e:	f043 0308 	orr.w	r3, r3, #8
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	4b3d      	ldr	r3, [pc, #244]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	493a      	ldr	r1, [pc, #232]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e76:	4b39      	ldr	r3, [pc, #228]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	4935      	ldr	r1, [pc, #212]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]
 8004e8a:	e01a      	b.n	8004ec2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e8c:	4b33      	ldr	r3, [pc, #204]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a32      	ldr	r2, [pc, #200]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e98:	f7fc fe9e 	bl	8001bd8 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ea0:	f7fc fe9a 	bl	8001bd8 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e328      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004eb2:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x1dc>
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ec0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d073      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x21c>
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d10b      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee0:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d063      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x2f0>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d15f      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e305      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f00:	d106      	bne.n	8004f10 <HAL_RCC_OscConfig+0x24c>
 8004f02:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a15      	ldr	r2, [pc, #84]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	e01d      	b.n	8004f4c <HAL_RCC_OscConfig+0x288>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f18:	d10c      	bne.n	8004f34 <HAL_RCC_OscConfig+0x270>
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a0c      	ldr	r2, [pc, #48]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	e00b      	b.n	8004f4c <HAL_RCC_OscConfig+0x288>
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a05      	ldr	r2, [pc, #20]	; (8004f5c <HAL_RCC_OscConfig+0x298>)
 8004f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01b      	beq.n	8004f8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fc fe40 	bl	8001bd8 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f5a:	e010      	b.n	8004f7e <HAL_RCC_OscConfig+0x2ba>
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	08013088 	.word	0x08013088
 8004f64:	20000000 	.word	0x20000000
 8004f68:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fc fe34 	bl	8001bd8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	; 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e2c2      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f7e:	4baf      	ldr	r3, [pc, #700]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x2a8>
 8004f8a:	e014      	b.n	8004fb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8c:	f7fc fe24 	bl	8001bd8 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f94:	f7fc fe20 	bl	8001bd8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b64      	cmp	r3, #100	; 0x64
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e2ae      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fa6:	4ba5      	ldr	r3, [pc, #660]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x2d0>
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d060      	beq.n	8005084 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x310>
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d119      	bne.n	8005002 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d116      	bne.n	8005002 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fd4:	4b99      	ldr	r3, [pc, #612]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_OscConfig+0x328>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e28b      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fec:	4b93      	ldr	r3, [pc, #588]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	061b      	lsls	r3, r3, #24
 8004ffa:	4990      	ldr	r1, [pc, #576]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005000:	e040      	b.n	8005084 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d023      	beq.n	8005052 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800500a:	4b8c      	ldr	r3, [pc, #560]	; (800523c <HAL_RCC_OscConfig+0x578>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a8b      	ldr	r2, [pc, #556]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8005010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005016:	f7fc fddf 	bl	8001bd8 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800501c:	e008      	b.n	8005030 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501e:	f7fc fddb 	bl	8001bd8 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e269      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005030:	4b82      	ldr	r3, [pc, #520]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503c:	4b7f      	ldr	r3, [pc, #508]	; (800523c <HAL_RCC_OscConfig+0x578>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	061b      	lsls	r3, r3, #24
 800504a:	497c      	ldr	r1, [pc, #496]	; (800523c <HAL_RCC_OscConfig+0x578>)
 800504c:	4313      	orrs	r3, r2
 800504e:	604b      	str	r3, [r1, #4]
 8005050:	e018      	b.n	8005084 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005052:	4b7a      	ldr	r3, [pc, #488]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a79      	ldr	r2, [pc, #484]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8005058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800505c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505e:	f7fc fdbb 	bl	8001bd8 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005066:	f7fc fdb7 	bl	8001bd8 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e245      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005078:	4b70      	ldr	r3, [pc, #448]	; (800523c <HAL_RCC_OscConfig+0x578>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1f0      	bne.n	8005066 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d03c      	beq.n	800510a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01c      	beq.n	80050d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005098:	4b68      	ldr	r3, [pc, #416]	; (800523c <HAL_RCC_OscConfig+0x578>)
 800509a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800509e:	4a67      	ldr	r2, [pc, #412]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80050a0:	f043 0301 	orr.w	r3, r3, #1
 80050a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fc fd96 	bl	8001bd8 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b0:	f7fc fd92 	bl	8001bd8 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e220      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050c2:	4b5e      	ldr	r3, [pc, #376]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80050c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ef      	beq.n	80050b0 <HAL_RCC_OscConfig+0x3ec>
 80050d0:	e01b      	b.n	800510a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050d2:	4b5a      	ldr	r3, [pc, #360]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80050d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d8:	4a58      	ldr	r2, [pc, #352]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80050da:	f023 0301 	bic.w	r3, r3, #1
 80050de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e2:	f7fc fd79 	bl	8001bd8 <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ea:	f7fc fd75 	bl	8001bd8 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e203      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050fc:	4b4f      	ldr	r3, [pc, #316]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80050fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ef      	bne.n	80050ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80a6 	beq.w	8005264 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005118:	2300      	movs	r3, #0
 800511a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800511c:	4b47      	ldr	r3, [pc, #284]	; (800523c <HAL_RCC_OscConfig+0x578>)
 800511e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10d      	bne.n	8005144 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005128:	4b44      	ldr	r3, [pc, #272]	; (800523c <HAL_RCC_OscConfig+0x578>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	4a43      	ldr	r2, [pc, #268]	; (800523c <HAL_RCC_OscConfig+0x578>)
 800512e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005132:	6593      	str	r3, [r2, #88]	; 0x58
 8005134:	4b41      	ldr	r3, [pc, #260]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005140:	2301      	movs	r3, #1
 8005142:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005144:	4b3e      	ldr	r3, [pc, #248]	; (8005240 <HAL_RCC_OscConfig+0x57c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514c:	2b00      	cmp	r3, #0
 800514e:	d118      	bne.n	8005182 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005150:	4b3b      	ldr	r3, [pc, #236]	; (8005240 <HAL_RCC_OscConfig+0x57c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a3a      	ldr	r2, [pc, #232]	; (8005240 <HAL_RCC_OscConfig+0x57c>)
 8005156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800515c:	f7fc fd3c 	bl	8001bd8 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005164:	f7fc fd38 	bl	8001bd8 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e1c6      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005176:	4b32      	ldr	r3, [pc, #200]	; (8005240 <HAL_RCC_OscConfig+0x57c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d108      	bne.n	800519c <HAL_RCC_OscConfig+0x4d8>
 800518a:	4b2c      	ldr	r3, [pc, #176]	; (800523c <HAL_RCC_OscConfig+0x578>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	4a2a      	ldr	r2, [pc, #168]	; (800523c <HAL_RCC_OscConfig+0x578>)
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800519a:	e024      	b.n	80051e6 <HAL_RCC_OscConfig+0x522>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b05      	cmp	r3, #5
 80051a2:	d110      	bne.n	80051c6 <HAL_RCC_OscConfig+0x502>
 80051a4:	4b25      	ldr	r3, [pc, #148]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	4a24      	ldr	r2, [pc, #144]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80051ac:	f043 0304 	orr.w	r3, r3, #4
 80051b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	4a20      	ldr	r2, [pc, #128]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80051bc:	f043 0301 	orr.w	r3, r3, #1
 80051c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051c4:	e00f      	b.n	80051e6 <HAL_RCC_OscConfig+0x522>
 80051c6:	4b1d      	ldr	r3, [pc, #116]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	4a1b      	ldr	r2, [pc, #108]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051d6:	4b19      	ldr	r3, [pc, #100]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80051d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051dc:	4a17      	ldr	r2, [pc, #92]	; (800523c <HAL_RCC_OscConfig+0x578>)
 80051de:	f023 0304 	bic.w	r3, r3, #4
 80051e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fc fcf3 	bl	8001bd8 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f4:	e00a      	b.n	800520c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fc fcef 	bl	8001bd8 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	; 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e17b      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_RCC_OscConfig+0x578>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0ed      	beq.n	80051f6 <HAL_RCC_OscConfig+0x532>
 800521a:	e01a      	b.n	8005252 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521c:	f7fc fcdc 	bl	8001bd8 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005222:	e00f      	b.n	8005244 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005224:	f7fc fcd8 	bl	8001bd8 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d906      	bls.n	8005244 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e164      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000
 8005240:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005244:	4ba8      	ldr	r3, [pc, #672]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e8      	bne.n	8005224 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005252:	7ffb      	ldrb	r3, [r7, #31]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d105      	bne.n	8005264 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005258:	4ba3      	ldr	r3, [pc, #652]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	4aa2      	ldr	r2, [pc, #648]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 800525e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005262:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d03c      	beq.n	80052ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01c      	beq.n	80052b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005278:	4b9b      	ldr	r3, [pc, #620]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 800527a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800527e:	4a9a      	ldr	r2, [pc, #616]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005288:	f7fc fca6 	bl	8001bd8 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005290:	f7fc fca2 	bl	8001bd8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e130      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052a2:	4b91      	ldr	r3, [pc, #580]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80052a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0ef      	beq.n	8005290 <HAL_RCC_OscConfig+0x5cc>
 80052b0:	e01b      	b.n	80052ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052b2:	4b8d      	ldr	r3, [pc, #564]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80052b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052b8:	4a8b      	ldr	r2, [pc, #556]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80052ba:	f023 0301 	bic.w	r3, r3, #1
 80052be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c2:	f7fc fc89 	bl	8001bd8 <HAL_GetTick>
 80052c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052ca:	f7fc fc85 	bl	8001bd8 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e113      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052dc:	4b82      	ldr	r3, [pc, #520]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80052de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1ef      	bne.n	80052ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 8107 	beq.w	8005502 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	f040 80cb 	bne.w	8005494 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80052fe:	4b7a      	ldr	r3, [pc, #488]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f003 0203 	and.w	r2, r3, #3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	429a      	cmp	r2, r3
 8005310:	d12c      	bne.n	800536c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	3b01      	subs	r3, #1
 800531e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d123      	bne.n	800536c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d11b      	bne.n	800536c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d113      	bne.n	800536c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	3b01      	subs	r3, #1
 8005352:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d109      	bne.n	800536c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	3b01      	subs	r3, #1
 8005366:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d06d      	beq.n	8005448 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b0c      	cmp	r3, #12
 8005370:	d068      	beq.n	8005444 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005372:	4b5d      	ldr	r3, [pc, #372]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800537e:	4b5a      	ldr	r3, [pc, #360]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e0ba      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800538e:	4b56      	ldr	r3, [pc, #344]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a55      	ldr	r2, [pc, #340]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005398:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800539a:	f7fc fc1d 	bl	8001bd8 <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a2:	f7fc fc19 	bl	8001bd8 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0a7      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b4:	4b4c      	ldr	r3, [pc, #304]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f0      	bne.n	80053a2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c0:	4b49      	ldr	r3, [pc, #292]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	4b49      	ldr	r3, [pc, #292]	; (80054ec <HAL_RCC_OscConfig+0x828>)
 80053c6:	4013      	ands	r3, r2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053d0:	3a01      	subs	r2, #1
 80053d2:	0112      	lsls	r2, r2, #4
 80053d4:	4311      	orrs	r1, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053da:	0212      	lsls	r2, r2, #8
 80053dc:	4311      	orrs	r1, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053e2:	0852      	lsrs	r2, r2, #1
 80053e4:	3a01      	subs	r2, #1
 80053e6:	0552      	lsls	r2, r2, #21
 80053e8:	4311      	orrs	r1, r2
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053ee:	0852      	lsrs	r2, r2, #1
 80053f0:	3a01      	subs	r2, #1
 80053f2:	0652      	lsls	r2, r2, #25
 80053f4:	4311      	orrs	r1, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053fa:	06d2      	lsls	r2, r2, #27
 80053fc:	430a      	orrs	r2, r1
 80053fe:	493a      	ldr	r1, [pc, #232]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005400:	4313      	orrs	r3, r2
 8005402:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005404:	4b38      	ldr	r3, [pc, #224]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a37      	ldr	r2, [pc, #220]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 800540a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800540e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005410:	4b35      	ldr	r3, [pc, #212]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a34      	ldr	r2, [pc, #208]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800541a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800541c:	f7fc fbdc 	bl	8001bd8 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005424:	f7fc fbd8 	bl	8001bd8 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e066      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005436:	4b2c      	ldr	r3, [pc, #176]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005442:	e05e      	b.n	8005502 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e05d      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005448:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d156      	bne.n	8005502 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005454:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a23      	ldr	r2, [pc, #140]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 800545a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800545e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005460:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4a20      	ldr	r2, [pc, #128]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800546a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800546c:	f7fc fbb4 	bl	8001bd8 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005474:	f7fc fbb0 	bl	8001bd8 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e03e      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005486:	4b18      	ldr	r3, [pc, #96]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0x7b0>
 8005492:	e036      	b.n	8005502 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b0c      	cmp	r3, #12
 8005498:	d031      	beq.n	80054fe <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549a:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a12      	ldr	r2, [pc, #72]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80054a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80054a6:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d105      	bne.n	80054be <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80054b2:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	4a0c      	ldr	r2, [pc, #48]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80054b8:	f023 0303 	bic.w	r3, r3, #3
 80054bc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <HAL_RCC_OscConfig+0x824>)
 80054c4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80054c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fc fb83 	bl	8001bd8 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d4:	e00c      	b.n	80054f0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fc fb7f 	bl	8001bd8 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d905      	bls.n	80054f0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e00d      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
 80054e8:	40021000 	.word	0x40021000
 80054ec:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <HAL_RCC_OscConfig+0x848>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1ec      	bne.n	80054d6 <HAL_RCC_OscConfig+0x812>
 80054fc:	e001      	b.n	8005502 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40021000 	.word	0x40021000

08005510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e10f      	b.n	8005748 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005528:	4b89      	ldr	r3, [pc, #548]	; (8005750 <HAL_RCC_ClockConfig+0x240>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d910      	bls.n	8005558 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005536:	4b86      	ldr	r3, [pc, #536]	; (8005750 <HAL_RCC_ClockConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 020f 	bic.w	r2, r3, #15
 800553e:	4984      	ldr	r1, [pc, #528]	; (8005750 <HAL_RCC_ClockConfig+0x240>)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005546:	4b82      	ldr	r3, [pc, #520]	; (8005750 <HAL_RCC_ClockConfig+0x240>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0f7      	b.n	8005748 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8089 	beq.w	8005678 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d133      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800556e:	4b79      	ldr	r3, [pc, #484]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e0e4      	b.n	8005748 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800557e:	f000 fa41 	bl	8005a04 <RCC_GetSysClockFreqFromPLLSource>
 8005582:	4603      	mov	r3, r0
 8005584:	4a74      	ldr	r2, [pc, #464]	; (8005758 <HAL_RCC_ClockConfig+0x248>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d955      	bls.n	8005636 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800558a:	4b72      	ldr	r3, [pc, #456]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10a      	bne.n	80055ac <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005596:	4b6f      	ldr	r3, [pc, #444]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800559e:	4a6d      	ldr	r2, [pc, #436]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055a6:	2380      	movs	r3, #128	; 0x80
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	e044      	b.n	8005636 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d03e      	beq.n	8005636 <HAL_RCC_ClockConfig+0x126>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d13a      	bne.n	8005636 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055c0:	4b64      	ldr	r3, [pc, #400]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055c8:	4a62      	ldr	r2, [pc, #392]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	e02f      	b.n	8005636 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d107      	bne.n	80055ee <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055de:	4b5d      	ldr	r3, [pc, #372]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d115      	bne.n	8005616 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0ac      	b.n	8005748 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055f6:	4b57      	ldr	r3, [pc, #348]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e0a0      	b.n	8005748 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005606:	4b53      	ldr	r3, [pc, #332]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e098      	b.n	8005748 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005616:	f000 f8a7 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 800561a:	4603      	mov	r3, r0
 800561c:	4a4e      	ldr	r2, [pc, #312]	; (8005758 <HAL_RCC_ClockConfig+0x248>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d909      	bls.n	8005636 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005622:	4b4c      	ldr	r3, [pc, #304]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562a:	4a4a      	ldr	r2, [pc, #296]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 800562c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005630:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005632:	2380      	movs	r3, #128	; 0x80
 8005634:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005636:	4b47      	ldr	r3, [pc, #284]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f023 0203 	bic.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4944      	ldr	r1, [pc, #272]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005644:	4313      	orrs	r3, r2
 8005646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005648:	f7fc fac6 	bl	8001bd8 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	e00a      	b.n	8005666 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005650:	f7fc fac2 	bl	8001bd8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	; 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e070      	b.n	8005748 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005666:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 020c 	and.w	r2, r3, #12
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	429a      	cmp	r2, r3
 8005676:	d1eb      	bne.n	8005650 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005684:	4b33      	ldr	r3, [pc, #204]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4930      	ldr	r1, [pc, #192]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005692:	4313      	orrs	r3, r2
 8005694:	608b      	str	r3, [r1, #8]
 8005696:	e008      	b.n	80056aa <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d105      	bne.n	80056aa <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800569e:	4b2d      	ldr	r3, [pc, #180]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 80056a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056a8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056aa:	4b29      	ldr	r3, [pc, #164]	; (8005750 <HAL_RCC_ClockConfig+0x240>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d210      	bcs.n	80056da <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b8:	4b25      	ldr	r3, [pc, #148]	; (8005750 <HAL_RCC_ClockConfig+0x240>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f023 020f 	bic.w	r2, r3, #15
 80056c0:	4923      	ldr	r1, [pc, #140]	; (8005750 <HAL_RCC_ClockConfig+0x240>)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c8:	4b21      	ldr	r3, [pc, #132]	; (8005750 <HAL_RCC_ClockConfig+0x240>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d001      	beq.n	80056da <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e036      	b.n	8005748 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056e6:	4b1b      	ldr	r3, [pc, #108]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	4918      	ldr	r1, [pc, #96]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005704:	4b13      	ldr	r3, [pc, #76]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4910      	ldr	r1, [pc, #64]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005714:	4313      	orrs	r3, r2
 8005716:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005718:	f000 f826 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b0d      	ldr	r3, [pc, #52]	; (8005754 <HAL_RCC_ClockConfig+0x244>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	091b      	lsrs	r3, r3, #4
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	490c      	ldr	r1, [pc, #48]	; (800575c <HAL_RCC_ClockConfig+0x24c>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
 8005734:	4a0a      	ldr	r2, [pc, #40]	; (8005760 <HAL_RCC_ClockConfig+0x250>)
 8005736:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005738:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <HAL_RCC_ClockConfig+0x254>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f7fc f91b 	bl	8001978 <HAL_InitTick>
 8005742:	4603      	mov	r3, r0
 8005744:	73fb      	strb	r3, [r7, #15]

  return status;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40022000 	.word	0x40022000
 8005754:	40021000 	.word	0x40021000
 8005758:	04c4b400 	.word	0x04c4b400
 800575c:	08013088 	.word	0x08013088
 8005760:	20000000 	.word	0x20000000
 8005764:	20000004 	.word	0x20000004

08005768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005768:	b480      	push	{r7}
 800576a:	b089      	sub	sp, #36	; 0x24
 800576c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005776:	4b3e      	ldr	r3, [pc, #248]	; (8005870 <HAL_RCC_GetSysClockFreq+0x108>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005780:	4b3b      	ldr	r3, [pc, #236]	; (8005870 <HAL_RCC_GetSysClockFreq+0x108>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0x34>
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b0c      	cmp	r3, #12
 8005794:	d121      	bne.n	80057da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d11e      	bne.n	80057da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800579c:	4b34      	ldr	r3, [pc, #208]	; (8005870 <HAL_RCC_GetSysClockFreq+0x108>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057a8:	4b31      	ldr	r3, [pc, #196]	; (8005870 <HAL_RCC_GetSysClockFreq+0x108>)
 80057aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	e005      	b.n	80057c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057b8:	4b2d      	ldr	r3, [pc, #180]	; (8005870 <HAL_RCC_GetSysClockFreq+0x108>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80057c4:	4a2b      	ldr	r2, [pc, #172]	; (8005874 <HAL_RCC_GetSysClockFreq+0x10c>)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10d      	bne.n	80057f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057d8:	e00a      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d102      	bne.n	80057e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057e0:	4b25      	ldr	r3, [pc, #148]	; (8005878 <HAL_RCC_GetSysClockFreq+0x110>)
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e004      	b.n	80057f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057ec:	4b22      	ldr	r3, [pc, #136]	; (8005878 <HAL_RCC_GetSysClockFreq+0x110>)
 80057ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	2b0c      	cmp	r3, #12
 80057f4:	d134      	bne.n	8005860 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057f6:	4b1e      	ldr	r3, [pc, #120]	; (8005870 <HAL_RCC_GetSysClockFreq+0x108>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d003      	beq.n	800580e <HAL_RCC_GetSysClockFreq+0xa6>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b03      	cmp	r3, #3
 800580a:	d003      	beq.n	8005814 <HAL_RCC_GetSysClockFreq+0xac>
 800580c:	e005      	b.n	800581a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800580e:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <HAL_RCC_GetSysClockFreq+0x110>)
 8005810:	617b      	str	r3, [r7, #20]
      break;
 8005812:	e005      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <HAL_RCC_GetSysClockFreq+0x110>)
 8005816:	617b      	str	r3, [r7, #20]
      break;
 8005818:	e002      	b.n	8005820 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	617b      	str	r3, [r7, #20]
      break;
 800581e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005820:	4b13      	ldr	r3, [pc, #76]	; (8005870 <HAL_RCC_GetSysClockFreq+0x108>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	091b      	lsrs	r3, r3, #4
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	3301      	adds	r3, #1
 800582c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800582e:	4b10      	ldr	r3, [pc, #64]	; (8005870 <HAL_RCC_GetSysClockFreq+0x108>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	0a1b      	lsrs	r3, r3, #8
 8005834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	fb02 f203 	mul.w	r2, r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	fbb2 f3f3 	udiv	r3, r2, r3
 8005844:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005846:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <HAL_RCC_GetSysClockFreq+0x108>)
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	0e5b      	lsrs	r3, r3, #25
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	3301      	adds	r3, #1
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005860:	69bb      	ldr	r3, [r7, #24]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3724      	adds	r7, #36	; 0x24
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000
 8005874:	080130a0 	.word	0x080130a0
 8005878:	00f42400 	.word	0x00f42400

0800587c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <HAL_RCC_GetHCLKFreq+0x14>)
 8005882:	681b      	ldr	r3, [r3, #0]
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20000000 	.word	0x20000000

08005894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005898:	f7ff fff0 	bl	800587c <HAL_RCC_GetHCLKFreq>
 800589c:	4602      	mov	r2, r0
 800589e:	4b06      	ldr	r3, [pc, #24]	; (80058b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	0a1b      	lsrs	r3, r3, #8
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	4904      	ldr	r1, [pc, #16]	; (80058bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80058aa:	5ccb      	ldrb	r3, [r1, r3]
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40021000 	.word	0x40021000
 80058bc:	08013098 	.word	0x08013098

080058c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058c4:	f7ff ffda 	bl	800587c <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0adb      	lsrs	r3, r3, #11
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4904      	ldr	r1, [pc, #16]	; (80058e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40021000 	.word	0x40021000
 80058e8:	08013098 	.word	0x08013098

080058ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	220f      	movs	r2, #15
 80058fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HAL_RCC_GetClockConfig+0x5c>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f003 0203 	and.w	r2, r3, #3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <HAL_RCC_GetClockConfig+0x5c>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <HAL_RCC_GetClockConfig+0x5c>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005920:	4b09      	ldr	r3, [pc, #36]	; (8005948 <HAL_RCC_GetClockConfig+0x5c>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	08db      	lsrs	r3, r3, #3
 8005926:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <HAL_RCC_GetClockConfig+0x60>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 020f 	and.w	r2, r3, #15
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	601a      	str	r2, [r3, #0]
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	40021000 	.word	0x40021000
 800594c:	40022000 	.word	0x40022000

08005950 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005958:	2300      	movs	r3, #0
 800595a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800595e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005968:	f7ff f8c8 	bl	8004afc <HAL_PWREx_GetVoltageRange>
 800596c:	6178      	str	r0, [r7, #20]
 800596e:	e014      	b.n	800599a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005970:	4b22      	ldr	r3, [pc, #136]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005974:	4a21      	ldr	r2, [pc, #132]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597a:	6593      	str	r3, [r2, #88]	; 0x58
 800597c:	4b1f      	ldr	r3, [pc, #124]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800597e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005988:	f7ff f8b8 	bl	8004afc <HAL_PWREx_GetVoltageRange>
 800598c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800598e:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	4a1a      	ldr	r2, [pc, #104]	; (80059fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005998:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a0:	d10b      	bne.n	80059ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b80      	cmp	r3, #128	; 0x80
 80059a6:	d913      	bls.n	80059d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2ba0      	cmp	r3, #160	; 0xa0
 80059ac:	d902      	bls.n	80059b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059ae:	2302      	movs	r3, #2
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	e00d      	b.n	80059d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059b4:	2301      	movs	r3, #1
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	e00a      	b.n	80059d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b7f      	cmp	r3, #127	; 0x7f
 80059be:	d902      	bls.n	80059c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80059c0:	2302      	movs	r3, #2
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	e004      	b.n	80059d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b70      	cmp	r3, #112	; 0x70
 80059ca:	d101      	bne.n	80059d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059cc:	2301      	movs	r3, #1
 80059ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f023 020f 	bic.w	r2, r3, #15
 80059d8:	4909      	ldr	r1, [pc, #36]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 030f 	and.w	r3, r3, #15
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d001      	beq.n	80059f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40021000 	.word	0x40021000
 8005a00:	40022000 	.word	0x40022000

08005a04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005a0e:	4b2d      	ldr	r3, [pc, #180]	; (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d118      	bne.n	8005a4c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a1a:	4b2a      	ldr	r3, [pc, #168]	; (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d107      	bne.n	8005a36 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a26:	4b27      	ldr	r3, [pc, #156]	; (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a2c:	0a1b      	lsrs	r3, r3, #8
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	e005      	b.n	8005a42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a36:	4b23      	ldr	r3, [pc, #140]	; (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	091b      	lsrs	r3, r3, #4
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a42:	4a21      	ldr	r2, [pc, #132]	; (8005ac8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a4a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d003      	beq.n	8005a64 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d003      	beq.n	8005a6a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8005a62:	e005      	b.n	8005a70 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005a66:	613b      	str	r3, [r7, #16]
    break;
 8005a68:	e005      	b.n	8005a76 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005a6a:	4b18      	ldr	r3, [pc, #96]	; (8005acc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005a6c:	613b      	str	r3, [r7, #16]
    break;
 8005a6e:	e002      	b.n	8005a76 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	613b      	str	r3, [r7, #16]
    break;
 8005a74:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a76:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	091b      	lsrs	r3, r3, #4
 8005a7c:	f003 030f 	and.w	r3, r3, #15
 8005a80:	3301      	adds	r3, #1
 8005a82:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a84:	4b0f      	ldr	r3, [pc, #60]	; (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	fb02 f203 	mul.w	r2, r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a9a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a9c:	4b09      	ldr	r3, [pc, #36]	; (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	0e5b      	lsrs	r3, r3, #25
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005ab6:	683b      	ldr	r3, [r7, #0]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	080130a0 	.word	0x080130a0
 8005acc:	00f42400 	.word	0x00f42400

08005ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ad8:	2300      	movs	r3, #0
 8005ada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005adc:	2300      	movs	r3, #0
 8005ade:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d040      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005af0:	2b80      	cmp	r3, #128	; 0x80
 8005af2:	d02a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005af4:	2b80      	cmp	r3, #128	; 0x80
 8005af6:	d825      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005af8:	2b60      	cmp	r3, #96	; 0x60
 8005afa:	d026      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005afc:	2b60      	cmp	r3, #96	; 0x60
 8005afe:	d821      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d006      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d81d      	bhi.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d009      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d010      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005b10:	e018      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b12:	4b89      	ldr	r3, [pc, #548]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	4a88      	ldr	r2, [pc, #544]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b1e:	e015      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3304      	adds	r3, #4
 8005b24:	2100      	movs	r1, #0
 8005b26:	4618      	mov	r0, r3
 8005b28:	f001 fa7e 	bl	8007028 <RCCEx_PLLSAI1_Config>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b30:	e00c      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	3320      	adds	r3, #32
 8005b36:	2100      	movs	r1, #0
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 fb69 	bl	8007210 <RCCEx_PLLSAI2_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b42:	e003      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	74fb      	strb	r3, [r7, #19]
      break;
 8005b48:	e000      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b4c:	7cfb      	ldrb	r3, [r7, #19]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10b      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b52:	4b79      	ldr	r3, [pc, #484]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b58:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b60:	4975      	ldr	r1, [pc, #468]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005b68:	e001      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6a:	7cfb      	ldrb	r3, [r7, #19]
 8005b6c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d047      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b82:	d030      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b88:	d82a      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b8e:	d02a      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b94:	d824      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9a:	d008      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba0:	d81e      	bhi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005baa:	d010      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005bac:	e018      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bae:	4b62      	ldr	r3, [pc, #392]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	4a61      	ldr	r2, [pc, #388]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bba:	e015      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 fa30 	bl	8007028 <RCCEx_PLLSAI1_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bcc:	e00c      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3320      	adds	r3, #32
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fb1b 	bl	8007210 <RCCEx_PLLSAI2_Config>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bde:	e003      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	74fb      	strb	r3, [r7, #19]
      break;
 8005be4:	e000      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be8:	7cfb      	ldrb	r3, [r7, #19]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10b      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bee:	4b52      	ldr	r3, [pc, #328]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	494e      	ldr	r1, [pc, #312]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005c04:	e001      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c06:	7cfb      	ldrb	r3, [r7, #19]
 8005c08:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 809f 	beq.w	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c1c:	4b46      	ldr	r3, [pc, #280]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c32:	4b41      	ldr	r3, [pc, #260]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	4a40      	ldr	r2, [pc, #256]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8005c3e:	4b3e      	ldr	r3, [pc, #248]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c46:	60bb      	str	r3, [r7, #8]
 8005c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c4e:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a3a      	ldr	r2, [pc, #232]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c5a:	f7fb ffbd 	bl	8001bd8 <HAL_GetTick>
 8005c5e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c60:	e009      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c62:	f7fb ffb9 	bl	8001bd8 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d902      	bls.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	74fb      	strb	r3, [r7, #19]
        break;
 8005c74:	e005      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c76:	4b31      	ldr	r3, [pc, #196]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0ef      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005c82:	7cfb      	ldrb	r3, [r7, #19]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d15b      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c88:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c92:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d01f      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d019      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ca6:	4b24      	ldr	r3, [pc, #144]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cb2:	4b21      	ldr	r3, [pc, #132]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cc2:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cd2:	4a19      	ldr	r2, [pc, #100]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d016      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fb ff78 	bl	8001bd8 <HAL_GetTick>
 8005ce8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cea:	e00b      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cec:	f7fb ff74 	bl	8001bd8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d902      	bls.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	74fb      	strb	r3, [r7, #19]
            break;
 8005d02:	e006      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d04:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0ec      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005d12:	7cfb      	ldrb	r3, [r7, #19]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10c      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d28:	4903      	ldr	r1, [pc, #12]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d30:	e008      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d32:	7cfb      	ldrb	r3, [r7, #19]
 8005d34:	74bb      	strb	r3, [r7, #18]
 8005d36:	e005      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d40:	7cfb      	ldrb	r3, [r7, #19]
 8005d42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d44:	7c7b      	ldrb	r3, [r7, #17]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d105      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d4a:	4ba0      	ldr	r3, [pc, #640]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	4a9f      	ldr	r2, [pc, #636]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d62:	4b9a      	ldr	r3, [pc, #616]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	f023 0203 	bic.w	r2, r3, #3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d70:	4996      	ldr	r1, [pc, #600]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d84:	4b91      	ldr	r3, [pc, #580]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	f023 020c 	bic.w	r2, r3, #12
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	498e      	ldr	r1, [pc, #568]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005da6:	4b89      	ldr	r3, [pc, #548]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db4:	4985      	ldr	r1, [pc, #532]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dc8:	4b80      	ldr	r3, [pc, #512]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd6:	497d      	ldr	r1, [pc, #500]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dea:	4b78      	ldr	r3, [pc, #480]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df8:	4974      	ldr	r1, [pc, #464]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00a      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e0c:	4b6f      	ldr	r3, [pc, #444]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1a:	496c      	ldr	r1, [pc, #432]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e2e:	4b67      	ldr	r3, [pc, #412]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e3c:	4963      	ldr	r1, [pc, #396]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e50:	4b5e      	ldr	r3, [pc, #376]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e5e:	495b      	ldr	r1, [pc, #364]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00a      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e72:	4b56      	ldr	r3, [pc, #344]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e80:	4952      	ldr	r1, [pc, #328]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00a      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e94:	4b4d      	ldr	r3, [pc, #308]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea2:	494a      	ldr	r1, [pc, #296]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005eb6:	4b45      	ldr	r3, [pc, #276]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec4:	4941      	ldr	r1, [pc, #260]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ed8:	4b3c      	ldr	r3, [pc, #240]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ede:	f023 0203 	bic.w	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee6:	4939      	ldr	r1, [pc, #228]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d028      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005efa:	4b34      	ldr	r3, [pc, #208]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f08:	4930      	ldr	r1, [pc, #192]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f18:	d106      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f1a:	4b2c      	ldr	r3, [pc, #176]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	4a2b      	ldr	r2, [pc, #172]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f24:	60d3      	str	r3, [r2, #12]
 8005f26:	e011      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3304      	adds	r3, #4
 8005f36:	2101      	movs	r1, #1
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f001 f875 	bl	8007028 <RCCEx_PLLSAI1_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005f42:	7cfb      	ldrb	r3, [r7, #19]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005f48:	7cfb      	ldrb	r3, [r7, #19]
 8005f4a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d04d      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f60:	d108      	bne.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f68:	4a18      	ldr	r2, [pc, #96]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f6e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005f72:	e012      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005f74:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f7a:	4a14      	ldr	r2, [pc, #80]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f80:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f92:	490e      	ldr	r1, [pc, #56]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa2:	d106      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa4:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4a08      	ldr	r2, [pc, #32]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fae:	60d3      	str	r3, [r2, #12]
 8005fb0:	e020      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fba:	d109      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fbc:	4b03      	ldr	r3, [pc, #12]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	4a02      	ldr	r2, [pc, #8]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc6:	60d3      	str	r3, [r2, #12]
 8005fc8:	e014      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005fca:	bf00      	nop
 8005fcc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 f821 	bl	8007028 <RCCEx_PLLSAI1_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fea:	7cfb      	ldrb	r3, [r7, #19]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d028      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006000:	4b7a      	ldr	r3, [pc, #488]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006006:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600e:	4977      	ldr	r1, [pc, #476]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800601a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800601e:	d106      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006020:	4b72      	ldr	r3, [pc, #456]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	4a71      	ldr	r2, [pc, #452]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800602a:	60d3      	str	r3, [r2, #12]
 800602c:	e011      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006032:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006036:	d10c      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3304      	adds	r3, #4
 800603c:	2101      	movs	r1, #1
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fff2 	bl	8007028 <RCCEx_PLLSAI1_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006048:	7cfb      	ldrb	r3, [r7, #19]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800604e:	7cfb      	ldrb	r3, [r7, #19]
 8006050:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01e      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800605e:	4b63      	ldr	r3, [pc, #396]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006064:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800606e:	495f      	ldr	r1, [pc, #380]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800607c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006080:	d10c      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3304      	adds	r3, #4
 8006086:	2102      	movs	r1, #2
 8006088:	4618      	mov	r0, r3
 800608a:	f000 ffcd 	bl	8007028 <RCCEx_PLLSAI1_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006092:	7cfb      	ldrb	r3, [r7, #19]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006098:	7cfb      	ldrb	r3, [r7, #19]
 800609a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80060a8:	4b50      	ldr	r3, [pc, #320]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ae:	f023 0204 	bic.w	r2, r3, #4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060b8:	494c      	ldr	r1, [pc, #304]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80060cc:	4b47      	ldr	r3, [pc, #284]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060d2:	f023 0218 	bic.w	r2, r3, #24
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	4943      	ldr	r1, [pc, #268]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d035      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060f0:	4b3e      	ldr	r3, [pc, #248]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a3d      	ldr	r2, [pc, #244]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80060f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060fc:	f7fb fd6c 	bl	8001bd8 <HAL_GetTick>
 8006100:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006102:	e009      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006104:	f7fb fd68 	bl	8001bd8 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d902      	bls.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	74fb      	strb	r3, [r7, #19]
        break;
 8006116:	e005      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006118:	4b34      	ldr	r3, [pc, #208]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1ef      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8006124:	7cfb      	ldrb	r3, [r7, #19]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d113      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800612a:	4b30      	ldr	r3, [pc, #192]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800612c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800613a:	492c      	ldr	r1, [pc, #176]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800613c:	4313      	orrs	r3, r2
 800613e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3320      	adds	r3, #32
 8006146:	2102      	movs	r1, #2
 8006148:	4618      	mov	r0, r3
 800614a:	f001 f861 	bl	8007210 <RCCEx_PLLSAI2_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006152:	7cfb      	ldrb	r3, [r7, #19]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8006158:	7cfb      	ldrb	r3, [r7, #19]
 800615a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01e      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006168:	4b20      	ldr	r3, [pc, #128]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800616a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800616e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006178:	491c      	ldr	r1, [pc, #112]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618a:	d10c      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3320      	adds	r3, #32
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f001 f83c 	bl	8007210 <RCCEx_PLLSAI2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800619c:	7cfb      	ldrb	r3, [r7, #19]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80061a2:	7cfb      	ldrb	r3, [r7, #19]
 80061a4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d017      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80061b2:	4b0e      	ldr	r3, [pc, #56]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061c2:	490a      	ldr	r1, [pc, #40]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d4:	d105      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	4a04      	ldr	r2, [pc, #16]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80061dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061e0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80061e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40021000 	.word	0x40021000

080061f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006202:	d13e      	bne.n	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006204:	4bbd      	ldr	r3, [pc, #756]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620e:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006216:	d028      	beq.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800621e:	f200 86ec 	bhi.w	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006228:	d005      	beq.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006230:	d00e      	beq.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8006232:	f000 bee2 	b.w	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006236:	4bb1      	ldr	r3, [pc, #708]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8006238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b02      	cmp	r3, #2
 8006242:	f040 86e3 	bne.w	800700c <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
        frequency = LSE_VALUE;
 8006246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800624a:	61fb      	str	r3, [r7, #28]
      break;
 800624c:	f000 bede 	b.w	800700c <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006250:	4baa      	ldr	r3, [pc, #680]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8006252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b02      	cmp	r3, #2
 800625c:	f040 86d8 	bne.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
          frequency = LSI_VALUE;
 8006260:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006264:	61fb      	str	r3, [r7, #28]
      break;
 8006266:	f000 bed3 	b.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800626a:	4ba4      	ldr	r3, [pc, #656]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006276:	f040 86cd 	bne.w	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
        frequency = HSE_VALUE / 32U;
 800627a:	4ba1      	ldr	r3, [pc, #644]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800627c:	61fb      	str	r3, [r7, #28]
      break;
 800627e:	f000 bec9 	b.w	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006282:	4b9e      	ldr	r3, [pc, #632]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b03      	cmp	r3, #3
 8006290:	d036      	beq.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	2b03      	cmp	r3, #3
 8006296:	d840      	bhi.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d003      	beq.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d020      	beq.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80062a4:	e039      	b.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80062a6:	4b95      	ldr	r3, [pc, #596]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d116      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80062b2:	4b92      	ldr	r3, [pc, #584]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80062be:	4b8f      	ldr	r3, [pc, #572]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	091b      	lsrs	r3, r3, #4
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	e005      	b.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80062ca:	4b8c      	ldr	r3, [pc, #560]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80062cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062d0:	0a1b      	lsrs	r3, r3, #8
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	4a8b      	ldr	r2, [pc, #556]	; (8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 80062d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80062de:	e01f      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61bb      	str	r3, [r7, #24]
      break;
 80062e4:	e01c      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062e6:	4b85      	ldr	r3, [pc, #532]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f2:	d102      	bne.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80062f4:	4b84      	ldr	r3, [pc, #528]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 80062f6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80062f8:	e012      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61bb      	str	r3, [r7, #24]
      break;
 80062fe:	e00f      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006300:	4b7e      	ldr	r3, [pc, #504]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800630c:	d102      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800630e:	4b7e      	ldr	r3, [pc, #504]	; (8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8006310:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006312:	e005      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	61bb      	str	r3, [r7, #24]
      break;
 8006318:	e002      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	61bb      	str	r3, [r7, #24]
      break;
 800631e:	bf00      	nop
    }

    switch(PeriphClk)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006326:	f000 85fe 	beq.w	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006330:	f200 8672 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800633a:	f000 8466 	beq.w	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006344:	f200 8668 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800634e:	f000 852d 	beq.w	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006358:	f200 865e 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006362:	f000 8183 	beq.w	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800636c:	f200 8654 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006376:	f000 80c9 	beq.w	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006380:	f200 864a 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638a:	f000 842d 	beq.w	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006394:	f200 8640 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800639e:	f000 83e1 	beq.w	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063a8:	f200 8636 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b2:	f000 80ab 	beq.w	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063bc:	f200 862c 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c6:	f000 8091 	beq.w	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d0:	f200 8622 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063da:	d07f      	beq.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063e2:	f200 8619 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ec:	f000 8551 	beq.w	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063f6:	f200 860f 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006400:	f000 84fd 	beq.w	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800640a:	f200 8605 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006414:	f000 849e 	beq.w	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800641e:	f200 85fb 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	f000 8463 	beq.w	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b80      	cmp	r3, #128	; 0x80
 800642e:	f200 85f3 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b20      	cmp	r3, #32
 8006436:	d84b      	bhi.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 85ec 	beq.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3b01      	subs	r3, #1
 8006444:	2b1f      	cmp	r3, #31
 8006446:	f200 85e7 	bhi.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 800644a:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	0800685f 	.word	0x0800685f
 8006454:	080068cf 	.word	0x080068cf
 8006458:	08007019 	.word	0x08007019
 800645c:	08006963 	.word	0x08006963
 8006460:	08007019 	.word	0x08007019
 8006464:	08007019 	.word	0x08007019
 8006468:	08007019 	.word	0x08007019
 800646c:	080069db 	.word	0x080069db
 8006470:	08007019 	.word	0x08007019
 8006474:	08007019 	.word	0x08007019
 8006478:	08007019 	.word	0x08007019
 800647c:	08007019 	.word	0x08007019
 8006480:	08007019 	.word	0x08007019
 8006484:	08007019 	.word	0x08007019
 8006488:	08007019 	.word	0x08007019
 800648c:	08006a53 	.word	0x08006a53
 8006490:	08007019 	.word	0x08007019
 8006494:	08007019 	.word	0x08007019
 8006498:	08007019 	.word	0x08007019
 800649c:	08007019 	.word	0x08007019
 80064a0:	08007019 	.word	0x08007019
 80064a4:	08007019 	.word	0x08007019
 80064a8:	08007019 	.word	0x08007019
 80064ac:	08007019 	.word	0x08007019
 80064b0:	08007019 	.word	0x08007019
 80064b4:	08007019 	.word	0x08007019
 80064b8:	08007019 	.word	0x08007019
 80064bc:	08007019 	.word	0x08007019
 80064c0:	08007019 	.word	0x08007019
 80064c4:	08007019 	.word	0x08007019
 80064c8:	08007019 	.word	0x08007019
 80064cc:	08006ae3 	.word	0x08006ae3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	f000 83e0 	beq.w	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80064d8:	f000 bd9e 	b.w	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80064dc:	69b9      	ldr	r1, [r7, #24]
 80064de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80064e2:	f000 ff89 	bl	80073f8 <RCCEx_GetSAIxPeriphCLKFreq>
 80064e6:	61f8      	str	r0, [r7, #28]
      break;
 80064e8:	f000 bd99 	b.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80064ec:	69b9      	ldr	r1, [r7, #24]
 80064ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80064f2:	f000 ff81 	bl	80073f8 <RCCEx_GetSAIxPeriphCLKFreq>
 80064f6:	61f8      	str	r0, [r7, #28]
      break;
 80064f8:	f000 bd91 	b.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 80064fc:	40021000 	.word	0x40021000
 8006500:	0007a120 	.word	0x0007a120
 8006504:	080130a0 	.word	0x080130a0
 8006508:	00f42400 	.word	0x00f42400
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800650c:	4bb0      	ldr	r3, [pc, #704]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006512:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800651e:	d015      	beq.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006526:	f200 8092 	bhi.w	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006530:	d029      	beq.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006538:	f200 8089 	bhi.w	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d07b      	beq.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006548:	d04a      	beq.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
          break;
 800654a:	e080      	b.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800654c:	4ba0      	ldr	r3, [pc, #640]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b02      	cmp	r3, #2
 8006556:	d17d      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006558:	4b9d      	ldr	r3, [pc, #628]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8006564:	4b9a      	ldr	r3, [pc, #616]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	e005      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 8006570:	4b97      	ldr	r3, [pc, #604]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006576:	0a1b      	lsrs	r3, r3, #8
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	4a95      	ldr	r2, [pc, #596]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800657e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006582:	61fb      	str	r3, [r7, #28]
          break;
 8006584:	e066      	b.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006586:	4b92      	ldr	r3, [pc, #584]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006592:	d162      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006594:	4b8e      	ldr	r3, [pc, #568]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800659c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a0:	d15b      	bne.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80065a2:	4b8b      	ldr	r3, [pc, #556]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	0a1b      	lsrs	r3, r3, #8
 80065a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ac:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	fb02 f203 	mul.w	r2, r2, r3
 80065b6:	4b86      	ldr	r3, [pc, #536]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	091b      	lsrs	r3, r3, #4
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	3301      	adds	r3, #1
 80065c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80065c8:	4b81      	ldr	r3, [pc, #516]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	0d5b      	lsrs	r3, r3, #21
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	3301      	adds	r3, #1
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065dc:	61fb      	str	r3, [r7, #28]
          break;
 80065de:	e03c      	b.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80065e0:	4b7b      	ldr	r3, [pc, #492]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ec:	d138      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80065ee:	4b78      	ldr	r3, [pc, #480]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065fa:	d131      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80065fc:	4b74      	ldr	r3, [pc, #464]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	0a1b      	lsrs	r3, r3, #8
 8006602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006606:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	fb02 f203 	mul.w	r2, r2, r3
 8006610:	4b6f      	ldr	r3, [pc, #444]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	091b      	lsrs	r3, r3, #4
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	3301      	adds	r3, #1
 800661c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006620:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006622:	4b6b      	ldr	r3, [pc, #428]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	0d5b      	lsrs	r3, r3, #21
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	3301      	adds	r3, #1
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	fbb2 f3f3 	udiv	r3, r2, r3
 8006636:	61fb      	str	r3, [r7, #28]
          break;
 8006638:	e012      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800663a:	4b65      	ldr	r3, [pc, #404]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800663c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b02      	cmp	r3, #2
 8006646:	d10e      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
            frequency = HSI48_VALUE;
 8006648:	4b63      	ldr	r3, [pc, #396]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800664a:	61fb      	str	r3, [r7, #28]
          break;
 800664c:	e00b      	b.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
          break;
 800664e:	bf00      	nop
 8006650:	f000 bce5 	b.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006654:	bf00      	nop
 8006656:	f000 bce2 	b.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800665a:	bf00      	nop
 800665c:	f000 bcdf 	b.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006660:	bf00      	nop
 8006662:	f000 bcdc 	b.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006666:	bf00      	nop
        break;
 8006668:	f000 bcd9 	b.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800666c:	4b58      	ldr	r3, [pc, #352]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800666e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800667a:	d13d      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800667c:	4b54      	ldr	r3, [pc, #336]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006688:	f040 84c8 	bne.w	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800668c:	4b50      	ldr	r3, [pc, #320]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006698:	f040 84c0 	bne.w	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800669c:	4b4c      	ldr	r3, [pc, #304]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	0a1b      	lsrs	r3, r3, #8
 80066a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066a6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	fb02 f203 	mul.w	r2, r2, r3
 80066b0:	4b47      	ldr	r3, [pc, #284]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	091b      	lsrs	r3, r3, #4
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	3301      	adds	r3, #1
 80066bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c0:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80066c2:	4b43      	ldr	r3, [pc, #268]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	0edb      	lsrs	r3, r3, #27
 80066c8:	f003 031f 	and.w	r3, r3, #31
 80066cc:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80066d4:	4b3e      	ldr	r3, [pc, #248]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
                pllp = 17U;
 80066e0:	2311      	movs	r3, #17
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	e001      	b.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 7U;
 80066e6:	2307      	movs	r3, #7
 80066e8:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f2:	61fb      	str	r3, [r7, #28]
      break;
 80066f4:	f000 bc92 	b.w	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80066f8:	4b35      	ldr	r3, [pc, #212]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80066fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800670a:	d016      	beq.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006712:	f200 809a 	bhi.w	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800671c:	d02b      	beq.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006724:	f200 8091 	bhi.w	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 8083 	beq.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006736:	d051      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 8006738:	e087      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800673a:	4b25      	ldr	r3, [pc, #148]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b02      	cmp	r3, #2
 8006744:	f040 8083 	bne.w	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006748:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
 8006754:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	091b      	lsrs	r3, r3, #4
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	e005      	b.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8006760:	4b1b      	ldr	r3, [pc, #108]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	4a19      	ldr	r2, [pc, #100]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 800676e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006772:	61fb      	str	r3, [r7, #28]
          break;
 8006774:	e06b      	b.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006776:	4b16      	ldr	r3, [pc, #88]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800677e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006782:	d166      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006784:	4b12      	ldr	r3, [pc, #72]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800678c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006790:	d15f      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006792:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800679c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	fb02 f203 	mul.w	r2, r2, r3
 80067a6:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	091b      	lsrs	r3, r3, #4
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	3301      	adds	r3, #1
 80067b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	0d5b      	lsrs	r3, r3, #21
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	3301      	adds	r3, #1
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	61fb      	str	r3, [r7, #28]
          break;
 80067ce:	e040      	b.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80067d0:	40021000 	.word	0x40021000
 80067d4:	080130a0 	.word	0x080130a0
 80067d8:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80067dc:	4bae      	ldr	r3, [pc, #696]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067e8:	d135      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80067ea:	4bab      	ldr	r3, [pc, #684]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f6:	d12e      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80067f8:	4ba7      	ldr	r3, [pc, #668]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	0a1b      	lsrs	r3, r3, #8
 80067fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006802:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	fb02 f203 	mul.w	r2, r2, r3
 800680c:	4ba2      	ldr	r3, [pc, #648]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	3301      	adds	r3, #1
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800681e:	4b9e      	ldr	r3, [pc, #632]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	0d5b      	lsrs	r3, r3, #21
 8006824:	f003 0303 	and.w	r3, r3, #3
 8006828:	3301      	adds	r3, #1
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006832:	61fb      	str	r3, [r7, #28]
          break;
 8006834:	e00f      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006836:	4b98      	ldr	r3, [pc, #608]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b02      	cmp	r3, #2
 8006842:	d10a      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
            frequency = HSI48_VALUE;
 8006844:	4b95      	ldr	r3, [pc, #596]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8006846:	61fb      	str	r3, [r7, #28]
          break;
 8006848:	e007      	b.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
          break;
 800684a:	bf00      	nop
 800684c:	e3e6      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800684e:	bf00      	nop
 8006850:	e3e4      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006852:	bf00      	nop
 8006854:	e3e2      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006856:	bf00      	nop
 8006858:	e3e0      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800685a:	bf00      	nop
      break;
 800685c:	e3de      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800685e:	4b8e      	ldr	r3, [pc, #568]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	60fb      	str	r3, [r7, #12]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d828      	bhi.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006870:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006876:	bf00      	nop
 8006878:	08006889 	.word	0x08006889
 800687c:	08006891 	.word	0x08006891
 8006880:	08006899 	.word	0x08006899
 8006884:	080068ad 	.word	0x080068ad
          frequency = HAL_RCC_GetPCLK2Freq();
 8006888:	f7ff f81a 	bl	80058c0 <HAL_RCC_GetPCLK2Freq>
 800688c:	61f8      	str	r0, [r7, #28]
          break;
 800688e:	e01d      	b.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8006890:	f7fe ff6a 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006894:	61f8      	str	r0, [r7, #28]
          break;
 8006896:	e019      	b.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006898:	4b7f      	ldr	r3, [pc, #508]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068a4:	d10f      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
            frequency = HSI_VALUE;
 80068a6:	4b7e      	ldr	r3, [pc, #504]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80068a8:	61fb      	str	r3, [r7, #28]
          break;
 80068aa:	e00c      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068ac:	4b7a      	ldr	r3, [pc, #488]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d107      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = LSE_VALUE;
 80068ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068be:	61fb      	str	r3, [r7, #28]
          break;
 80068c0:	e003      	b.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          break;
 80068c2:	bf00      	nop
 80068c4:	e3ab      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80068c6:	bf00      	nop
 80068c8:	e3a9      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80068ca:	bf00      	nop
        break;
 80068cc:	e3a7      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80068ce:	4b72      	ldr	r3, [pc, #456]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80068d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d4:	f003 030c 	and.w	r3, r3, #12
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b0c      	cmp	r3, #12
 80068de:	d83a      	bhi.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 80068e0:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 80068e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e6:	bf00      	nop
 80068e8:	0800691d 	.word	0x0800691d
 80068ec:	08006957 	.word	0x08006957
 80068f0:	08006957 	.word	0x08006957
 80068f4:	08006957 	.word	0x08006957
 80068f8:	08006925 	.word	0x08006925
 80068fc:	08006957 	.word	0x08006957
 8006900:	08006957 	.word	0x08006957
 8006904:	08006957 	.word	0x08006957
 8006908:	0800692d 	.word	0x0800692d
 800690c:	08006957 	.word	0x08006957
 8006910:	08006957 	.word	0x08006957
 8006914:	08006957 	.word	0x08006957
 8006918:	08006941 	.word	0x08006941
          frequency = HAL_RCC_GetPCLK1Freq();
 800691c:	f7fe ffba 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006920:	61f8      	str	r0, [r7, #28]
          break;
 8006922:	e01d      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          frequency = HAL_RCC_GetSysClockFreq();
 8006924:	f7fe ff20 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006928:	61f8      	str	r0, [r7, #28]
          break;
 800692a:	e019      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800692c:	4b5a      	ldr	r3, [pc, #360]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006938:	d10f      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
            frequency = HSI_VALUE;
 800693a:	4b59      	ldr	r3, [pc, #356]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 800693c:	61fb      	str	r3, [r7, #28]
          break;
 800693e:	e00c      	b.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006940:	4b55      	ldr	r3, [pc, #340]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b02      	cmp	r3, #2
 800694c:	d107      	bne.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = LSE_VALUE;
 800694e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006952:	61fb      	str	r3, [r7, #28]
          break;
 8006954:	e003      	b.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          break;
 8006956:	bf00      	nop
 8006958:	e361      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800695a:	bf00      	nop
 800695c:	e35f      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800695e:	bf00      	nop
        break;
 8006960:	e35d      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006962:	4b4d      	ldr	r3, [pc, #308]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006968:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b30      	cmp	r3, #48	; 0x30
 8006972:	d021      	beq.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b30      	cmp	r3, #48	; 0x30
 8006978:	d829      	bhi.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b20      	cmp	r3, #32
 800697e:	d011      	beq.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b20      	cmp	r3, #32
 8006984:	d823      	bhi.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b10      	cmp	r3, #16
 8006990:	d004      	beq.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          break;
 8006992:	e01c      	b.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006994:	f7fe ff7e 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006998:	61f8      	str	r0, [r7, #28]
          break;
 800699a:	e01d      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          frequency = HAL_RCC_GetSysClockFreq();
 800699c:	f7fe fee4 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 80069a0:	61f8      	str	r0, [r7, #28]
          break;
 80069a2:	e019      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069a4:	4b3c      	ldr	r3, [pc, #240]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b0:	d10f      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 80069b2:	4b3b      	ldr	r3, [pc, #236]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80069b4:	61fb      	str	r3, [r7, #28]
          break;
 80069b6:	e00c      	b.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80069b8:	4b37      	ldr	r3, [pc, #220]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80069ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d107      	bne.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = LSE_VALUE;
 80069c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ca:	61fb      	str	r3, [r7, #28]
          break;
 80069cc:	e003      	b.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          break;
 80069ce:	bf00      	nop
 80069d0:	e325      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069d2:	bf00      	nop
 80069d4:	e323      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069d6:	bf00      	nop
        break;
 80069d8:	e321      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80069da:	4b2f      	ldr	r3, [pc, #188]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80069dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2bc0      	cmp	r3, #192	; 0xc0
 80069ea:	d021      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2bc0      	cmp	r3, #192	; 0xc0
 80069f0:	d829      	bhi.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b80      	cmp	r3, #128	; 0x80
 80069f6:	d011      	beq.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b80      	cmp	r3, #128	; 0x80
 80069fc:	d823      	bhi.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d004      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          break;
 8006a0a:	e01c      	b.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a0c:	f7fe ff42 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006a10:	61f8      	str	r0, [r7, #28]
          break;
 8006a12:	e01d      	b.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a14:	f7fe fea8 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006a18:	61f8      	str	r0, [r7, #28]
          break;
 8006a1a:	e019      	b.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a1c:	4b1e      	ldr	r3, [pc, #120]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a28:	d10f      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            frequency = HSI_VALUE;
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8006a2c:	61fb      	str	r3, [r7, #28]
          break;
 8006a2e:	e00c      	b.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a30:	4b19      	ldr	r3, [pc, #100]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = LSE_VALUE;
 8006a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a42:	61fb      	str	r3, [r7, #28]
          break;
 8006a44:	e003      	b.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          break;
 8006a46:	bf00      	nop
 8006a48:	e2e9      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a4a:	bf00      	nop
 8006a4c:	e2e7      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a4e:	bf00      	nop
        break;
 8006a50:	e2e5      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006a52:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a64:	d02c      	beq.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a6c:	d833      	bhi.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a74:	d01a      	beq.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a7c:	d82b      	bhi.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8a:	d00b      	beq.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          break;
 8006a8c:	e023      	b.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a8e:	f7fe ff01 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006a92:	61f8      	str	r0, [r7, #28]
          break;
 8006a94:	e024      	b.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 8006a96:	bf00      	nop
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	02dc6c00 	.word	0x02dc6c00
 8006aa0:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetSysClockFreq();
 8006aa4:	f7fe fe60 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006aa8:	61f8      	str	r0, [r7, #28]
          break;
 8006aaa:	e019      	b.n	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006aac:	4ba6      	ldr	r3, [pc, #664]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ab8:	d10f      	bne.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 8006aba:	4ba4      	ldr	r3, [pc, #656]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006abc:	61fb      	str	r3, [r7, #28]
          break;
 8006abe:	e00c      	b.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ac0:	4ba1      	ldr	r3, [pc, #644]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d107      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = LSE_VALUE;
 8006ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ad2:	61fb      	str	r3, [r7, #28]
          break;
 8006ad4:	e003      	b.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8006ad6:	bf00      	nop
 8006ad8:	e2a1      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006ada:	bf00      	nop
 8006adc:	e29f      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006ade:	bf00      	nop
        break;
 8006ae0:	e29d      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006ae2:	4b99      	ldr	r3, [pc, #612]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006af4:	d025      	beq.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006afc:	d82c      	bhi.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b04:	d013      	beq.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b0c:	d824      	bhi.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d004      	beq.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1a:	d004      	beq.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          break;
 8006b1c:	e01c      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b1e:	f7fe feb9 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006b22:	61f8      	str	r0, [r7, #28]
          break;
 8006b24:	e01d      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b26:	f7fe fe1f 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006b2a:	61f8      	str	r0, [r7, #28]
          break;
 8006b2c:	e019      	b.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b2e:	4b86      	ldr	r3, [pc, #536]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b3a:	d10f      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            frequency = HSI_VALUE;
 8006b3c:	4b83      	ldr	r3, [pc, #524]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006b3e:	61fb      	str	r3, [r7, #28]
          break;
 8006b40:	e00c      	b.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b42:	4b81      	ldr	r3, [pc, #516]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
            frequency = LSE_VALUE;
 8006b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b54:	61fb      	str	r3, [r7, #28]
          break;
 8006b56:	e003      	b.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          break;
 8006b58:	bf00      	nop
 8006b5a:	e260      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006b5c:	bf00      	nop
 8006b5e:	e25e      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006b60:	bf00      	nop
        break;
 8006b62:	e25c      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006b64:	4b78      	ldr	r3, [pc, #480]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b76:	d007      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b7e:	d12f      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006b80:	f7fe fdf2 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006b84:	61f8      	str	r0, [r7, #28]
          break;
 8006b86:	e02e      	b.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006b88:	4b6f      	ldr	r3, [pc, #444]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b94:	d126      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8006b96:	4b6c      	ldr	r3, [pc, #432]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d020      	beq.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006ba2:	4b69      	ldr	r3, [pc, #420]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	0a1b      	lsrs	r3, r3, #8
 8006ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bac:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	fb02 f203 	mul.w	r2, r2, r3
 8006bb6:	4b64      	ldr	r3, [pc, #400]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	091b      	lsrs	r3, r3, #4
 8006bbc:	f003 030f 	and.w	r3, r3, #15
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006bc8:	4b5f      	ldr	r3, [pc, #380]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	0e5b      	lsrs	r3, r3, #25
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	61fb      	str	r3, [r7, #28]
          break;
 8006bde:	e001      	b.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
          break;
 8006be0:	bf00      	nop
 8006be2:	e21c      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006be4:	bf00      	nop
        break;
 8006be6:	e21a      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006be8:	4b57      	ldr	r3, [pc, #348]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d103      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006bfa:	f7fe fe61 	bl	80058c0 <HAL_RCC_GetPCLK2Freq>
 8006bfe:	61f8      	str	r0, [r7, #28]
        break;
 8006c00:	e20d      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c02:	f7fe fdb1 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006c06:	61f8      	str	r0, [r7, #28]
        break;
 8006c08:	e209      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006c0a:	4b4f      	ldr	r3, [pc, #316]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006c0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c10:	f003 0318 	and.w	r3, r3, #24
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d010      	beq.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b10      	cmp	r3, #16
 8006c20:	d834      	bhi.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d024      	beq.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
          break;
 8006c2e:	e02d      	b.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006c30:	69b9      	ldr	r1, [r7, #24]
 8006c32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c36:	f000 fbdf 	bl	80073f8 <RCCEx_GetSAIxPeriphCLKFreq>
 8006c3a:	61f8      	str	r0, [r7, #28]
          break;
 8006c3c:	e02b      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006c3e:	4b42      	ldr	r3, [pc, #264]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d122      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006c4a:	4b3f      	ldr	r3, [pc, #252]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8006c56:	4b3c      	ldr	r3, [pc, #240]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	091b      	lsrs	r3, r3, #4
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	e005      	b.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 8006c62:	4b39      	ldr	r3, [pc, #228]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c68:	0a1b      	lsrs	r3, r3, #8
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	4a38      	ldr	r2, [pc, #224]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 8006c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c74:	61fb      	str	r3, [r7, #28]
          break;
 8006c76:	e00b      	b.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c78:	4b33      	ldr	r3, [pc, #204]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c84:	d106      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = HSI_VALUE;
 8006c86:	4b31      	ldr	r3, [pc, #196]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006c88:	61fb      	str	r3, [r7, #28]
          break;
 8006c8a:	e003      	b.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          break;
 8006c8c:	bf00      	nop
 8006c8e:	e1c6      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c90:	bf00      	nop
 8006c92:	e1c4      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006c94:	bf00      	nop
        break;
 8006c96:	e1c2      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006c98:	4b2b      	ldr	r3, [pc, #172]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006caa:	d013      	beq.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb2:	d819      	bhi.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d004      	beq.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc0:	d004      	beq.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
          break;
 8006cc2:	e011      	b.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cc4:	f7fe fde6 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006cc8:	61f8      	str	r0, [r7, #28]
          break;
 8006cca:	e010      	b.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ccc:	f7fe fd4c 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006cd0:	61f8      	str	r0, [r7, #28]
          break;
 8006cd2:	e00c      	b.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cd4:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce0:	d104      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
            frequency = HSI_VALUE;
 8006ce2:	4b1a      	ldr	r3, [pc, #104]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006ce4:	61fb      	str	r3, [r7, #28]
          break;
 8006ce6:	e001      	b.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
          break;
 8006ce8:	bf00      	nop
 8006cea:	e198      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006cec:	bf00      	nop
        break;
 8006cee:	e196      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006cf0:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d02:	d013      	beq.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d0a:	d819      	bhi.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d18:	d004      	beq.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8006d1a:	e011      	b.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d1c:	f7fe fdba 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006d20:	61f8      	str	r0, [r7, #28]
          break;
 8006d22:	e010      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d24:	f7fe fd20 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006d28:	61f8      	str	r0, [r7, #28]
          break;
 8006d2a:	e00c      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d38:	d104      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
            frequency = HSI_VALUE;
 8006d3a:	4b04      	ldr	r3, [pc, #16]	; (8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006d3c:	61fb      	str	r3, [r7, #28]
          break;
 8006d3e:	e001      	b.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
          break;
 8006d40:	bf00      	nop
 8006d42:	e16c      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006d44:	bf00      	nop
        break;
 8006d46:	e16a      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	00f42400 	.word	0x00f42400
 8006d50:	080130a0 	.word	0x080130a0
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006d54:	4baa      	ldr	r3, [pc, #680]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d66:	d013      	beq.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d6e:	d819      	bhi.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d004      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d004      	beq.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
          break;
 8006d7e:	e011      	b.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d80:	f7fe fd88 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006d84:	61f8      	str	r0, [r7, #28]
          break;
 8006d86:	e010      	b.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d88:	f7fe fcee 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006d8c:	61f8      	str	r0, [r7, #28]
          break;
 8006d8e:	e00c      	b.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d90:	4b9b      	ldr	r3, [pc, #620]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d9c:	d104      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
            frequency = HSI_VALUE;
 8006d9e:	4b99      	ldr	r3, [pc, #612]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006da0:	61fb      	str	r3, [r7, #28]
          break;
 8006da2:	e001      	b.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          break;
 8006da4:	bf00      	nop
 8006da6:	e13a      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006da8:	bf00      	nop
        break;
 8006daa:	e138      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006dac:	4b94      	ldr	r3, [pc, #592]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d011      	beq.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d818      	bhi.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d004      	beq.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 8006dd0:	e011      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006dd2:	f7fe fd5f 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006dd6:	61f8      	str	r0, [r7, #28]
          break;
 8006dd8:	e010      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006dda:	f7fe fcc5 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006dde:	61f8      	str	r0, [r7, #28]
          break;
 8006de0:	e00c      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006de2:	4b87      	ldr	r3, [pc, #540]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dee:	d104      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
            frequency = HSI_VALUE;
 8006df0:	4b84      	ldr	r3, [pc, #528]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006df2:	61fb      	str	r3, [r7, #28]
          break;
 8006df4:	e001      	b.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          break;
 8006df6:	bf00      	nop
 8006df8:	e111      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006dfa:	bf00      	nop
        break;
 8006dfc:	e10f      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006dfe:	4b80      	ldr	r3, [pc, #512]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e10:	d02c      	beq.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e18:	d833      	bhi.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e20:	d01a      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e28:	d82b      	bhi.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d004      	beq.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e36:	d004      	beq.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          break;
 8006e38:	e023      	b.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e3a:	f7fe fd2b 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006e3e:	61f8      	str	r0, [r7, #28]
          break;
 8006e40:	e026      	b.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xca0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006e42:	4b6f      	ldr	r3, [pc, #444]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d11a      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
              frequency = LSI_VALUE;
 8006e50:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e54:	61fb      	str	r3, [r7, #28]
          break;
 8006e56:	e016      	b.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e58:	4b69      	ldr	r3, [pc, #420]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e64:	d111      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
            frequency = HSI_VALUE;
 8006e66:	4b67      	ldr	r3, [pc, #412]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006e68:	61fb      	str	r3, [r7, #28]
          break;
 8006e6a:	e00e      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e6c:	4b64      	ldr	r3, [pc, #400]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d109      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = LSE_VALUE;
 8006e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7e:	61fb      	str	r3, [r7, #28]
          break;
 8006e80:	e005      	b.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          break;
 8006e82:	bf00      	nop
 8006e84:	e0cb      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006e86:	bf00      	nop
 8006e88:	e0c9      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006e8a:	bf00      	nop
 8006e8c:	e0c7      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006e8e:	bf00      	nop
        break;
 8006e90:	e0c5      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006e92:	4b5b      	ldr	r3, [pc, #364]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ea4:	d02c      	beq.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eac:	d833      	bhi.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eb4:	d01a      	beq.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ebc:	d82b      	bhi.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eca:	d004      	beq.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
          break;
 8006ecc:	e023      	b.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ece:	f7fe fce1 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8006ed2:	61f8      	str	r0, [r7, #28]
          break;
 8006ed4:	e026      	b.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006ed6:	4b4a      	ldr	r3, [pc, #296]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d11a      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
              frequency = LSI_VALUE;
 8006ee4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ee8:	61fb      	str	r3, [r7, #28]
          break;
 8006eea:	e016      	b.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eec:	4b44      	ldr	r3, [pc, #272]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef8:	d111      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = HSI_VALUE;
 8006efa:	4b42      	ldr	r3, [pc, #264]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006efc:	61fb      	str	r3, [r7, #28]
          break;
 8006efe:	e00e      	b.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f00:	4b3f      	ldr	r3, [pc, #252]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d109      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
            frequency = LSE_VALUE;
 8006f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f12:	61fb      	str	r3, [r7, #28]
          break;
 8006f14:	e005      	b.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          break;
 8006f16:	bf00      	nop
 8006f18:	e081      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006f1a:	bf00      	nop
 8006f1c:	e07f      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006f1e:	bf00      	nop
 8006f20:	e07d      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006f22:	bf00      	nop
        break;
 8006f24:	e07b      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006f26:	4b36      	ldr	r3, [pc, #216]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006f28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f38:	d02c      	beq.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f40:	d855      	bhi.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d004      	beq.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4e:	d004      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
          break;
 8006f50:	e04d      	b.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f52:	f7fe fc09 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 8006f56:	61f8      	str	r0, [r7, #28]
          break;
 8006f58:	e04e      	b.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006f5a:	4b29      	ldr	r3, [pc, #164]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d145      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006f66:	4b26      	ldr	r3, [pc, #152]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006f72:	4b23      	ldr	r3, [pc, #140]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	091b      	lsrs	r3, r3, #4
 8006f78:	f003 030f 	and.w	r3, r3, #15
 8006f7c:	e005      	b.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8006f7e:	4b20      	ldr	r3, [pc, #128]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f84:	0a1b      	lsrs	r3, r3, #8
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	4a1f      	ldr	r2, [pc, #124]	; (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>)
 8006f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f90:	61fb      	str	r3, [r7, #28]
          break;
 8006f92:	e02e      	b.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006f94:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fa0:	d129      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006fa2:	4b17      	ldr	r3, [pc, #92]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fae:	d122      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006fb0:	4b13      	ldr	r3, [pc, #76]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	0a1b      	lsrs	r3, r3, #8
 8006fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fba:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	fb02 f203 	mul.w	r2, r2, r3
 8006fc4:	4b0e      	ldr	r3, [pc, #56]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	091b      	lsrs	r3, r3, #4
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	3301      	adds	r3, #1
 8006fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006fd6:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	0d5b      	lsrs	r3, r3, #21
 8006fdc:	f003 0303 	and.w	r3, r3, #3
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	61fb      	str	r3, [r7, #28]
          break;
 8006fec:	e003      	b.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
          break;
 8006fee:	bf00      	nop
 8006ff0:	e015      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006ff2:	bf00      	nop
 8006ff4:	e013      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006ff6:	bf00      	nop
        break;
 8006ff8:	e011      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006ffa:	bf00      	nop
 8006ffc:	e00f      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006ffe:	bf00      	nop
 8007000:	40021000 	.word	0x40021000
 8007004:	00f42400 	.word	0x00f42400
 8007008:	080130a0 	.word	0x080130a0
      break;
 800700c:	bf00      	nop
 800700e:	e006      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8007010:	bf00      	nop
 8007012:	e004      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8007014:	bf00      	nop
 8007016:	e002      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8007018:	bf00      	nop
 800701a:	e000      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 800701c:	bf00      	nop
    }
  }

  return(frequency);
 800701e:	69fb      	ldr	r3, [r7, #28]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007036:	4b72      	ldr	r3, [pc, #456]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00e      	beq.n	8007060 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007042:	4b6f      	ldr	r3, [pc, #444]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f003 0203 	and.w	r2, r3, #3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d103      	bne.n	800705a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
       ||
 8007056:	2b00      	cmp	r3, #0
 8007058:	d142      	bne.n	80070e0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	73fb      	strb	r3, [r7, #15]
 800705e:	e03f      	b.n	80070e0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b03      	cmp	r3, #3
 8007066:	d018      	beq.n	800709a <RCCEx_PLLSAI1_Config+0x72>
 8007068:	2b03      	cmp	r3, #3
 800706a:	d825      	bhi.n	80070b8 <RCCEx_PLLSAI1_Config+0x90>
 800706c:	2b01      	cmp	r3, #1
 800706e:	d002      	beq.n	8007076 <RCCEx_PLLSAI1_Config+0x4e>
 8007070:	2b02      	cmp	r3, #2
 8007072:	d009      	beq.n	8007088 <RCCEx_PLLSAI1_Config+0x60>
 8007074:	e020      	b.n	80070b8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007076:	4b62      	ldr	r3, [pc, #392]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d11d      	bne.n	80070be <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007086:	e01a      	b.n	80070be <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007088:	4b5d      	ldr	r3, [pc, #372]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007090:	2b00      	cmp	r3, #0
 8007092:	d116      	bne.n	80070c2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007098:	e013      	b.n	80070c2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800709a:	4b59      	ldr	r3, [pc, #356]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10f      	bne.n	80070c6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80070a6:	4b56      	ldr	r3, [pc, #344]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d109      	bne.n	80070c6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80070b6:	e006      	b.n	80070c6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
      break;
 80070bc:	e004      	b.n	80070c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80070be:	bf00      	nop
 80070c0:	e002      	b.n	80070c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80070c2:	bf00      	nop
 80070c4:	e000      	b.n	80070c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80070c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d108      	bne.n	80070e0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80070ce:	4b4c      	ldr	r3, [pc, #304]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f023 0203 	bic.w	r2, r3, #3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4949      	ldr	r1, [pc, #292]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f040 8086 	bne.w	80071f4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80070e8:	4b45      	ldr	r3, [pc, #276]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a44      	ldr	r2, [pc, #272]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80070ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f4:	f7fa fd70 	bl	8001bd8 <HAL_GetTick>
 80070f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80070fa:	e009      	b.n	8007110 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070fc:	f7fa fd6c 	bl	8001bd8 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d902      	bls.n	8007110 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	73fb      	strb	r3, [r7, #15]
        break;
 800710e:	e005      	b.n	800711c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007110:	4b3b      	ldr	r3, [pc, #236]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1ef      	bne.n	80070fc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d168      	bne.n	80071f4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d113      	bne.n	8007150 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007128:	4b35      	ldr	r3, [pc, #212]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	4b35      	ldr	r3, [pc, #212]	; (8007204 <RCCEx_PLLSAI1_Config+0x1dc>)
 800712e:	4013      	ands	r3, r2
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6892      	ldr	r2, [r2, #8]
 8007134:	0211      	lsls	r1, r2, #8
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	68d2      	ldr	r2, [r2, #12]
 800713a:	06d2      	lsls	r2, r2, #27
 800713c:	4311      	orrs	r1, r2
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6852      	ldr	r2, [r2, #4]
 8007142:	3a01      	subs	r2, #1
 8007144:	0112      	lsls	r2, r2, #4
 8007146:	430a      	orrs	r2, r1
 8007148:	492d      	ldr	r1, [pc, #180]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 800714a:	4313      	orrs	r3, r2
 800714c:	610b      	str	r3, [r1, #16]
 800714e:	e02d      	b.n	80071ac <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d115      	bne.n	8007182 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007156:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	4b2b      	ldr	r3, [pc, #172]	; (8007208 <RCCEx_PLLSAI1_Config+0x1e0>)
 800715c:	4013      	ands	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6892      	ldr	r2, [r2, #8]
 8007162:	0211      	lsls	r1, r2, #8
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6912      	ldr	r2, [r2, #16]
 8007168:	0852      	lsrs	r2, r2, #1
 800716a:	3a01      	subs	r2, #1
 800716c:	0552      	lsls	r2, r2, #21
 800716e:	4311      	orrs	r1, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6852      	ldr	r2, [r2, #4]
 8007174:	3a01      	subs	r2, #1
 8007176:	0112      	lsls	r2, r2, #4
 8007178:	430a      	orrs	r2, r1
 800717a:	4921      	ldr	r1, [pc, #132]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 800717c:	4313      	orrs	r3, r2
 800717e:	610b      	str	r3, [r1, #16]
 8007180:	e014      	b.n	80071ac <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007182:	4b1f      	ldr	r3, [pc, #124]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	4b21      	ldr	r3, [pc, #132]	; (800720c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007188:	4013      	ands	r3, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	6892      	ldr	r2, [r2, #8]
 800718e:	0211      	lsls	r1, r2, #8
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6952      	ldr	r2, [r2, #20]
 8007194:	0852      	lsrs	r2, r2, #1
 8007196:	3a01      	subs	r2, #1
 8007198:	0652      	lsls	r2, r2, #25
 800719a:	4311      	orrs	r1, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6852      	ldr	r2, [r2, #4]
 80071a0:	3a01      	subs	r2, #1
 80071a2:	0112      	lsls	r2, r2, #4
 80071a4:	430a      	orrs	r2, r1
 80071a6:	4916      	ldr	r1, [pc, #88]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071a8:	4313      	orrs	r3, r2
 80071aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80071ac:	4b14      	ldr	r3, [pc, #80]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a13      	ldr	r2, [pc, #76]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b8:	f7fa fd0e 	bl	8001bd8 <HAL_GetTick>
 80071bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071be:	e009      	b.n	80071d4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071c0:	f7fa fd0a 	bl	8001bd8 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d902      	bls.n	80071d4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	73fb      	strb	r3, [r7, #15]
          break;
 80071d2:	e005      	b.n	80071e0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80071d4:	4b0a      	ldr	r3, [pc, #40]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d0ef      	beq.n	80071c0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d106      	bne.n	80071f4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80071e6:	4b06      	ldr	r3, [pc, #24]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071e8:	691a      	ldr	r2, [r3, #16]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	4904      	ldr	r1, [pc, #16]	; (8007200 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40021000 	.word	0x40021000
 8007204:	07ff800f 	.word	0x07ff800f
 8007208:	ff9f800f 	.word	0xff9f800f
 800720c:	f9ff800f 	.word	0xf9ff800f

08007210 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800721e:	4b72      	ldr	r3, [pc, #456]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00e      	beq.n	8007248 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800722a:	4b6f      	ldr	r3, [pc, #444]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f003 0203 	and.w	r2, r3, #3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d103      	bne.n	8007242 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
       ||
 800723e:	2b00      	cmp	r3, #0
 8007240:	d142      	bne.n	80072c8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	73fb      	strb	r3, [r7, #15]
 8007246:	e03f      	b.n	80072c8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b03      	cmp	r3, #3
 800724e:	d018      	beq.n	8007282 <RCCEx_PLLSAI2_Config+0x72>
 8007250:	2b03      	cmp	r3, #3
 8007252:	d825      	bhi.n	80072a0 <RCCEx_PLLSAI2_Config+0x90>
 8007254:	2b01      	cmp	r3, #1
 8007256:	d002      	beq.n	800725e <RCCEx_PLLSAI2_Config+0x4e>
 8007258:	2b02      	cmp	r3, #2
 800725a:	d009      	beq.n	8007270 <RCCEx_PLLSAI2_Config+0x60>
 800725c:	e020      	b.n	80072a0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800725e:	4b62      	ldr	r3, [pc, #392]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d11d      	bne.n	80072a6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800726e:	e01a      	b.n	80072a6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007270:	4b5d      	ldr	r3, [pc, #372]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007278:	2b00      	cmp	r3, #0
 800727a:	d116      	bne.n	80072aa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007280:	e013      	b.n	80072aa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007282:	4b59      	ldr	r3, [pc, #356]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10f      	bne.n	80072ae <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800728e:	4b56      	ldr	r3, [pc, #344]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800729e:	e006      	b.n	80072ae <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	73fb      	strb	r3, [r7, #15]
      break;
 80072a4:	e004      	b.n	80072b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80072a6:	bf00      	nop
 80072a8:	e002      	b.n	80072b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80072aa:	bf00      	nop
 80072ac:	e000      	b.n	80072b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80072ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d108      	bne.n	80072c8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80072b6:	4b4c      	ldr	r3, [pc, #304]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f023 0203 	bic.w	r2, r3, #3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4949      	ldr	r1, [pc, #292]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f040 8086 	bne.w	80073dc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80072d0:	4b45      	ldr	r3, [pc, #276]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a44      	ldr	r2, [pc, #272]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072dc:	f7fa fc7c 	bl	8001bd8 <HAL_GetTick>
 80072e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80072e2:	e009      	b.n	80072f8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80072e4:	f7fa fc78 	bl	8001bd8 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d902      	bls.n	80072f8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	73fb      	strb	r3, [r7, #15]
        break;
 80072f6:	e005      	b.n	8007304 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80072f8:	4b3b      	ldr	r3, [pc, #236]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1ef      	bne.n	80072e4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d168      	bne.n	80073dc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d113      	bne.n	8007338 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007310:	4b35      	ldr	r3, [pc, #212]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007312:	695a      	ldr	r2, [r3, #20]
 8007314:	4b35      	ldr	r3, [pc, #212]	; (80073ec <RCCEx_PLLSAI2_Config+0x1dc>)
 8007316:	4013      	ands	r3, r2
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6892      	ldr	r2, [r2, #8]
 800731c:	0211      	lsls	r1, r2, #8
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	68d2      	ldr	r2, [r2, #12]
 8007322:	06d2      	lsls	r2, r2, #27
 8007324:	4311      	orrs	r1, r2
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6852      	ldr	r2, [r2, #4]
 800732a:	3a01      	subs	r2, #1
 800732c:	0112      	lsls	r2, r2, #4
 800732e:	430a      	orrs	r2, r1
 8007330:	492d      	ldr	r1, [pc, #180]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007332:	4313      	orrs	r3, r2
 8007334:	614b      	str	r3, [r1, #20]
 8007336:	e02d      	b.n	8007394 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d115      	bne.n	800736a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800733e:	4b2a      	ldr	r3, [pc, #168]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007340:	695a      	ldr	r2, [r3, #20]
 8007342:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007344:	4013      	ands	r3, r2
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6892      	ldr	r2, [r2, #8]
 800734a:	0211      	lsls	r1, r2, #8
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6912      	ldr	r2, [r2, #16]
 8007350:	0852      	lsrs	r2, r2, #1
 8007352:	3a01      	subs	r2, #1
 8007354:	0552      	lsls	r2, r2, #21
 8007356:	4311      	orrs	r1, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6852      	ldr	r2, [r2, #4]
 800735c:	3a01      	subs	r2, #1
 800735e:	0112      	lsls	r2, r2, #4
 8007360:	430a      	orrs	r2, r1
 8007362:	4921      	ldr	r1, [pc, #132]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007364:	4313      	orrs	r3, r2
 8007366:	614b      	str	r3, [r1, #20]
 8007368:	e014      	b.n	8007394 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800736a:	4b1f      	ldr	r3, [pc, #124]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800736c:	695a      	ldr	r2, [r3, #20]
 800736e:	4b21      	ldr	r3, [pc, #132]	; (80073f4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007370:	4013      	ands	r3, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6892      	ldr	r2, [r2, #8]
 8007376:	0211      	lsls	r1, r2, #8
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6952      	ldr	r2, [r2, #20]
 800737c:	0852      	lsrs	r2, r2, #1
 800737e:	3a01      	subs	r2, #1
 8007380:	0652      	lsls	r2, r2, #25
 8007382:	4311      	orrs	r1, r2
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6852      	ldr	r2, [r2, #4]
 8007388:	3a01      	subs	r2, #1
 800738a:	0112      	lsls	r2, r2, #4
 800738c:	430a      	orrs	r2, r1
 800738e:	4916      	ldr	r1, [pc, #88]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007390:	4313      	orrs	r3, r2
 8007392:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007394:	4b14      	ldr	r3, [pc, #80]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800739a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800739e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a0:	f7fa fc1a 	bl	8001bd8 <HAL_GetTick>
 80073a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80073a6:	e009      	b.n	80073bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80073a8:	f7fa fc16 	bl	8001bd8 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d902      	bls.n	80073bc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	73fb      	strb	r3, [r7, #15]
          break;
 80073ba:	e005      	b.n	80073c8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0ef      	beq.n	80073a8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80073ce:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073d0:	695a      	ldr	r2, [r3, #20]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	4904      	ldr	r1, [pc, #16]	; (80073e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	40021000 	.word	0x40021000
 80073ec:	07ff800f 	.word	0x07ff800f
 80073f0:	ff9f800f 	.word	0xff9f800f
 80073f4:	f9ff800f 	.word	0xf9ff800f

080073f8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b089      	sub	sp, #36	; 0x24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007414:	d10b      	bne.n	800742e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007416:	4b7e      	ldr	r3, [pc, #504]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007418:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800741c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007420:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	2b60      	cmp	r3, #96	; 0x60
 8007426:	d112      	bne.n	800744e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007428:	4b7a      	ldr	r3, [pc, #488]	; (8007614 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800742a:	61fb      	str	r3, [r7, #28]
 800742c:	e00f      	b.n	800744e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007434:	d10b      	bne.n	800744e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007436:	4b76      	ldr	r3, [pc, #472]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800743c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007440:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007448:	d101      	bne.n	800744e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800744a:	4b72      	ldr	r3, [pc, #456]	; (8007614 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800744c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f040 80d6 	bne.w	8007602 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	2b40      	cmp	r3, #64	; 0x40
 800745e:	d003      	beq.n	8007468 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007466:	d13b      	bne.n	80074e0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007468:	4b69      	ldr	r3, [pc, #420]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007474:	f040 80c4 	bne.w	8007600 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8007478:	4b65      	ldr	r3, [pc, #404]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 80bd 	beq.w	8007600 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007486:	4b62      	ldr	r3, [pc, #392]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	091b      	lsrs	r3, r3, #4
 800748c:	f003 030f 	and.w	r3, r3, #15
 8007490:	3301      	adds	r3, #1
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	fbb2 f3f3 	udiv	r3, r2, r3
 8007498:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800749a:	4b5d      	ldr	r3, [pc, #372]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80074a6:	4b5a      	ldr	r3, [pc, #360]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	0edb      	lsrs	r3, r3, #27
 80074ac:	f003 031f 	and.w	r3, r3, #31
 80074b0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10a      	bne.n	80074ce <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80074b8:	4b55      	ldr	r3, [pc, #340]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80074c4:	2311      	movs	r3, #17
 80074c6:	617b      	str	r3, [r7, #20]
 80074c8:	e001      	b.n	80074ce <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80074ca:	2307      	movs	r3, #7
 80074cc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	fb02 f203 	mul.w	r2, r2, r3
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074dc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80074de:	e08f      	b.n	8007600 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d13a      	bne.n	800755c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80074e6:	4b4a      	ldr	r3, [pc, #296]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074f2:	f040 8086 	bne.w	8007602 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80074f6:	4b46      	ldr	r3, [pc, #280]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d07f      	beq.n	8007602 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007502:	4b43      	ldr	r3, [pc, #268]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	091b      	lsrs	r3, r3, #4
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	3301      	adds	r3, #1
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	fbb2 f3f3 	udiv	r3, r2, r3
 8007514:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007516:	4b3e      	ldr	r3, [pc, #248]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	0a1b      	lsrs	r3, r3, #8
 800751c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007520:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007522:	4b3b      	ldr	r3, [pc, #236]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	0edb      	lsrs	r3, r3, #27
 8007528:	f003 031f 	and.w	r3, r3, #31
 800752c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007534:	4b36      	ldr	r3, [pc, #216]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007540:	2311      	movs	r3, #17
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	e001      	b.n	800754a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8007546:	2307      	movs	r3, #7
 8007548:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	fb02 f203 	mul.w	r2, r2, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	fbb2 f3f3 	udiv	r3, r2, r3
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	e052      	b.n	8007602 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	2b80      	cmp	r3, #128	; 0x80
 8007560:	d003      	beq.n	800756a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007568:	d109      	bne.n	800757e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800756a:	4b29      	ldr	r3, [pc, #164]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007576:	d144      	bne.n	8007602 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007578:	4b27      	ldr	r3, [pc, #156]	; (8007618 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800757a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800757c:	e041      	b.n	8007602 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	2b20      	cmp	r3, #32
 8007582:	d003      	beq.n	800758c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758a:	d13a      	bne.n	8007602 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800758c:	4b20      	ldr	r3, [pc, #128]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007598:	d133      	bne.n	8007602 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800759a:	4b1d      	ldr	r3, [pc, #116]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d02d      	beq.n	8007602 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80075a6:	4b1a      	ldr	r3, [pc, #104]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	091b      	lsrs	r3, r3, #4
 80075ac:	f003 030f 	and.w	r3, r3, #15
 80075b0:	3301      	adds	r3, #1
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80075ba:	4b15      	ldr	r3, [pc, #84]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	0a1b      	lsrs	r3, r3, #8
 80075c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80075c6:	4b12      	ldr	r3, [pc, #72]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	0edb      	lsrs	r3, r3, #27
 80075cc:	f003 031f 	and.w	r3, r3, #31
 80075d0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80075e4:	2311      	movs	r3, #17
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	e001      	b.n	80075ee <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80075ea:	2307      	movs	r3, #7
 80075ec:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	fb02 f203 	mul.w	r2, r2, r3
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	e000      	b.n	8007602 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007600:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007602:	69fb      	ldr	r3, [r7, #28]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3724      	adds	r7, #36	; 0x24
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	40021000 	.word	0x40021000
 8007614:	001fff68 	.word	0x001fff68
 8007618:	00f42400 	.word	0x00f42400

0800761c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d06c      	beq.n	8007708 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d106      	bne.n	8007648 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7f9 ff9e 	bl	8001584 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	22ca      	movs	r2, #202	; 0xca
 8007656:	625a      	str	r2, [r3, #36]	; 0x24
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2253      	movs	r2, #83	; 0x53
 800765e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f9a0 	bl	80079a6 <RTC_EnterInitMode>
 8007666:	4603      	mov	r3, r0
 8007668:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d14b      	bne.n	8007708 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6812      	ldr	r2, [r2, #0]
 800767a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800767e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007682:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6899      	ldr	r1, [r3, #8]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	431a      	orrs	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	431a      	orrs	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	68d2      	ldr	r2, [r2, #12]
 80076aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6919      	ldr	r1, [r3, #16]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	041a      	lsls	r2, r3, #16
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f9a3 	bl	8007a0c <RTC_ExitInitMode>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d11b      	bne.n	8007708 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0203 	bic.w	r2, r2, #3
 80076de:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69da      	ldr	r2, [r3, #28]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	22ff      	movs	r2, #255	; 0xff
 80076fe:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007712:	b590      	push	{r4, r7, lr}
 8007714:	b087      	sub	sp, #28
 8007716:	af00      	add	r7, sp, #0
 8007718:	60f8      	str	r0, [r7, #12]
 800771a:	60b9      	str	r1, [r7, #8]
 800771c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_RTC_SetTime+0x1a>
 8007728:	2302      	movs	r3, #2
 800772a:	e08b      	b.n	8007844 <HAL_RTC_SetTime+0x132>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2202      	movs	r2, #2
 8007738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	22ca      	movs	r2, #202	; 0xca
 8007742:	625a      	str	r2, [r3, #36]	; 0x24
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2253      	movs	r2, #83	; 0x53
 800774a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f92a 	bl	80079a6 <RTC_EnterInitMode>
 8007752:	4603      	mov	r3, r0
 8007754:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007756:	7cfb      	ldrb	r3, [r7, #19]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d163      	bne.n	8007824 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d126      	bne.n	80077b0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f000 f984 	bl	8007a88 <RTC_ByteToBcd2>
 8007780:	4603      	mov	r3, r0
 8007782:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	785b      	ldrb	r3, [r3, #1]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f97d 	bl	8007a88 <RTC_ByteToBcd2>
 800778e:	4603      	mov	r3, r0
 8007790:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007792:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	789b      	ldrb	r3, [r3, #2]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 f975 	bl	8007a88 <RTC_ByteToBcd2>
 800779e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077a0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	78db      	ldrb	r3, [r3, #3]
 80077a8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	e018      	b.n	80077e2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d102      	bne.n	80077c4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2200      	movs	r2, #0
 80077c2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	785b      	ldrb	r3, [r3, #1]
 80077ce:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077d0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077d6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	78db      	ldrb	r3, [r3, #3]
 80077dc:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80077ec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80077f0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007800:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6899      	ldr	r1, [r3, #8]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	431a      	orrs	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f8f6 	bl	8007a0c <RTC_ExitInitMode>
 8007820:	4603      	mov	r3, r0
 8007822:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	22ff      	movs	r2, #255	; 0xff
 800782a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800782c:	7cfb      	ldrb	r3, [r7, #19]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007842:	7cfb      	ldrb	r3, [r7, #19]
}
 8007844:	4618      	mov	r0, r3
 8007846:	371c      	adds	r7, #28
 8007848:	46bd      	mov	sp, r7
 800784a:	bd90      	pop	{r4, r7, pc}

0800784c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800784c:	b590      	push	{r4, r7, lr}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_RTC_SetDate+0x1a>
 8007862:	2302      	movs	r3, #2
 8007864:	e075      	b.n	8007952 <HAL_RTC_SetDate+0x106>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2202      	movs	r2, #2
 8007872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10e      	bne.n	800789a <HAL_RTC_SetDate+0x4e>
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	f023 0310 	bic.w	r3, r3, #16
 8007890:	b2db      	uxtb	r3, r3
 8007892:	330a      	adds	r3, #10
 8007894:	b2da      	uxtb	r2, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d11c      	bne.n	80078da <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	78db      	ldrb	r3, [r3, #3]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 f8ef 	bl	8007a88 <RTC_ByteToBcd2>
 80078aa:	4603      	mov	r3, r0
 80078ac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	785b      	ldrb	r3, [r3, #1]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f8e8 	bl	8007a88 <RTC_ByteToBcd2>
 80078b8:	4603      	mov	r3, r0
 80078ba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80078bc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	789b      	ldrb	r3, [r3, #2]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f8e0 	bl	8007a88 <RTC_ByteToBcd2>
 80078c8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80078ca:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80078d4:	4313      	orrs	r3, r2
 80078d6:	617b      	str	r3, [r7, #20]
 80078d8:	e00e      	b.n	80078f8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	78db      	ldrb	r3, [r3, #3]
 80078de:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	785b      	ldrb	r3, [r3, #1]
 80078e4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80078e6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80078ec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	22ca      	movs	r2, #202	; 0xca
 80078fe:	625a      	str	r2, [r3, #36]	; 0x24
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2253      	movs	r2, #83	; 0x53
 8007906:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f84c 	bl	80079a6 <RTC_EnterInitMode>
 800790e:	4603      	mov	r3, r0
 8007910:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007912:	7cfb      	ldrb	r3, [r7, #19]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10c      	bne.n	8007932 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007922:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007926:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f86f 	bl	8007a0c <RTC_ExitInitMode>
 800792e:	4603      	mov	r3, r0
 8007930:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	22ff      	movs	r2, #255	; 0xff
 8007938:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800793a:	7cfb      	ldrb	r3, [r7, #19]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d103      	bne.n	8007948 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007950:	7cfb      	ldrb	r3, [r7, #19]
}
 8007952:	4618      	mov	r0, r3
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	bd90      	pop	{r4, r7, pc}

0800795a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007970:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007972:	f7fa f931 	bl	8001bd8 <HAL_GetTick>
 8007976:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007978:	e009      	b.n	800798e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800797a:	f7fa f92d 	bl	8001bd8 <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007988:	d901      	bls.n	800798e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e007      	b.n	800799e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d0ee      	beq.n	800797a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d120      	bne.n	8007a02 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80079ca:	f7fa f905 	bl	8001bd8 <HAL_GetTick>
 80079ce:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80079d0:	e00d      	b.n	80079ee <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80079d2:	f7fa f901 	bl	8001bd8 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079e0:	d905      	bls.n	80079ee <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2203      	movs	r2, #3
 80079ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <RTC_EnterInitMode+0x5c>
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d1e7      	bne.n	80079d2 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007a18:	4b1a      	ldr	r3, [pc, #104]	; (8007a84 <RTC_ExitInitMode+0x78>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	4a19      	ldr	r2, [pc, #100]	; (8007a84 <RTC_ExitInitMode+0x78>)
 8007a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a22:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007a24:	4b17      	ldr	r3, [pc, #92]	; (8007a84 <RTC_ExitInitMode+0x78>)
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10c      	bne.n	8007a4a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff ff92 	bl	800795a <HAL_RTC_WaitForSynchro>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01e      	beq.n	8007a7a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2203      	movs	r2, #3
 8007a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	73fb      	strb	r3, [r7, #15]
 8007a48:	e017      	b.n	8007a7a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a4a:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <RTC_ExitInitMode+0x78>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	4a0d      	ldr	r2, [pc, #52]	; (8007a84 <RTC_ExitInitMode+0x78>)
 8007a50:	f023 0320 	bic.w	r3, r3, #32
 8007a54:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff ff7f 	bl	800795a <HAL_RTC_WaitForSynchro>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2203      	movs	r2, #3
 8007a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a6e:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <RTC_ExitInitMode+0x78>)
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	4a04      	ldr	r2, [pc, #16]	; (8007a84 <RTC_ExitInitMode+0x78>)
 8007a74:	f043 0320 	orr.w	r3, r3, #32
 8007a78:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	40002800 	.word	0x40002800

08007a88 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007a9a:	e005      	b.n	8007aa8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007aa2:	7afb      	ldrb	r3, [r7, #11]
 8007aa4:	3b0a      	subs	r3, #10
 8007aa6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	2b09      	cmp	r3, #9
 8007aac:	d8f6      	bhi.n	8007a9c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	7afb      	ldrb	r3, [r7, #11]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	b2db      	uxtb	r3, r3
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e078      	b.n	8007bcc <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d105      	bne.n	8007af2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7f9 fd65 	bl	80015bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2203      	movs	r2, #3
 8007af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f86a 	bl	8007bd4 <HAL_SD_InitCard>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d001      	beq.n	8007b0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e060      	b.n	8007bcc <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007b0a:	f107 0308 	add.w	r3, r7, #8
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fdc7 	bl	80086a4 <HAL_SD_GetCardStatus>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e055      	b.n	8007bcc <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007b20:	7e3b      	ldrb	r3, [r7, #24]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007b26:	7e7b      	ldrb	r3, [r7, #25]
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d10a      	bne.n	8007b4a <HAL_SD_Init+0x82>
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d102      	bne.n	8007b40 <HAL_SD_Init+0x78>
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d004      	beq.n	8007b4a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b46:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b48:	e00b      	b.n	8007b62 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d104      	bne.n	8007b5c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b58:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b5a:	e002      	b.n	8007b62 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fe7d 	bl	8008868 <HAL_SD_ConfigWideBusOperation>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e029      	b.n	8007bcc <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007b78:	f7fa f82e 	bl	8001bd8 <HAL_GetTick>
 8007b7c:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b7e:	e014      	b.n	8007baa <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007b80:	f7fa f82a 	bl	8001bd8 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8e:	d10c      	bne.n	8007baa <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e010      	b.n	8007bcc <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 ff70 	bl	8008a90 <HAL_SD_GetCardState>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d1e4      	bne.n	8007b80 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3728      	adds	r7, #40	; 0x28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007bd4:	b5b0      	push	{r4, r5, r7, lr}
 8007bd6:	b090      	sub	sp, #64	; 0x40
 8007bd8:	af04      	add	r7, sp, #16
 8007bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007bec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007bf0:	f7fe fafe 	bl	80061f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bf4:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e08b      	b.n	8007d28 <HAL_SD_InitCard+0x154>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	0a1b      	lsrs	r3, r3, #8
 8007c14:	4a46      	ldr	r2, [pc, #280]	; (8007d30 <HAL_SD_InitCard+0x15c>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	091b      	lsrs	r3, r3, #4
 8007c1c:	61fb      	str	r3, [r7, #28]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	623b      	str	r3, [r7, #32]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d107      	bne.n	8007c3c <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0210 	orr.w	r2, r2, #16
 8007c3a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681d      	ldr	r5, [r3, #0]
 8007c40:	466c      	mov	r4, sp
 8007c42:	f107 0318 	add.w	r3, r7, #24
 8007c46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c4e:	f107 030c 	add.w	r3, r7, #12
 8007c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c54:	4628      	mov	r0, r5
 8007c56:	f002 ff19 	bl	800aa8c <SDMMC_Init>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8007c60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <HAL_SD_InitCard+0x98>
  {
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e05d      	b.n	8007d28 <HAL_SD_InitCard+0x154>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f002 ff53 	bl	800ab1c <SDMMC_PowerState_ON>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8007c7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d001      	beq.n	8007c88 <HAL_SD_InitCard+0xb4>
  {
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e04f      	b.n	8007d28 <HAL_SD_InitCard+0x154>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c92:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007c94:	4a27      	ldr	r2, [pc, #156]	; (8007d34 <HAL_SD_InitCard+0x160>)
 8007c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7f9 ffa6 	bl	8001bf0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 ffd1 	bl	8008c4c <SD_PowerON>
 8007caa:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <HAL_SD_InitCard+0xf6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e02e      	b.n	8007d28 <HAL_SD_InitCard+0x154>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 ff00 	bl	8008ad0 <SD_InitCard>
 8007cd0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <HAL_SD_InitCard+0x11c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e01b      	b.n	8007d28 <HAL_SD_InitCard+0x154>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f002 ffa5 	bl	800ac48 <SDMMC_CmdBlockLength>
 8007cfe:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00f      	beq.n	8007d26 <HAL_SD_InitCard+0x152>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a0b      	ldr	r2, [pc, #44]	; (8007d38 <HAL_SD_InitCard+0x164>)
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <HAL_SD_InitCard+0x154>
  }

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3730      	adds	r7, #48	; 0x30
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d30:	014f8b59 	.word	0x014f8b59
 8007d34:	00012110 	.word	0x00012110
 8007d38:	1fe00fff 	.word	0x1fe00fff

08007d3c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08c      	sub	sp, #48	; 0x30
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d107      	bne.n	8007d64 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e08d      	b.n	8007e80 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	f040 8086 	bne.w	8007e7e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	441a      	add	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d907      	bls.n	8007d96 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e074      	b.n	8007e80 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2203      	movs	r2, #3
 8007d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2200      	movs	r2, #0
 8007da4:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	025a      	lsls	r2, r3, #9
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d002      	beq.n	8007dc2 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	025b      	lsls	r3, r3, #9
 8007dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	025b      	lsls	r3, r3, #9
 8007dcc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007dce:	2390      	movs	r3, #144	; 0x90
 8007dd0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f107 0210 	add.w	r2, r7, #16
 8007de6:	4611      	mov	r1, r2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f002 ff01 	bl	800abf0 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dfc:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d90a      	bls.n	8007e2a <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2282      	movs	r2, #130	; 0x82
 8007e18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e20:	4618      	mov	r0, r3
 8007e22:	f002 ff57 	bl	800acd4 <SDMMC_CmdReadMultiBlock>
 8007e26:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007e28:	e009      	b.n	8007e3e <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2281      	movs	r2, #129	; 0x81
 8007e2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e36:	4618      	mov	r0, r3
 8007e38:	f002 ff29 	bl	800ac8e <SDMMC_CmdReadSingleBlock>
 8007e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d012      	beq.n	8007e6a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a0f      	ldr	r2, [pc, #60]	; (8007e88 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e52:	431a      	orrs	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e00a      	b.n	8007e80 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007e78:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e000      	b.n	8007e80 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007e7e:	2302      	movs	r3, #2
  }
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3730      	adds	r7, #48	; 0x30
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	1fe00fff 	.word	0x1fe00fff

08007e8c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08c      	sub	sp, #48	; 0x30
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d107      	bne.n	8007eb4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e08d      	b.n	8007fd0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	f040 8086 	bne.w	8007fce <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	441a      	add	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d907      	bls.n	8007ee6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e074      	b.n	8007fd0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2203      	movs	r2, #3
 8007eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	025a      	lsls	r2, r3, #9
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d002      	beq.n	8007f12 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0e:	025b      	lsls	r3, r3, #9
 8007f10:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f12:	f04f 33ff 	mov.w	r3, #4294967295
 8007f16:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	025b      	lsls	r3, r3, #9
 8007f1c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f1e:	2390      	movs	r3, #144	; 0x90
 8007f20:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f107 0210 	add.w	r2, r7, #16
 8007f36:	4611      	mov	r1, r2
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f002 fe59 	bl	800abf0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f4c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d90a      	bls.n	8007f7a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	22a0      	movs	r2, #160	; 0xa0
 8007f68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f70:	4618      	mov	r0, r3
 8007f72:	f002 fef5 	bl	800ad60 <SDMMC_CmdWriteMultiBlock>
 8007f76:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f78:	e009      	b.n	8007f8e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2290      	movs	r2, #144	; 0x90
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f86:	4618      	mov	r0, r3
 8007f88:	f002 fec7 	bl	800ad1a <SDMMC_CmdWriteSingleBlock>
 8007f8c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d012      	beq.n	8007fba <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a0f      	ldr	r2, [pc, #60]	; (8007fd8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007f9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e00a      	b.n	8007fd0 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007fc8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e000      	b.n	8007fd0 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007fce:	2302      	movs	r3, #2
  }
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3730      	adds	r7, #48	; 0x30
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	1fe00fff 	.word	0x1fe00fff

08007fdc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d008      	beq.n	800800a <HAL_SD_IRQHandler+0x2e>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f003 0308 	and.w	r3, r3, #8
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 f98c 	bl	8009320 <SD_Read_IT>
 8008008:	e199      	b.n	800833e <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 80ae 	beq.w	8008176 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008022:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	6812      	ldr	r2, [r2, #0]
 800802e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8008032:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008036:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008046:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008056:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d038      	beq.n	80080d4 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d104      	bne.n	8008076 <HAL_SD_IRQHandler+0x9a>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	d011      	beq.n	800809a <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f002 fe94 	bl	800ada8 <SDMMC_CmdStopTransfer>
 8008080:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d008      	beq.n	800809a <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f957 	bl	8008348 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4aa0      	ldr	r2, [pc, #640]	; (8008320 <HAL_SD_IRQHandler+0x344>)
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d104      	bne.n	80080c4 <HAL_SD_IRQHandler+0xe8>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f003 0302 	and.w	r3, r3, #2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f004 fd6f 	bl	800cba8 <HAL_SD_RxCpltCallback>
 80080ca:	e138      	b.n	800833e <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f004 fd61 	bl	800cb94 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80080d2:	e134      	b.n	800833e <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f000 812f 	beq.w	800833e <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2200      	movs	r2, #0
 80080e6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2200      	movs	r2, #0
 80080ee:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2200      	movs	r2, #0
 80080f6:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d104      	bne.n	800810c <HAL_SD_IRQHandler+0x130>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b00      	cmp	r3, #0
 800810a:	d011      	beq.n	8008130 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4618      	mov	r0, r3
 8008112:	f002 fe49 	bl	800ada8 <SDMMC_CmdStopTransfer>
 8008116:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d008      	beq.n	8008130 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f90c 	bl	8008348 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <HAL_SD_IRQHandler+0x176>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f004 fd1e 	bl	800cb94 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d105      	bne.n	800816e <HAL_SD_IRQHandler+0x192>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 80e8 	beq.w	800833e <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f004 fd1a 	bl	800cba8 <HAL_SD_RxCpltCallback>
}
 8008174:	e0e3      	b.n	800833e <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800817c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d008      	beq.n	8008196 <HAL_SD_IRQHandler+0x1ba>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f003 0308 	and.w	r3, r3, #8
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 f917 	bl	80093c2 <SD_Write_IT>
 8008194:	e0d3      	b.n	800833e <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 809d 	beq.w	80082e0 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d005      	beq.n	80081c0 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	f043 0202 	orr.w	r2, r3, #2
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d2:	f043 0208 	orr.w	r2, r3, #8
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e0:	f003 0320 	and.w	r3, r3, #32
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d005      	beq.n	80081f4 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ec:	f043 0220 	orr.w	r2, r3, #32
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fa:	f003 0310 	and.w	r3, r3, #16
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d005      	beq.n	800820e <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008206:	f043 0210 	orr.w	r2, r3, #16
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a43      	ldr	r2, [pc, #268]	; (8008320 <HAL_SD_IRQHandler+0x344>)
 8008214:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008224:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008234:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008244:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008254:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4618      	mov	r0, r3
 800825c:	f002 fda4 	bl	800ada8 <SDMMC_CmdStopTransfer>
 8008260:	4602      	mov	r2, r0
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	431a      	orrs	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800827a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008284:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f003 0308 	and.w	r3, r3, #8
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f852 	bl	8008348 <HAL_SD_ErrorCallback>
}
 80082a4:	e04b      	b.n	800833e <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d046      	beq.n	800833e <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d042      	beq.n	800833e <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80082c6:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2200      	movs	r2, #0
 80082ce:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f835 	bl	8008348 <HAL_SD_ErrorCallback>
}
 80082de:	e02e      	b.n	800833e <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d027      	beq.n	800833e <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f6:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fe:	f003 0304 	and.w	r3, r3, #4
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10e      	bne.n	8008324 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f001 f8d4 	bl	80094be <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8008316:	e012      	b.n	800833e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 f8bc 	bl	8009496 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 800831e:	e00e      	b.n	800833e <HAL_SD_IRQHandler+0x362>
 8008320:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f003 0320 	and.w	r3, r3, #32
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 f8bb 	bl	80094aa <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8008334:	e003      	b.n	800833e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 f8a3 	bl	8009482 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 800833c:	e7ff      	b.n	800833e <HAL_SD_IRQHandler+0x362>
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop

08008348 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836a:	0f9b      	lsrs	r3, r3, #30
 800836c:	b2da      	uxtb	r2, r3
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008376:	0e9b      	lsrs	r3, r3, #26
 8008378:	b2db      	uxtb	r3, r3
 800837a:	f003 030f 	and.w	r3, r3, #15
 800837e:	b2da      	uxtb	r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008388:	0e1b      	lsrs	r3, r3, #24
 800838a:	b2db      	uxtb	r3, r3
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	b2da      	uxtb	r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800839a:	0c1b      	lsrs	r3, r3, #16
 800839c:	b2da      	uxtb	r2, r3
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a6:	0a1b      	lsrs	r3, r3, #8
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b2:	b2da      	uxtb	r2, r3
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083bc:	0d1b      	lsrs	r3, r3, #20
 80083be:	b29a      	uxth	r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083c8:	0c1b      	lsrs	r3, r3, #16
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	f003 030f 	and.w	r3, r3, #15
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083da:	0bdb      	lsrs	r3, r3, #15
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ec:	0b9b      	lsrs	r3, r3, #14
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	f003 0301 	and.w	r3, r3, #1
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083fe:	0b5b      	lsrs	r3, r3, #13
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	b2da      	uxtb	r2, r3
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008410:	0b1b      	lsrs	r3, r3, #12
 8008412:	b2db      	uxtb	r3, r3
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	b2da      	uxtb	r2, r3
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2200      	movs	r2, #0
 8008422:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d163      	bne.n	80084f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008430:	009a      	lsls	r2, r3, #2
 8008432:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008436:	4013      	ands	r3, r2
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800843c:	0f92      	lsrs	r2, r2, #30
 800843e:	431a      	orrs	r2, r3
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008448:	0edb      	lsrs	r3, r3, #27
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f003 0307 	and.w	r3, r3, #7
 8008450:	b2da      	uxtb	r2, r3
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800845a:	0e1b      	lsrs	r3, r3, #24
 800845c:	b2db      	uxtb	r3, r3
 800845e:	f003 0307 	and.w	r3, r3, #7
 8008462:	b2da      	uxtb	r2, r3
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800846c:	0d5b      	lsrs	r3, r3, #21
 800846e:	b2db      	uxtb	r3, r3
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	b2da      	uxtb	r2, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800847e:	0c9b      	lsrs	r3, r3, #18
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	b2da      	uxtb	r2, r3
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008490:	0bdb      	lsrs	r3, r3, #15
 8008492:	b2db      	uxtb	r3, r3
 8008494:	f003 0307 	and.w	r3, r3, #7
 8008498:	b2da      	uxtb	r2, r3
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	7e1b      	ldrb	r3, [r3, #24]
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	3302      	adds	r3, #2
 80084b4:	2201      	movs	r2, #1
 80084b6:	fa02 f303 	lsl.w	r3, r2, r3
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80084be:	fb02 f203 	mul.w	r2, r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	7a1b      	ldrb	r3, [r3, #8]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	2201      	movs	r2, #1
 80084d2:	409a      	lsls	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80084e0:	0a52      	lsrs	r2, r2, #9
 80084e2:	fb02 f203 	mul.w	r2, r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084f0:	659a      	str	r2, [r3, #88]	; 0x58
 80084f2:	e031      	b.n	8008558 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d11d      	bne.n	8008538 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008500:	041b      	lsls	r3, r3, #16
 8008502:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	431a      	orrs	r2, r3
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	3301      	adds	r3, #1
 8008518:	029a      	lsls	r2, r3, #10
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800852c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	659a      	str	r2, [r3, #88]	; 0x58
 8008536:	e00f      	b.n	8008558 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a58      	ldr	r2, [pc, #352]	; (80086a0 <HAL_SD_GetCardCSD+0x344>)
 800853e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e09d      	b.n	8008694 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800855c:	0b9b      	lsrs	r3, r3, #14
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	b2da      	uxtb	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800856e:	09db      	lsrs	r3, r3, #7
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008576:	b2da      	uxtb	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008580:	b2db      	uxtb	r3, r3
 8008582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008586:	b2da      	uxtb	r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008590:	0fdb      	lsrs	r3, r3, #31
 8008592:	b2da      	uxtb	r2, r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859c:	0f5b      	lsrs	r3, r3, #29
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ae:	0e9b      	lsrs	r3, r3, #26
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c0:	0d9b      	lsrs	r3, r3, #22
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	f003 030f 	and.w	r3, r3, #15
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085d2:	0d5b      	lsrs	r3, r3, #21
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ee:	0c1b      	lsrs	r3, r3, #16
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008602:	0bdb      	lsrs	r3, r3, #15
 8008604:	b2db      	uxtb	r3, r3
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	b2da      	uxtb	r2, r3
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008616:	0b9b      	lsrs	r3, r3, #14
 8008618:	b2db      	uxtb	r3, r3
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	b2da      	uxtb	r2, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800862a:	0b5b      	lsrs	r3, r3, #13
 800862c:	b2db      	uxtb	r3, r3
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	b2da      	uxtb	r2, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800863e:	0b1b      	lsrs	r3, r3, #12
 8008640:	b2db      	uxtb	r3, r3
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	b2da      	uxtb	r2, r3
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008652:	0a9b      	lsrs	r3, r3, #10
 8008654:	b2db      	uxtb	r3, r3
 8008656:	f003 0303 	and.w	r3, r3, #3
 800865a:	b2da      	uxtb	r2, r3
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	b2da      	uxtb	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800867a:	085b      	lsrs	r3, r3, #1
 800867c:	b2db      	uxtb	r3, r3
 800867e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008682:	b2da      	uxtb	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	1fe00fff 	.word	0x1fe00fff

080086a4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b094      	sub	sp, #80	; 0x50
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fbd2 	bl	8008e64 <SD_SendSDStatus>
 80086c0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80086c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d011      	beq.n	80086ec <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a4f      	ldr	r2, [pc, #316]	; (800880c <HAL_SD_GetCardStatus+0x168>)
 80086ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80086ea:	e070      	b.n	80087ce <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	099b      	lsrs	r3, r3, #6
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	095b      	lsrs	r3, r3, #5
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0301 	and.w	r3, r3, #1
 8008706:	b2da      	uxtb	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	0a1b      	lsrs	r3, r3, #8
 8008710:	b29b      	uxth	r3, r3
 8008712:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008716:	b29a      	uxth	r2, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	0e1b      	lsrs	r3, r3, #24
 800871c:	b29b      	uxth	r3, r3
 800871e:	4313      	orrs	r3, r2
 8008720:	b29a      	uxth	r2, r3
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	061a      	lsls	r2, r3, #24
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	021b      	lsls	r3, r3, #8
 800872e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008732:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	0a1b      	lsrs	r3, r3, #8
 8008738:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800873c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	0e1b      	lsrs	r3, r3, #24
 8008742:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	0a1b      	lsrs	r3, r3, #8
 8008754:	b2da      	uxtb	r2, r3
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	0d1b      	lsrs	r3, r3, #20
 800875e:	b2db      	uxtb	r3, r3
 8008760:	f003 030f 	and.w	r3, r3, #15
 8008764:	b2da      	uxtb	r2, r3
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	0c1b      	lsrs	r3, r3, #16
 800876e:	b29b      	uxth	r3, r3
 8008770:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008774:	b29a      	uxth	r2, r3
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	b29b      	uxth	r3, r3
 800877a:	b2db      	uxtb	r3, r3
 800877c:	b29b      	uxth	r3, r3
 800877e:	4313      	orrs	r3, r2
 8008780:	b29a      	uxth	r2, r3
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	0a9b      	lsrs	r3, r3, #10
 800878a:	b2db      	uxtb	r3, r3
 800878c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008790:	b2da      	uxtb	r2, r3
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	0a1b      	lsrs	r3, r3, #8
 800879a:	b2db      	uxtb	r3, r3
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	091b      	lsrs	r3, r3, #4
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f003 030f 	and.w	r3, r3, #15
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	f003 030f 	and.w	r3, r3, #15
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	0e1b      	lsrs	r3, r3, #24
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80087d6:	4618      	mov	r0, r3
 80087d8:	f002 fa36 	bl	800ac48 <SDMMC_CmdBlockLength>
 80087dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80087de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00d      	beq.n	8008800 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a08      	ldr	r2, [pc, #32]	; (800880c <HAL_SD_GetCardStatus+0x168>)
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008800:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008804:	4618      	mov	r0, r3
 8008806:	3750      	adds	r7, #80	; 0x50
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	1fe00fff 	.word	0x1fe00fff

08008810 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008868:	b5b0      	push	{r4, r5, r7, lr}
 800886a:	b090      	sub	sp, #64	; 0x40
 800886c:	af04      	add	r7, sp, #16
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2203      	movs	r2, #3
 800887c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008884:	2b03      	cmp	r3, #3
 8008886:	d02e      	beq.n	80088e6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800888e:	d106      	bne.n	800889e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	; 0x38
 800889c:	e029      	b.n	80088f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088a4:	d10a      	bne.n	80088bc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fbd4 	bl	8009054 <SD_WideBus_Enable>
 80088ac:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38
 80088ba:	e01a      	b.n	80088f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fc11 	bl	80090ea <SD_WideBus_Disable>
 80088c8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d0:	431a      	orrs	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	639a      	str	r2, [r3, #56]	; 0x38
 80088d6:	e00c      	b.n	80088f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	639a      	str	r2, [r3, #56]	; 0x38
 80088e4:	e005      	b.n	80088f2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d007      	beq.n	800890a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a60      	ldr	r2, [pc, #384]	; (8008a80 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008908:	e097      	b.n	8008a3a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800890a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800890e:	f7fd fc6f 	bl	80061f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008912:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 8086 	beq.w	8008a28 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695a      	ldr	r2, [r3, #20]
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	4952      	ldr	r1, [pc, #328]	; (8008a84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800893a:	fba1 1303 	umull	r1, r3, r1, r3
 800893e:	0e1b      	lsrs	r3, r3, #24
 8008940:	429a      	cmp	r2, r3
 8008942:	d303      	bcc.n	800894c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	61fb      	str	r3, [r7, #28]
 800894a:	e05a      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008954:	d103      	bne.n	800895e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	e051      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008966:	d126      	bne.n	80089b6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10e      	bne.n	800898e <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	4a45      	ldr	r2, [pc, #276]	; (8008a88 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d906      	bls.n	8008986 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	4a42      	ldr	r2, [pc, #264]	; (8008a84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800897c:	fba2 2303 	umull	r2, r3, r2, r3
 8008980:	0e5b      	lsrs	r3, r3, #25
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	e03d      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	61fb      	str	r3, [r7, #28]
 800898c:	e039      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008996:	fbb2 f3f3 	udiv	r3, r2, r3
 800899a:	4a3b      	ldr	r2, [pc, #236]	; (8008a88 <HAL_SD_ConfigWideBusOperation+0x220>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d906      	bls.n	80089ae <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	4a38      	ldr	r2, [pc, #224]	; (8008a84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80089a4:	fba2 2303 	umull	r2, r3, r2, r3
 80089a8:	0e5b      	lsrs	r3, r3, #25
 80089aa:	61fb      	str	r3, [r7, #28]
 80089ac:	e029      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	e025      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10e      	bne.n	80089dc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	4a32      	ldr	r2, [pc, #200]	; (8008a8c <HAL_SD_ConfigWideBusOperation+0x224>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d906      	bls.n	80089d4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	4a2e      	ldr	r2, [pc, #184]	; (8008a84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80089ca:	fba2 2303 	umull	r2, r3, r2, r3
 80089ce:	0e1b      	lsrs	r3, r3, #24
 80089d0:	61fb      	str	r3, [r7, #28]
 80089d2:	e016      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	61fb      	str	r3, [r7, #28]
 80089da:	e012      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089e8:	4a28      	ldr	r2, [pc, #160]	; (8008a8c <HAL_SD_ConfigWideBusOperation+0x224>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d906      	bls.n	80089fc <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	4a24      	ldr	r2, [pc, #144]	; (8008a84 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80089f2:	fba2 2303 	umull	r2, r3, r2, r3
 80089f6:	0e1b      	lsrs	r3, r3, #24
 80089f8:	61fb      	str	r3, [r7, #28]
 80089fa:	e002      	b.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681d      	ldr	r5, [r3, #0]
 8008a0c:	466c      	mov	r4, sp
 8008a0e:	f107 0318 	add.w	r3, r7, #24
 8008a12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008a1a:	f107 030c 	add.w	r3, r7, #12
 8008a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a20:	4628      	mov	r0, r5
 8008a22:	f002 f833 	bl	800aa8c <SDMMC_Init>
 8008a26:	e008      	b.n	8008a3a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a42:	4618      	mov	r0, r3
 8008a44:	f002 f900 	bl	800ac48 <SDMMC_CmdBlockLength>
 8008a48:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00c      	beq.n	8008a6a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a0a      	ldr	r2, [pc, #40]	; (8008a80 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3730      	adds	r7, #48	; 0x30
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	1fe00fff 	.word	0x1fe00fff
 8008a84:	55e63b89 	.word	0x55e63b89
 8008a88:	02faf080 	.word	0x02faf080
 8008a8c:	017d7840 	.word	0x017d7840

08008a90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008a9c:	f107 030c 	add.w	r3, r7, #12
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 faae 	bl	8009004 <SD_SendStatus>
 8008aa8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	0a5b      	lsrs	r3, r3, #9
 8008ac0:	f003 030f 	and.w	r3, r3, #15
 8008ac4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008ac6:	693b      	ldr	r3, [r7, #16]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b090      	sub	sp, #64	; 0x40
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f002 f82d 	bl	800ab40 <SDMMC_GetPowerState>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d102      	bne.n	8008af2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008aec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008af0:	e0a7      	b.n	8008c42 <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d02e      	beq.n	8008b58 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f002 fa72 	bl	800afe8 <SDMMC_CmdSendCID>
 8008b04:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <SD_InitCard+0x40>
    {
      return errorstate;
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0e:	e098      	b.n	8008c42 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2100      	movs	r1, #0
 8008b16:	4618      	mov	r0, r3
 8008b18:	f002 f857 	bl	800abca <SDMMC_GetResponse>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2104      	movs	r1, #4
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f002 f84e 	bl	800abca <SDMMC_GetResponse>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2108      	movs	r1, #8
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f002 f845 	bl	800abca <SDMMC_GetResponse>
 8008b40:	4602      	mov	r2, r0
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	210c      	movs	r1, #12
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f002 f83c 	bl	800abca <SDMMC_GetResponse>
 8008b52:	4602      	mov	r2, r0
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d00d      	beq.n	8008b7c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f107 020e 	add.w	r2, r7, #14
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f002 fa7b 	bl	800b066 <SDMMC_CmdSetRelAdd>
 8008b70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <SD_InitCard+0xac>
    {
      return errorstate;
 8008b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7a:	e062      	b.n	8008c42 <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d036      	beq.n	8008bf2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008b84:	89fb      	ldrh	r3, [r7, #14]
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b94:	041b      	lsls	r3, r3, #16
 8008b96:	4619      	mov	r1, r3
 8008b98:	4610      	mov	r0, r2
 8008b9a:	f002 fa44 	bl	800b026 <SDMMC_CmdSendCSD>
 8008b9e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <SD_InitCard+0xda>
    {
      return errorstate;
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba8:	e04b      	b.n	8008c42 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f002 f80a 	bl	800abca <SDMMC_GetResponse>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2104      	movs	r1, #4
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f002 f801 	bl	800abca <SDMMC_GetResponse>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2108      	movs	r1, #8
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 fff8 	bl	800abca <SDMMC_GetResponse>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	210c      	movs	r1, #12
 8008be6:	4618      	mov	r0, r3
 8008be8:	f001 ffef 	bl	800abca <SDMMC_GetResponse>
 8008bec:	4602      	mov	r2, r0
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2104      	movs	r1, #4
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f001 ffe6 	bl	800abca <SDMMC_GetResponse>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	0d1a      	lsrs	r2, r3, #20
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008c06:	f107 0310 	add.w	r3, r7, #16
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff fba5 	bl	800835c <HAL_SD_GetCardCSD>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c1c:	e011      	b.n	8008c42 <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6819      	ldr	r1, [r3, #0]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c26:	041b      	lsls	r3, r3, #16
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f04f 0300 	mov.w	r3, #0
 8008c2e:	4608      	mov	r0, r1
 8008c30:	f002 f8f0 	bl	800ae14 <SDMMC_CmdSelDesel>
 8008c34:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <SD_InitCard+0x170>
  {
    return errorstate;
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3e:	e000      	b.n	8008c42 <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3740      	adds	r7, #64	; 0x40
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	61fb      	str	r3, [r7, #28]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8008c60:	f7f8 ffba 	bl	8001bd8 <HAL_GetTick>
 8008c64:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f002 f8f6 	bl	800ae5c <SDMMC_CmdGoIdleState>
 8008c70:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <SD_PowerON+0x30>
  {
    return errorstate;
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	e0ed      	b.n	8008e58 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f002 f909 	bl	800ae98 <SDMMC_CmdOperCond>
 8008c86:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00d      	beq.n	8008caa <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f002 f8df 	bl	800ae5c <SDMMC_CmdGoIdleState>
 8008c9e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <SD_PowerON+0x64>
    {
      return errorstate;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	e0d6      	b.n	8008e58 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d137      	bne.n	8008d28 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f002 f90a 	bl	800aed8 <SDMMC_CmdAppCommand>
 8008cc4:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d02d      	beq.n	8008d28 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ccc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008cd0:	e0c2      	b.n	8008e58 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f002 f8fd 	bl	800aed8 <SDMMC_CmdAppCommand>
 8008cde:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <SD_PowerON+0x9e>
    {
      return errorstate;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	e0b6      	b.n	8008e58 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	495c      	ldr	r1, [pc, #368]	; (8008e60 <SD_PowerON+0x214>)
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f002 f914 	bl	800af1e <SDMMC_CmdAppOperCommand>
 8008cf6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d002      	beq.n	8008d04 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d02:	e0a9      	b.n	8008e58 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f001 ff5d 	bl	800abca <SDMMC_GetResponse>
 8008d10:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	0fdb      	lsrs	r3, r3, #31
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d101      	bne.n	8008d1e <SD_PowerON+0xd2>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e000      	b.n	8008d20 <SD_PowerON+0xd4>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61bb      	str	r3, [r7, #24]

    count++;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	3301      	adds	r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d802      	bhi.n	8008d38 <SD_PowerON+0xec>
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0cc      	beq.n	8008cd2 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d902      	bls.n	8008d48 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008d42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d46:	e087      	b.n	8008e58 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d07e      	beq.n	8008e50 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d17a      	bne.n	8008e56 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d075      	beq.n	8008e56 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d70:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0208 	orr.w	r2, r2, #8
 8008d80:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f002 f9d4 	bl	800b134 <SDMMC_CmdVoltageSwitch>
 8008d8c:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00c      	beq.n	8008dae <SD_PowerON+0x162>
        {
          return errorstate;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	e05f      	b.n	8008e58 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d98:	f7f8 ff1e 	bl	8001bd8 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d102      	bne.n	8008dae <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008da8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dac:	e054      	b.n	8008e58 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008db8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dbc:	d1ec      	bne.n	8008d98 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008dc6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dd6:	d002      	beq.n	8008dde <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008dd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ddc:	e03c      	b.n	8008e58 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008dde:	2001      	movs	r0, #1
 8008de0:	f000 fb44 	bl	800946c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f042 0204 	orr.w	r2, r2, #4
 8008df2:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008df4:	e00a      	b.n	8008e0c <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008df6:	f7f8 feef 	bl	8001bd8 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d102      	bne.n	8008e0c <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008e06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e0a:	e025      	b.n	8008e58 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e1a:	d1ec      	bne.n	8008df6 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008e24:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e34:	d102      	bne.n	8008e3c <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008e36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e3a:	e00d      	b.n	8008e58 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2213      	movs	r2, #19
 8008e42:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8008e4e:	e002      	b.n	8008e56 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	c1100000 	.word	0xc1100000

08008e64 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08c      	sub	sp, #48	; 0x30
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e6e:	f7f8 feb3 	bl	8001bd8 <HAL_GetTick>
 8008e72:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 fea3 	bl	800abca <SDMMC_GetResponse>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e8e:	d102      	bne.n	8008e96 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e94:	e0b0      	b.n	8008ff8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2140      	movs	r1, #64	; 0x40
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 fed3 	bl	800ac48 <SDMMC_CmdBlockLength>
 8008ea2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d005      	beq.n	8008eb6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	e0a0      	b.n	8008ff8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ebe:	041b      	lsls	r3, r3, #16
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f002 f808 	bl	800aed8 <SDMMC_CmdAppCommand>
 8008ec8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	e08d      	b.n	8008ff8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008edc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008ee2:	2340      	movs	r3, #64	; 0x40
 8008ee4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008ee6:	2360      	movs	r3, #96	; 0x60
 8008ee8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008eea:	2302      	movs	r3, #2
 8008eec:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f107 0208 	add.w	r2, r7, #8
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 fe75 	bl	800abf0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f002 f8f0 	bl	800b0f0 <SDMMC_CmdStatusRegister>
 8008f10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d02b      	beq.n	8008f70 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	e069      	b.n	8008ff8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d013      	beq.n	8008f5a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008f32:	2300      	movs	r3, #0
 8008f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f36:	e00d      	b.n	8008f54 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 fdcf 	bl	800aae0 <SDMMC_ReadFIFO>
 8008f42:	4602      	mov	r2, r0
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	601a      	str	r2, [r3, #0]
        pData++;
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	3301      	adds	r3, #1
 8008f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	2b07      	cmp	r3, #7
 8008f58:	d9ee      	bls.n	8008f38 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f5a:	f7f8 fe3d 	bl	8001bd8 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f68:	d102      	bne.n	8008f70 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008f6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f6e:	e043      	b.n	8008ff8 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f76:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0d2      	beq.n	8008f24 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	e033      	b.n	8008ff8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	e02a      	b.n	8008ff8 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa8:	f003 0320 	and.w	r3, r3, #32
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d017      	beq.n	8008fe0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008fb0:	2320      	movs	r3, #32
 8008fb2:	e021      	b.n	8008ff8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 fd91 	bl	800aae0 <SDMMC_ReadFIFO>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc2:	601a      	str	r2, [r3, #0]
    pData++;
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fca:	f7f8 fe05 	bl	8001bd8 <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd8:	d102      	bne.n	8008fe0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008fda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fde:	e00b      	b.n	8008ff8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e2      	bne.n	8008fb4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a03      	ldr	r2, [pc, #12]	; (8009000 <SD_SendSDStatus+0x19c>)
 8008ff4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3730      	adds	r7, #48	; 0x30
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	18000f3a 	.word	0x18000f3a

08009004 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d102      	bne.n	800901a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009014:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009018:	e018      	b.n	800904c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009022:	041b      	lsls	r3, r3, #16
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f002 f83f 	bl	800b0aa <SDMMC_CmdSendStatus>
 800902c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	e009      	b.n	800904c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2100      	movs	r1, #0
 800903e:	4618      	mov	r0, r3
 8009040:	f001 fdc3 	bl	800abca <SDMMC_GetResponse>
 8009044:	4602      	mov	r2, r0
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	2300      	movs	r3, #0
 8009062:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2100      	movs	r1, #0
 800906a:	4618      	mov	r0, r3
 800906c:	f001 fdad 	bl	800abca <SDMMC_GetResponse>
 8009070:	4603      	mov	r3, r0
 8009072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009076:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800907a:	d102      	bne.n	8009082 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800907c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009080:	e02f      	b.n	80090e2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009082:	f107 030c 	add.w	r3, r7, #12
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f879 	bl	8009180 <SD_FindSCR>
 800908e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	e023      	b.n	80090e2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01c      	beq.n	80090de <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ac:	041b      	lsls	r3, r3, #16
 80090ae:	4619      	mov	r1, r3
 80090b0:	4610      	mov	r0, r2
 80090b2:	f001 ff11 	bl	800aed8 <SDMMC_CmdAppCommand>
 80090b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	e00f      	b.n	80090e2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2102      	movs	r1, #2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 ff48 	bl	800af5e <SDMMC_CmdBusWidth>
 80090ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	e003      	b.n	80090e2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80090da:	2300      	movs	r3, #0
 80090dc:	e001      	b.n	80090e2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b086      	sub	sp, #24
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80090f2:	2300      	movs	r3, #0
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	2300      	movs	r3, #0
 80090f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2100      	movs	r1, #0
 8009100:	4618      	mov	r0, r3
 8009102:	f001 fd62 	bl	800abca <SDMMC_GetResponse>
 8009106:	4603      	mov	r3, r0
 8009108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800910c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009110:	d102      	bne.n	8009118 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009116:	e02f      	b.n	8009178 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009118:	f107 030c 	add.w	r3, r7, #12
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f82e 	bl	8009180 <SD_FindSCR>
 8009124:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	e023      	b.n	8009178 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d01c      	beq.n	8009174 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009142:	041b      	lsls	r3, r3, #16
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	f001 fec6 	bl	800aed8 <SDMMC_CmdAppCommand>
 800914c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	e00f      	b.n	8009178 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2100      	movs	r1, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f001 fefd 	bl	800af5e <SDMMC_CmdBusWidth>
 8009164:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	e003      	b.n	8009178 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009170:	2300      	movs	r3, #0
 8009172:	e001      	b.n	8009178 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009174:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08e      	sub	sp, #56	; 0x38
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800918a:	f7f8 fd25 	bl	8001bd8 <HAL_GetTick>
 800918e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009194:	2300      	movs	r3, #0
 8009196:	60bb      	str	r3, [r7, #8]
 8009198:	2300      	movs	r3, #0
 800919a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2108      	movs	r1, #8
 80091a6:	4618      	mov	r0, r3
 80091a8:	f001 fd4e 	bl	800ac48 <SDMMC_CmdBlockLength>
 80091ac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	e0ad      	b.n	8009314 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c0:	041b      	lsls	r3, r3, #16
 80091c2:	4619      	mov	r1, r3
 80091c4:	4610      	mov	r0, r2
 80091c6:	f001 fe87 	bl	800aed8 <SDMMC_CmdAppCommand>
 80091ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	e09e      	b.n	8009314 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091d6:	f04f 33ff 	mov.w	r3, #4294967295
 80091da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80091dc:	2308      	movs	r3, #8
 80091de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80091e0:	2330      	movs	r3, #48	; 0x30
 80091e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091e4:	2302      	movs	r3, #2
 80091e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80091ec:	2301      	movs	r3, #1
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f107 0210 	add.w	r2, r7, #16
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 fcf8 	bl	800abf0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4618      	mov	r0, r3
 8009206:	f001 fecd 	bl	800afa4 <SDMMC_CmdSendSCR>
 800920a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	2b00      	cmp	r3, #0
 8009210:	d027      	beq.n	8009262 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009214:	e07e      	b.n	8009314 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d113      	bne.n	800924c <SD_FindSCR+0xcc>
 8009224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009226:	2b00      	cmp	r3, #0
 8009228:	d110      	bne.n	800924c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4618      	mov	r0, r3
 8009230:	f001 fc56 	bl	800aae0 <SDMMC_ReadFIFO>
 8009234:	4603      	mov	r3, r0
 8009236:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4618      	mov	r0, r3
 800923e:	f001 fc4f 	bl	800aae0 <SDMMC_ReadFIFO>
 8009242:	4603      	mov	r3, r0
 8009244:	60fb      	str	r3, [r7, #12]
      index++;
 8009246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009248:	3301      	adds	r3, #1
 800924a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800924c:	f7f8 fcc4 	bl	8001bd8 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925a:	d102      	bne.n	8009262 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800925c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009260:	e058      	b.n	8009314 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009268:	f240 532a 	movw	r3, #1322	; 0x52a
 800926c:	4013      	ands	r3, r2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0d1      	beq.n	8009216 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009278:	f003 0308 	and.w	r3, r3, #8
 800927c:	2b00      	cmp	r3, #0
 800927e:	d005      	beq.n	800928c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2208      	movs	r2, #8
 8009286:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009288:	2308      	movs	r3, #8
 800928a:	e043      	b.n	8009314 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d005      	beq.n	80092a6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2202      	movs	r2, #2
 80092a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80092a2:	2302      	movs	r3, #2
 80092a4:	e036      	b.n	8009314 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d005      	beq.n	80092c0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2220      	movs	r2, #32
 80092ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80092bc:	2320      	movs	r3, #32
 80092be:	e029      	b.n	8009314 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a15      	ldr	r2, [pc, #84]	; (800931c <SD_FindSCR+0x19c>)
 80092c6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	061a      	lsls	r2, r3, #24
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	021b      	lsls	r3, r3, #8
 80092d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	0a1b      	lsrs	r3, r3, #8
 80092da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	0e1b      	lsrs	r3, r3, #24
 80092e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	601a      	str	r2, [r3, #0]
    scr++;
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	3304      	adds	r3, #4
 80092ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	061a      	lsls	r2, r3, #24
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	0a1b      	lsrs	r3, r3, #8
 8009302:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009306:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	0e1b      	lsrs	r3, r3, #24
 800930c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3738      	adds	r7, #56	; 0x38
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	18000f3a 	.word	0x18000f3a

08009320 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009332:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d03f      	beq.n	80093ba <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
 800933e:	e033      	b.n	80093a8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4618      	mov	r0, r3
 8009346:	f001 fbcb 	bl	800aae0 <SDMMC_ReadFIFO>
 800934a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	b2da      	uxtb	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3301      	adds	r3, #1
 8009358:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	3b01      	subs	r3, #1
 800935e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	0a1b      	lsrs	r3, r3, #8
 8009364:	b2da      	uxtb	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	701a      	strb	r2, [r3, #0]
      tmp++;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	3b01      	subs	r3, #1
 8009374:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	0c1b      	lsrs	r3, r3, #16
 800937a:	b2da      	uxtb	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3301      	adds	r3, #1
 8009384:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	3b01      	subs	r3, #1
 800938a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	0e1b      	lsrs	r3, r3, #24
 8009390:	b2da      	uxtb	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3301      	adds	r3, #1
 800939a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	3b01      	subs	r3, #1
 80093a0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	3301      	adds	r3, #1
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2b07      	cmp	r3, #7
 80093ac:	d9c8      	bls.n	8009340 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80093ba:	bf00      	nop
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b086      	sub	sp, #24
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d043      	beq.n	8009464 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	e037      	b.n	8009452 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	021a      	lsls	r2, r3, #8
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3301      	adds	r3, #1
 8009404:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	3b01      	subs	r3, #1
 800940a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	041a      	lsls	r2, r3, #16
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	4313      	orrs	r3, r2
 8009416:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3301      	adds	r3, #1
 800941c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	3b01      	subs	r3, #1
 8009422:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	061a      	lsls	r2, r3, #24
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	4313      	orrs	r3, r2
 800942e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3301      	adds	r3, #1
 8009434:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	3b01      	subs	r3, #1
 800943a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f107 0208 	add.w	r2, r7, #8
 8009444:	4611      	mov	r1, r2
 8009446:	4618      	mov	r0, r3
 8009448:	f001 fb57 	bl	800aafa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	3301      	adds	r3, #1
 8009450:	617b      	str	r3, [r7, #20]
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2b07      	cmp	r3, #7
 8009456:	d9c4      	bls.n	80093e2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009464:	bf00      	nop
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8009476:	bf00      	nop
 8009478:	370c      	adds	r7, #12
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009482:	b480      	push	{r7}
 8009484:	b083      	sub	sp, #12
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 800948a:	bf00      	nop
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009496:	b480      	push	{r7}
 8009498:	b083      	sub	sp, #12
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e095      	b.n	8009610 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d108      	bne.n	80094fe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094f4:	d009      	beq.n	800950a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	61da      	str	r2, [r3, #28]
 80094fc:	e005      	b.n	800950a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d106      	bne.n	800952a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7f8 f8e3 	bl	80016f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2202      	movs	r2, #2
 800952e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009540:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800954a:	d902      	bls.n	8009552 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	e002      	b.n	8009558 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009556:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009560:	d007      	beq.n	8009572 <HAL_SPI_Init+0xa0>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800956a:	d002      	beq.n	8009572 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009582:	431a      	orrs	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	431a      	orrs	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	431a      	orrs	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095a0:	431a      	orrs	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b4:	ea42 0103 	orr.w	r1, r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	0c1b      	lsrs	r3, r3, #16
 80095ce:	f003 0204 	and.w	r2, r3, #4
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	f003 0310 	and.w	r3, r3, #16
 80095da:	431a      	orrs	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e0:	f003 0308 	and.w	r3, r3, #8
 80095e4:	431a      	orrs	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80095ee:	ea42 0103 	orr.w	r1, r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	430a      	orrs	r2, r1
 80095fe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e049      	b.n	80096be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7f8 f8ee 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3304      	adds	r3, #4
 8009654:	4619      	mov	r1, r3
 8009656:	4610      	mov	r0, r2
 8009658:	f000 fab4 	bl	8009bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d001      	beq.n	80096e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e04f      	b.n	8009780 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	68da      	ldr	r2, [r3, #12]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f042 0201 	orr.w	r2, r2, #1
 80096f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a23      	ldr	r2, [pc, #140]	; (800978c <HAL_TIM_Base_Start_IT+0xc4>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d01d      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970a:	d018      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a1f      	ldr	r2, [pc, #124]	; (8009790 <HAL_TIM_Base_Start_IT+0xc8>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d013      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a1e      	ldr	r2, [pc, #120]	; (8009794 <HAL_TIM_Base_Start_IT+0xcc>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d00e      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a1c      	ldr	r2, [pc, #112]	; (8009798 <HAL_TIM_Base_Start_IT+0xd0>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d009      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a1b      	ldr	r2, [pc, #108]	; (800979c <HAL_TIM_Base_Start_IT+0xd4>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d004      	beq.n	800973e <HAL_TIM_Base_Start_IT+0x76>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a19      	ldr	r2, [pc, #100]	; (80097a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d115      	bne.n	800976a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	4b17      	ldr	r3, [pc, #92]	; (80097a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009746:	4013      	ands	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b06      	cmp	r3, #6
 800974e:	d015      	beq.n	800977c <HAL_TIM_Base_Start_IT+0xb4>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009756:	d011      	beq.n	800977c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0201 	orr.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009768:	e008      	b.n	800977c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f042 0201 	orr.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	e000      	b.n	800977e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800977c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3714      	adds	r7, #20
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	40012c00 	.word	0x40012c00
 8009790:	40000400 	.word	0x40000400
 8009794:	40000800 	.word	0x40000800
 8009798:	40000c00 	.word	0x40000c00
 800979c:	40013400 	.word	0x40013400
 80097a0:	40014000 	.word	0x40014000
 80097a4:	00010007 	.word	0x00010007

080097a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d122      	bne.n	8009804 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d11b      	bne.n	8009804 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f06f 0202 	mvn.w	r2, #2
 80097d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	f003 0303 	and.w	r3, r3, #3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f9cb 	bl	8009b86 <HAL_TIM_IC_CaptureCallback>
 80097f0:	e005      	b.n	80097fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f9bd 	bl	8009b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f9ce 	bl	8009b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	f003 0304 	and.w	r3, r3, #4
 800980e:	2b04      	cmp	r3, #4
 8009810:	d122      	bne.n	8009858 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f003 0304 	and.w	r3, r3, #4
 800981c:	2b04      	cmp	r3, #4
 800981e:	d11b      	bne.n	8009858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f06f 0204 	mvn.w	r2, #4
 8009828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2202      	movs	r2, #2
 800982e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f9a1 	bl	8009b86 <HAL_TIM_IC_CaptureCallback>
 8009844:	e005      	b.n	8009852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f993 	bl	8009b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f9a4 	bl	8009b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	f003 0308 	and.w	r3, r3, #8
 8009862:	2b08      	cmp	r3, #8
 8009864:	d122      	bne.n	80098ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f003 0308 	and.w	r3, r3, #8
 8009870:	2b08      	cmp	r3, #8
 8009872:	d11b      	bne.n	80098ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f06f 0208 	mvn.w	r2, #8
 800987c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2204      	movs	r2, #4
 8009882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	f003 0303 	and.w	r3, r3, #3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d003      	beq.n	800989a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f977 	bl	8009b86 <HAL_TIM_IC_CaptureCallback>
 8009898:	e005      	b.n	80098a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f969 	bl	8009b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f97a 	bl	8009b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	f003 0310 	and.w	r3, r3, #16
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d122      	bne.n	8009900 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f003 0310 	and.w	r3, r3, #16
 80098c4:	2b10      	cmp	r3, #16
 80098c6:	d11b      	bne.n	8009900 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f06f 0210 	mvn.w	r2, #16
 80098d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2208      	movs	r2, #8
 80098d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f94d 	bl	8009b86 <HAL_TIM_IC_CaptureCallback>
 80098ec:	e005      	b.n	80098fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f93f 	bl	8009b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f950 	bl	8009b9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b01      	cmp	r3, #1
 800990c:	d10e      	bne.n	800992c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f003 0301 	and.w	r3, r3, #1
 8009918:	2b01      	cmp	r3, #1
 800991a:	d107      	bne.n	800992c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f06f 0201 	mvn.w	r2, #1
 8009924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7f7 fc5a 	bl	80011e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009936:	2b80      	cmp	r3, #128	; 0x80
 8009938:	d10e      	bne.n	8009958 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	68db      	ldr	r3, [r3, #12]
 8009940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009944:	2b80      	cmp	r3, #128	; 0x80
 8009946:	d107      	bne.n	8009958 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fafc 	bl	8009f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009966:	d10e      	bne.n	8009986 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009972:	2b80      	cmp	r3, #128	; 0x80
 8009974:	d107      	bne.n	8009986 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800997e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 faef 	bl	8009f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009990:	2b40      	cmp	r3, #64	; 0x40
 8009992:	d10e      	bne.n	80099b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999e:	2b40      	cmp	r3, #64	; 0x40
 80099a0:	d107      	bne.n	80099b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f8fe 	bl	8009bae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f003 0320 	and.w	r3, r3, #32
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d10e      	bne.n	80099de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f003 0320 	and.w	r3, r3, #32
 80099ca:	2b20      	cmp	r3, #32
 80099cc:	d107      	bne.n	80099de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f06f 0220 	mvn.w	r2, #32
 80099d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 faaf 	bl	8009f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099de:	bf00      	nop
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_TIM_ConfigClockSource+0x18>
 80099fa:	2302      	movs	r3, #2
 80099fc:	e0b5      	b.n	8009b6a <HAL_TIM_ConfigClockSource+0x184>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2202      	movs	r2, #2
 8009a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009a20:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a28:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a3a:	d03e      	beq.n	8009aba <HAL_TIM_ConfigClockSource+0xd4>
 8009a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a40:	f200 8087 	bhi.w	8009b52 <HAL_TIM_ConfigClockSource+0x16c>
 8009a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a48:	f000 8085 	beq.w	8009b56 <HAL_TIM_ConfigClockSource+0x170>
 8009a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a50:	d87f      	bhi.n	8009b52 <HAL_TIM_ConfigClockSource+0x16c>
 8009a52:	2b70      	cmp	r3, #112	; 0x70
 8009a54:	d01a      	beq.n	8009a8c <HAL_TIM_ConfigClockSource+0xa6>
 8009a56:	2b70      	cmp	r3, #112	; 0x70
 8009a58:	d87b      	bhi.n	8009b52 <HAL_TIM_ConfigClockSource+0x16c>
 8009a5a:	2b60      	cmp	r3, #96	; 0x60
 8009a5c:	d050      	beq.n	8009b00 <HAL_TIM_ConfigClockSource+0x11a>
 8009a5e:	2b60      	cmp	r3, #96	; 0x60
 8009a60:	d877      	bhi.n	8009b52 <HAL_TIM_ConfigClockSource+0x16c>
 8009a62:	2b50      	cmp	r3, #80	; 0x50
 8009a64:	d03c      	beq.n	8009ae0 <HAL_TIM_ConfigClockSource+0xfa>
 8009a66:	2b50      	cmp	r3, #80	; 0x50
 8009a68:	d873      	bhi.n	8009b52 <HAL_TIM_ConfigClockSource+0x16c>
 8009a6a:	2b40      	cmp	r3, #64	; 0x40
 8009a6c:	d058      	beq.n	8009b20 <HAL_TIM_ConfigClockSource+0x13a>
 8009a6e:	2b40      	cmp	r3, #64	; 0x40
 8009a70:	d86f      	bhi.n	8009b52 <HAL_TIM_ConfigClockSource+0x16c>
 8009a72:	2b30      	cmp	r3, #48	; 0x30
 8009a74:	d064      	beq.n	8009b40 <HAL_TIM_ConfigClockSource+0x15a>
 8009a76:	2b30      	cmp	r3, #48	; 0x30
 8009a78:	d86b      	bhi.n	8009b52 <HAL_TIM_ConfigClockSource+0x16c>
 8009a7a:	2b20      	cmp	r3, #32
 8009a7c:	d060      	beq.n	8009b40 <HAL_TIM_ConfigClockSource+0x15a>
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d867      	bhi.n	8009b52 <HAL_TIM_ConfigClockSource+0x16c>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d05c      	beq.n	8009b40 <HAL_TIM_ConfigClockSource+0x15a>
 8009a86:	2b10      	cmp	r3, #16
 8009a88:	d05a      	beq.n	8009b40 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009a8a:	e062      	b.n	8009b52 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	6899      	ldr	r1, [r3, #8]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	f000 f9a6 	bl	8009dec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009aae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	609a      	str	r2, [r3, #8]
      break;
 8009ab8:	e04e      	b.n	8009b58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6818      	ldr	r0, [r3, #0]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	6899      	ldr	r1, [r3, #8]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	f000 f98f 	bl	8009dec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009adc:	609a      	str	r2, [r3, #8]
      break;
 8009ade:	e03b      	b.n	8009b58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6818      	ldr	r0, [r3, #0]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	6859      	ldr	r1, [r3, #4]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	461a      	mov	r2, r3
 8009aee:	f000 f903 	bl	8009cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2150      	movs	r1, #80	; 0x50
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 f95c 	bl	8009db6 <TIM_ITRx_SetConfig>
      break;
 8009afe:	e02b      	b.n	8009b58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6818      	ldr	r0, [r3, #0]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	6859      	ldr	r1, [r3, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	f000 f922 	bl	8009d56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2160      	movs	r1, #96	; 0x60
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f000 f94c 	bl	8009db6 <TIM_ITRx_SetConfig>
      break;
 8009b1e:	e01b      	b.n	8009b58 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6818      	ldr	r0, [r3, #0]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	6859      	ldr	r1, [r3, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	f000 f8e3 	bl	8009cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2140      	movs	r1, #64	; 0x40
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 f93c 	bl	8009db6 <TIM_ITRx_SetConfig>
      break;
 8009b3e:	e00b      	b.n	8009b58 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	f000 f933 	bl	8009db6 <TIM_ITRx_SetConfig>
        break;
 8009b50:	e002      	b.n	8009b58 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8009b52:	bf00      	nop
 8009b54:	e000      	b.n	8009b58 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8009b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b7a:	bf00      	nop
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b8e:	bf00      	nop
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ba2:	bf00      	nop
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b083      	sub	sp, #12
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
	...

08009bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a40      	ldr	r2, [pc, #256]	; (8009cd8 <TIM_Base_SetConfig+0x114>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d013      	beq.n	8009c04 <TIM_Base_SetConfig+0x40>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009be2:	d00f      	beq.n	8009c04 <TIM_Base_SetConfig+0x40>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a3d      	ldr	r2, [pc, #244]	; (8009cdc <TIM_Base_SetConfig+0x118>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d00b      	beq.n	8009c04 <TIM_Base_SetConfig+0x40>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a3c      	ldr	r2, [pc, #240]	; (8009ce0 <TIM_Base_SetConfig+0x11c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d007      	beq.n	8009c04 <TIM_Base_SetConfig+0x40>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a3b      	ldr	r2, [pc, #236]	; (8009ce4 <TIM_Base_SetConfig+0x120>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d003      	beq.n	8009c04 <TIM_Base_SetConfig+0x40>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a3a      	ldr	r2, [pc, #232]	; (8009ce8 <TIM_Base_SetConfig+0x124>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d108      	bne.n	8009c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a2f      	ldr	r2, [pc, #188]	; (8009cd8 <TIM_Base_SetConfig+0x114>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d01f      	beq.n	8009c5e <TIM_Base_SetConfig+0x9a>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c24:	d01b      	beq.n	8009c5e <TIM_Base_SetConfig+0x9a>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a2c      	ldr	r2, [pc, #176]	; (8009cdc <TIM_Base_SetConfig+0x118>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d017      	beq.n	8009c5e <TIM_Base_SetConfig+0x9a>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a2b      	ldr	r2, [pc, #172]	; (8009ce0 <TIM_Base_SetConfig+0x11c>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d013      	beq.n	8009c5e <TIM_Base_SetConfig+0x9a>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a2a      	ldr	r2, [pc, #168]	; (8009ce4 <TIM_Base_SetConfig+0x120>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d00f      	beq.n	8009c5e <TIM_Base_SetConfig+0x9a>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a29      	ldr	r2, [pc, #164]	; (8009ce8 <TIM_Base_SetConfig+0x124>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d00b      	beq.n	8009c5e <TIM_Base_SetConfig+0x9a>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a28      	ldr	r2, [pc, #160]	; (8009cec <TIM_Base_SetConfig+0x128>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d007      	beq.n	8009c5e <TIM_Base_SetConfig+0x9a>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a27      	ldr	r2, [pc, #156]	; (8009cf0 <TIM_Base_SetConfig+0x12c>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d003      	beq.n	8009c5e <TIM_Base_SetConfig+0x9a>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a26      	ldr	r2, [pc, #152]	; (8009cf4 <TIM_Base_SetConfig+0x130>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d108      	bne.n	8009c70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	689a      	ldr	r2, [r3, #8]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a10      	ldr	r2, [pc, #64]	; (8009cd8 <TIM_Base_SetConfig+0x114>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d00f      	beq.n	8009cbc <TIM_Base_SetConfig+0xf8>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a12      	ldr	r2, [pc, #72]	; (8009ce8 <TIM_Base_SetConfig+0x124>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d00b      	beq.n	8009cbc <TIM_Base_SetConfig+0xf8>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a11      	ldr	r2, [pc, #68]	; (8009cec <TIM_Base_SetConfig+0x128>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d007      	beq.n	8009cbc <TIM_Base_SetConfig+0xf8>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a10      	ldr	r2, [pc, #64]	; (8009cf0 <TIM_Base_SetConfig+0x12c>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d003      	beq.n	8009cbc <TIM_Base_SetConfig+0xf8>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a0f      	ldr	r2, [pc, #60]	; (8009cf4 <TIM_Base_SetConfig+0x130>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d103      	bne.n	8009cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	691a      	ldr	r2, [r3, #16]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	615a      	str	r2, [r3, #20]
}
 8009cca:	bf00      	nop
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40012c00 	.word	0x40012c00
 8009cdc:	40000400 	.word	0x40000400
 8009ce0:	40000800 	.word	0x40000800
 8009ce4:	40000c00 	.word	0x40000c00
 8009ce8:	40013400 	.word	0x40013400
 8009cec:	40014000 	.word	0x40014000
 8009cf0:	40014400 	.word	0x40014400
 8009cf4:	40014800 	.word	0x40014800

08009cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	f023 0201 	bic.w	r2, r3, #1
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	011b      	lsls	r3, r3, #4
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f023 030a 	bic.w	r3, r3, #10
 8009d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d36:	697a      	ldr	r2, [r7, #20]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	621a      	str	r2, [r3, #32]
}
 8009d4a:	bf00      	nop
 8009d4c:	371c      	adds	r7, #28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b087      	sub	sp, #28
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	60f8      	str	r0, [r7, #12]
 8009d5e:	60b9      	str	r1, [r7, #8]
 8009d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	f023 0210 	bic.w	r2, r3, #16
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6a1b      	ldr	r3, [r3, #32]
 8009d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	031b      	lsls	r3, r3, #12
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	011b      	lsls	r3, r3, #4
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	697a      	ldr	r2, [r7, #20]
 8009da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	621a      	str	r2, [r3, #32]
}
 8009daa:	bf00      	nop
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	f043 0307 	orr.w	r3, r3, #7
 8009dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	609a      	str	r2, [r3, #8]
}
 8009de0:	bf00      	nop
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b087      	sub	sp, #28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	021a      	lsls	r2, r3, #8
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	609a      	str	r2, [r3, #8]
}
 8009e20:	bf00      	nop
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d101      	bne.n	8009e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e40:	2302      	movs	r3, #2
 8009e42:	e068      	b.n	8009f16 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a2e      	ldr	r2, [pc, #184]	; (8009f24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d004      	beq.n	8009e78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a2d      	ldr	r2, [pc, #180]	; (8009f28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d108      	bne.n	8009e8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009e7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a1e      	ldr	r2, [pc, #120]	; (8009f24 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d01d      	beq.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eb6:	d018      	beq.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a1b      	ldr	r2, [pc, #108]	; (8009f2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d013      	beq.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a1a      	ldr	r2, [pc, #104]	; (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00e      	beq.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a18      	ldr	r2, [pc, #96]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d009      	beq.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a13      	ldr	r2, [pc, #76]	; (8009f28 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d004      	beq.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a14      	ldr	r2, [pc, #80]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d10c      	bne.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	40012c00 	.word	0x40012c00
 8009f28:	40013400 	.word	0x40013400
 8009f2c:	40000400 	.word	0x40000400
 8009f30:	40000800 	.word	0x40000800
 8009f34:	40000c00 	.word	0x40000c00
 8009f38:	40014000 	.word	0x40014000

08009f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e042      	b.n	800a010 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d106      	bne.n	8009fa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7f7 fca7 	bl	80018f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2224      	movs	r2, #36	; 0x24
 8009fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f022 0201 	bic.w	r2, r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f82c 	bl	800a018 <UART_SetConfig>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d101      	bne.n	8009fca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e022      	b.n	800a010 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d002      	beq.n	8009fd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 faea 	bl	800a5ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fb71 	bl	800a6f0 <UART_CheckIdleState>
 800a00e:	4603      	mov	r3, r0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a018:	b5b0      	push	{r4, r5, r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	431a      	orrs	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	4313      	orrs	r3, r2
 800a03a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	4bb1      	ldr	r3, [pc, #708]	; (800a308 <UART_SetConfig+0x2f0>)
 800a044:	4013      	ands	r3, r2
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	6812      	ldr	r2, [r2, #0]
 800a04a:	69f9      	ldr	r1, [r7, #28]
 800a04c:	430b      	orrs	r3, r1
 800a04e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4aa6      	ldr	r2, [pc, #664]	; (800a30c <UART_SetConfig+0x2f4>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d004      	beq.n	800a080 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a08a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	6812      	ldr	r2, [r2, #0]
 800a092:	69f9      	ldr	r1, [r7, #28]
 800a094:	430b      	orrs	r3, r1
 800a096:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09e:	f023 010f 	bic.w	r1, r3, #15
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	430a      	orrs	r2, r1
 800a0ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a97      	ldr	r2, [pc, #604]	; (800a310 <UART_SetConfig+0x2f8>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d120      	bne.n	800a0fa <UART_SetConfig+0xe2>
 800a0b8:	4b96      	ldr	r3, [pc, #600]	; (800a314 <UART_SetConfig+0x2fc>)
 800a0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0be:	f003 0303 	and.w	r3, r3, #3
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d816      	bhi.n	800a0f4 <UART_SetConfig+0xdc>
 800a0c6:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <UART_SetConfig+0xb4>)
 800a0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0cc:	0800a0dd 	.word	0x0800a0dd
 800a0d0:	0800a0e9 	.word	0x0800a0e9
 800a0d4:	0800a0e3 	.word	0x0800a0e3
 800a0d8:	0800a0ef 	.word	0x0800a0ef
 800a0dc:	2301      	movs	r3, #1
 800a0de:	76fb      	strb	r3, [r7, #27]
 800a0e0:	e0e7      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a0e2:	2302      	movs	r3, #2
 800a0e4:	76fb      	strb	r3, [r7, #27]
 800a0e6:	e0e4      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	76fb      	strb	r3, [r7, #27]
 800a0ec:	e0e1      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a0ee:	2308      	movs	r3, #8
 800a0f0:	76fb      	strb	r3, [r7, #27]
 800a0f2:	e0de      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	76fb      	strb	r3, [r7, #27]
 800a0f8:	e0db      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a86      	ldr	r2, [pc, #536]	; (800a318 <UART_SetConfig+0x300>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d132      	bne.n	800a16a <UART_SetConfig+0x152>
 800a104:	4b83      	ldr	r3, [pc, #524]	; (800a314 <UART_SetConfig+0x2fc>)
 800a106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a10a:	f003 030c 	and.w	r3, r3, #12
 800a10e:	2b0c      	cmp	r3, #12
 800a110:	d828      	bhi.n	800a164 <UART_SetConfig+0x14c>
 800a112:	a201      	add	r2, pc, #4	; (adr r2, 800a118 <UART_SetConfig+0x100>)
 800a114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a118:	0800a14d 	.word	0x0800a14d
 800a11c:	0800a165 	.word	0x0800a165
 800a120:	0800a165 	.word	0x0800a165
 800a124:	0800a165 	.word	0x0800a165
 800a128:	0800a159 	.word	0x0800a159
 800a12c:	0800a165 	.word	0x0800a165
 800a130:	0800a165 	.word	0x0800a165
 800a134:	0800a165 	.word	0x0800a165
 800a138:	0800a153 	.word	0x0800a153
 800a13c:	0800a165 	.word	0x0800a165
 800a140:	0800a165 	.word	0x0800a165
 800a144:	0800a165 	.word	0x0800a165
 800a148:	0800a15f 	.word	0x0800a15f
 800a14c:	2300      	movs	r3, #0
 800a14e:	76fb      	strb	r3, [r7, #27]
 800a150:	e0af      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a152:	2302      	movs	r3, #2
 800a154:	76fb      	strb	r3, [r7, #27]
 800a156:	e0ac      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a158:	2304      	movs	r3, #4
 800a15a:	76fb      	strb	r3, [r7, #27]
 800a15c:	e0a9      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a15e:	2308      	movs	r3, #8
 800a160:	76fb      	strb	r3, [r7, #27]
 800a162:	e0a6      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a164:	2310      	movs	r3, #16
 800a166:	76fb      	strb	r3, [r7, #27]
 800a168:	e0a3      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a6b      	ldr	r2, [pc, #428]	; (800a31c <UART_SetConfig+0x304>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d120      	bne.n	800a1b6 <UART_SetConfig+0x19e>
 800a174:	4b67      	ldr	r3, [pc, #412]	; (800a314 <UART_SetConfig+0x2fc>)
 800a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a17a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a17e:	2b30      	cmp	r3, #48	; 0x30
 800a180:	d013      	beq.n	800a1aa <UART_SetConfig+0x192>
 800a182:	2b30      	cmp	r3, #48	; 0x30
 800a184:	d814      	bhi.n	800a1b0 <UART_SetConfig+0x198>
 800a186:	2b20      	cmp	r3, #32
 800a188:	d009      	beq.n	800a19e <UART_SetConfig+0x186>
 800a18a:	2b20      	cmp	r3, #32
 800a18c:	d810      	bhi.n	800a1b0 <UART_SetConfig+0x198>
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <UART_SetConfig+0x180>
 800a192:	2b10      	cmp	r3, #16
 800a194:	d006      	beq.n	800a1a4 <UART_SetConfig+0x18c>
 800a196:	e00b      	b.n	800a1b0 <UART_SetConfig+0x198>
 800a198:	2300      	movs	r3, #0
 800a19a:	76fb      	strb	r3, [r7, #27]
 800a19c:	e089      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	76fb      	strb	r3, [r7, #27]
 800a1a2:	e086      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a1a4:	2304      	movs	r3, #4
 800a1a6:	76fb      	strb	r3, [r7, #27]
 800a1a8:	e083      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	76fb      	strb	r3, [r7, #27]
 800a1ae:	e080      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a1b0:	2310      	movs	r3, #16
 800a1b2:	76fb      	strb	r3, [r7, #27]
 800a1b4:	e07d      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a59      	ldr	r2, [pc, #356]	; (800a320 <UART_SetConfig+0x308>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d120      	bne.n	800a202 <UART_SetConfig+0x1ea>
 800a1c0:	4b54      	ldr	r3, [pc, #336]	; (800a314 <UART_SetConfig+0x2fc>)
 800a1c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a1ca:	2bc0      	cmp	r3, #192	; 0xc0
 800a1cc:	d013      	beq.n	800a1f6 <UART_SetConfig+0x1de>
 800a1ce:	2bc0      	cmp	r3, #192	; 0xc0
 800a1d0:	d814      	bhi.n	800a1fc <UART_SetConfig+0x1e4>
 800a1d2:	2b80      	cmp	r3, #128	; 0x80
 800a1d4:	d009      	beq.n	800a1ea <UART_SetConfig+0x1d2>
 800a1d6:	2b80      	cmp	r3, #128	; 0x80
 800a1d8:	d810      	bhi.n	800a1fc <UART_SetConfig+0x1e4>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <UART_SetConfig+0x1cc>
 800a1de:	2b40      	cmp	r3, #64	; 0x40
 800a1e0:	d006      	beq.n	800a1f0 <UART_SetConfig+0x1d8>
 800a1e2:	e00b      	b.n	800a1fc <UART_SetConfig+0x1e4>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	76fb      	strb	r3, [r7, #27]
 800a1e8:	e063      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	76fb      	strb	r3, [r7, #27]
 800a1ee:	e060      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a1f0:	2304      	movs	r3, #4
 800a1f2:	76fb      	strb	r3, [r7, #27]
 800a1f4:	e05d      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a1f6:	2308      	movs	r3, #8
 800a1f8:	76fb      	strb	r3, [r7, #27]
 800a1fa:	e05a      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a1fc:	2310      	movs	r3, #16
 800a1fe:	76fb      	strb	r3, [r7, #27]
 800a200:	e057      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a47      	ldr	r2, [pc, #284]	; (800a324 <UART_SetConfig+0x30c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d125      	bne.n	800a258 <UART_SetConfig+0x240>
 800a20c:	4b41      	ldr	r3, [pc, #260]	; (800a314 <UART_SetConfig+0x2fc>)
 800a20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a21a:	d017      	beq.n	800a24c <UART_SetConfig+0x234>
 800a21c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a220:	d817      	bhi.n	800a252 <UART_SetConfig+0x23a>
 800a222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a226:	d00b      	beq.n	800a240 <UART_SetConfig+0x228>
 800a228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a22c:	d811      	bhi.n	800a252 <UART_SetConfig+0x23a>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <UART_SetConfig+0x222>
 800a232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a236:	d006      	beq.n	800a246 <UART_SetConfig+0x22e>
 800a238:	e00b      	b.n	800a252 <UART_SetConfig+0x23a>
 800a23a:	2300      	movs	r3, #0
 800a23c:	76fb      	strb	r3, [r7, #27]
 800a23e:	e038      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a240:	2302      	movs	r3, #2
 800a242:	76fb      	strb	r3, [r7, #27]
 800a244:	e035      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a246:	2304      	movs	r3, #4
 800a248:	76fb      	strb	r3, [r7, #27]
 800a24a:	e032      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a24c:	2308      	movs	r3, #8
 800a24e:	76fb      	strb	r3, [r7, #27]
 800a250:	e02f      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a252:	2310      	movs	r3, #16
 800a254:	76fb      	strb	r3, [r7, #27]
 800a256:	e02c      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a2b      	ldr	r2, [pc, #172]	; (800a30c <UART_SetConfig+0x2f4>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d125      	bne.n	800a2ae <UART_SetConfig+0x296>
 800a262:	4b2c      	ldr	r3, [pc, #176]	; (800a314 <UART_SetConfig+0x2fc>)
 800a264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a268:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a26c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a270:	d017      	beq.n	800a2a2 <UART_SetConfig+0x28a>
 800a272:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a276:	d817      	bhi.n	800a2a8 <UART_SetConfig+0x290>
 800a278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a27c:	d00b      	beq.n	800a296 <UART_SetConfig+0x27e>
 800a27e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a282:	d811      	bhi.n	800a2a8 <UART_SetConfig+0x290>
 800a284:	2b00      	cmp	r3, #0
 800a286:	d003      	beq.n	800a290 <UART_SetConfig+0x278>
 800a288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a28c:	d006      	beq.n	800a29c <UART_SetConfig+0x284>
 800a28e:	e00b      	b.n	800a2a8 <UART_SetConfig+0x290>
 800a290:	2300      	movs	r3, #0
 800a292:	76fb      	strb	r3, [r7, #27]
 800a294:	e00d      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a296:	2302      	movs	r3, #2
 800a298:	76fb      	strb	r3, [r7, #27]
 800a29a:	e00a      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a29c:	2304      	movs	r3, #4
 800a29e:	76fb      	strb	r3, [r7, #27]
 800a2a0:	e007      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a2a2:	2308      	movs	r3, #8
 800a2a4:	76fb      	strb	r3, [r7, #27]
 800a2a6:	e004      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	76fb      	strb	r3, [r7, #27]
 800a2ac:	e001      	b.n	800a2b2 <UART_SetConfig+0x29a>
 800a2ae:	2310      	movs	r3, #16
 800a2b0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a15      	ldr	r2, [pc, #84]	; (800a30c <UART_SetConfig+0x2f4>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	f040 809f 	bne.w	800a3fc <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2be:	7efb      	ldrb	r3, [r7, #27]
 800a2c0:	2b08      	cmp	r3, #8
 800a2c2:	d837      	bhi.n	800a334 <UART_SetConfig+0x31c>
 800a2c4:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <UART_SetConfig+0x2b4>)
 800a2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ca:	bf00      	nop
 800a2cc:	0800a2f1 	.word	0x0800a2f1
 800a2d0:	0800a335 	.word	0x0800a335
 800a2d4:	0800a2f9 	.word	0x0800a2f9
 800a2d8:	0800a335 	.word	0x0800a335
 800a2dc:	0800a2ff 	.word	0x0800a2ff
 800a2e0:	0800a335 	.word	0x0800a335
 800a2e4:	0800a335 	.word	0x0800a335
 800a2e8:	0800a335 	.word	0x0800a335
 800a2ec:	0800a32d 	.word	0x0800a32d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2f0:	f7fb fad0 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 800a2f4:	6178      	str	r0, [r7, #20]
        break;
 800a2f6:	e022      	b.n	800a33e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	; (800a328 <UART_SetConfig+0x310>)
 800a2fa:	617b      	str	r3, [r7, #20]
        break;
 800a2fc:	e01f      	b.n	800a33e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2fe:	f7fb fa33 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 800a302:	6178      	str	r0, [r7, #20]
        break;
 800a304:	e01b      	b.n	800a33e <UART_SetConfig+0x326>
 800a306:	bf00      	nop
 800a308:	cfff69f3 	.word	0xcfff69f3
 800a30c:	40008000 	.word	0x40008000
 800a310:	40013800 	.word	0x40013800
 800a314:	40021000 	.word	0x40021000
 800a318:	40004400 	.word	0x40004400
 800a31c:	40004800 	.word	0x40004800
 800a320:	40004c00 	.word	0x40004c00
 800a324:	40005000 	.word	0x40005000
 800a328:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a32c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a330:	617b      	str	r3, [r7, #20]
        break;
 800a332:	e004      	b.n	800a33e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800a334:	2300      	movs	r3, #0
 800a336:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	76bb      	strb	r3, [r7, #26]
        break;
 800a33c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 811b 	beq.w	800a57c <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34a:	4a96      	ldr	r2, [pc, #600]	; (800a5a4 <UART_SetConfig+0x58c>)
 800a34c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a350:	461a      	mov	r2, r3
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	fbb3 f3f2 	udiv	r3, r3, r2
 800a358:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685a      	ldr	r2, [r3, #4]
 800a35e:	4613      	mov	r3, r2
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	4413      	add	r3, r2
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	429a      	cmp	r2, r3
 800a368:	d305      	bcc.n	800a376 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	429a      	cmp	r2, r3
 800a374:	d902      	bls.n	800a37c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	76bb      	strb	r3, [r7, #26]
 800a37a:	e0ff      	b.n	800a57c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	4618      	mov	r0, r3
 800a380:	f04f 0100 	mov.w	r1, #0
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a388:	4a86      	ldr	r2, [pc, #536]	; (800a5a4 <UART_SetConfig+0x58c>)
 800a38a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a38e:	b29a      	uxth	r2, r3
 800a390:	f04f 0300 	mov.w	r3, #0
 800a394:	f7f5 ff34 	bl	8000200 <__aeabi_uldivmod>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4610      	mov	r0, r2
 800a39e:	4619      	mov	r1, r3
 800a3a0:	f04f 0200 	mov.w	r2, #0
 800a3a4:	f04f 0300 	mov.w	r3, #0
 800a3a8:	020b      	lsls	r3, r1, #8
 800a3aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a3ae:	0202      	lsls	r2, r0, #8
 800a3b0:	6879      	ldr	r1, [r7, #4]
 800a3b2:	6849      	ldr	r1, [r1, #4]
 800a3b4:	0849      	lsrs	r1, r1, #1
 800a3b6:	4608      	mov	r0, r1
 800a3b8:	f04f 0100 	mov.w	r1, #0
 800a3bc:	1814      	adds	r4, r2, r0
 800a3be:	eb43 0501 	adc.w	r5, r3, r1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f04f 0300 	mov.w	r3, #0
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	f7f5 ff16 	bl	8000200 <__aeabi_uldivmod>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	4613      	mov	r3, r2
 800a3da:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3e2:	d308      	bcc.n	800a3f6 <UART_SetConfig+0x3de>
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3ea:	d204      	bcs.n	800a3f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	60da      	str	r2, [r3, #12]
 800a3f4:	e0c2      	b.n	800a57c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	76bb      	strb	r3, [r7, #26]
 800a3fa:	e0bf      	b.n	800a57c <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a404:	d165      	bne.n	800a4d2 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800a406:	7efb      	ldrb	r3, [r7, #27]
 800a408:	2b08      	cmp	r3, #8
 800a40a:	d828      	bhi.n	800a45e <UART_SetConfig+0x446>
 800a40c:	a201      	add	r2, pc, #4	; (adr r2, 800a414 <UART_SetConfig+0x3fc>)
 800a40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a412:	bf00      	nop
 800a414:	0800a439 	.word	0x0800a439
 800a418:	0800a441 	.word	0x0800a441
 800a41c:	0800a449 	.word	0x0800a449
 800a420:	0800a45f 	.word	0x0800a45f
 800a424:	0800a44f 	.word	0x0800a44f
 800a428:	0800a45f 	.word	0x0800a45f
 800a42c:	0800a45f 	.word	0x0800a45f
 800a430:	0800a45f 	.word	0x0800a45f
 800a434:	0800a457 	.word	0x0800a457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a438:	f7fb fa2c 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 800a43c:	6178      	str	r0, [r7, #20]
        break;
 800a43e:	e013      	b.n	800a468 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a440:	f7fb fa3e 	bl	80058c0 <HAL_RCC_GetPCLK2Freq>
 800a444:	6178      	str	r0, [r7, #20]
        break;
 800a446:	e00f      	b.n	800a468 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a448:	4b57      	ldr	r3, [pc, #348]	; (800a5a8 <UART_SetConfig+0x590>)
 800a44a:	617b      	str	r3, [r7, #20]
        break;
 800a44c:	e00c      	b.n	800a468 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a44e:	f7fb f98b 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 800a452:	6178      	str	r0, [r7, #20]
        break;
 800a454:	e008      	b.n	800a468 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a45a:	617b      	str	r3, [r7, #20]
        break;
 800a45c:	e004      	b.n	800a468 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800a45e:	2300      	movs	r3, #0
 800a460:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	76bb      	strb	r3, [r7, #26]
        break;
 800a466:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 8086 	beq.w	800a57c <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	4a4b      	ldr	r2, [pc, #300]	; (800a5a4 <UART_SetConfig+0x58c>)
 800a476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a47a:	461a      	mov	r2, r3
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a482:	005a      	lsls	r2, r3, #1
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	085b      	lsrs	r3, r3, #1
 800a48a:	441a      	add	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	fbb2 f3f3 	udiv	r3, r2, r3
 800a494:	b29b      	uxth	r3, r3
 800a496:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2b0f      	cmp	r3, #15
 800a49c:	d916      	bls.n	800a4cc <UART_SetConfig+0x4b4>
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a4:	d212      	bcs.n	800a4cc <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	f023 030f 	bic.w	r3, r3, #15
 800a4ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	f003 0307 	and.w	r3, r3, #7
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	89fb      	ldrh	r3, [r7, #14]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	89fa      	ldrh	r2, [r7, #14]
 800a4c8:	60da      	str	r2, [r3, #12]
 800a4ca:	e057      	b.n	800a57c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	76bb      	strb	r3, [r7, #26]
 800a4d0:	e054      	b.n	800a57c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a4d2:	7efb      	ldrb	r3, [r7, #27]
 800a4d4:	2b08      	cmp	r3, #8
 800a4d6:	d828      	bhi.n	800a52a <UART_SetConfig+0x512>
 800a4d8:	a201      	add	r2, pc, #4	; (adr r2, 800a4e0 <UART_SetConfig+0x4c8>)
 800a4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4de:	bf00      	nop
 800a4e0:	0800a505 	.word	0x0800a505
 800a4e4:	0800a50d 	.word	0x0800a50d
 800a4e8:	0800a515 	.word	0x0800a515
 800a4ec:	0800a52b 	.word	0x0800a52b
 800a4f0:	0800a51b 	.word	0x0800a51b
 800a4f4:	0800a52b 	.word	0x0800a52b
 800a4f8:	0800a52b 	.word	0x0800a52b
 800a4fc:	0800a52b 	.word	0x0800a52b
 800a500:	0800a523 	.word	0x0800a523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a504:	f7fb f9c6 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 800a508:	6178      	str	r0, [r7, #20]
        break;
 800a50a:	e013      	b.n	800a534 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a50c:	f7fb f9d8 	bl	80058c0 <HAL_RCC_GetPCLK2Freq>
 800a510:	6178      	str	r0, [r7, #20]
        break;
 800a512:	e00f      	b.n	800a534 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a514:	4b24      	ldr	r3, [pc, #144]	; (800a5a8 <UART_SetConfig+0x590>)
 800a516:	617b      	str	r3, [r7, #20]
        break;
 800a518:	e00c      	b.n	800a534 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a51a:	f7fb f925 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 800a51e:	6178      	str	r0, [r7, #20]
        break;
 800a520:	e008      	b.n	800a534 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a526:	617b      	str	r3, [r7, #20]
        break;
 800a528:	e004      	b.n	800a534 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800a52a:	2300      	movs	r3, #0
 800a52c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	76bb      	strb	r3, [r7, #26]
        break;
 800a532:	bf00      	nop
    }

    if (pclk != 0U)
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d020      	beq.n	800a57c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	4a19      	ldr	r2, [pc, #100]	; (800a5a4 <UART_SetConfig+0x58c>)
 800a540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a544:	461a      	mov	r2, r3
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	fbb3 f2f2 	udiv	r2, r3, r2
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	085b      	lsrs	r3, r3, #1
 800a552:	441a      	add	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	fbb2 f3f3 	udiv	r3, r2, r3
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	2b0f      	cmp	r3, #15
 800a564:	d908      	bls.n	800a578 <UART_SetConfig+0x560>
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a56c:	d204      	bcs.n	800a578 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	60da      	str	r2, [r3, #12]
 800a576:	e001      	b.n	800a57c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a598:	7ebb      	ldrb	r3, [r7, #26]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3720      	adds	r7, #32
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	080130d0 	.word	0x080130d0
 800a5a8:	00f42400 	.word	0x00f42400

0800a5ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5da:	f003 0302 	and.w	r3, r3, #2
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00a      	beq.n	800a61a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61e:	f003 0308 	and.w	r3, r3, #8
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a640:	f003 0310 	and.w	r3, r3, #16
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00a      	beq.n	800a65e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	430a      	orrs	r2, r1
 800a65c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a662:	f003 0320 	and.w	r3, r3, #32
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00a      	beq.n	800a680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01a      	beq.n	800a6c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6aa:	d10a      	bne.n	800a6c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00a      	beq.n	800a6e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	605a      	str	r2, [r3, #4]
  }
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a700:	f7f7 fa6a 	bl	8001bd8 <HAL_GetTick>
 800a704:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0308 	and.w	r3, r3, #8
 800a710:	2b08      	cmp	r3, #8
 800a712:	d10e      	bne.n	800a732 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f82f 	bl	800a786 <UART_WaitOnFlagUntilTimeout>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	e025      	b.n	800a77e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	d10e      	bne.n	800a75e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f819 	bl	800a786 <UART_WaitOnFlagUntilTimeout>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e00f      	b.n	800a77e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2220      	movs	r2, #32
 800a762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2220      	movs	r2, #32
 800a76a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b084      	sub	sp, #16
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	60f8      	str	r0, [r7, #12]
 800a78e:	60b9      	str	r1, [r7, #8]
 800a790:	603b      	str	r3, [r7, #0]
 800a792:	4613      	mov	r3, r2
 800a794:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a796:	e062      	b.n	800a85e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79e:	d05e      	beq.n	800a85e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7a0:	f7f7 fa1a 	bl	8001bd8 <HAL_GetTick>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	69ba      	ldr	r2, [r7, #24]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d302      	bcc.n	800a7b6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d11d      	bne.n	800a7f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7c4:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	689a      	ldr	r2, [r3, #8]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f022 0201 	bic.w	r2, r2, #1
 800a7d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2220      	movs	r2, #32
 800a7e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e045      	b.n	800a87e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 0304 	and.w	r3, r3, #4
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d02e      	beq.n	800a85e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	69db      	ldr	r3, [r3, #28]
 800a806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a80a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a80e:	d126      	bne.n	800a85e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a818:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a828:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f022 0201 	bic.w	r2, r2, #1
 800a838:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2220      	movs	r2, #32
 800a846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2220      	movs	r2, #32
 800a84e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a85a:	2303      	movs	r3, #3
 800a85c:	e00f      	b.n	800a87e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	69da      	ldr	r2, [r3, #28]
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	4013      	ands	r3, r2
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	bf0c      	ite	eq
 800a86e:	2301      	moveq	r3, #1
 800a870:	2300      	movne	r3, #0
 800a872:	b2db      	uxtb	r3, r3
 800a874:	461a      	mov	r2, r3
 800a876:	79fb      	ldrb	r3, [r7, #7]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d08d      	beq.n	800a798 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a886:	b480      	push	{r7}
 800a888:	b085      	sub	sp, #20
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a894:	2b01      	cmp	r3, #1
 800a896:	d101      	bne.n	800a89c <HAL_UARTEx_DisableFifoMode+0x16>
 800a898:	2302      	movs	r3, #2
 800a89a:	e027      	b.n	800a8ec <HAL_UARTEx_DisableFifoMode+0x66>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2224      	movs	r2, #36	; 0x24
 800a8a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f022 0201 	bic.w	r2, r2, #1
 800a8c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d101      	bne.n	800a910 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a90c:	2302      	movs	r3, #2
 800a90e:	e02d      	b.n	800a96c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2224      	movs	r2, #36	; 0x24
 800a91c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f022 0201 	bic.w	r2, r2, #1
 800a936:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	430a      	orrs	r2, r1
 800a94a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 f84f 	bl	800a9f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2220      	movs	r2, #32
 800a95e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a984:	2b01      	cmp	r3, #1
 800a986:	d101      	bne.n	800a98c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a988:	2302      	movs	r3, #2
 800a98a:	e02d      	b.n	800a9e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2224      	movs	r2, #36	; 0x24
 800a998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0201 	bic.w	r2, r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	430a      	orrs	r2, r1
 800a9c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f811 	bl	800a9f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d108      	bne.n	800aa12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa10:	e031      	b.n	800aa76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa12:	2308      	movs	r3, #8
 800aa14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa16:	2308      	movs	r3, #8
 800aa18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	0e5b      	lsrs	r3, r3, #25
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 0307 	and.w	r3, r3, #7
 800aa28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	0f5b      	lsrs	r3, r3, #29
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	f003 0307 	and.w	r3, r3, #7
 800aa38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	7b3a      	ldrb	r2, [r7, #12]
 800aa3e:	4911      	ldr	r1, [pc, #68]	; (800aa84 <UARTEx_SetNbDataToProcess+0x94>)
 800aa40:	5c8a      	ldrb	r2, [r1, r2]
 800aa42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa46:	7b3a      	ldrb	r2, [r7, #12]
 800aa48:	490f      	ldr	r1, [pc, #60]	; (800aa88 <UARTEx_SetNbDataToProcess+0x98>)
 800aa4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa58:	7bfb      	ldrb	r3, [r7, #15]
 800aa5a:	7b7a      	ldrb	r2, [r7, #13]
 800aa5c:	4909      	ldr	r1, [pc, #36]	; (800aa84 <UARTEx_SetNbDataToProcess+0x94>)
 800aa5e:	5c8a      	ldrb	r2, [r1, r2]
 800aa60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa64:	7b7a      	ldrb	r2, [r7, #13]
 800aa66:	4908      	ldr	r1, [pc, #32]	; (800aa88 <UARTEx_SetNbDataToProcess+0x98>)
 800aa68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa76:	bf00      	nop
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	080130e8 	.word	0x080130e8
 800aa88:	080130f0 	.word	0x080130f0

0800aa8c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	b480      	push	{r7}
 800aa90:	b085      	sub	sp, #20
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	f107 001c 	add.w	r0, r7, #28
 800aa9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800aaa2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800aaa4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aaa6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800aaaa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800aaae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800aab2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	4b07      	ldr	r3, [pc, #28]	; (800aadc <SDMMC_Init+0x50>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	431a      	orrs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	b004      	add	sp, #16
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	ffc02c00 	.word	0xffc02c00

0800aae0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b083      	sub	sp, #12
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f043 0203 	orr.w	r2, r3, #3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ab30:	2002      	movs	r0, #2
 800ab32:	f7f7 f85d 	bl	8001bf0 <HAL_Delay>

  return HAL_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0303 	and.w	r3, r3, #3
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab7a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab80:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	68da      	ldr	r2, [r3, #12]
 800ab92:	4b06      	ldr	r3, [pc, #24]	; (800abac <SDMMC_SendCommand+0x50>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	431a      	orrs	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	fffee0c0 	.word	0xfffee0c0

0800abb0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	b2db      	uxtb	r3, r3
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800abca:	b480      	push	{r7}
 800abcc:	b085      	sub	sp, #20
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3314      	adds	r3, #20
 800abd8:	461a      	mov	r2, r3
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	4413      	add	r3, r2
 800abde:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac16:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ac1c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ac22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	431a      	orrs	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac3a:	2300      	movs	r3, #0

}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac56:	2310      	movs	r3, #16
 800ac58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac60:	2300      	movs	r3, #0
 800ac62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac6a:	f107 0308 	add.w	r3, r7, #8
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff ff73 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac7a:	2110      	movs	r1, #16
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 fa7b 	bl	800b178 <SDMMC_GetCmdResp1>
 800ac82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac84:	69fb      	ldr	r3, [r7, #28]
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3720      	adds	r7, #32
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b088      	sub	sp, #32
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac9c:	2311      	movs	r3, #17
 800ac9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aca6:	2300      	movs	r3, #0
 800aca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acb0:	f107 0308 	add.w	r3, r7, #8
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff ff50 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800acbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc0:	2111      	movs	r1, #17
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fa58 	bl	800b178 <SDMMC_GetCmdResp1>
 800acc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acca:	69fb      	ldr	r3, [r7, #28]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3720      	adds	r7, #32
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ace2:	2312      	movs	r3, #18
 800ace4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ace6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acec:	2300      	movs	r3, #0
 800acee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acf6:	f107 0308 	add.w	r3, r7, #8
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff ff2d 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad06:	2112      	movs	r1, #18
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fa35 	bl	800b178 <SDMMC_GetCmdResp1>
 800ad0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad10:	69fb      	ldr	r3, [r7, #28]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3720      	adds	r7, #32
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b088      	sub	sp, #32
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad28:	2318      	movs	r3, #24
 800ad2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad32:	2300      	movs	r3, #0
 800ad34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad3c:	f107 0308 	add.w	r3, r7, #8
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff ff0a 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad4c:	2118      	movs	r1, #24
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fa12 	bl	800b178 <SDMMC_GetCmdResp1>
 800ad54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad56:	69fb      	ldr	r3, [r7, #28]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3720      	adds	r7, #32
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad6e:	2319      	movs	r3, #25
 800ad70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad82:	f107 0308 	add.w	r3, r7, #8
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f7ff fee7 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad92:	2119      	movs	r1, #25
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 f9ef 	bl	800b178 <SDMMC_GetCmdResp1>
 800ad9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad9c:	69fb      	ldr	r3, [r7, #28]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3720      	adds	r7, #32
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b088      	sub	sp, #32
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800adb0:	2300      	movs	r3, #0
 800adb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800adb4:	230c      	movs	r3, #12
 800adb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adc6:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ade0:	f107 0308 	add.w	r3, r7, #8
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff feb8 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800adec:	4a08      	ldr	r2, [pc, #32]	; (800ae10 <SDMMC_CmdStopTransfer+0x68>)
 800adee:	210c      	movs	r1, #12
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f9c1 	bl	800b178 <SDMMC_GetCmdResp1>
 800adf6:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800ae04:	69fb      	ldr	r3, [r7, #28]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3720      	adds	r7, #32
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	05f5e100 	.word	0x05f5e100

0800ae14 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08a      	sub	sp, #40	; 0x28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae24:	2307      	movs	r3, #7
 800ae26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae2c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae36:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae38:	f107 0310 	add.w	r3, r7, #16
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7ff fe8c 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae48:	2107      	movs	r1, #7
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f000 f994 	bl	800b178 <SDMMC_GetCmdResp1>
 800ae50:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3728      	adds	r7, #40	; 0x28
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae64:	2300      	movs	r3, #0
 800ae66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae70:	2300      	movs	r3, #0
 800ae72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae7a:	f107 0308 	add.w	r3, r7, #8
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff fe6b 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fbb8 	bl	800b5fc <SDMMC_GetCmdError>
 800ae8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aea0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aea6:	2308      	movs	r3, #8
 800aea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aeb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeba:	f107 0308 	add.w	r3, r7, #8
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7ff fe4b 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fb4a 	bl	800b560 <SDMMC_GetCmdResp7>
 800aecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aece:	69fb      	ldr	r3, [r7, #28]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3720      	adds	r7, #32
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b088      	sub	sp, #32
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aee6:	2337      	movs	r3, #55	; 0x37
 800aee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef0:	2300      	movs	r3, #0
 800aef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aefa:	f107 0308 	add.w	r3, r7, #8
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff fe2b 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af06:	f241 3288 	movw	r2, #5000	; 0x1388
 800af0a:	2137      	movs	r1, #55	; 0x37
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f933 	bl	800b178 <SDMMC_GetCmdResp1>
 800af12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af14:	69fb      	ldr	r3, [r7, #28]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3720      	adds	r7, #32
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af1e:	b580      	push	{r7, lr}
 800af20:	b088      	sub	sp, #32
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
 800af26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af2c:	2329      	movs	r3, #41	; 0x29
 800af2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af36:	2300      	movs	r3, #0
 800af38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af40:	f107 0308 	add.w	r3, r7, #8
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff fe08 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fa4f 	bl	800b3f0 <SDMMC_GetCmdResp3>
 800af52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af54:	69fb      	ldr	r3, [r7, #28]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b088      	sub	sp, #32
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af6c:	2306      	movs	r3, #6
 800af6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af76:	2300      	movs	r3, #0
 800af78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff fde8 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af90:	2106      	movs	r1, #6
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f8f0 	bl	800b178 <SDMMC_GetCmdResp1>
 800af98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af9a:	69fb      	ldr	r3, [r7, #28]
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3720      	adds	r7, #32
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800afb0:	2333      	movs	r3, #51	; 0x33
 800afb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afba:	2300      	movs	r3, #0
 800afbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afc4:	f107 0308 	add.w	r3, r7, #8
 800afc8:	4619      	mov	r1, r3
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff fdc6 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800afd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afd4:	2133      	movs	r1, #51	; 0x33
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f8ce 	bl	800b178 <SDMMC_GetCmdResp1>
 800afdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afde:	69fb      	ldr	r3, [r7, #28]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	3720      	adds	r7, #32
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b088      	sub	sp, #32
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aff0:	2300      	movs	r3, #0
 800aff2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aff4:	2302      	movs	r3, #2
 800aff6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aff8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800affc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800affe:	2300      	movs	r3, #0
 800b000:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b006:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b008:	f107 0308 	add.w	r3, r7, #8
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7ff fda4 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f9a1 	bl	800b35c <SDMMC_GetCmdResp2>
 800b01a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b01c:	69fb      	ldr	r3, [r7, #28]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3720      	adds	r7, #32
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b088      	sub	sp, #32
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b034:	2309      	movs	r3, #9
 800b036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b038:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b03c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b046:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b048:	f107 0308 	add.w	r3, r7, #8
 800b04c:	4619      	mov	r1, r3
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7ff fd84 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f981 	bl	800b35c <SDMMC_GetCmdResp2>
 800b05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b05c:	69fb      	ldr	r3, [r7, #28]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b088      	sub	sp, #32
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b070:	2300      	movs	r3, #0
 800b072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b074:	2303      	movs	r3, #3
 800b076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b07c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b07e:	2300      	movs	r3, #0
 800b080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b086:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b088:	f107 0308 	add.w	r3, r7, #8
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff fd64 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	2103      	movs	r1, #3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f9e9 	bl	800b470 <SDMMC_GetCmdResp6>
 800b09e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0a0:	69fb      	ldr	r3, [r7, #28]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3720      	adds	r7, #32
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b088      	sub	sp, #32
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0b8:	230d      	movs	r3, #13
 800b0ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0cc:	f107 0308 	add.w	r3, r7, #8
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7ff fd42 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0dc:	210d      	movs	r1, #13
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f84a 	bl	800b178 <SDMMC_GetCmdResp1>
 800b0e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0e6:	69fb      	ldr	r3, [r7, #28]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3720      	adds	r7, #32
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b0fc:	230d      	movs	r3, #13
 800b0fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b100:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b106:	2300      	movs	r3, #0
 800b108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b10a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b10e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b110:	f107 0308 	add.w	r3, r7, #8
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7ff fd20 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b120:	210d      	movs	r1, #13
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f828 	bl	800b178 <SDMMC_GetCmdResp1>
 800b128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b12a:	69fb      	ldr	r3, [r7, #28]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3720      	adds	r7, #32
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b13c:	2300      	movs	r3, #0
 800b13e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b140:	230b      	movs	r3, #11
 800b142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b144:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b14a:	2300      	movs	r3, #0
 800b14c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b14e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b152:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b154:	f107 0308 	add.w	r3, r7, #8
 800b158:	4619      	mov	r1, r3
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7ff fcfe 	bl	800ab5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b160:	f241 3288 	movw	r2, #5000	; 0x1388
 800b164:	210b      	movs	r1, #11
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 f806 	bl	800b178 <SDMMC_GetCmdResp1>
 800b16c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b16e:	69fb      	ldr	r3, [r7, #28]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3720      	adds	r7, #32
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b088      	sub	sp, #32
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	460b      	mov	r3, r1
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b186:	4b70      	ldr	r3, [pc, #448]	; (800b348 <SDMMC_GetCmdResp1+0x1d0>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a70      	ldr	r2, [pc, #448]	; (800b34c <SDMMC_GetCmdResp1+0x1d4>)
 800b18c:	fba2 2303 	umull	r2, r3, r2, r3
 800b190:	0a5a      	lsrs	r2, r3, #9
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	fb02 f303 	mul.w	r3, r2, r3
 800b198:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	1e5a      	subs	r2, r3, #1
 800b19e:	61fa      	str	r2, [r7, #28]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d102      	bne.n	800b1aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1a8:	e0c9      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ae:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b1b0:	69ba      	ldr	r2, [r7, #24]
 800b1b2:	4b67      	ldr	r3, [pc, #412]	; (800b350 <SDMMC_GetCmdResp1+0x1d8>)
 800b1b4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0ef      	beq.n	800b19a <SDMMC_GetCmdResp1+0x22>
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1ea      	bne.n	800b19a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c8:	f003 0304 	and.w	r3, r3, #4
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d004      	beq.n	800b1da <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2204      	movs	r2, #4
 800b1d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1d6:	2304      	movs	r3, #4
 800b1d8:	e0b1      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1de:	f003 0301 	and.w	r3, r3, #1
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d004      	beq.n	800b1f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e0a6      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	4a58      	ldr	r2, [pc, #352]	; (800b354 <SDMMC_GetCmdResp1+0x1dc>)
 800b1f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7ff fcda 	bl	800abb0 <SDMMC_GetCommandResponse>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461a      	mov	r2, r3
 800b200:	7afb      	ldrb	r3, [r7, #11]
 800b202:	4293      	cmp	r3, r2
 800b204:	d001      	beq.n	800b20a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b206:	2301      	movs	r3, #1
 800b208:	e099      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b20a:	2100      	movs	r1, #0
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f7ff fcdc 	bl	800abca <SDMMC_GetResponse>
 800b212:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	4b50      	ldr	r3, [pc, #320]	; (800b358 <SDMMC_GetCmdResp1+0x1e0>)
 800b218:	4013      	ands	r3, r2
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b21e:	2300      	movs	r3, #0
 800b220:	e08d      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2b00      	cmp	r3, #0
 800b226:	da02      	bge.n	800b22e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b22c:	e087      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d001      	beq.n	800b23c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b238:	2340      	movs	r3, #64	; 0x40
 800b23a:	e080      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b242:	2b00      	cmp	r3, #0
 800b244:	d001      	beq.n	800b24a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b246:	2380      	movs	r3, #128	; 0x80
 800b248:	e079      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b254:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b258:	e071      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b264:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b268:	e069      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b278:	e061      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b288:	e059      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b290:	2b00      	cmp	r3, #0
 800b292:	d002      	beq.n	800b29a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b298:	e051      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2a8:	e049      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2b8:	e041      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2c8:	e039      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b2d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2d8:	e031      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b2e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b2e8:	e029      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b2f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b2f8:	e021      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b304:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b308:	e019      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b314:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b318:	e011      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b324:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b328:	e009      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f003 0308 	and.w	r3, r3, #8
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b334:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b338:	e001      	b.n	800b33e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b33a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3720      	adds	r7, #32
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20000000 	.word	0x20000000
 800b34c:	10624dd3 	.word	0x10624dd3
 800b350:	00200045 	.word	0x00200045
 800b354:	002000c5 	.word	0x002000c5
 800b358:	fdffe008 	.word	0xfdffe008

0800b35c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b364:	4b1f      	ldr	r3, [pc, #124]	; (800b3e4 <SDMMC_GetCmdResp2+0x88>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a1f      	ldr	r2, [pc, #124]	; (800b3e8 <SDMMC_GetCmdResp2+0x8c>)
 800b36a:	fba2 2303 	umull	r2, r3, r2, r3
 800b36e:	0a5b      	lsrs	r3, r3, #9
 800b370:	f241 3288 	movw	r2, #5000	; 0x1388
 800b374:	fb02 f303 	mul.w	r3, r2, r3
 800b378:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	1e5a      	subs	r2, r3, #1
 800b37e:	60fa      	str	r2, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b384:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b388:	e026      	b.n	800b3d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b396:	2b00      	cmp	r3, #0
 800b398:	d0ef      	beq.n	800b37a <SDMMC_GetCmdResp2+0x1e>
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1ea      	bne.n	800b37a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d004      	beq.n	800b3ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2204      	movs	r2, #4
 800b3b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3b6:	2304      	movs	r3, #4
 800b3b8:	e00e      	b.n	800b3d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3be:	f003 0301 	and.w	r3, r3, #1
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e003      	b.n	800b3d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a06      	ldr	r2, [pc, #24]	; (800b3ec <SDMMC_GetCmdResp2+0x90>)
 800b3d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	20000000 	.word	0x20000000
 800b3e8:	10624dd3 	.word	0x10624dd3
 800b3ec:	002000c5 	.word	0x002000c5

0800b3f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3f8:	4b1a      	ldr	r3, [pc, #104]	; (800b464 <SDMMC_GetCmdResp3+0x74>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a1a      	ldr	r2, [pc, #104]	; (800b468 <SDMMC_GetCmdResp3+0x78>)
 800b3fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b402:	0a5b      	lsrs	r3, r3, #9
 800b404:	f241 3288 	movw	r2, #5000	; 0x1388
 800b408:	fb02 f303 	mul.w	r3, r2, r3
 800b40c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	1e5a      	subs	r2, r3, #1
 800b412:	60fa      	str	r2, [r7, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d102      	bne.n	800b41e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b418:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b41c:	e01b      	b.n	800b456 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b422:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d0ef      	beq.n	800b40e <SDMMC_GetCmdResp3+0x1e>
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1ea      	bne.n	800b40e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43c:	f003 0304 	and.w	r3, r3, #4
 800b440:	2b00      	cmp	r3, #0
 800b442:	d004      	beq.n	800b44e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2204      	movs	r2, #4
 800b448:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b44a:	2304      	movs	r3, #4
 800b44c:	e003      	b.n	800b456 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a06      	ldr	r2, [pc, #24]	; (800b46c <SDMMC_GetCmdResp3+0x7c>)
 800b452:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	20000000 	.word	0x20000000
 800b468:	10624dd3 	.word	0x10624dd3
 800b46c:	002000c5 	.word	0x002000c5

0800b470 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b088      	sub	sp, #32
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	460b      	mov	r3, r1
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b47e:	4b35      	ldr	r3, [pc, #212]	; (800b554 <SDMMC_GetCmdResp6+0xe4>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a35      	ldr	r2, [pc, #212]	; (800b558 <SDMMC_GetCmdResp6+0xe8>)
 800b484:	fba2 2303 	umull	r2, r3, r2, r3
 800b488:	0a5b      	lsrs	r3, r3, #9
 800b48a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b48e:	fb02 f303 	mul.w	r3, r2, r3
 800b492:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	1e5a      	subs	r2, r3, #1
 800b498:	61fa      	str	r2, [r7, #28]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d102      	bne.n	800b4a4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b49e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4a2:	e052      	b.n	800b54a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d0ef      	beq.n	800b494 <SDMMC_GetCmdResp6+0x24>
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1ea      	bne.n	800b494 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c2:	f003 0304 	and.w	r3, r3, #4
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d004      	beq.n	800b4d4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2204      	movs	r2, #4
 800b4ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4d0:	2304      	movs	r3, #4
 800b4d2:	e03a      	b.n	800b54a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d8:	f003 0301 	and.w	r3, r3, #1
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d004      	beq.n	800b4ea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e02f      	b.n	800b54a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff fb60 	bl	800abb0 <SDMMC_GetCommandResponse>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	7afb      	ldrb	r3, [r7, #11]
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d001      	beq.n	800b4fe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e025      	b.n	800b54a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	4a16      	ldr	r2, [pc, #88]	; (800b55c <SDMMC_GetCmdResp6+0xec>)
 800b502:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b504:	2100      	movs	r1, #0
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f7ff fb5f 	bl	800abca <SDMMC_GetResponse>
 800b50c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b514:	2b00      	cmp	r3, #0
 800b516:	d106      	bne.n	800b526 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	0c1b      	lsrs	r3, r3, #16
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b522:	2300      	movs	r3, #0
 800b524:	e011      	b.n	800b54a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d002      	beq.n	800b536 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b534:	e009      	b.n	800b54a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b544:	e001      	b.n	800b54a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3720      	adds	r7, #32
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	20000000 	.word	0x20000000
 800b558:	10624dd3 	.word	0x10624dd3
 800b55c:	002000c5 	.word	0x002000c5

0800b560 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b568:	4b22      	ldr	r3, [pc, #136]	; (800b5f4 <SDMMC_GetCmdResp7+0x94>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a22      	ldr	r2, [pc, #136]	; (800b5f8 <SDMMC_GetCmdResp7+0x98>)
 800b56e:	fba2 2303 	umull	r2, r3, r2, r3
 800b572:	0a5b      	lsrs	r3, r3, #9
 800b574:	f241 3288 	movw	r2, #5000	; 0x1388
 800b578:	fb02 f303 	mul.w	r3, r2, r3
 800b57c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	1e5a      	subs	r2, r3, #1
 800b582:	60fa      	str	r2, [r7, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d102      	bne.n	800b58e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b58c:	e02c      	b.n	800b5e8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b592:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0ef      	beq.n	800b57e <SDMMC_GetCmdResp7+0x1e>
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1ea      	bne.n	800b57e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ac:	f003 0304 	and.w	r3, r3, #4
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d004      	beq.n	800b5be <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2204      	movs	r2, #4
 800b5b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5ba:	2304      	movs	r3, #4
 800b5bc:	e014      	b.n	800b5e8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d004      	beq.n	800b5d4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e009      	b.n	800b5e8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2240      	movs	r2, #64	; 0x40
 800b5e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b5e6:	2300      	movs	r3, #0

}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr
 800b5f4:	20000000 	.word	0x20000000
 800b5f8:	10624dd3 	.word	0x10624dd3

0800b5fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b604:	4b11      	ldr	r3, [pc, #68]	; (800b64c <SDMMC_GetCmdError+0x50>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a11      	ldr	r2, [pc, #68]	; (800b650 <SDMMC_GetCmdError+0x54>)
 800b60a:	fba2 2303 	umull	r2, r3, r2, r3
 800b60e:	0a5b      	lsrs	r3, r3, #9
 800b610:	f241 3288 	movw	r2, #5000	; 0x1388
 800b614:	fb02 f303 	mul.w	r3, r2, r3
 800b618:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	1e5a      	subs	r2, r3, #1
 800b61e:	60fa      	str	r2, [r7, #12]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d102      	bne.n	800b62a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b624:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b628:	e009      	b.n	800b63e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0f1      	beq.n	800b61a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a06      	ldr	r2, [pc, #24]	; (800b654 <SDMMC_GetCmdError+0x58>)
 800b63a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	20000000 	.word	0x20000000
 800b650:	10624dd3 	.word	0x10624dd3
 800b654:	002000c5 	.word	0x002000c5

0800b658 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b658:	b084      	sub	sp, #16
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b084      	sub	sp, #16
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	f107 001c 	add.w	r0, r7, #28
 800b666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f001 f9ce 	bl	800ca18 <USB_CoreReset>
 800b67c:	4603      	mov	r3, r0
 800b67e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b682:	2b00      	cmp	r3, #0
 800b684:	d106      	bne.n	800b694 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	639a      	str	r2, [r3, #56]	; 0x38
 800b692:	e005      	b.n	800b6a0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b698:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6ac:	b004      	add	sp, #16
 800b6ae:	4770      	bx	lr

0800b6b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b6be:	79fb      	ldrb	r3, [r7, #7]
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d165      	bne.n	800b790 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	4a3e      	ldr	r2, [pc, #248]	; (800b7c0 <USB_SetTurnaroundTime+0x110>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d906      	bls.n	800b6da <USB_SetTurnaroundTime+0x2a>
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	4a3d      	ldr	r2, [pc, #244]	; (800b7c4 <USB_SetTurnaroundTime+0x114>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d202      	bcs.n	800b6da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b6d4:	230f      	movs	r3, #15
 800b6d6:	617b      	str	r3, [r7, #20]
 800b6d8:	e05c      	b.n	800b794 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	4a39      	ldr	r2, [pc, #228]	; (800b7c4 <USB_SetTurnaroundTime+0x114>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d306      	bcc.n	800b6f0 <USB_SetTurnaroundTime+0x40>
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	4a38      	ldr	r2, [pc, #224]	; (800b7c8 <USB_SetTurnaroundTime+0x118>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d202      	bcs.n	800b6f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b6ea:	230e      	movs	r3, #14
 800b6ec:	617b      	str	r3, [r7, #20]
 800b6ee:	e051      	b.n	800b794 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	4a35      	ldr	r2, [pc, #212]	; (800b7c8 <USB_SetTurnaroundTime+0x118>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d306      	bcc.n	800b706 <USB_SetTurnaroundTime+0x56>
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	4a34      	ldr	r2, [pc, #208]	; (800b7cc <USB_SetTurnaroundTime+0x11c>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d202      	bcs.n	800b706 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b700:	230d      	movs	r3, #13
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	e046      	b.n	800b794 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	4a30      	ldr	r2, [pc, #192]	; (800b7cc <USB_SetTurnaroundTime+0x11c>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d306      	bcc.n	800b71c <USB_SetTurnaroundTime+0x6c>
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	4a2f      	ldr	r2, [pc, #188]	; (800b7d0 <USB_SetTurnaroundTime+0x120>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d802      	bhi.n	800b71c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b716:	230c      	movs	r3, #12
 800b718:	617b      	str	r3, [r7, #20]
 800b71a:	e03b      	b.n	800b794 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	4a2c      	ldr	r2, [pc, #176]	; (800b7d0 <USB_SetTurnaroundTime+0x120>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d906      	bls.n	800b732 <USB_SetTurnaroundTime+0x82>
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	4a2b      	ldr	r2, [pc, #172]	; (800b7d4 <USB_SetTurnaroundTime+0x124>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d802      	bhi.n	800b732 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b72c:	230b      	movs	r3, #11
 800b72e:	617b      	str	r3, [r7, #20]
 800b730:	e030      	b.n	800b794 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	4a27      	ldr	r2, [pc, #156]	; (800b7d4 <USB_SetTurnaroundTime+0x124>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d906      	bls.n	800b748 <USB_SetTurnaroundTime+0x98>
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	4a26      	ldr	r2, [pc, #152]	; (800b7d8 <USB_SetTurnaroundTime+0x128>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d802      	bhi.n	800b748 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b742:	230a      	movs	r3, #10
 800b744:	617b      	str	r3, [r7, #20]
 800b746:	e025      	b.n	800b794 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	4a23      	ldr	r2, [pc, #140]	; (800b7d8 <USB_SetTurnaroundTime+0x128>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d906      	bls.n	800b75e <USB_SetTurnaroundTime+0xae>
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	4a22      	ldr	r2, [pc, #136]	; (800b7dc <USB_SetTurnaroundTime+0x12c>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d202      	bcs.n	800b75e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b758:	2309      	movs	r3, #9
 800b75a:	617b      	str	r3, [r7, #20]
 800b75c:	e01a      	b.n	800b794 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	4a1e      	ldr	r2, [pc, #120]	; (800b7dc <USB_SetTurnaroundTime+0x12c>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d306      	bcc.n	800b774 <USB_SetTurnaroundTime+0xc4>
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	4a1d      	ldr	r2, [pc, #116]	; (800b7e0 <USB_SetTurnaroundTime+0x130>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d802      	bhi.n	800b774 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b76e:	2308      	movs	r3, #8
 800b770:	617b      	str	r3, [r7, #20]
 800b772:	e00f      	b.n	800b794 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	4a1a      	ldr	r2, [pc, #104]	; (800b7e0 <USB_SetTurnaroundTime+0x130>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d906      	bls.n	800b78a <USB_SetTurnaroundTime+0xda>
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	4a19      	ldr	r2, [pc, #100]	; (800b7e4 <USB_SetTurnaroundTime+0x134>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d202      	bcs.n	800b78a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b784:	2307      	movs	r3, #7
 800b786:	617b      	str	r3, [r7, #20]
 800b788:	e004      	b.n	800b794 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b78a:	2306      	movs	r3, #6
 800b78c:	617b      	str	r3, [r7, #20]
 800b78e:	e001      	b.n	800b794 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b790:	2309      	movs	r3, #9
 800b792:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	68da      	ldr	r2, [r3, #12]
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	029b      	lsls	r3, r3, #10
 800b7a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	371c      	adds	r7, #28
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	00d8acbf 	.word	0x00d8acbf
 800b7c4:	00e4e1c0 	.word	0x00e4e1c0
 800b7c8:	00f42400 	.word	0x00f42400
 800b7cc:	01067380 	.word	0x01067380
 800b7d0:	011a499f 	.word	0x011a499f
 800b7d4:	01312cff 	.word	0x01312cff
 800b7d8:	014ca43f 	.word	0x014ca43f
 800b7dc:	016e3600 	.word	0x016e3600
 800b7e0:	01a6ab1f 	.word	0x01a6ab1f
 800b7e4:	01e84800 	.word	0x01e84800

0800b7e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	f043 0201 	orr.w	r2, r3, #1
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f023 0201 	bic.w	r2, r3, #1
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	460b      	mov	r3, r1
 800b836:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b844:	78fb      	ldrb	r3, [r7, #3]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d106      	bne.n	800b858 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60da      	str	r2, [r3, #12]
 800b856:	e00b      	b.n	800b870 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b858:	78fb      	ldrb	r3, [r7, #3]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	60da      	str	r2, [r3, #12]
 800b86a:	e001      	b.n	800b870 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	e003      	b.n	800b878 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b870:	2032      	movs	r0, #50	; 0x32
 800b872:	f7f6 f9bd 	bl	8001bf0 <HAL_Delay>

  return HAL_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3708      	adds	r7, #8
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b880:	b084      	sub	sp, #16
 800b882:	b580      	push	{r7, lr}
 800b884:	b086      	sub	sp, #24
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b88e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b892:	2300      	movs	r3, #0
 800b894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b89a:	2300      	movs	r3, #0
 800b89c:	613b      	str	r3, [r7, #16]
 800b89e:	e009      	b.n	800b8b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	3340      	adds	r3, #64	; 0x40
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	613b      	str	r3, [r7, #16]
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	2b0e      	cmp	r3, #14
 800b8b8:	d9f2      	bls.n	800b8a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b8ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d11c      	bne.n	800b8fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8ce:	f043 0302 	orr.w	r3, r3, #2
 800b8d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	601a      	str	r2, [r3, #0]
 800b8f8:	e005      	b.n	800b906 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b90c:	461a      	mov	r2, r3
 800b90e:	2300      	movs	r3, #0
 800b910:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b918:	4619      	mov	r1, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b920:	461a      	mov	r2, r3
 800b922:	680b      	ldr	r3, [r1, #0]
 800b924:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b926:	2103      	movs	r1, #3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f93d 	bl	800bba8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b92e:	2110      	movs	r1, #16
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 f8f1 	bl	800bb18 <USB_FlushTxFifo>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f90f 	bl	800bb64 <USB_FlushRxFifo>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b956:	461a      	mov	r2, r3
 800b958:	2300      	movs	r3, #0
 800b95a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b962:	461a      	mov	r2, r3
 800b964:	2300      	movs	r3, #0
 800b966:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b96e:	461a      	mov	r2, r3
 800b970:	2300      	movs	r3, #0
 800b972:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b974:	2300      	movs	r3, #0
 800b976:	613b      	str	r3, [r7, #16]
 800b978:	e043      	b.n	800ba02 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	015a      	lsls	r2, r3, #5
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	4413      	add	r3, r2
 800b982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b98c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b990:	d118      	bne.n	800b9c4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10a      	bne.n	800b9ae <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	015a      	lsls	r2, r3, #5
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	e013      	b.n	800b9d6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	015a      	lsls	r2, r3, #5
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b9c0:	6013      	str	r3, [r2, #0]
 800b9c2:	e008      	b.n	800b9d6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	015a      	lsls	r2, r3, #5
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	4413      	add	r3, r2
 800b9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	015a      	lsls	r2, r3, #5
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b9fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	613b      	str	r3, [r7, #16]
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d3b7      	bcc.n	800b97a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	613b      	str	r3, [r7, #16]
 800ba0e:	e043      	b.n	800ba98 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	015a      	lsls	r2, r3, #5
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	4413      	add	r3, r2
 800ba18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba26:	d118      	bne.n	800ba5a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	015a      	lsls	r2, r3, #5
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	4413      	add	r3, r2
 800ba36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba40:	6013      	str	r3, [r2, #0]
 800ba42:	e013      	b.n	800ba6c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	015a      	lsls	r2, r3, #5
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba50:	461a      	mov	r2, r3
 800ba52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	e008      	b.n	800ba6c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	015a      	lsls	r2, r3, #5
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	4413      	add	r3, r2
 800ba62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba66:	461a      	mov	r2, r3
 800ba68:	2300      	movs	r3, #0
 800ba6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	015a      	lsls	r2, r3, #5
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	4413      	add	r3, r2
 800ba74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba78:	461a      	mov	r2, r3
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	015a      	lsls	r2, r3, #5
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	4413      	add	r3, r2
 800ba86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	3301      	adds	r3, #1
 800ba96:	613b      	str	r3, [r7, #16]
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d3b7      	bcc.n	800ba10 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800baae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bab2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bac0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	f043 0210 	orr.w	r2, r3, #16
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	699a      	ldr	r2, [r3, #24]
 800bad2:	4b10      	ldr	r3, [pc, #64]	; (800bb14 <USB_DevInit+0x294>)
 800bad4:	4313      	orrs	r3, r2
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800badc:	2b00      	cmp	r3, #0
 800bade:	d005      	beq.n	800baec <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	f043 0208 	orr.w	r2, r3, #8
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800baec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d107      	bne.n	800bb02 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bafa:	f043 0304 	orr.w	r3, r3, #4
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bb02:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3718      	adds	r7, #24
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb0e:	b004      	add	sp, #16
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	803c3800 	.word	0x803c3800

0800bb18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bb22:	2300      	movs	r3, #0
 800bb24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	019b      	lsls	r3, r3, #6
 800bb2a:	f043 0220 	orr.w	r2, r3, #32
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	3301      	adds	r3, #1
 800bb36:	60fb      	str	r3, [r7, #12]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4a09      	ldr	r2, [pc, #36]	; (800bb60 <USB_FlushTxFifo+0x48>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d901      	bls.n	800bb44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bb40:	2303      	movs	r3, #3
 800bb42:	e006      	b.n	800bb52 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b20      	cmp	r3, #32
 800bb4e:	d0f0      	beq.n	800bb32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	00030d40 	.word	0x00030d40

0800bb64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2210      	movs	r2, #16
 800bb74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	60fb      	str	r3, [r7, #12]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	4a09      	ldr	r2, [pc, #36]	; (800bba4 <USB_FlushRxFifo+0x40>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d901      	bls.n	800bb88 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e006      	b.n	800bb96 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	f003 0310 	and.w	r3, r3, #16
 800bb90:	2b10      	cmp	r3, #16
 800bb92:	d0f0      	beq.n	800bb76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3714      	adds	r7, #20
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	00030d40 	.word	0x00030d40

0800bba8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	78fb      	ldrb	r3, [r7, #3]
 800bbc2:	68f9      	ldr	r1, [r7, #12]
 800bbc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3714      	adds	r7, #20
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b087      	sub	sp, #28
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f003 0306 	and.w	r3, r3, #6
 800bbf2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d002      	beq.n	800bc00 <USB_GetDevSpeed+0x26>
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2b06      	cmp	r3, #6
 800bbfe:	d102      	bne.n	800bc06 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bc00:	2302      	movs	r3, #2
 800bc02:	75fb      	strb	r3, [r7, #23]
 800bc04:	e001      	b.n	800bc0a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800bc06:	230f      	movs	r3, #15
 800bc08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bc0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	371c      	adds	r7, #28
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	785b      	ldrb	r3, [r3, #1]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d13a      	bne.n	800bcaa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc3a:	69da      	ldr	r2, [r3, #28]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	f003 030f 	and.w	r3, r3, #15
 800bc44:	2101      	movs	r1, #1
 800bc46:	fa01 f303 	lsl.w	r3, r1, r3
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	68f9      	ldr	r1, [r7, #12]
 800bc4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc52:	4313      	orrs	r3, r2
 800bc54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	015a      	lsls	r2, r3, #5
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d155      	bne.n	800bd18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	015a      	lsls	r2, r3, #5
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4413      	add	r3, r2
 800bc74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	78db      	ldrb	r3, [r3, #3]
 800bc86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	059b      	lsls	r3, r3, #22
 800bc8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc90:	4313      	orrs	r3, r2
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	0151      	lsls	r1, r2, #5
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	440a      	add	r2, r1
 800bc9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	e036      	b.n	800bd18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcb0:	69da      	ldr	r2, [r3, #28]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	f003 030f 	and.w	r3, r3, #15
 800bcba:	2101      	movs	r1, #1
 800bcbc:	fa01 f303 	lsl.w	r3, r1, r3
 800bcc0:	041b      	lsls	r3, r3, #16
 800bcc2:	68f9      	ldr	r1, [r7, #12]
 800bcc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	015a      	lsls	r2, r3, #5
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d11a      	bne.n	800bd18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	78db      	ldrb	r3, [r3, #3]
 800bcfc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bcfe:	430b      	orrs	r3, r1
 800bd00:	4313      	orrs	r3, r2
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	0151      	lsls	r1, r2, #5
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	440a      	add	r2, r1
 800bd0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
	...

0800bd28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	785b      	ldrb	r3, [r3, #1]
 800bd40:	2b01      	cmp	r3, #1
 800bd42:	d161      	bne.n	800be08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	015a      	lsls	r2, r3, #5
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd5a:	d11f      	bne.n	800bd9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	015a      	lsls	r2, r3, #5
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	4413      	add	r3, r2
 800bd64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	0151      	lsls	r1, r2, #5
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	440a      	add	r2, r1
 800bd72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	015a      	lsls	r2, r3, #5
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	4413      	add	r3, r2
 800bd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	0151      	lsls	r1, r2, #5
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	440a      	add	r2, r1
 800bd92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bda2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	f003 030f 	and.w	r3, r3, #15
 800bdac:	2101      	movs	r1, #1
 800bdae:	fa01 f303 	lsl.w	r3, r1, r3
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	43db      	mvns	r3, r3
 800bdb6:	68f9      	ldr	r1, [r7, #12]
 800bdb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc6:	69da      	ldr	r2, [r3, #28]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	f003 030f 	and.w	r3, r3, #15
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	43db      	mvns	r3, r3
 800bdda:	68f9      	ldr	r1, [r7, #12]
 800bddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bde0:	4013      	ands	r3, r2
 800bde2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	015a      	lsls	r2, r3, #5
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	4413      	add	r3, r2
 800bdec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	0159      	lsls	r1, r3, #5
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	440b      	add	r3, r1
 800bdfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdfe:	4619      	mov	r1, r3
 800be00:	4b35      	ldr	r3, [pc, #212]	; (800bed8 <USB_DeactivateEndpoint+0x1b0>)
 800be02:	4013      	ands	r3, r2
 800be04:	600b      	str	r3, [r1, #0]
 800be06:	e060      	b.n	800beca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	015a      	lsls	r2, r3, #5
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	4413      	add	r3, r2
 800be10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be1e:	d11f      	bne.n	800be60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	015a      	lsls	r2, r3, #5
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	4413      	add	r3, r2
 800be28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	0151      	lsls	r1, r2, #5
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	440a      	add	r2, r1
 800be36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	015a      	lsls	r2, r3, #5
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	4413      	add	r3, r2
 800be48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	0151      	lsls	r1, r2, #5
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	440a      	add	r2, r1
 800be56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	f003 030f 	and.w	r3, r3, #15
 800be70:	2101      	movs	r1, #1
 800be72:	fa01 f303 	lsl.w	r3, r1, r3
 800be76:	041b      	lsls	r3, r3, #16
 800be78:	43db      	mvns	r3, r3
 800be7a:	68f9      	ldr	r1, [r7, #12]
 800be7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be80:	4013      	ands	r3, r2
 800be82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be8a:	69da      	ldr	r2, [r3, #28]
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	f003 030f 	and.w	r3, r3, #15
 800be94:	2101      	movs	r1, #1
 800be96:	fa01 f303 	lsl.w	r3, r1, r3
 800be9a:	041b      	lsls	r3, r3, #16
 800be9c:	43db      	mvns	r3, r3
 800be9e:	68f9      	ldr	r1, [r7, #12]
 800bea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bea4:	4013      	ands	r3, r2
 800bea6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	015a      	lsls	r2, r3, #5
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	4413      	add	r3, r2
 800beb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	0159      	lsls	r1, r3, #5
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	440b      	add	r3, r1
 800bebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec2:	4619      	mov	r1, r3
 800bec4:	4b05      	ldr	r3, [pc, #20]	; (800bedc <USB_DeactivateEndpoint+0x1b4>)
 800bec6:	4013      	ands	r3, r2
 800bec8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	ec337800 	.word	0xec337800
 800bedc:	eff37800 	.word	0xeff37800

0800bee0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	785b      	ldrb	r3, [r3, #1]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	f040 810a 	bne.w	800c112 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d132      	bne.n	800bf6c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	015a      	lsls	r2, r3, #5
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	0151      	lsls	r1, r2, #5
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	440a      	add	r2, r1
 800bf1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bf24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bf28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	015a      	lsls	r2, r3, #5
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	4413      	add	r3, r2
 800bf32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	0151      	lsls	r1, r2, #5
 800bf3c:	697a      	ldr	r2, [r7, #20]
 800bf3e:	440a      	add	r2, r1
 800bf40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	015a      	lsls	r2, r3, #5
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	4413      	add	r3, r2
 800bf52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	693a      	ldr	r2, [r7, #16]
 800bf5a:	0151      	lsls	r1, r2, #5
 800bf5c:	697a      	ldr	r2, [r7, #20]
 800bf5e:	440a      	add	r2, r1
 800bf60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf64:	0cdb      	lsrs	r3, r3, #19
 800bf66:	04db      	lsls	r3, r3, #19
 800bf68:	6113      	str	r3, [r2, #16]
 800bf6a:	e074      	b.n	800c056 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	015a      	lsls	r2, r3, #5
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	4413      	add	r3, r2
 800bf74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	0151      	lsls	r1, r2, #5
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	440a      	add	r2, r1
 800bf82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf86:	0cdb      	lsrs	r3, r3, #19
 800bf88:	04db      	lsls	r3, r3, #19
 800bf8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	015a      	lsls	r2, r3, #5
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	4413      	add	r3, r2
 800bf94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	0151      	lsls	r1, r2, #5
 800bf9e:	697a      	ldr	r2, [r7, #20]
 800bfa0:	440a      	add	r2, r1
 800bfa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfa6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bfaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bfae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	015a      	lsls	r2, r3, #5
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfbc:	691a      	ldr	r2, [r3, #16]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	6959      	ldr	r1, [r3, #20]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	440b      	add	r3, r1
 800bfc8:	1e59      	subs	r1, r3, #1
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	fbb1 f3f3 	udiv	r3, r1, r3
 800bfd2:	04d9      	lsls	r1, r3, #19
 800bfd4:	4baf      	ldr	r3, [pc, #700]	; (800c294 <USB_EPStartXfer+0x3b4>)
 800bfd6:	400b      	ands	r3, r1
 800bfd8:	6939      	ldr	r1, [r7, #16]
 800bfda:	0148      	lsls	r0, r1, #5
 800bfdc:	6979      	ldr	r1, [r7, #20]
 800bfde:	4401      	add	r1, r0
 800bfe0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	015a      	lsls	r2, r3, #5
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	4413      	add	r3, r2
 800bff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff4:	691a      	ldr	r2, [r3, #16]
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	695b      	ldr	r3, [r3, #20]
 800bffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bffe:	6939      	ldr	r1, [r7, #16]
 800c000:	0148      	lsls	r0, r1, #5
 800c002:	6979      	ldr	r1, [r7, #20]
 800c004:	4401      	add	r1, r0
 800c006:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c00a:	4313      	orrs	r3, r2
 800c00c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	78db      	ldrb	r3, [r3, #3]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d11f      	bne.n	800c056 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	015a      	lsls	r2, r3, #5
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	4413      	add	r3, r2
 800c01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	693a      	ldr	r2, [r7, #16]
 800c026:	0151      	lsls	r1, r2, #5
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	440a      	add	r2, r1
 800c02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c030:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c034:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	015a      	lsls	r2, r3, #5
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	4413      	add	r3, r2
 800c03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	0151      	lsls	r1, r2, #5
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	440a      	add	r2, r1
 800c04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c050:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c054:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	693a      	ldr	r2, [r7, #16]
 800c066:	0151      	lsls	r1, r2, #5
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	440a      	add	r2, r1
 800c06c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c070:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c074:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	78db      	ldrb	r3, [r3, #3]
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d015      	beq.n	800c0aa <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 8100 	beq.w	800c288 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c08e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	f003 030f 	and.w	r3, r3, #15
 800c098:	2101      	movs	r1, #1
 800c09a:	fa01 f303 	lsl.w	r3, r1, r3
 800c09e:	6979      	ldr	r1, [r7, #20]
 800c0a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	634b      	str	r3, [r1, #52]	; 0x34
 800c0a8:	e0ee      	b.n	800c288 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d110      	bne.n	800c0dc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	015a      	lsls	r2, r3, #5
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	0151      	lsls	r1, r2, #5
 800c0cc:	697a      	ldr	r2, [r7, #20]
 800c0ce:	440a      	add	r2, r1
 800c0d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0d8:	6013      	str	r3, [r2, #0]
 800c0da:	e00f      	b.n	800c0fc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	015a      	lsls	r2, r3, #5
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	0151      	lsls	r1, r2, #5
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	440a      	add	r2, r1
 800c0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0fa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	68d9      	ldr	r1, [r3, #12]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	781a      	ldrb	r2, [r3, #0]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	b29b      	uxth	r3, r3
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f000 f9e2 	bl	800c4d4 <USB_WritePacket>
 800c110:	e0ba      	b.n	800c288 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	015a      	lsls	r2, r3, #5
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	4413      	add	r3, r2
 800c11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	0151      	lsls	r1, r2, #5
 800c124:	697a      	ldr	r2, [r7, #20]
 800c126:	440a      	add	r2, r1
 800c128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c12c:	0cdb      	lsrs	r3, r3, #19
 800c12e:	04db      	lsls	r3, r3, #19
 800c130:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	015a      	lsls	r2, r3, #5
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	4413      	add	r3, r2
 800c13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	0151      	lsls	r1, r2, #5
 800c144:	697a      	ldr	r2, [r7, #20]
 800c146:	440a      	add	r2, r1
 800c148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c14c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c150:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c154:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d123      	bne.n	800c1a6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	015a      	lsls	r2, r3, #5
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	4413      	add	r3, r2
 800c166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c16a:	691a      	ldr	r2, [r3, #16]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c174:	6939      	ldr	r1, [r7, #16]
 800c176:	0148      	lsls	r0, r1, #5
 800c178:	6979      	ldr	r1, [r7, #20]
 800c17a:	4401      	add	r1, r0
 800c17c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c180:	4313      	orrs	r3, r2
 800c182:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	015a      	lsls	r2, r3, #5
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	4413      	add	r3, r2
 800c18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	0151      	lsls	r1, r2, #5
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	440a      	add	r2, r1
 800c19a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c19e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1a2:	6113      	str	r3, [r2, #16]
 800c1a4:	e033      	b.n	800c20e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	695a      	ldr	r2, [r3, #20]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	1e5a      	subs	r2, r3, #1
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1ba:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	015a      	lsls	r2, r3, #5
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c8:	691a      	ldr	r2, [r3, #16]
 800c1ca:	89fb      	ldrh	r3, [r7, #14]
 800c1cc:	04d9      	lsls	r1, r3, #19
 800c1ce:	4b31      	ldr	r3, [pc, #196]	; (800c294 <USB_EPStartXfer+0x3b4>)
 800c1d0:	400b      	ands	r3, r1
 800c1d2:	6939      	ldr	r1, [r7, #16]
 800c1d4:	0148      	lsls	r0, r1, #5
 800c1d6:	6979      	ldr	r1, [r7, #20]
 800c1d8:	4401      	add	r1, r0
 800c1da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	015a      	lsls	r2, r3, #5
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ee:	691a      	ldr	r2, [r3, #16]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	89f9      	ldrh	r1, [r7, #14]
 800c1f6:	fb01 f303 	mul.w	r3, r1, r3
 800c1fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1fe:	6939      	ldr	r1, [r7, #16]
 800c200:	0148      	lsls	r0, r1, #5
 800c202:	6979      	ldr	r1, [r7, #20]
 800c204:	4401      	add	r1, r0
 800c206:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c20a:	4313      	orrs	r3, r2
 800c20c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	78db      	ldrb	r3, [r3, #3]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d128      	bne.n	800c268 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c222:	2b00      	cmp	r3, #0
 800c224:	d110      	bne.n	800c248 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	693a      	ldr	r2, [r7, #16]
 800c236:	0151      	lsls	r1, r2, #5
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	440a      	add	r2, r1
 800c23c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c240:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c244:	6013      	str	r3, [r2, #0]
 800c246:	e00f      	b.n	800c268 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	015a      	lsls	r2, r3, #5
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	4413      	add	r3, r2
 800c250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	0151      	lsls	r1, r2, #5
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	440a      	add	r2, r1
 800c25e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c266:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	015a      	lsls	r2, r3, #5
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	4413      	add	r3, r2
 800c270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	0151      	lsls	r1, r2, #5
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	440a      	add	r2, r1
 800c27e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c282:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c286:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c288:	2300      	movs	r3, #0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	1ff80000 	.word	0x1ff80000

0800c298 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	785b      	ldrb	r3, [r3, #1]
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	f040 80ab 	bne.w	800c40c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	695b      	ldr	r3, [r3, #20]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d132      	bne.n	800c324 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	015a      	lsls	r2, r3, #5
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	0151      	lsls	r1, r2, #5
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	440a      	add	r2, r1
 800c2d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c2dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c2e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	015a      	lsls	r2, r3, #5
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	0151      	lsls	r1, r2, #5
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	440a      	add	r2, r1
 800c2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c300:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	015a      	lsls	r2, r3, #5
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4413      	add	r3, r2
 800c30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	0151      	lsls	r1, r2, #5
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	440a      	add	r2, r1
 800c318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c31c:	0cdb      	lsrs	r3, r3, #19
 800c31e:	04db      	lsls	r3, r3, #19
 800c320:	6113      	str	r3, [r2, #16]
 800c322:	e04e      	b.n	800c3c2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	015a      	lsls	r2, r3, #5
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4413      	add	r3, r2
 800c32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c330:	691b      	ldr	r3, [r3, #16]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	0151      	lsls	r1, r2, #5
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	440a      	add	r2, r1
 800c33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c33e:	0cdb      	lsrs	r3, r3, #19
 800c340:	04db      	lsls	r3, r3, #19
 800c342:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	015a      	lsls	r2, r3, #5
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	4413      	add	r3, r2
 800c34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	0151      	lsls	r1, r2, #5
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	440a      	add	r2, r1
 800c35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c35e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c362:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c366:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	695a      	ldr	r2, [r3, #20]
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	429a      	cmp	r2, r3
 800c372:	d903      	bls.n	800c37c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	689a      	ldr	r2, [r3, #8]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	015a      	lsls	r2, r3, #5
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	4413      	add	r3, r2
 800c384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	0151      	lsls	r1, r2, #5
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	440a      	add	r2, r1
 800c392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c39a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	015a      	lsls	r2, r3, #5
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a8:	691a      	ldr	r2, [r3, #16]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3b2:	68b9      	ldr	r1, [r7, #8]
 800c3b4:	0148      	lsls	r0, r1, #5
 800c3b6:	68f9      	ldr	r1, [r7, #12]
 800c3b8:	4401      	add	r1, r0
 800c3ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	015a      	lsls	r2, r3, #5
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	0151      	lsls	r1, r2, #5
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	440a      	add	r2, r1
 800c3d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3e0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	695b      	ldr	r3, [r3, #20]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d06d      	beq.n	800c4c6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	f003 030f 	and.w	r3, r3, #15
 800c3fa:	2101      	movs	r1, #1
 800c3fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c400:	68f9      	ldr	r1, [r7, #12]
 800c402:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c406:	4313      	orrs	r3, r2
 800c408:	634b      	str	r3, [r1, #52]	; 0x34
 800c40a:	e05c      	b.n	800c4c6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	015a      	lsls	r2, r3, #5
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4413      	add	r3, r2
 800c414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	0151      	lsls	r1, r2, #5
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	440a      	add	r2, r1
 800c422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c426:	0cdb      	lsrs	r3, r3, #19
 800c428:	04db      	lsls	r3, r3, #19
 800c42a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	015a      	lsls	r2, r3, #5
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4413      	add	r3, r2
 800c434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	0151      	lsls	r1, r2, #5
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	440a      	add	r2, r1
 800c442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c446:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c44a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c44e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	695b      	ldr	r3, [r3, #20]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d003      	beq.n	800c460 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	689a      	ldr	r2, [r3, #8]
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	015a      	lsls	r2, r3, #5
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4413      	add	r3, r2
 800c468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	0151      	lsls	r1, r2, #5
 800c472:	68fa      	ldr	r2, [r7, #12]
 800c474:	440a      	add	r2, r1
 800c476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c47a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c47e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	015a      	lsls	r2, r3, #5
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	4413      	add	r3, r2
 800c488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c48c:	691a      	ldr	r2, [r3, #16]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c496:	68b9      	ldr	r1, [r7, #8]
 800c498:	0148      	lsls	r0, r1, #5
 800c49a:	68f9      	ldr	r1, [r7, #12]
 800c49c:	4401      	add	r1, r0
 800c49e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	015a      	lsls	r2, r3, #5
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68ba      	ldr	r2, [r7, #8]
 800c4b6:	0151      	lsls	r1, r2, #5
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	440a      	add	r2, r1
 800c4bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c4c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3714      	adds	r7, #20
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b089      	sub	sp, #36	; 0x24
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	4611      	mov	r1, r2
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	71fb      	strb	r3, [r7, #7]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800c4f2:	88bb      	ldrh	r3, [r7, #4]
 800c4f4:	3303      	adds	r3, #3
 800c4f6:	089b      	lsrs	r3, r3, #2
 800c4f8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	61bb      	str	r3, [r7, #24]
 800c4fe:	e00f      	b.n	800c520 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c500:	79fb      	ldrb	r3, [r7, #7]
 800c502:	031a      	lsls	r2, r3, #12
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	4413      	add	r3, r2
 800c508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c50c:	461a      	mov	r2, r3
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6013      	str	r3, [r2, #0]
    pSrc++;
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	3304      	adds	r3, #4
 800c518:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	3301      	adds	r3, #1
 800c51e:	61bb      	str	r3, [r7, #24]
 800c520:	69ba      	ldr	r2, [r7, #24]
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	429a      	cmp	r2, r3
 800c526:	d3eb      	bcc.n	800c500 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3724      	adds	r7, #36	; 0x24
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c536:	b480      	push	{r7}
 800c538:	b089      	sub	sp, #36	; 0x24
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	60f8      	str	r0, [r7, #12]
 800c53e:	60b9      	str	r1, [r7, #8]
 800c540:	4613      	mov	r3, r2
 800c542:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c54c:	88fb      	ldrh	r3, [r7, #6]
 800c54e:	3303      	adds	r3, #3
 800c550:	089b      	lsrs	r3, r3, #2
 800c552:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c554:	2300      	movs	r3, #0
 800c556:	61bb      	str	r3, [r7, #24]
 800c558:	e00b      	b.n	800c572 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	601a      	str	r2, [r3, #0]
    pDest++;
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	3304      	adds	r3, #4
 800c56a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	3301      	adds	r3, #1
 800c570:	61bb      	str	r3, [r7, #24]
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	429a      	cmp	r2, r3
 800c578:	d3ef      	bcc.n	800c55a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c57a:	69fb      	ldr	r3, [r7, #28]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3724      	adds	r7, #36	; 0x24
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	785b      	ldrb	r3, [r3, #1]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d12c      	bne.n	800c5fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	015a      	lsls	r2, r3, #5
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	db12      	blt.n	800c5dc <USB_EPSetStall+0x54>
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00f      	beq.n	800c5dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	015a      	lsls	r2, r3, #5
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	0151      	lsls	r1, r2, #5
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	440a      	add	r2, r1
 800c5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c5da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	015a      	lsls	r2, r3, #5
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	0151      	lsls	r1, r2, #5
 800c5ee:	68fa      	ldr	r2, [r7, #12]
 800c5f0:	440a      	add	r2, r1
 800c5f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c5fa:	6013      	str	r3, [r2, #0]
 800c5fc:	e02b      	b.n	800c656 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	015a      	lsls	r2, r3, #5
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	4413      	add	r3, r2
 800c606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	db12      	blt.n	800c636 <USB_EPSetStall+0xae>
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00f      	beq.n	800c636 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	015a      	lsls	r2, r3, #5
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	4413      	add	r3, r2
 800c61e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	0151      	lsls	r1, r2, #5
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	440a      	add	r2, r1
 800c62c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c630:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c634:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	015a      	lsls	r2, r3, #5
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	4413      	add	r3, r2
 800c63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	0151      	lsls	r1, r2, #5
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	440a      	add	r2, r1
 800c64c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c654:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	785b      	ldrb	r3, [r3, #1]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d128      	bne.n	800c6d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	4413      	add	r3, r2
 800c688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	0151      	lsls	r1, r2, #5
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	440a      	add	r2, r1
 800c696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c69a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c69e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	78db      	ldrb	r3, [r3, #3]
 800c6a4:	2b03      	cmp	r3, #3
 800c6a6:	d003      	beq.n	800c6b0 <USB_EPClearStall+0x4c>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	78db      	ldrb	r3, [r3, #3]
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d138      	bne.n	800c722 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	015a      	lsls	r2, r3, #5
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68ba      	ldr	r2, [r7, #8]
 800c6c0:	0151      	lsls	r1, r2, #5
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	440a      	add	r2, r1
 800c6c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6ce:	6013      	str	r3, [r2, #0]
 800c6d0:	e027      	b.n	800c722 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	015a      	lsls	r2, r3, #5
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	4413      	add	r3, r2
 800c6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	68ba      	ldr	r2, [r7, #8]
 800c6e2:	0151      	lsls	r1, r2, #5
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	440a      	add	r2, r1
 800c6e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c6f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	78db      	ldrb	r3, [r3, #3]
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	d003      	beq.n	800c702 <USB_EPClearStall+0x9e>
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	78db      	ldrb	r3, [r3, #3]
 800c6fe:	2b02      	cmp	r3, #2
 800c700:	d10f      	bne.n	800c722 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	015a      	lsls	r2, r3, #5
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	4413      	add	r3, r2
 800c70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	0151      	lsls	r1, r2, #5
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	440a      	add	r2, r1
 800c718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c71c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c720:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3714      	adds	r7, #20
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	460b      	mov	r3, r1
 800c73a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c74e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c752:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	78fb      	ldrb	r3, [r7, #3]
 800c75e:	011b      	lsls	r3, r3, #4
 800c760:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c764:	68f9      	ldr	r1, [r7, #12]
 800c766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c76a:	4313      	orrs	r3, r2
 800c76c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3714      	adds	r7, #20
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c796:	f023 0303 	bic.w	r3, r3, #3
 800c79a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	68fa      	ldr	r2, [r7, #12]
 800c7a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7aa:	f023 0302 	bic.w	r3, r3, #2
 800c7ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c7be:	b480      	push	{r7}
 800c7c0:	b085      	sub	sp, #20
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c7d8:	f023 0303 	bic.w	r3, r3, #3
 800c7dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7ec:	f043 0302 	orr.w	r3, r3, #2
 800c7f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	4013      	ands	r3, r2
 800c816:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c818:	68fb      	ldr	r3, [r7, #12]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c826:	b480      	push	{r7}
 800c828:	b085      	sub	sp, #20
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c838:	699b      	ldr	r3, [r3, #24]
 800c83a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c842:	69db      	ldr	r3, [r3, #28]
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	4013      	ands	r3, r2
 800c848:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	0c1b      	lsrs	r3, r3, #16
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3714      	adds	r7, #20
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c85a:	b480      	push	{r7}
 800c85c:	b085      	sub	sp, #20
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c86c:	699b      	ldr	r3, [r3, #24]
 800c86e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c876:	69db      	ldr	r3, [r3, #28]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	4013      	ands	r3, r2
 800c87c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	b29b      	uxth	r3, r3
}
 800c882:	4618      	mov	r0, r3
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c88e:	b480      	push	{r7}
 800c890:	b085      	sub	sp, #20
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	460b      	mov	r3, r1
 800c898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c89e:	78fb      	ldrb	r3, [r7, #3]
 800c8a0:	015a      	lsls	r2, r3, #5
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	4013      	ands	r3, r2
 800c8ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c8bc:	68bb      	ldr	r3, [r7, #8]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b087      	sub	sp, #28
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c8ee:	78fb      	ldrb	r3, [r7, #3]
 800c8f0:	f003 030f 	and.w	r3, r3, #15
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8fa:	01db      	lsls	r3, r3, #7
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	4313      	orrs	r3, r2
 800c902:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c904:	78fb      	ldrb	r3, [r7, #3]
 800c906:	015a      	lsls	r2, r3, #5
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	4413      	add	r3, r2
 800c90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	4013      	ands	r3, r2
 800c916:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c918:	68bb      	ldr	r3, [r7, #8]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	371c      	adds	r7, #28
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c926:	b480      	push	{r7}
 800c928:	b083      	sub	sp, #12
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	695b      	ldr	r3, [r3, #20]
 800c932:	f003 0301 	and.w	r3, r3, #1
}
 800c936:	4618      	mov	r0, r3
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr

0800c942 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c942:	b480      	push	{r7}
 800c944:	b085      	sub	sp, #20
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c95c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c960:	f023 0307 	bic.w	r3, r3, #7
 800c964:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3714      	adds	r7, #20
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr

0800c988 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	333c      	adds	r3, #60	; 0x3c
 800c99a:	3304      	adds	r3, #4
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	4a1c      	ldr	r2, [pc, #112]	; (800ca14 <USB_EP0_OutStart+0x8c>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d90a      	bls.n	800c9be <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9b8:	d101      	bne.n	800c9be <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	e024      	b.n	800ca08 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9e4:	691b      	ldr	r3, [r3, #16]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9ec:	f043 0318 	orr.w	r3, r3, #24
 800c9f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	68fa      	ldr	r2, [r7, #12]
 800c9fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ca04:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	4f54300a 	.word	0x4f54300a

0800ca18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ca20:	2300      	movs	r3, #0
 800ca22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	3301      	adds	r3, #1
 800ca28:	60fb      	str	r3, [r7, #12]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4a13      	ldr	r2, [pc, #76]	; (800ca7c <USB_CoreReset+0x64>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d901      	bls.n	800ca36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ca32:	2303      	movs	r3, #3
 800ca34:	e01b      	b.n	800ca6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	daf2      	bge.n	800ca24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	f043 0201 	orr.w	r2, r3, #1
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3301      	adds	r3, #1
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	4a09      	ldr	r2, [pc, #36]	; (800ca7c <USB_CoreReset+0x64>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d901      	bls.n	800ca60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e006      	b.n	800ca6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	f003 0301 	and.w	r3, r3, #1
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d0f0      	beq.n	800ca4e <USB_CoreReset+0x36>

  return HAL_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	00030d40 	.word	0x00030d40

0800ca80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ca84:	4904      	ldr	r1, [pc, #16]	; (800ca98 <MX_FATFS_Init+0x18>)
 800ca86:	4805      	ldr	r0, [pc, #20]	; (800ca9c <MX_FATFS_Init+0x1c>)
 800ca88:	f001 ff30 	bl	800e8ec <FATFS_LinkDriver>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	461a      	mov	r2, r3
 800ca90:	4b03      	ldr	r3, [pc, #12]	; (800caa0 <MX_FATFS_Init+0x20>)
 800ca92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ca94:	bf00      	nop
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	20002998 	.word	0x20002998
 800ca9c:	080130f8 	.word	0x080130f8
 800caa0:	20002994 	.word	0x20002994

0800caa4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800caae:	f000 f885 	bl	800cbbc <BSP_SD_IsDetected>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d001      	beq.n	800cabc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cab8:	2302      	movs	r3, #2
 800caba:	e012      	b.n	800cae2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cabc:	480b      	ldr	r0, [pc, #44]	; (800caec <BSP_SD_Init+0x48>)
 800cabe:	f7fb f803 	bl	8007ac8 <HAL_SD_Init>
 800cac2:	4603      	mov	r3, r0
 800cac4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cac6:	79fb      	ldrb	r3, [r7, #7]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d109      	bne.n	800cae0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cacc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cad0:	4806      	ldr	r0, [pc, #24]	; (800caec <BSP_SD_Init+0x48>)
 800cad2:	f7fb fec9 	bl	8008868 <HAL_SD_ConfigWideBusOperation>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cae0:	79fb      	ldrb	r3, [r7, #7]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20001ff8 	.word	0x20001ff8

0800caf0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	68f9      	ldr	r1, [r7, #12]
 800cb06:	4806      	ldr	r0, [pc, #24]	; (800cb20 <BSP_SD_ReadBlocks_DMA+0x30>)
 800cb08:	f7fb f918 	bl	8007d3c <HAL_SD_ReadBlocks_DMA>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb16:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3718      	adds	r7, #24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	20001ff8 	.word	0x20001ff8

0800cb24 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	68f9      	ldr	r1, [r7, #12]
 800cb3a:	4806      	ldr	r0, [pc, #24]	; (800cb54 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cb3c:	f7fb f9a6 	bl	8007e8c <HAL_SD_WriteBlocks_DMA>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d001      	beq.n	800cb4a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3718      	adds	r7, #24
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	20001ff8 	.word	0x20001ff8

0800cb58 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cb5c:	4805      	ldr	r0, [pc, #20]	; (800cb74 <BSP_SD_GetCardState+0x1c>)
 800cb5e:	f7fb ff97 	bl	8008a90 <HAL_SD_GetCardState>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b04      	cmp	r3, #4
 800cb66:	bf14      	ite	ne
 800cb68:	2301      	movne	r3, #1
 800cb6a:	2300      	moveq	r3, #0
 800cb6c:	b2db      	uxtb	r3, r3
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	20001ff8 	.word	0x20001ff8

0800cb78 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cb80:	6879      	ldr	r1, [r7, #4]
 800cb82:	4803      	ldr	r0, [pc, #12]	; (800cb90 <BSP_SD_GetCardInfo+0x18>)
 800cb84:	f7fb fe44 	bl	8008810 <HAL_SD_GetCardInfo>
}
 800cb88:	bf00      	nop
 800cb8a:	3708      	adds	r7, #8
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	20001ff8 	.word	0x20001ff8

0800cb94 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cb9c:	f000 f9ac 	bl	800cef8 <BSP_SD_WriteCpltCallback>
}
 800cba0:	bf00      	nop
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cbb0:	f000 f9b4 	bl	800cf1c <BSP_SD_ReadCpltCallback>
}
 800cbb4:	bf00      	nop
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cbc6:	f000 f80b 	bl	800cbe0 <BSP_PlatformIsDetected>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	b2db      	uxtb	r3, r3
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cbea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cbee:	4806      	ldr	r0, [pc, #24]	; (800cc08 <BSP_PlatformIsDetected+0x28>)
 800cbf0:	f7f6 fd64 	bl	80036bc <HAL_GPIO_ReadPin>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cbfe:	79fb      	ldrb	r3, [r7, #7]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	48000400 	.word	0x48000400

0800cc0c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800cc14:	f001 ff2a 	bl	800ea6c <osKernelGetTickCount>
 800cc18:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800cc1a:	e006      	b.n	800cc2a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cc1c:	f7ff ff9c 	bl	800cb58 <BSP_SD_GetCardState>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d101      	bne.n	800cc2a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cc26:	2300      	movs	r3, #0
 800cc28:	e009      	b.n	800cc3e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800cc2a:	f001 ff1f 	bl	800ea6c <osKernelGetTickCount>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d8f0      	bhi.n	800cc1c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cc3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
	...

0800cc48 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cc52:	4b0b      	ldr	r3, [pc, #44]	; (800cc80 <SD_CheckStatus+0x38>)
 800cc54:	2201      	movs	r2, #1
 800cc56:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cc58:	f7ff ff7e 	bl	800cb58 <BSP_SD_GetCardState>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d107      	bne.n	800cc72 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cc62:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <SD_CheckStatus+0x38>)
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	f023 0301 	bic.w	r3, r3, #1
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	4b04      	ldr	r3, [pc, #16]	; (800cc80 <SD_CheckStatus+0x38>)
 800cc70:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cc72:	4b03      	ldr	r3, [pc, #12]	; (800cc80 <SD_CheckStatus+0x38>)
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	b2db      	uxtb	r3, r3
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	20000009 	.word	0x20000009

0800cc84 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cc8e:	4b1c      	ldr	r3, [pc, #112]	; (800cd00 <SD_initialize+0x7c>)
 800cc90:	2201      	movs	r2, #1
 800cc92:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800cc94:	f001 fea2 	bl	800e9dc <osKernelGetState>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b02      	cmp	r3, #2
 800cc9c:	d129      	bne.n	800ccf2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cc9e:	f7ff ff01 	bl	800caa4 <BSP_SD_Init>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d107      	bne.n	800ccb8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cca8:	79fb      	ldrb	r3, [r7, #7]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7ff ffcc 	bl	800cc48 <SD_CheckStatus>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	4b12      	ldr	r3, [pc, #72]	; (800cd00 <SD_initialize+0x7c>)
 800ccb6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ccb8:	4b11      	ldr	r3, [pc, #68]	; (800cd00 <SD_initialize+0x7c>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d017      	beq.n	800ccf2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800ccc2:	4b10      	ldr	r3, [pc, #64]	; (800cd04 <SD_initialize+0x80>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d107      	bne.n	800ccda <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800ccca:	2200      	movs	r2, #0
 800cccc:	2102      	movs	r1, #2
 800ccce:	200a      	movs	r0, #10
 800ccd0:	f002 f8aa 	bl	800ee28 <osMessageQueueNew>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	4a0b      	ldr	r2, [pc, #44]	; (800cd04 <SD_initialize+0x80>)
 800ccd8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800ccda:	4b0a      	ldr	r3, [pc, #40]	; (800cd04 <SD_initialize+0x80>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d107      	bne.n	800ccf2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800cce2:	4b07      	ldr	r3, [pc, #28]	; (800cd00 <SD_initialize+0x7c>)
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	f043 0301 	orr.w	r3, r3, #1
 800ccec:	b2da      	uxtb	r2, r3
 800ccee:	4b04      	ldr	r3, [pc, #16]	; (800cd00 <SD_initialize+0x7c>)
 800ccf0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ccf2:	4b03      	ldr	r3, [pc, #12]	; (800cd00 <SD_initialize+0x7c>)
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	b2db      	uxtb	r3, r3
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	20000009 	.word	0x20000009
 800cd04:	200001dc 	.word	0x200001dc

0800cd08 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cd12:	79fb      	ldrb	r3, [r7, #7]
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff ff97 	bl	800cc48 <SD_CheckStatus>
 800cd1a:	4603      	mov	r3, r0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b088      	sub	sp, #32
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60b9      	str	r1, [r7, #8]
 800cd2c:	607a      	str	r2, [r7, #4]
 800cd2e:	603b      	str	r3, [r7, #0]
 800cd30:	4603      	mov	r3, r0
 800cd32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cd38:	f247 5030 	movw	r0, #30000	; 0x7530
 800cd3c:	f7ff ff66 	bl	800cc0c <SD_CheckStatusWithTimeout>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	da01      	bge.n	800cd4a <SD_read+0x26>
  {
    return res;
 800cd46:	7ffb      	ldrb	r3, [r7, #31]
 800cd48:	e02f      	b.n	800cdaa <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	68b8      	ldr	r0, [r7, #8]
 800cd50:	f7ff fece 	bl	800caf0 <BSP_SD_ReadBlocks_DMA>
 800cd54:	4603      	mov	r3, r0
 800cd56:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800cd58:	7fbb      	ldrb	r3, [r7, #30]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d124      	bne.n	800cda8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800cd5e:	4b15      	ldr	r3, [pc, #84]	; (800cdb4 <SD_read+0x90>)
 800cd60:	6818      	ldr	r0, [r3, #0]
 800cd62:	f107 0112 	add.w	r1, r7, #18
 800cd66:	f247 5330 	movw	r3, #30000	; 0x7530
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f002 f930 	bl	800efd0 <osMessageQueueGet>
 800cd70:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d117      	bne.n	800cda8 <SD_read+0x84>
 800cd78:	8a7b      	ldrh	r3, [r7, #18]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d114      	bne.n	800cda8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800cd7e:	f001 fe75 	bl	800ea6c <osKernelGetTickCount>
 800cd82:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800cd84:	e007      	b.n	800cd96 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd86:	f7ff fee7 	bl	800cb58 <BSP_SD_GetCardState>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d102      	bne.n	800cd96 <SD_read+0x72>
              {
                res = RES_OK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800cd94:	e008      	b.n	800cda8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800cd96:	f001 fe69 	bl	800ea6c <osKernelGetTickCount>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	f247 522f 	movw	r2, #29999	; 0x752f
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d9ee      	bls.n	800cd86 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800cda8:	7ffb      	ldrb	r3, [r7, #31]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3720      	adds	r7, #32
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	200001dc 	.word	0x200001dc

0800cdb8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b088      	sub	sp, #32
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60b9      	str	r1, [r7, #8]
 800cdc0:	607a      	str	r2, [r7, #4]
 800cdc2:	603b      	str	r3, [r7, #0]
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cdcc:	f247 5030 	movw	r0, #30000	; 0x7530
 800cdd0:	f7ff ff1c 	bl	800cc0c <SD_CheckStatusWithTimeout>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	da01      	bge.n	800cdde <SD_write+0x26>
  {
    return res;
 800cdda:	7ffb      	ldrb	r3, [r7, #31]
 800cddc:	e02d      	b.n	800ce3a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	6879      	ldr	r1, [r7, #4]
 800cde2:	68b8      	ldr	r0, [r7, #8]
 800cde4:	f7ff fe9e 	bl	800cb24 <BSP_SD_WriteBlocks_DMA>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d124      	bne.n	800ce38 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800cdee:	4b15      	ldr	r3, [pc, #84]	; (800ce44 <SD_write+0x8c>)
 800cdf0:	6818      	ldr	r0, [r3, #0]
 800cdf2:	f107 0112 	add.w	r1, r7, #18
 800cdf6:	f247 5330 	movw	r3, #30000	; 0x7530
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f002 f8e8 	bl	800efd0 <osMessageQueueGet>
 800ce00:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d117      	bne.n	800ce38 <SD_write+0x80>
 800ce08:	8a7b      	ldrh	r3, [r7, #18]
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d114      	bne.n	800ce38 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800ce0e:	f001 fe2d 	bl	800ea6c <osKernelGetTickCount>
 800ce12:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ce14:	e007      	b.n	800ce26 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce16:	f7ff fe9f 	bl	800cb58 <BSP_SD_GetCardState>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <SD_write+0x6e>
          {
            res = RES_OK;
 800ce20:	2300      	movs	r3, #0
 800ce22:	77fb      	strb	r3, [r7, #31]
            break;
 800ce24:	e008      	b.n	800ce38 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ce26:	f001 fe21 	bl	800ea6c <osKernelGetTickCount>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	1ad3      	subs	r3, r2, r3
 800ce30:	f247 522f 	movw	r2, #29999	; 0x752f
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d9ee      	bls.n	800ce16 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800ce38:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3720      	adds	r7, #32
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	200001dc 	.word	0x200001dc

0800ce48 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b08c      	sub	sp, #48	; 0x30
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	603a      	str	r2, [r7, #0]
 800ce52:	71fb      	strb	r3, [r7, #7]
 800ce54:	460b      	mov	r3, r1
 800ce56:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ce5e:	4b25      	ldr	r3, [pc, #148]	; (800cef4 <SD_ioctl+0xac>)
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	f003 0301 	and.w	r3, r3, #1
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d001      	beq.n	800ce70 <SD_ioctl+0x28>
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	e03c      	b.n	800ceea <SD_ioctl+0xa2>

  switch (cmd)
 800ce70:	79bb      	ldrb	r3, [r7, #6]
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d834      	bhi.n	800cee0 <SD_ioctl+0x98>
 800ce76:	a201      	add	r2, pc, #4	; (adr r2, 800ce7c <SD_ioctl+0x34>)
 800ce78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce7c:	0800ce8d 	.word	0x0800ce8d
 800ce80:	0800ce95 	.word	0x0800ce95
 800ce84:	0800cead 	.word	0x0800cead
 800ce88:	0800cec7 	.word	0x0800cec7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ce92:	e028      	b.n	800cee6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ce94:	f107 0308 	add.w	r3, r7, #8
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff fe6d 	bl	800cb78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ce9e:	6a3a      	ldr	r2, [r7, #32]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cea4:	2300      	movs	r3, #0
 800cea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ceaa:	e01c      	b.n	800cee6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ceac:	f107 0308 	add.w	r3, r7, #8
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7ff fe61 	bl	800cb78 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cebe:	2300      	movs	r3, #0
 800cec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cec4:	e00f      	b.n	800cee6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cec6:	f107 0308 	add.w	r3, r7, #8
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7ff fe54 	bl	800cb78 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ced0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced2:	0a5a      	lsrs	r2, r3, #9
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ced8:	2300      	movs	r3, #0
 800ceda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cede:	e002      	b.n	800cee6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cee0:	2304      	movs	r3, #4
 800cee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3730      	adds	r7, #48	; 0x30
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	20000009 	.word	0x20000009

0800cef8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800cefe:	2302      	movs	r3, #2
 800cf00:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800cf02:	4b05      	ldr	r3, [pc, #20]	; (800cf18 <BSP_SD_WriteCpltCallback+0x20>)
 800cf04:	6818      	ldr	r0, [r3, #0]
 800cf06:	1db9      	adds	r1, r7, #6
 800cf08:	2300      	movs	r3, #0
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f002 f800 	bl	800ef10 <osMessageQueuePut>
#endif
}
 800cf10:	bf00      	nop
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	200001dc 	.word	0x200001dc

0800cf1c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800cf22:	2301      	movs	r3, #1
 800cf24:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800cf26:	4b05      	ldr	r3, [pc, #20]	; (800cf3c <BSP_SD_ReadCpltCallback+0x20>)
 800cf28:	6818      	ldr	r0, [r3, #0]
 800cf2a:	1db9      	adds	r1, r7, #6
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f001 ffee 	bl	800ef10 <osMessageQueuePut>
#endif
}
 800cf34:	bf00      	nop
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	200001dc 	.word	0x200001dc

0800cf40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	460b      	mov	r3, r1
 800cf4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cf4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cf50:	f005 ff98 	bl	8012e84 <USBD_static_malloc>
 800cf54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d105      	bne.n	800cf68 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cf64:	2302      	movs	r3, #2
 800cf66:	e066      	b.n	800d036 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	7c1b      	ldrb	r3, [r3, #16]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d119      	bne.n	800cfac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	2181      	movs	r1, #129	; 0x81
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f005 fd6b 	bl	8012a5c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf90:	2202      	movs	r2, #2
 800cf92:	2101      	movs	r1, #1
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f005 fd61 	bl	8012a5c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2210      	movs	r2, #16
 800cfa6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cfaa:	e016      	b.n	800cfda <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cfac:	2340      	movs	r3, #64	; 0x40
 800cfae:	2202      	movs	r2, #2
 800cfb0:	2181      	movs	r1, #129	; 0x81
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f005 fd52 	bl	8012a5c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cfbe:	2340      	movs	r3, #64	; 0x40
 800cfc0:	2202      	movs	r2, #2
 800cfc2:	2101      	movs	r1, #1
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f005 fd49 	bl	8012a5c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2210      	movs	r2, #16
 800cfd6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cfda:	2308      	movs	r3, #8
 800cfdc:	2203      	movs	r2, #3
 800cfde:	2182      	movs	r1, #130	; 0x82
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f005 fd3b 	bl	8012a5c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2201      	movs	r2, #1
 800cfea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	7c1b      	ldrb	r3, [r3, #16]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d109      	bne.n	800d024 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d01a:	2101      	movs	r1, #1
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f005 fe97 	bl	8012d50 <USBD_LL_PrepareReceive>
 800d022:	e007      	b.n	800d034 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d02a:	2340      	movs	r3, #64	; 0x40
 800d02c:	2101      	movs	r1, #1
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f005 fe8e 	bl	8012d50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b082      	sub	sp, #8
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	460b      	mov	r3, r1
 800d048:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d04a:	2181      	movs	r1, #129	; 0x81
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f005 fd43 	bl	8012ad8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d058:	2101      	movs	r1, #1
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f005 fd3c 	bl	8012ad8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d068:	2182      	movs	r1, #130	; 0x82
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f005 fd34 	bl	8012ad8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00e      	beq.n	800d0a8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d09a:	4618      	mov	r0, r3
 800d09c:	f005 ff00 	bl	8012ea0 <USBD_static_free>
    pdev->pClassData = NULL;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
	...

0800d0b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d101      	bne.n	800d0dc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d0d8:	2303      	movs	r3, #3
 800d0da:	e0af      	b.n	800d23c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d03f      	beq.n	800d168 <USBD_CDC_Setup+0xb4>
 800d0e8:	2b20      	cmp	r3, #32
 800d0ea:	f040 809f 	bne.w	800d22c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	88db      	ldrh	r3, [r3, #6]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d02e      	beq.n	800d154 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	b25b      	sxtb	r3, r3
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	da16      	bge.n	800d12e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d10c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d10e:	683a      	ldr	r2, [r7, #0]
 800d110:	88d2      	ldrh	r2, [r2, #6]
 800d112:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	88db      	ldrh	r3, [r3, #6]
 800d118:	2b07      	cmp	r3, #7
 800d11a:	bf28      	it	cs
 800d11c:	2307      	movcs	r3, #7
 800d11e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	89fa      	ldrh	r2, [r7, #14]
 800d124:	4619      	mov	r1, r3
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f001 fb13 	bl	800e752 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d12c:	e085      	b.n	800d23a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	785a      	ldrb	r2, [r3, #1]
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	88db      	ldrh	r3, [r3, #6]
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d144:	6939      	ldr	r1, [r7, #16]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	88db      	ldrh	r3, [r3, #6]
 800d14a:	461a      	mov	r2, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f001 fb2c 	bl	800e7aa <USBD_CtlPrepareRx>
      break;
 800d152:	e072      	b.n	800d23a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	683a      	ldr	r2, [r7, #0]
 800d15e:	7850      	ldrb	r0, [r2, #1]
 800d160:	2200      	movs	r2, #0
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	4798      	blx	r3
      break;
 800d166:	e068      	b.n	800d23a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	785b      	ldrb	r3, [r3, #1]
 800d16c:	2b0b      	cmp	r3, #11
 800d16e:	d852      	bhi.n	800d216 <USBD_CDC_Setup+0x162>
 800d170:	a201      	add	r2, pc, #4	; (adr r2, 800d178 <USBD_CDC_Setup+0xc4>)
 800d172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d176:	bf00      	nop
 800d178:	0800d1a9 	.word	0x0800d1a9
 800d17c:	0800d225 	.word	0x0800d225
 800d180:	0800d217 	.word	0x0800d217
 800d184:	0800d217 	.word	0x0800d217
 800d188:	0800d217 	.word	0x0800d217
 800d18c:	0800d217 	.word	0x0800d217
 800d190:	0800d217 	.word	0x0800d217
 800d194:	0800d217 	.word	0x0800d217
 800d198:	0800d217 	.word	0x0800d217
 800d19c:	0800d217 	.word	0x0800d217
 800d1a0:	0800d1d3 	.word	0x0800d1d3
 800d1a4:	0800d1fd 	.word	0x0800d1fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	2b03      	cmp	r3, #3
 800d1b2:	d107      	bne.n	800d1c4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d1b4:	f107 030a 	add.w	r3, r7, #10
 800d1b8:	2202      	movs	r2, #2
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f001 fac8 	bl	800e752 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1c2:	e032      	b.n	800d22a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f001 fa52 	bl	800e670 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	75fb      	strb	r3, [r7, #23]
          break;
 800d1d0:	e02b      	b.n	800d22a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	2b03      	cmp	r3, #3
 800d1dc:	d107      	bne.n	800d1ee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d1de:	f107 030d 	add.w	r3, r7, #13
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f001 fab3 	bl	800e752 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1ec:	e01d      	b.n	800d22a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f001 fa3d 	bl	800e670 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1f6:	2303      	movs	r3, #3
 800d1f8:	75fb      	strb	r3, [r7, #23]
          break;
 800d1fa:	e016      	b.n	800d22a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d202:	b2db      	uxtb	r3, r3
 800d204:	2b03      	cmp	r3, #3
 800d206:	d00f      	beq.n	800d228 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d208:	6839      	ldr	r1, [r7, #0]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f001 fa30 	bl	800e670 <USBD_CtlError>
            ret = USBD_FAIL;
 800d210:	2303      	movs	r3, #3
 800d212:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d214:	e008      	b.n	800d228 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d216:	6839      	ldr	r1, [r7, #0]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f001 fa29 	bl	800e670 <USBD_CtlError>
          ret = USBD_FAIL;
 800d21e:	2303      	movs	r3, #3
 800d220:	75fb      	strb	r3, [r7, #23]
          break;
 800d222:	e002      	b.n	800d22a <USBD_CDC_Setup+0x176>
          break;
 800d224:	bf00      	nop
 800d226:	e008      	b.n	800d23a <USBD_CDC_Setup+0x186>
          break;
 800d228:	bf00      	nop
      }
      break;
 800d22a:	e006      	b.n	800d23a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f001 fa1e 	bl	800e670 <USBD_CtlError>
      ret = USBD_FAIL;
 800d234:	2303      	movs	r3, #3
 800d236:	75fb      	strb	r3, [r7, #23]
      break;
 800d238:	bf00      	nop
  }

  return (uint8_t)ret;
 800d23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3718      	adds	r7, #24
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	460b      	mov	r3, r1
 800d24e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d256:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d262:	2303      	movs	r3, #3
 800d264:	e04f      	b.n	800d306 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d26c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d26e:	78fa      	ldrb	r2, [r7, #3]
 800d270:	6879      	ldr	r1, [r7, #4]
 800d272:	4613      	mov	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	440b      	add	r3, r1
 800d27c:	3318      	adds	r3, #24
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d029      	beq.n	800d2d8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d284:	78fa      	ldrb	r2, [r7, #3]
 800d286:	6879      	ldr	r1, [r7, #4]
 800d288:	4613      	mov	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	4413      	add	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	440b      	add	r3, r1
 800d292:	3318      	adds	r3, #24
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	78f9      	ldrb	r1, [r7, #3]
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	460b      	mov	r3, r1
 800d29c:	00db      	lsls	r3, r3, #3
 800d29e:	1a5b      	subs	r3, r3, r1
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4403      	add	r3, r0
 800d2a4:	3344      	adds	r3, #68	; 0x44
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d2ac:	fb03 f301 	mul.w	r3, r3, r1
 800d2b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d110      	bne.n	800d2d8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d2b6:	78fa      	ldrb	r2, [r7, #3]
 800d2b8:	6879      	ldr	r1, [r7, #4]
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4413      	add	r3, r2
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	440b      	add	r3, r1
 800d2c4:	3318      	adds	r3, #24
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d2ca:	78f9      	ldrb	r1, [r7, #3]
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f005 fd05 	bl	8012ce0 <USBD_LL_Transmit>
 800d2d6:	e015      	b.n	800d304 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2e6:	691b      	ldr	r3, [r3, #16]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00b      	beq.n	800d304 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d2fa:	68ba      	ldr	r2, [r7, #8]
 800d2fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d300:	78fa      	ldrb	r2, [r7, #3]
 800d302:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b084      	sub	sp, #16
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
 800d316:	460b      	mov	r3, r1
 800d318:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d320:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d101      	bne.n	800d330 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d32c:	2303      	movs	r3, #3
 800d32e:	e015      	b.n	800d35c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d330:	78fb      	ldrb	r3, [r7, #3]
 800d332:	4619      	mov	r1, r3
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f005 fd43 	bl	8012dc0 <USBD_LL_GetRxDataSize>
 800d33a:	4602      	mov	r2, r0
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d356:	4611      	mov	r1, r2
 800d358:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d372:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d37a:	2303      	movs	r3, #3
 800d37c:	e01b      	b.n	800d3b6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d015      	beq.n	800d3b4 <USBD_CDC_EP0_RxReady+0x50>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d38e:	2bff      	cmp	r3, #255	; 0xff
 800d390:	d010      	beq.n	800d3b4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d3a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d3a8:	b292      	uxth	r2, r2
 800d3aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	22ff      	movs	r2, #255	; 0xff
 800d3b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
	...

0800d3c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2243      	movs	r2, #67	; 0x43
 800d3cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d3ce:	4b03      	ldr	r3, [pc, #12]	; (800d3dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr
 800d3dc:	20000094 	.word	0x20000094

0800d3e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2243      	movs	r2, #67	; 0x43
 800d3ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d3ee:	4b03      	ldr	r3, [pc, #12]	; (800d3fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	20000050 	.word	0x20000050

0800d400 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2243      	movs	r2, #67	; 0x43
 800d40c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d40e:	4b03      	ldr	r3, [pc, #12]	; (800d41c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d410:	4618      	mov	r0, r3
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr
 800d41c:	200000d8 	.word	0x200000d8

0800d420 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	220a      	movs	r2, #10
 800d42c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d42e:	4b03      	ldr	r3, [pc, #12]	; (800d43c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d430:	4618      	mov	r0, r3
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr
 800d43c:	2000000c 	.word	0x2000000c

0800d440 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d101      	bne.n	800d454 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d450:	2303      	movs	r3, #3
 800d452:	e004      	b.n	800d45e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	683a      	ldr	r2, [r7, #0]
 800d458:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	370c      	adds	r7, #12
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr

0800d46a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d46a:	b480      	push	{r7}
 800d46c:	b087      	sub	sp, #28
 800d46e:	af00      	add	r7, sp, #0
 800d470:	60f8      	str	r0, [r7, #12]
 800d472:	60b9      	str	r1, [r7, #8]
 800d474:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d47c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d101      	bne.n	800d488 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d484:	2303      	movs	r3, #3
 800d486:	e008      	b.n	800d49a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	371c      	adds	r7, #28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr

0800d4a6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d4a6:	b480      	push	{r7}
 800d4a8:	b085      	sub	sp, #20
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
 800d4ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d101      	bne.n	800d4c2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d4be:	2303      	movs	r3, #3
 800d4c0:	e004      	b.n	800d4cc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	683a      	ldr	r2, [r7, #0]
 800d4c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3714      	adds	r7, #20
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d101      	bne.n	800d4f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d4f2:	2303      	movs	r3, #3
 800d4f4:	e016      	b.n	800d524 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	7c1b      	ldrb	r3, [r3, #16]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d109      	bne.n	800d512 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d504:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d508:	2101      	movs	r1, #1
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f005 fc20 	bl	8012d50 <USBD_LL_PrepareReceive>
 800d510:	e007      	b.n	800d522 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d518:	2340      	movs	r3, #64	; 0x40
 800d51a:	2101      	movs	r1, #1
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f005 fc17 	bl	8012d50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	4613      	mov	r3, r2
 800d538:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d101      	bne.n	800d544 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d540:	2303      	movs	r3, #3
 800d542:	e01f      	b.n	800d584 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2200      	movs	r2, #0
 800d550:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d003      	beq.n	800d56a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2201      	movs	r2, #1
 800d56e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	79fa      	ldrb	r2, [r7, #7]
 800d576:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d578:	68f8      	ldr	r0, [r7, #12]
 800d57a:	f005 f9f3 	bl	8012964 <USBD_LL_Init>
 800d57e:	4603      	mov	r3, r0
 800d580:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d582:	7dfb      	ldrb	r3, [r7, #23]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3718      	adds	r7, #24
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d596:	2300      	movs	r3, #0
 800d598:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d5a0:	2303      	movs	r3, #3
 800d5a2:	e016      	b.n	800d5d2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00b      	beq.n	800d5d0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c0:	f107 020e 	add.w	r2, r7, #14
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	4798      	blx	r3
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b082      	sub	sp, #8
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f005 fa08 	bl	80129f8 <USBD_LL_Start>
 800d5e8:	4603      	mov	r3, r0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3708      	adds	r7, #8
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d5f2:	b480      	push	{r7}
 800d5f4:	b083      	sub	sp, #12
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	370c      	adds	r7, #12
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	460b      	mov	r3, r1
 800d612:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d614:	2303      	movs	r3, #3
 800d616:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d009      	beq.n	800d636 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	78fa      	ldrb	r2, [r7, #3]
 800d62c:	4611      	mov	r1, r2
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	4798      	blx	r3
 800d632:	4603      	mov	r3, r0
 800d634:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d636:	7bfb      	ldrb	r3, [r7, #15]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3710      	adds	r7, #16
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	460b      	mov	r3, r1
 800d64a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d652:	2b00      	cmp	r3, #0
 800d654:	d007      	beq.n	800d666 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	78fa      	ldrb	r2, [r7, #3]
 800d660:	4611      	mov	r1, r2
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	4798      	blx	r3
  }

  return USBD_OK;
 800d666:	2300      	movs	r3, #0
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	4618      	mov	r0, r3
 800d684:	f000 ffba 	bl	800e5fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d696:	461a      	mov	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d6a4:	f003 031f 	and.w	r3, r3, #31
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	d01a      	beq.n	800d6e2 <USBD_LL_SetupStage+0x72>
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d822      	bhi.n	800d6f6 <USBD_LL_SetupStage+0x86>
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d002      	beq.n	800d6ba <USBD_LL_SetupStage+0x4a>
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d00a      	beq.n	800d6ce <USBD_LL_SetupStage+0x5e>
 800d6b8:	e01d      	b.n	800d6f6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 fa62 	bl	800db8c <USBD_StdDevReq>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d6cc:	e020      	b.n	800d710 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 fac6 	bl	800dc68 <USBD_StdItfReq>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	73fb      	strb	r3, [r7, #15]
      break;
 800d6e0:	e016      	b.n	800d710 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fb05 	bl	800dcfa <USBD_StdEPReq>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d6f4:	e00c      	b.n	800d710 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d6fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d700:	b2db      	uxtb	r3, r3
 800d702:	4619      	mov	r1, r3
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f005 fa1d 	bl	8012b44 <USBD_LL_StallEP>
 800d70a:	4603      	mov	r3, r0
 800d70c:	73fb      	strb	r3, [r7, #15]
      break;
 800d70e:	bf00      	nop
  }

  return ret;
 800d710:	7bfb      	ldrb	r3, [r7, #15]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b086      	sub	sp, #24
 800d71e:	af00      	add	r7, sp, #0
 800d720:	60f8      	str	r0, [r7, #12]
 800d722:	460b      	mov	r3, r1
 800d724:	607a      	str	r2, [r7, #4]
 800d726:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d728:	7afb      	ldrb	r3, [r7, #11]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d138      	bne.n	800d7a0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d734:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d73c:	2b03      	cmp	r3, #3
 800d73e:	d14a      	bne.n	800d7d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	689a      	ldr	r2, [r3, #8]
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d913      	bls.n	800d774 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	689a      	ldr	r2, [r3, #8]
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	1ad2      	subs	r2, r2, r3
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	68da      	ldr	r2, [r3, #12]
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	4293      	cmp	r3, r2
 800d764:	bf28      	it	cs
 800d766:	4613      	movcs	r3, r2
 800d768:	461a      	mov	r2, r3
 800d76a:	6879      	ldr	r1, [r7, #4]
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f001 f839 	bl	800e7e4 <USBD_CtlContinueRx>
 800d772:	e030      	b.n	800d7d6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	2b03      	cmp	r3, #3
 800d77e:	d10b      	bne.n	800d798 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d786:	691b      	ldr	r3, [r3, #16]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d005      	beq.n	800d798 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d792:	691b      	ldr	r3, [r3, #16]
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f001 f834 	bl	800e806 <USBD_CtlSendStatus>
 800d79e:	e01a      	b.n	800d7d6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b03      	cmp	r3, #3
 800d7aa:	d114      	bne.n	800d7d6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b2:	699b      	ldr	r3, [r3, #24]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00e      	beq.n	800d7d6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	7afa      	ldrb	r2, [r7, #11]
 800d7c2:	4611      	mov	r1, r2
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	4798      	blx	r3
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d7cc:	7dfb      	ldrb	r3, [r7, #23]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d7d2:	7dfb      	ldrb	r3, [r7, #23]
 800d7d4:	e000      	b.n	800d7d8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b086      	sub	sp, #24
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	607a      	str	r2, [r7, #4]
 800d7ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d7ee:	7afb      	ldrb	r3, [r7, #11]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d16b      	bne.n	800d8cc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	3314      	adds	r3, #20
 800d7f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d800:	2b02      	cmp	r3, #2
 800d802:	d156      	bne.n	800d8b2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	689a      	ldr	r2, [r3, #8]
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d914      	bls.n	800d83a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	689a      	ldr	r2, [r3, #8]
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	1ad2      	subs	r2, r2, r3
 800d81a:	693b      	ldr	r3, [r7, #16]
 800d81c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	461a      	mov	r2, r3
 800d824:	6879      	ldr	r1, [r7, #4]
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f000 ffae 	bl	800e788 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d82c:	2300      	movs	r3, #0
 800d82e:	2200      	movs	r2, #0
 800d830:	2100      	movs	r1, #0
 800d832:	68f8      	ldr	r0, [r7, #12]
 800d834:	f005 fa8c 	bl	8012d50 <USBD_LL_PrepareReceive>
 800d838:	e03b      	b.n	800d8b2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	68da      	ldr	r2, [r3, #12]
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	429a      	cmp	r2, r3
 800d844:	d11c      	bne.n	800d880 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	685a      	ldr	r2, [r3, #4]
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d84e:	429a      	cmp	r2, r3
 800d850:	d316      	bcc.n	800d880 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	685a      	ldr	r2, [r3, #4]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d20f      	bcs.n	800d880 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d860:	2200      	movs	r2, #0
 800d862:	2100      	movs	r1, #0
 800d864:	68f8      	ldr	r0, [r7, #12]
 800d866:	f000 ff8f 	bl	800e788 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d872:	2300      	movs	r3, #0
 800d874:	2200      	movs	r2, #0
 800d876:	2100      	movs	r1, #0
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	f005 fa69 	bl	8012d50 <USBD_LL_PrepareReceive>
 800d87e:	e018      	b.n	800d8b2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b03      	cmp	r3, #3
 800d88a:	d10b      	bne.n	800d8a4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d005      	beq.n	800d8a4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8a4:	2180      	movs	r1, #128	; 0x80
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f005 f94c 	bl	8012b44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d8ac:	68f8      	ldr	r0, [r7, #12]
 800d8ae:	f000 ffbd 	bl	800e82c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d122      	bne.n	800d902 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7ff fe98 	bl	800d5f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d8ca:	e01a      	b.n	800d902 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	2b03      	cmp	r3, #3
 800d8d6:	d114      	bne.n	800d902 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8de:	695b      	ldr	r3, [r3, #20]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00e      	beq.n	800d902 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8ea:	695b      	ldr	r3, [r3, #20]
 800d8ec:	7afa      	ldrb	r2, [r7, #11]
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	4798      	blx	r3
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d8f8:	7dfb      	ldrb	r3, [r7, #23]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d001      	beq.n	800d902 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d8fe:	7dfb      	ldrb	r3, [r7, #23]
 800d900:	e000      	b.n	800d904 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3718      	adds	r7, #24
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d101      	bne.n	800d940 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d93c:	2303      	movs	r3, #3
 800d93e:	e02f      	b.n	800d9a0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00f      	beq.n	800d96a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d009      	beq.n	800d96a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	6852      	ldr	r2, [r2, #4]
 800d962:	b2d2      	uxtb	r2, r2
 800d964:	4611      	mov	r1, r2
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d96a:	2340      	movs	r3, #64	; 0x40
 800d96c:	2200      	movs	r2, #0
 800d96e:	2100      	movs	r1, #0
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f005 f873 	bl	8012a5c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2201      	movs	r2, #1
 800d97a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2240      	movs	r2, #64	; 0x40
 800d982:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d986:	2340      	movs	r3, #64	; 0x40
 800d988:	2200      	movs	r2, #0
 800d98a:	2180      	movs	r1, #128	; 0x80
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f005 f865 	bl	8012a5c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2201      	movs	r2, #1
 800d996:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2240      	movs	r2, #64	; 0x40
 800d99c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	78fa      	ldrb	r2, [r7, #3]
 800d9b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	370c      	adds	r7, #12
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr

0800d9c8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2204      	movs	r2, #4
 800d9e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da02:	b2db      	uxtb	r3, r3
 800da04:	2b04      	cmp	r3, #4
 800da06:	d106      	bne.n	800da16 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da32:	2b00      	cmp	r3, #0
 800da34:	d101      	bne.n	800da3a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800da36:	2303      	movs	r3, #3
 800da38:	e012      	b.n	800da60 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da40:	b2db      	uxtb	r3, r3
 800da42:	2b03      	cmp	r3, #3
 800da44:	d10b      	bne.n	800da5e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da4c:	69db      	ldr	r3, [r3, #28]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d005      	beq.n	800da5e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3708      	adds	r7, #8
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d101      	bne.n	800da82 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800da7e:	2303      	movs	r3, #3
 800da80:	e014      	b.n	800daac <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	d10d      	bne.n	800daaa <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da94:	6a1b      	ldr	r3, [r3, #32]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d007      	beq.n	800daaa <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa0:	6a1b      	ldr	r3, [r3, #32]
 800daa2:	78fa      	ldrb	r2, [r7, #3]
 800daa4:	4611      	mov	r1, r2
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	460b      	mov	r3, r1
 800dabe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d101      	bne.n	800dace <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800daca:	2303      	movs	r3, #3
 800dacc:	e014      	b.n	800daf8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d10d      	bne.n	800daf6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d007      	beq.n	800daf6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daee:	78fa      	ldrb	r2, [r7, #3]
 800daf0:	4611      	mov	r1, r2
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	370c      	adds	r7, #12
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b082      	sub	sp, #8
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2201      	movs	r2, #1
 800db22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d009      	beq.n	800db44 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	6852      	ldr	r2, [r2, #4]
 800db3c:	b2d2      	uxtb	r2, r2
 800db3e:	4611      	mov	r1, r2
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	4798      	blx	r3
  }

  return USBD_OK;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3708      	adds	r7, #8
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800db4e:	b480      	push	{r7}
 800db50:	b087      	sub	sp, #28
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	3301      	adds	r3, #1
 800db64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800db6c:	8a3b      	ldrh	r3, [r7, #16]
 800db6e:	021b      	lsls	r3, r3, #8
 800db70:	b21a      	sxth	r2, r3
 800db72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db76:	4313      	orrs	r3, r2
 800db78:	b21b      	sxth	r3, r3
 800db7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800db7c:	89fb      	ldrh	r3, [r7, #14]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	371c      	adds	r7, #28
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr
	...

0800db8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dba2:	2b40      	cmp	r3, #64	; 0x40
 800dba4:	d005      	beq.n	800dbb2 <USBD_StdDevReq+0x26>
 800dba6:	2b40      	cmp	r3, #64	; 0x40
 800dba8:	d853      	bhi.n	800dc52 <USBD_StdDevReq+0xc6>
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00b      	beq.n	800dbc6 <USBD_StdDevReq+0x3a>
 800dbae:	2b20      	cmp	r3, #32
 800dbb0:	d14f      	bne.n	800dc52 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbb8:	689b      	ldr	r3, [r3, #8]
 800dbba:	6839      	ldr	r1, [r7, #0]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	4798      	blx	r3
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]
      break;
 800dbc4:	e04a      	b.n	800dc5c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	785b      	ldrb	r3, [r3, #1]
 800dbca:	2b09      	cmp	r3, #9
 800dbcc:	d83b      	bhi.n	800dc46 <USBD_StdDevReq+0xba>
 800dbce:	a201      	add	r2, pc, #4	; (adr r2, 800dbd4 <USBD_StdDevReq+0x48>)
 800dbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd4:	0800dc29 	.word	0x0800dc29
 800dbd8:	0800dc3d 	.word	0x0800dc3d
 800dbdc:	0800dc47 	.word	0x0800dc47
 800dbe0:	0800dc33 	.word	0x0800dc33
 800dbe4:	0800dc47 	.word	0x0800dc47
 800dbe8:	0800dc07 	.word	0x0800dc07
 800dbec:	0800dbfd 	.word	0x0800dbfd
 800dbf0:	0800dc47 	.word	0x0800dc47
 800dbf4:	0800dc1f 	.word	0x0800dc1f
 800dbf8:	0800dc11 	.word	0x0800dc11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dbfc:	6839      	ldr	r1, [r7, #0]
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 f9de 	bl	800dfc0 <USBD_GetDescriptor>
          break;
 800dc04:	e024      	b.n	800dc50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc06:	6839      	ldr	r1, [r7, #0]
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 fb6d 	bl	800e2e8 <USBD_SetAddress>
          break;
 800dc0e:	e01f      	b.n	800dc50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dc10:	6839      	ldr	r1, [r7, #0]
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 fbac 	bl	800e370 <USBD_SetConfig>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73fb      	strb	r3, [r7, #15]
          break;
 800dc1c:	e018      	b.n	800dc50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dc1e:	6839      	ldr	r1, [r7, #0]
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 fc4b 	bl	800e4bc <USBD_GetConfig>
          break;
 800dc26:	e013      	b.n	800dc50 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fc7c 	bl	800e528 <USBD_GetStatus>
          break;
 800dc30:	e00e      	b.n	800dc50 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 fcab 	bl	800e590 <USBD_SetFeature>
          break;
 800dc3a:	e009      	b.n	800dc50 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dc3c:	6839      	ldr	r1, [r7, #0]
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fcba 	bl	800e5b8 <USBD_ClrFeature>
          break;
 800dc44:	e004      	b.n	800dc50 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dc46:	6839      	ldr	r1, [r7, #0]
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 fd11 	bl	800e670 <USBD_CtlError>
          break;
 800dc4e:	bf00      	nop
      }
      break;
 800dc50:	e004      	b.n	800dc5c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fd0b 	bl	800e670 <USBD_CtlError>
      break;
 800dc5a:	bf00      	nop
  }

  return ret;
 800dc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop

0800dc68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc72:	2300      	movs	r3, #0
 800dc74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc7e:	2b40      	cmp	r3, #64	; 0x40
 800dc80:	d005      	beq.n	800dc8e <USBD_StdItfReq+0x26>
 800dc82:	2b40      	cmp	r3, #64	; 0x40
 800dc84:	d82f      	bhi.n	800dce6 <USBD_StdItfReq+0x7e>
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d001      	beq.n	800dc8e <USBD_StdItfReq+0x26>
 800dc8a:	2b20      	cmp	r3, #32
 800dc8c:	d12b      	bne.n	800dce6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	3b01      	subs	r3, #1
 800dc98:	2b02      	cmp	r3, #2
 800dc9a:	d81d      	bhi.n	800dcd8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	889b      	ldrh	r3, [r3, #4]
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d813      	bhi.n	800dcce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcac:	689b      	ldr	r3, [r3, #8]
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	4798      	blx	r3
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	88db      	ldrh	r3, [r3, #6]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d110      	bne.n	800dce2 <USBD_StdItfReq+0x7a>
 800dcc0:	7bfb      	ldrb	r3, [r7, #15]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10d      	bne.n	800dce2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 fd9d 	bl	800e806 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dccc:	e009      	b.n	800dce2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fccd 	bl	800e670 <USBD_CtlError>
          break;
 800dcd6:	e004      	b.n	800dce2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 fcc8 	bl	800e670 <USBD_CtlError>
          break;
 800dce0:	e000      	b.n	800dce4 <USBD_StdItfReq+0x7c>
          break;
 800dce2:	bf00      	nop
      }
      break;
 800dce4:	e004      	b.n	800dcf0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800dce6:	6839      	ldr	r1, [r7, #0]
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fcc1 	bl	800e670 <USBD_CtlError>
      break;
 800dcee:	bf00      	nop
  }

  return ret;
 800dcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}

0800dcfa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcfa:	b580      	push	{r7, lr}
 800dcfc:	b084      	sub	sp, #16
 800dcfe:	af00      	add	r7, sp, #0
 800dd00:	6078      	str	r0, [r7, #4]
 800dd02:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	889b      	ldrh	r3, [r3, #4]
 800dd0c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd16:	2b40      	cmp	r3, #64	; 0x40
 800dd18:	d007      	beq.n	800dd2a <USBD_StdEPReq+0x30>
 800dd1a:	2b40      	cmp	r3, #64	; 0x40
 800dd1c:	f200 8145 	bhi.w	800dfaa <USBD_StdEPReq+0x2b0>
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d00c      	beq.n	800dd3e <USBD_StdEPReq+0x44>
 800dd24:	2b20      	cmp	r3, #32
 800dd26:	f040 8140 	bne.w	800dfaa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	4798      	blx	r3
 800dd38:	4603      	mov	r3, r0
 800dd3a:	73fb      	strb	r3, [r7, #15]
      break;
 800dd3c:	e13a      	b.n	800dfb4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	785b      	ldrb	r3, [r3, #1]
 800dd42:	2b03      	cmp	r3, #3
 800dd44:	d007      	beq.n	800dd56 <USBD_StdEPReq+0x5c>
 800dd46:	2b03      	cmp	r3, #3
 800dd48:	f300 8129 	bgt.w	800df9e <USBD_StdEPReq+0x2a4>
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d07f      	beq.n	800de50 <USBD_StdEPReq+0x156>
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d03c      	beq.n	800ddce <USBD_StdEPReq+0xd4>
 800dd54:	e123      	b.n	800df9e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	d002      	beq.n	800dd68 <USBD_StdEPReq+0x6e>
 800dd62:	2b03      	cmp	r3, #3
 800dd64:	d016      	beq.n	800dd94 <USBD_StdEPReq+0x9a>
 800dd66:	e02c      	b.n	800ddc2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd68:	7bbb      	ldrb	r3, [r7, #14]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00d      	beq.n	800dd8a <USBD_StdEPReq+0x90>
 800dd6e:	7bbb      	ldrb	r3, [r7, #14]
 800dd70:	2b80      	cmp	r3, #128	; 0x80
 800dd72:	d00a      	beq.n	800dd8a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd74:	7bbb      	ldrb	r3, [r7, #14]
 800dd76:	4619      	mov	r1, r3
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f004 fee3 	bl	8012b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd7e:	2180      	movs	r1, #128	; 0x80
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f004 fedf 	bl	8012b44 <USBD_LL_StallEP>
 800dd86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dd88:	e020      	b.n	800ddcc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800dd8a:	6839      	ldr	r1, [r7, #0]
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f000 fc6f 	bl	800e670 <USBD_CtlError>
              break;
 800dd92:	e01b      	b.n	800ddcc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	885b      	ldrh	r3, [r3, #2]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10e      	bne.n	800ddba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dd9c:	7bbb      	ldrb	r3, [r7, #14]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00b      	beq.n	800ddba <USBD_StdEPReq+0xc0>
 800dda2:	7bbb      	ldrb	r3, [r7, #14]
 800dda4:	2b80      	cmp	r3, #128	; 0x80
 800dda6:	d008      	beq.n	800ddba <USBD_StdEPReq+0xc0>
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	88db      	ldrh	r3, [r3, #6]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d104      	bne.n	800ddba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddb0:	7bbb      	ldrb	r3, [r7, #14]
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f004 fec5 	bl	8012b44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fd23 	bl	800e806 <USBD_CtlSendStatus>

              break;
 800ddc0:	e004      	b.n	800ddcc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ddc2:	6839      	ldr	r1, [r7, #0]
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 fc53 	bl	800e670 <USBD_CtlError>
              break;
 800ddca:	bf00      	nop
          }
          break;
 800ddcc:	e0ec      	b.n	800dfa8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	d002      	beq.n	800dde0 <USBD_StdEPReq+0xe6>
 800ddda:	2b03      	cmp	r3, #3
 800dddc:	d016      	beq.n	800de0c <USBD_StdEPReq+0x112>
 800ddde:	e030      	b.n	800de42 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dde0:	7bbb      	ldrb	r3, [r7, #14]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00d      	beq.n	800de02 <USBD_StdEPReq+0x108>
 800dde6:	7bbb      	ldrb	r3, [r7, #14]
 800dde8:	2b80      	cmp	r3, #128	; 0x80
 800ddea:	d00a      	beq.n	800de02 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f004 fea7 	bl	8012b44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddf6:	2180      	movs	r1, #128	; 0x80
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f004 fea3 	bl	8012b44 <USBD_LL_StallEP>
 800ddfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de00:	e025      	b.n	800de4e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800de02:	6839      	ldr	r1, [r7, #0]
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 fc33 	bl	800e670 <USBD_CtlError>
              break;
 800de0a:	e020      	b.n	800de4e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	885b      	ldrh	r3, [r3, #2]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d11b      	bne.n	800de4c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800de14:	7bbb      	ldrb	r3, [r7, #14]
 800de16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d004      	beq.n	800de28 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800de1e:	7bbb      	ldrb	r3, [r7, #14]
 800de20:	4619      	mov	r1, r3
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f004 fec4 	bl	8012bb0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f000 fcec 	bl	800e806 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	4798      	blx	r3
 800de3c:	4603      	mov	r3, r0
 800de3e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800de40:	e004      	b.n	800de4c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800de42:	6839      	ldr	r1, [r7, #0]
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 fc13 	bl	800e670 <USBD_CtlError>
              break;
 800de4a:	e000      	b.n	800de4e <USBD_StdEPReq+0x154>
              break;
 800de4c:	bf00      	nop
          }
          break;
 800de4e:	e0ab      	b.n	800dfa8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de56:	b2db      	uxtb	r3, r3
 800de58:	2b02      	cmp	r3, #2
 800de5a:	d002      	beq.n	800de62 <USBD_StdEPReq+0x168>
 800de5c:	2b03      	cmp	r3, #3
 800de5e:	d032      	beq.n	800dec6 <USBD_StdEPReq+0x1cc>
 800de60:	e097      	b.n	800df92 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de62:	7bbb      	ldrb	r3, [r7, #14]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d007      	beq.n	800de78 <USBD_StdEPReq+0x17e>
 800de68:	7bbb      	ldrb	r3, [r7, #14]
 800de6a:	2b80      	cmp	r3, #128	; 0x80
 800de6c:	d004      	beq.n	800de78 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800de6e:	6839      	ldr	r1, [r7, #0]
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 fbfd 	bl	800e670 <USBD_CtlError>
                break;
 800de76:	e091      	b.n	800df9c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	da0b      	bge.n	800de98 <USBD_StdEPReq+0x19e>
 800de80:	7bbb      	ldrb	r3, [r7, #14]
 800de82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de86:	4613      	mov	r3, r2
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	4413      	add	r3, r2
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	3310      	adds	r3, #16
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	4413      	add	r3, r2
 800de94:	3304      	adds	r3, #4
 800de96:	e00b      	b.n	800deb0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800de98:	7bbb      	ldrb	r3, [r7, #14]
 800de9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de9e:	4613      	mov	r3, r2
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	4413      	add	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	4413      	add	r3, r2
 800deae:	3304      	adds	r3, #4
 800deb0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	2200      	movs	r2, #0
 800deb6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	2202      	movs	r2, #2
 800debc:	4619      	mov	r1, r3
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fc47 	bl	800e752 <USBD_CtlSendData>
              break;
 800dec4:	e06a      	b.n	800df9c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dec6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800deca:	2b00      	cmp	r3, #0
 800decc:	da11      	bge.n	800def2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dece:	7bbb      	ldrb	r3, [r7, #14]
 800ded0:	f003 020f 	and.w	r2, r3, #15
 800ded4:	6879      	ldr	r1, [r7, #4]
 800ded6:	4613      	mov	r3, r2
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4413      	add	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	440b      	add	r3, r1
 800dee0:	3324      	adds	r3, #36	; 0x24
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d117      	bne.n	800df18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dee8:	6839      	ldr	r1, [r7, #0]
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fbc0 	bl	800e670 <USBD_CtlError>
                  break;
 800def0:	e054      	b.n	800df9c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800def2:	7bbb      	ldrb	r3, [r7, #14]
 800def4:	f003 020f 	and.w	r2, r3, #15
 800def8:	6879      	ldr	r1, [r7, #4]
 800defa:	4613      	mov	r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	4413      	add	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	440b      	add	r3, r1
 800df04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df08:	881b      	ldrh	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d104      	bne.n	800df18 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800df0e:	6839      	ldr	r1, [r7, #0]
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fbad 	bl	800e670 <USBD_CtlError>
                  break;
 800df16:	e041      	b.n	800df9c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	da0b      	bge.n	800df38 <USBD_StdEPReq+0x23e>
 800df20:	7bbb      	ldrb	r3, [r7, #14]
 800df22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df26:	4613      	mov	r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4413      	add	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	3310      	adds	r3, #16
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	4413      	add	r3, r2
 800df34:	3304      	adds	r3, #4
 800df36:	e00b      	b.n	800df50 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df38:	7bbb      	ldrb	r3, [r7, #14]
 800df3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df3e:	4613      	mov	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4413      	add	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	4413      	add	r3, r2
 800df4e:	3304      	adds	r3, #4
 800df50:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800df52:	7bbb      	ldrb	r3, [r7, #14]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d002      	beq.n	800df5e <USBD_StdEPReq+0x264>
 800df58:	7bbb      	ldrb	r3, [r7, #14]
 800df5a:	2b80      	cmp	r3, #128	; 0x80
 800df5c:	d103      	bne.n	800df66 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2200      	movs	r2, #0
 800df62:	601a      	str	r2, [r3, #0]
 800df64:	e00e      	b.n	800df84 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800df66:	7bbb      	ldrb	r3, [r7, #14]
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f004 fe56 	bl	8012c1c <USBD_LL_IsStallEP>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d003      	beq.n	800df7e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2201      	movs	r2, #1
 800df7a:	601a      	str	r2, [r3, #0]
 800df7c:	e002      	b.n	800df84 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	2200      	movs	r2, #0
 800df82:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	2202      	movs	r2, #2
 800df88:	4619      	mov	r1, r3
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 fbe1 	bl	800e752 <USBD_CtlSendData>
              break;
 800df90:	e004      	b.n	800df9c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800df92:	6839      	ldr	r1, [r7, #0]
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 fb6b 	bl	800e670 <USBD_CtlError>
              break;
 800df9a:	bf00      	nop
          }
          break;
 800df9c:	e004      	b.n	800dfa8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800df9e:	6839      	ldr	r1, [r7, #0]
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 fb65 	bl	800e670 <USBD_CtlError>
          break;
 800dfa6:	bf00      	nop
      }
      break;
 800dfa8:	e004      	b.n	800dfb4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 fb5f 	bl	800e670 <USBD_CtlError>
      break;
 800dfb2:	bf00      	nop
  }

  return ret;
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
	...

0800dfc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	885b      	ldrh	r3, [r3, #2]
 800dfda:	0a1b      	lsrs	r3, r3, #8
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	3b01      	subs	r3, #1
 800dfe0:	2b0e      	cmp	r3, #14
 800dfe2:	f200 8152 	bhi.w	800e28a <USBD_GetDescriptor+0x2ca>
 800dfe6:	a201      	add	r2, pc, #4	; (adr r2, 800dfec <USBD_GetDescriptor+0x2c>)
 800dfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfec:	0800e05d 	.word	0x0800e05d
 800dff0:	0800e075 	.word	0x0800e075
 800dff4:	0800e0b5 	.word	0x0800e0b5
 800dff8:	0800e28b 	.word	0x0800e28b
 800dffc:	0800e28b 	.word	0x0800e28b
 800e000:	0800e22b 	.word	0x0800e22b
 800e004:	0800e257 	.word	0x0800e257
 800e008:	0800e28b 	.word	0x0800e28b
 800e00c:	0800e28b 	.word	0x0800e28b
 800e010:	0800e28b 	.word	0x0800e28b
 800e014:	0800e28b 	.word	0x0800e28b
 800e018:	0800e28b 	.word	0x0800e28b
 800e01c:	0800e28b 	.word	0x0800e28b
 800e020:	0800e28b 	.word	0x0800e28b
 800e024:	0800e029 	.word	0x0800e029
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e02e:	69db      	ldr	r3, [r3, #28]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00b      	beq.n	800e04c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e03a:	69db      	ldr	r3, [r3, #28]
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	7c12      	ldrb	r2, [r2, #16]
 800e040:	f107 0108 	add.w	r1, r7, #8
 800e044:	4610      	mov	r0, r2
 800e046:	4798      	blx	r3
 800e048:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e04a:	e126      	b.n	800e29a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e04c:	6839      	ldr	r1, [r7, #0]
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 fb0e 	bl	800e670 <USBD_CtlError>
        err++;
 800e054:	7afb      	ldrb	r3, [r7, #11]
 800e056:	3301      	adds	r3, #1
 800e058:	72fb      	strb	r3, [r7, #11]
      break;
 800e05a:	e11e      	b.n	800e29a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	7c12      	ldrb	r2, [r2, #16]
 800e068:	f107 0108 	add.w	r1, r7, #8
 800e06c:	4610      	mov	r0, r2
 800e06e:	4798      	blx	r3
 800e070:	60f8      	str	r0, [r7, #12]
      break;
 800e072:	e112      	b.n	800e29a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	7c1b      	ldrb	r3, [r3, #16]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10d      	bne.n	800e098 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e084:	f107 0208 	add.w	r2, r7, #8
 800e088:	4610      	mov	r0, r2
 800e08a:	4798      	blx	r3
 800e08c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	3301      	adds	r3, #1
 800e092:	2202      	movs	r2, #2
 800e094:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e096:	e100      	b.n	800e29a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a0:	f107 0208 	add.w	r2, r7, #8
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	4798      	blx	r3
 800e0a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	2202      	movs	r2, #2
 800e0b0:	701a      	strb	r2, [r3, #0]
      break;
 800e0b2:	e0f2      	b.n	800e29a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	885b      	ldrh	r3, [r3, #2]
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	2b05      	cmp	r3, #5
 800e0bc:	f200 80ac 	bhi.w	800e218 <USBD_GetDescriptor+0x258>
 800e0c0:	a201      	add	r2, pc, #4	; (adr r2, 800e0c8 <USBD_GetDescriptor+0x108>)
 800e0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c6:	bf00      	nop
 800e0c8:	0800e0e1 	.word	0x0800e0e1
 800e0cc:	0800e115 	.word	0x0800e115
 800e0d0:	0800e149 	.word	0x0800e149
 800e0d4:	0800e17d 	.word	0x0800e17d
 800e0d8:	0800e1b1 	.word	0x0800e1b1
 800e0dc:	0800e1e5 	.word	0x0800e1e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00b      	beq.n	800e104 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	7c12      	ldrb	r2, [r2, #16]
 800e0f8:	f107 0108 	add.w	r1, r7, #8
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4798      	blx	r3
 800e100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e102:	e091      	b.n	800e228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e104:	6839      	ldr	r1, [r7, #0]
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 fab2 	bl	800e670 <USBD_CtlError>
            err++;
 800e10c:	7afb      	ldrb	r3, [r7, #11]
 800e10e:	3301      	adds	r3, #1
 800e110:	72fb      	strb	r3, [r7, #11]
          break;
 800e112:	e089      	b.n	800e228 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00b      	beq.n	800e138 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	7c12      	ldrb	r2, [r2, #16]
 800e12c:	f107 0108 	add.w	r1, r7, #8
 800e130:	4610      	mov	r0, r2
 800e132:	4798      	blx	r3
 800e134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e136:	e077      	b.n	800e228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 fa98 	bl	800e670 <USBD_CtlError>
            err++;
 800e140:	7afb      	ldrb	r3, [r7, #11]
 800e142:	3301      	adds	r3, #1
 800e144:	72fb      	strb	r3, [r7, #11]
          break;
 800e146:	e06f      	b.n	800e228 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00b      	beq.n	800e16c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	687a      	ldr	r2, [r7, #4]
 800e15e:	7c12      	ldrb	r2, [r2, #16]
 800e160:	f107 0108 	add.w	r1, r7, #8
 800e164:	4610      	mov	r0, r2
 800e166:	4798      	blx	r3
 800e168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e16a:	e05d      	b.n	800e228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 fa7e 	bl	800e670 <USBD_CtlError>
            err++;
 800e174:	7afb      	ldrb	r3, [r7, #11]
 800e176:	3301      	adds	r3, #1
 800e178:	72fb      	strb	r3, [r7, #11]
          break;
 800e17a:	e055      	b.n	800e228 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e182:	691b      	ldr	r3, [r3, #16]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d00b      	beq.n	800e1a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	7c12      	ldrb	r2, [r2, #16]
 800e194:	f107 0108 	add.w	r1, r7, #8
 800e198:	4610      	mov	r0, r2
 800e19a:	4798      	blx	r3
 800e19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e19e:	e043      	b.n	800e228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e1a0:	6839      	ldr	r1, [r7, #0]
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 fa64 	bl	800e670 <USBD_CtlError>
            err++;
 800e1a8:	7afb      	ldrb	r3, [r7, #11]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e1ae:	e03b      	b.n	800e228 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1b6:	695b      	ldr	r3, [r3, #20]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00b      	beq.n	800e1d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1c2:	695b      	ldr	r3, [r3, #20]
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	7c12      	ldrb	r2, [r2, #16]
 800e1c8:	f107 0108 	add.w	r1, r7, #8
 800e1cc:	4610      	mov	r0, r2
 800e1ce:	4798      	blx	r3
 800e1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1d2:	e029      	b.n	800e228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e1d4:	6839      	ldr	r1, [r7, #0]
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f000 fa4a 	bl	800e670 <USBD_CtlError>
            err++;
 800e1dc:	7afb      	ldrb	r3, [r7, #11]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800e1e2:	e021      	b.n	800e228 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ea:	699b      	ldr	r3, [r3, #24]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00b      	beq.n	800e208 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1f6:	699b      	ldr	r3, [r3, #24]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	7c12      	ldrb	r2, [r2, #16]
 800e1fc:	f107 0108 	add.w	r1, r7, #8
 800e200:	4610      	mov	r0, r2
 800e202:	4798      	blx	r3
 800e204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e206:	e00f      	b.n	800e228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e208:	6839      	ldr	r1, [r7, #0]
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 fa30 	bl	800e670 <USBD_CtlError>
            err++;
 800e210:	7afb      	ldrb	r3, [r7, #11]
 800e212:	3301      	adds	r3, #1
 800e214:	72fb      	strb	r3, [r7, #11]
          break;
 800e216:	e007      	b.n	800e228 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e218:	6839      	ldr	r1, [r7, #0]
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fa28 	bl	800e670 <USBD_CtlError>
          err++;
 800e220:	7afb      	ldrb	r3, [r7, #11]
 800e222:	3301      	adds	r3, #1
 800e224:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e226:	bf00      	nop
      }
      break;
 800e228:	e037      	b.n	800e29a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	7c1b      	ldrb	r3, [r3, #16]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d109      	bne.n	800e246 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e23a:	f107 0208 	add.w	r2, r7, #8
 800e23e:	4610      	mov	r0, r2
 800e240:	4798      	blx	r3
 800e242:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e244:	e029      	b.n	800e29a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e246:	6839      	ldr	r1, [r7, #0]
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 fa11 	bl	800e670 <USBD_CtlError>
        err++;
 800e24e:	7afb      	ldrb	r3, [r7, #11]
 800e250:	3301      	adds	r3, #1
 800e252:	72fb      	strb	r3, [r7, #11]
      break;
 800e254:	e021      	b.n	800e29a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	7c1b      	ldrb	r3, [r3, #16]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d10d      	bne.n	800e27a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e266:	f107 0208 	add.w	r2, r7, #8
 800e26a:	4610      	mov	r0, r2
 800e26c:	4798      	blx	r3
 800e26e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	3301      	adds	r3, #1
 800e274:	2207      	movs	r2, #7
 800e276:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e278:	e00f      	b.n	800e29a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 f9f7 	bl	800e670 <USBD_CtlError>
        err++;
 800e282:	7afb      	ldrb	r3, [r7, #11]
 800e284:	3301      	adds	r3, #1
 800e286:	72fb      	strb	r3, [r7, #11]
      break;
 800e288:	e007      	b.n	800e29a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e28a:	6839      	ldr	r1, [r7, #0]
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 f9ef 	bl	800e670 <USBD_CtlError>
      err++;
 800e292:	7afb      	ldrb	r3, [r7, #11]
 800e294:	3301      	adds	r3, #1
 800e296:	72fb      	strb	r3, [r7, #11]
      break;
 800e298:	bf00      	nop
  }

  if (err != 0U)
 800e29a:	7afb      	ldrb	r3, [r7, #11]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d11e      	bne.n	800e2de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	88db      	ldrh	r3, [r3, #6]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d016      	beq.n	800e2d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e2a8:	893b      	ldrh	r3, [r7, #8]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00e      	beq.n	800e2cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	88da      	ldrh	r2, [r3, #6]
 800e2b2:	893b      	ldrh	r3, [r7, #8]
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	bf28      	it	cs
 800e2b8:	4613      	movcs	r3, r2
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e2be:	893b      	ldrh	r3, [r7, #8]
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	68f9      	ldr	r1, [r7, #12]
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 fa44 	bl	800e752 <USBD_CtlSendData>
 800e2ca:	e009      	b.n	800e2e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f9ce 	bl	800e670 <USBD_CtlError>
 800e2d4:	e004      	b.n	800e2e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 fa95 	bl	800e806 <USBD_CtlSendStatus>
 800e2dc:	e000      	b.n	800e2e0 <USBD_GetDescriptor+0x320>
    return;
 800e2de:	bf00      	nop
  }
}
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop

0800e2e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b084      	sub	sp, #16
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
 800e2f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	889b      	ldrh	r3, [r3, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d131      	bne.n	800e35e <USBD_SetAddress+0x76>
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	88db      	ldrh	r3, [r3, #6]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d12d      	bne.n	800e35e <USBD_SetAddress+0x76>
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	885b      	ldrh	r3, [r3, #2]
 800e306:	2b7f      	cmp	r3, #127	; 0x7f
 800e308:	d829      	bhi.n	800e35e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	885b      	ldrh	r3, [r3, #2]
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e314:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b03      	cmp	r3, #3
 800e320:	d104      	bne.n	800e32c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e322:	6839      	ldr	r1, [r7, #0]
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 f9a3 	bl	800e670 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e32a:	e01d      	b.n	800e368 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	7bfa      	ldrb	r2, [r7, #15]
 800e330:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e334:	7bfb      	ldrb	r3, [r7, #15]
 800e336:	4619      	mov	r1, r3
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f004 fc9b 	bl	8012c74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 fa61 	bl	800e806 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e344:	7bfb      	ldrb	r3, [r7, #15]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d004      	beq.n	800e354 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2202      	movs	r2, #2
 800e34e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e352:	e009      	b.n	800e368 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2201      	movs	r2, #1
 800e358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e35c:	e004      	b.n	800e368 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e35e:	6839      	ldr	r1, [r7, #0]
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f000 f985 	bl	800e670 <USBD_CtlError>
  }
}
 800e366:	bf00      	nop
 800e368:	bf00      	nop
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	885b      	ldrh	r3, [r3, #2]
 800e382:	b2da      	uxtb	r2, r3
 800e384:	4b4c      	ldr	r3, [pc, #304]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e386:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e388:	4b4b      	ldr	r3, [pc, #300]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d905      	bls.n	800e39c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e390:	6839      	ldr	r1, [r7, #0]
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 f96c 	bl	800e670 <USBD_CtlError>
    return USBD_FAIL;
 800e398:	2303      	movs	r3, #3
 800e39a:	e088      	b.n	800e4ae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	2b02      	cmp	r3, #2
 800e3a6:	d002      	beq.n	800e3ae <USBD_SetConfig+0x3e>
 800e3a8:	2b03      	cmp	r3, #3
 800e3aa:	d025      	beq.n	800e3f8 <USBD_SetConfig+0x88>
 800e3ac:	e071      	b.n	800e492 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e3ae:	4b42      	ldr	r3, [pc, #264]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d01c      	beq.n	800e3f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e3b6:	4b40      	ldr	r3, [pc, #256]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3c0:	4b3d      	ldr	r3, [pc, #244]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7ff f91e 	bl	800d608 <USBD_SetClassConfig>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d004      	beq.n	800e3e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e3d6:	6839      	ldr	r1, [r7, #0]
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f000 f949 	bl	800e670 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e3de:	e065      	b.n	800e4ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 fa10 	bl	800e806 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2203      	movs	r2, #3
 800e3ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e3ee:	e05d      	b.n	800e4ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fa08 	bl	800e806 <USBD_CtlSendStatus>
      break;
 800e3f6:	e059      	b.n	800e4ac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e3f8:	4b2f      	ldr	r3, [pc, #188]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d112      	bne.n	800e426 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2202      	movs	r2, #2
 800e404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e408:	4b2b      	ldr	r3, [pc, #172]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	461a      	mov	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e412:	4b29      	ldr	r3, [pc, #164]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	4619      	mov	r1, r3
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f7ff f911 	bl	800d640 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f9f1 	bl	800e806 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e424:	e042      	b.n	800e4ac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e426:	4b24      	ldr	r3, [pc, #144]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	461a      	mov	r2, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	429a      	cmp	r2, r3
 800e432:	d02a      	beq.n	800e48a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f7ff f8ff 	bl	800d640 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e442:	4b1d      	ldr	r3, [pc, #116]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e44c:	4b1a      	ldr	r3, [pc, #104]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	4619      	mov	r1, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7ff f8d8 	bl	800d608 <USBD_SetClassConfig>
 800e458:	4603      	mov	r3, r0
 800e45a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e45c:	7bfb      	ldrb	r3, [r7, #15]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00f      	beq.n	800e482 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e462:	6839      	ldr	r1, [r7, #0]
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 f903 	bl	800e670 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff f8e4 	bl	800d640 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2202      	movs	r2, #2
 800e47c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e480:	e014      	b.n	800e4ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f9bf 	bl	800e806 <USBD_CtlSendStatus>
      break;
 800e488:	e010      	b.n	800e4ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 f9bb 	bl	800e806 <USBD_CtlSendStatus>
      break;
 800e490:	e00c      	b.n	800e4ac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e492:	6839      	ldr	r1, [r7, #0]
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f8eb 	bl	800e670 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e49a:	4b07      	ldr	r3, [pc, #28]	; (800e4b8 <USBD_SetConfig+0x148>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	4619      	mov	r1, r3
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f7ff f8cd 	bl	800d640 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e4a6:	2303      	movs	r3, #3
 800e4a8:	73fb      	strb	r3, [r7, #15]
      break;
 800e4aa:	bf00      	nop
  }

  return ret;
 800e4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	200001e0 	.word	0x200001e0

0800e4bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	88db      	ldrh	r3, [r3, #6]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d004      	beq.n	800e4d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 f8cd 	bl	800e670 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e4d6:	e023      	b.n	800e520 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	2b02      	cmp	r3, #2
 800e4e2:	dc02      	bgt.n	800e4ea <USBD_GetConfig+0x2e>
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	dc03      	bgt.n	800e4f0 <USBD_GetConfig+0x34>
 800e4e8:	e015      	b.n	800e516 <USBD_GetConfig+0x5a>
 800e4ea:	2b03      	cmp	r3, #3
 800e4ec:	d00b      	beq.n	800e506 <USBD_GetConfig+0x4a>
 800e4ee:	e012      	b.n	800e516 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	3308      	adds	r3, #8
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 f927 	bl	800e752 <USBD_CtlSendData>
        break;
 800e504:	e00c      	b.n	800e520 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	3304      	adds	r3, #4
 800e50a:	2201      	movs	r2, #1
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 f91f 	bl	800e752 <USBD_CtlSendData>
        break;
 800e514:	e004      	b.n	800e520 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e516:	6839      	ldr	r1, [r7, #0]
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f8a9 	bl	800e670 <USBD_CtlError>
        break;
 800e51e:	bf00      	nop
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	3b01      	subs	r3, #1
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d81e      	bhi.n	800e57e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	88db      	ldrh	r3, [r3, #6]
 800e544:	2b02      	cmp	r3, #2
 800e546:	d004      	beq.n	800e552 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e548:	6839      	ldr	r1, [r7, #0]
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 f890 	bl	800e670 <USBD_CtlError>
        break;
 800e550:	e01a      	b.n	800e588 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2201      	movs	r2, #1
 800e556:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d005      	beq.n	800e56e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	f043 0202 	orr.w	r2, r3, #2
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	330c      	adds	r3, #12
 800e572:	2202      	movs	r2, #2
 800e574:	4619      	mov	r1, r3
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 f8eb 	bl	800e752 <USBD_CtlSendData>
      break;
 800e57c:	e004      	b.n	800e588 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e57e:	6839      	ldr	r1, [r7, #0]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f875 	bl	800e670 <USBD_CtlError>
      break;
 800e586:	bf00      	nop
  }
}
 800e588:	bf00      	nop
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	885b      	ldrh	r3, [r3, #2]
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d106      	bne.n	800e5b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 f92b 	bl	800e806 <USBD_CtlSendStatus>
  }
}
 800e5b0:	bf00      	nop
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	2b02      	cmp	r3, #2
 800e5ce:	d80b      	bhi.n	800e5e8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	885b      	ldrh	r3, [r3, #2]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d10c      	bne.n	800e5f2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f910 	bl	800e806 <USBD_CtlSendStatus>
      }
      break;
 800e5e6:	e004      	b.n	800e5f2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e5e8:	6839      	ldr	r1, [r7, #0]
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 f840 	bl	800e670 <USBD_CtlError>
      break;
 800e5f0:	e000      	b.n	800e5f4 <USBD_ClrFeature+0x3c>
      break;
 800e5f2:	bf00      	nop
  }
}
 800e5f4:	bf00      	nop
 800e5f6:	3708      	adds	r7, #8
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	781a      	ldrb	r2, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	3301      	adds	r3, #1
 800e616:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	781a      	ldrb	r2, [r3, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3301      	adds	r3, #1
 800e624:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f7ff fa91 	bl	800db4e <SWAPBYTE>
 800e62c:	4603      	mov	r3, r0
 800e62e:	461a      	mov	r2, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	3301      	adds	r3, #1
 800e638:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3301      	adds	r3, #1
 800e63e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f7ff fa84 	bl	800db4e <SWAPBYTE>
 800e646:	4603      	mov	r3, r0
 800e648:	461a      	mov	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	3301      	adds	r3, #1
 800e652:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	3301      	adds	r3, #1
 800e658:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e65a:	68f8      	ldr	r0, [r7, #12]
 800e65c:	f7ff fa77 	bl	800db4e <SWAPBYTE>
 800e660:	4603      	mov	r3, r0
 800e662:	461a      	mov	r2, r3
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	80da      	strh	r2, [r3, #6]
}
 800e668:	bf00      	nop
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e67a:	2180      	movs	r1, #128	; 0x80
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f004 fa61 	bl	8012b44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e682:	2100      	movs	r1, #0
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f004 fa5d 	bl	8012b44 <USBD_LL_StallEP>
}
 800e68a:	bf00      	nop
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b086      	sub	sp, #24
 800e696:	af00      	add	r7, sp, #0
 800e698:	60f8      	str	r0, [r7, #12]
 800e69a:	60b9      	str	r1, [r7, #8]
 800e69c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d036      	beq.n	800e716 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e6ac:	6938      	ldr	r0, [r7, #16]
 800e6ae:	f000 f836 	bl	800e71e <USBD_GetLen>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e6c0:	7dfb      	ldrb	r3, [r7, #23]
 800e6c2:	68ba      	ldr	r2, [r7, #8]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	687a      	ldr	r2, [r7, #4]
 800e6c8:	7812      	ldrb	r2, [r2, #0]
 800e6ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6cc:	7dfb      	ldrb	r3, [r7, #23]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e6d2:	7dfb      	ldrb	r3, [r7, #23]
 800e6d4:	68ba      	ldr	r2, [r7, #8]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	2203      	movs	r2, #3
 800e6da:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6dc:	7dfb      	ldrb	r3, [r7, #23]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e6e2:	e013      	b.n	800e70c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e6e4:	7dfb      	ldrb	r3, [r7, #23]
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	693a      	ldr	r2, [r7, #16]
 800e6ec:	7812      	ldrb	r2, [r2, #0]
 800e6ee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	613b      	str	r3, [r7, #16]
    idx++;
 800e6f6:	7dfb      	ldrb	r3, [r7, #23]
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e6fc:	7dfb      	ldrb	r3, [r7, #23]
 800e6fe:	68ba      	ldr	r2, [r7, #8]
 800e700:	4413      	add	r3, r2
 800e702:	2200      	movs	r2, #0
 800e704:	701a      	strb	r2, [r3, #0]
    idx++;
 800e706:	7dfb      	ldrb	r3, [r7, #23]
 800e708:	3301      	adds	r3, #1
 800e70a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d1e7      	bne.n	800e6e4 <USBD_GetString+0x52>
 800e714:	e000      	b.n	800e718 <USBD_GetString+0x86>
    return;
 800e716:	bf00      	nop
  }
}
 800e718:	3718      	adds	r7, #24
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e71e:	b480      	push	{r7}
 800e720:	b085      	sub	sp, #20
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e726:	2300      	movs	r3, #0
 800e728:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e72e:	e005      	b.n	800e73c <USBD_GetLen+0x1e>
  {
    len++;
 800e730:	7bfb      	ldrb	r3, [r7, #15]
 800e732:	3301      	adds	r3, #1
 800e734:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	3301      	adds	r3, #1
 800e73a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d1f5      	bne.n	800e730 <USBD_GetLen+0x12>
  }

  return len;
 800e744:	7bfb      	ldrb	r3, [r7, #15]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3714      	adds	r7, #20
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr

0800e752 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b084      	sub	sp, #16
 800e756:	af00      	add	r7, sp, #0
 800e758:	60f8      	str	r0, [r7, #12]
 800e75a:	60b9      	str	r1, [r7, #8]
 800e75c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2202      	movs	r2, #2
 800e762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	68ba      	ldr	r2, [r7, #8]
 800e776:	2100      	movs	r1, #0
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f004 fab1 	bl	8012ce0 <USBD_LL_Transmit>

  return USBD_OK;
 800e77e:	2300      	movs	r3, #0
}
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	68ba      	ldr	r2, [r7, #8]
 800e798:	2100      	movs	r1, #0
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	f004 faa0 	bl	8012ce0 <USBD_LL_Transmit>

  return USBD_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3710      	adds	r7, #16
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b084      	sub	sp, #16
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	60f8      	str	r0, [r7, #12]
 800e7b2:	60b9      	str	r1, [r7, #8]
 800e7b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2203      	movs	r2, #3
 800e7ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	68ba      	ldr	r2, [r7, #8]
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f004 fabb 	bl	8012d50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7da:	2300      	movs	r3, #0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3710      	adds	r7, #16
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	68ba      	ldr	r2, [r7, #8]
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f004 faaa 	bl	8012d50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7fc:	2300      	movs	r3, #0
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b082      	sub	sp, #8
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2204      	movs	r2, #4
 800e812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e816:	2300      	movs	r3, #0
 800e818:	2200      	movs	r2, #0
 800e81a:	2100      	movs	r1, #0
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f004 fa5f 	bl	8012ce0 <USBD_LL_Transmit>

  return USBD_OK;
 800e822:	2300      	movs	r3, #0
}
 800e824:	4618      	mov	r0, r3
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2205      	movs	r2, #5
 800e838:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e83c:	2300      	movs	r3, #0
 800e83e:	2200      	movs	r2, #0
 800e840:	2100      	movs	r1, #0
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f004 fa84 	bl	8012d50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
	...

0800e854 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e854:	b480      	push	{r7}
 800e856:	b087      	sub	sp, #28
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	4613      	mov	r3, r2
 800e860:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e862:	2301      	movs	r3, #1
 800e864:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e866:	2300      	movs	r3, #0
 800e868:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e86a:	4b1f      	ldr	r3, [pc, #124]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e86c:	7a5b      	ldrb	r3, [r3, #9]
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	2b00      	cmp	r3, #0
 800e872:	d131      	bne.n	800e8d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e874:	4b1c      	ldr	r3, [pc, #112]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e876:	7a5b      	ldrb	r3, [r3, #9]
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	461a      	mov	r2, r3
 800e87c:	4b1a      	ldr	r3, [pc, #104]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e87e:	2100      	movs	r1, #0
 800e880:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e882:	4b19      	ldr	r3, [pc, #100]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e884:	7a5b      	ldrb	r3, [r3, #9]
 800e886:	b2db      	uxtb	r3, r3
 800e888:	4a17      	ldr	r2, [pc, #92]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e88a:	009b      	lsls	r3, r3, #2
 800e88c:	4413      	add	r3, r2
 800e88e:	68fa      	ldr	r2, [r7, #12]
 800e890:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e892:	4b15      	ldr	r3, [pc, #84]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e894:	7a5b      	ldrb	r3, [r3, #9]
 800e896:	b2db      	uxtb	r3, r3
 800e898:	461a      	mov	r2, r3
 800e89a:	4b13      	ldr	r3, [pc, #76]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e89c:	4413      	add	r3, r2
 800e89e:	79fa      	ldrb	r2, [r7, #7]
 800e8a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e8a2:	4b11      	ldr	r3, [pc, #68]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e8a4:	7a5b      	ldrb	r3, [r3, #9]
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	1c5a      	adds	r2, r3, #1
 800e8aa:	b2d1      	uxtb	r1, r2
 800e8ac:	4a0e      	ldr	r2, [pc, #56]	; (800e8e8 <FATFS_LinkDriverEx+0x94>)
 800e8ae:	7251      	strb	r1, [r2, #9]
 800e8b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e8b2:	7dbb      	ldrb	r3, [r7, #22]
 800e8b4:	3330      	adds	r3, #48	; 0x30
 800e8b6:	b2da      	uxtb	r2, r3
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	223a      	movs	r2, #58	; 0x3a
 800e8c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	3302      	adds	r3, #2
 800e8c8:	222f      	movs	r2, #47	; 0x2f
 800e8ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	3303      	adds	r3, #3
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	371c      	adds	r7, #28
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop
 800e8e8:	200001e4 	.word	0x200001e4

0800e8ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f7ff ffaa 	bl	800e854 <FATFS_LinkDriverEx>
 800e900:	4603      	mov	r3, r0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3708      	adds	r7, #8
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
	...

0800e90c <__NVIC_SetPriority>:
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	6039      	str	r1, [r7, #0]
 800e916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	db0a      	blt.n	800e936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	b2da      	uxtb	r2, r3
 800e924:	490c      	ldr	r1, [pc, #48]	; (800e958 <__NVIC_SetPriority+0x4c>)
 800e926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e92a:	0112      	lsls	r2, r2, #4
 800e92c:	b2d2      	uxtb	r2, r2
 800e92e:	440b      	add	r3, r1
 800e930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e934:	e00a      	b.n	800e94c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	4908      	ldr	r1, [pc, #32]	; (800e95c <__NVIC_SetPriority+0x50>)
 800e93c:	79fb      	ldrb	r3, [r7, #7]
 800e93e:	f003 030f 	and.w	r3, r3, #15
 800e942:	3b04      	subs	r3, #4
 800e944:	0112      	lsls	r2, r2, #4
 800e946:	b2d2      	uxtb	r2, r2
 800e948:	440b      	add	r3, r1
 800e94a:	761a      	strb	r2, [r3, #24]
}
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	e000e100 	.word	0xe000e100
 800e95c:	e000ed00 	.word	0xe000ed00

0800e960 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e960:	b580      	push	{r7, lr}
 800e962:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e964:	4b05      	ldr	r3, [pc, #20]	; (800e97c <SysTick_Handler+0x1c>)
 800e966:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e968:	f002 fb58 	bl	801101c <xTaskGetSchedulerState>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d001      	beq.n	800e976 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e972:	f003 f979 	bl	8011c68 <xPortSysTickHandler>
  }
}
 800e976:	bf00      	nop
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	e000e010 	.word	0xe000e010

0800e980 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e980:	b580      	push	{r7, lr}
 800e982:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e984:	2100      	movs	r1, #0
 800e986:	f06f 0004 	mvn.w	r0, #4
 800e98a:	f7ff ffbf 	bl	800e90c <__NVIC_SetPriority>
#endif
}
 800e98e:	bf00      	nop
 800e990:	bd80      	pop	{r7, pc}
	...

0800e994 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e99a:	f3ef 8305 	mrs	r3, IPSR
 800e99e:	603b      	str	r3, [r7, #0]
  return(result);
 800e9a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d003      	beq.n	800e9ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e9a6:	f06f 0305 	mvn.w	r3, #5
 800e9aa:	607b      	str	r3, [r7, #4]
 800e9ac:	e00c      	b.n	800e9c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e9ae:	4b0a      	ldr	r3, [pc, #40]	; (800e9d8 <osKernelInitialize+0x44>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d105      	bne.n	800e9c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e9b6:	4b08      	ldr	r3, [pc, #32]	; (800e9d8 <osKernelInitialize+0x44>)
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	607b      	str	r3, [r7, #4]
 800e9c0:	e002      	b.n	800e9c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e9c8:	687b      	ldr	r3, [r7, #4]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	370c      	adds	r7, #12
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	200001f0 	.word	0x200001f0

0800e9dc <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800e9e2:	f002 fb1b 	bl	801101c <xTaskGetSchedulerState>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d004      	beq.n	800e9f6 <osKernelGetState+0x1a>
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	d105      	bne.n	800e9fc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800e9f0:	2302      	movs	r3, #2
 800e9f2:	607b      	str	r3, [r7, #4]
      break;
 800e9f4:	e00c      	b.n	800ea10 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800e9f6:	2303      	movs	r3, #3
 800e9f8:	607b      	str	r3, [r7, #4]
      break;
 800e9fa:	e009      	b.n	800ea10 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800e9fc:	4b07      	ldr	r3, [pc, #28]	; (800ea1c <osKernelGetState+0x40>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d102      	bne.n	800ea0a <osKernelGetState+0x2e>
        state = osKernelReady;
 800ea04:	2301      	movs	r3, #1
 800ea06:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800ea08:	e001      	b.n	800ea0e <osKernelGetState+0x32>
        state = osKernelInactive;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	607b      	str	r3, [r7, #4]
      break;
 800ea0e:	bf00      	nop
  }

  return (state);
 800ea10:	687b      	ldr	r3, [r7, #4]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3708      	adds	r7, #8
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	200001f0 	.word	0x200001f0

0800ea20 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea26:	f3ef 8305 	mrs	r3, IPSR
 800ea2a:	603b      	str	r3, [r7, #0]
  return(result);
 800ea2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d003      	beq.n	800ea3a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ea32:	f06f 0305 	mvn.w	r3, #5
 800ea36:	607b      	str	r3, [r7, #4]
 800ea38:	e010      	b.n	800ea5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ea3a:	4b0b      	ldr	r3, [pc, #44]	; (800ea68 <osKernelStart+0x48>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d109      	bne.n	800ea56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ea42:	f7ff ff9d 	bl	800e980 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ea46:	4b08      	ldr	r3, [pc, #32]	; (800ea68 <osKernelStart+0x48>)
 800ea48:	2202      	movs	r2, #2
 800ea4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ea4c:	f001 fdee 	bl	801062c <vTaskStartScheduler>
      stat = osOK;
 800ea50:	2300      	movs	r3, #0
 800ea52:	607b      	str	r3, [r7, #4]
 800ea54:	e002      	b.n	800ea5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ea56:	f04f 33ff 	mov.w	r3, #4294967295
 800ea5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ea5c:	687b      	ldr	r3, [r7, #4]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3708      	adds	r7, #8
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	200001f0 	.word	0x200001f0

0800ea6c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea72:	f3ef 8305 	mrs	r3, IPSR
 800ea76:	603b      	str	r3, [r7, #0]
  return(result);
 800ea78:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d003      	beq.n	800ea86 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ea7e:	f001 fef7 	bl	8010870 <xTaskGetTickCountFromISR>
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	e002      	b.n	800ea8c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ea86:	f001 fee3 	bl	8010850 <xTaskGetTickCount>
 800ea8a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ea8c:	687b      	ldr	r3, [r7, #4]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3708      	adds	r7, #8
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b08e      	sub	sp, #56	; 0x38
 800ea9a:	af04      	add	r7, sp, #16
 800ea9c:	60f8      	str	r0, [r7, #12]
 800ea9e:	60b9      	str	r1, [r7, #8]
 800eaa0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaa6:	f3ef 8305 	mrs	r3, IPSR
 800eaaa:	617b      	str	r3, [r7, #20]
  return(result);
 800eaac:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d17e      	bne.n	800ebb0 <osThreadNew+0x11a>
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d07b      	beq.n	800ebb0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800eab8:	2380      	movs	r3, #128	; 0x80
 800eaba:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800eabc:	2318      	movs	r3, #24
 800eabe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800eac0:	2300      	movs	r3, #0
 800eac2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800eac4:	f04f 33ff 	mov.w	r3, #4294967295
 800eac8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d045      	beq.n	800eb5c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d002      	beq.n	800eade <osThreadNew+0x48>
        name = attr->name;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	699b      	ldr	r3, [r3, #24]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d002      	beq.n	800eaec <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	699b      	ldr	r3, [r3, #24]
 800eaea:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d008      	beq.n	800eb04 <osThreadNew+0x6e>
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	2b38      	cmp	r3, #56	; 0x38
 800eaf6:	d805      	bhi.n	800eb04 <osThreadNew+0x6e>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	f003 0301 	and.w	r3, r3, #1
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d001      	beq.n	800eb08 <osThreadNew+0x72>
        return (NULL);
 800eb04:	2300      	movs	r3, #0
 800eb06:	e054      	b.n	800ebb2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	695b      	ldr	r3, [r3, #20]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d003      	beq.n	800eb18 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	695b      	ldr	r3, [r3, #20]
 800eb14:	089b      	lsrs	r3, r3, #2
 800eb16:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00e      	beq.n	800eb3e <osThreadNew+0xa8>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	2b5b      	cmp	r3, #91	; 0x5b
 800eb26:	d90a      	bls.n	800eb3e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d006      	beq.n	800eb3e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	695b      	ldr	r3, [r3, #20]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d002      	beq.n	800eb3e <osThreadNew+0xa8>
        mem = 1;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	61bb      	str	r3, [r7, #24]
 800eb3c:	e010      	b.n	800eb60 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d10c      	bne.n	800eb60 <osThreadNew+0xca>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d108      	bne.n	800eb60 <osThreadNew+0xca>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d104      	bne.n	800eb60 <osThreadNew+0xca>
          mem = 0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	61bb      	str	r3, [r7, #24]
 800eb5a:	e001      	b.n	800eb60 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d110      	bne.n	800eb88 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb6e:	9202      	str	r2, [sp, #8]
 800eb70:	9301      	str	r3, [sp, #4]
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	6a3a      	ldr	r2, [r7, #32]
 800eb7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb7c:	68f8      	ldr	r0, [r7, #12]
 800eb7e:	f001 fb7f 	bl	8010280 <xTaskCreateStatic>
 800eb82:	4603      	mov	r3, r0
 800eb84:	613b      	str	r3, [r7, #16]
 800eb86:	e013      	b.n	800ebb0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800eb88:	69bb      	ldr	r3, [r7, #24]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d110      	bne.n	800ebb0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800eb8e:	6a3b      	ldr	r3, [r7, #32]
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	f107 0310 	add.w	r3, r7, #16
 800eb96:	9301      	str	r3, [sp, #4]
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f001 fbca 	bl	801033a <xTaskCreate>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d001      	beq.n	800ebb0 <osThreadNew+0x11a>
            hTask = NULL;
 800ebac:	2300      	movs	r3, #0
 800ebae:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ebb0:	693b      	ldr	r3, [r7, #16]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3728      	adds	r7, #40	; 0x28
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}

0800ebba <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ebba:	b580      	push	{r7, lr}
 800ebbc:	b084      	sub	sp, #16
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebc2:	f3ef 8305 	mrs	r3, IPSR
 800ebc6:	60bb      	str	r3, [r7, #8]
  return(result);
 800ebc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d003      	beq.n	800ebd6 <osDelay+0x1c>
    stat = osErrorISR;
 800ebce:	f06f 0305 	mvn.w	r3, #5
 800ebd2:	60fb      	str	r3, [r7, #12]
 800ebd4:	e007      	b.n	800ebe6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d002      	beq.n	800ebe6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f001 fcef 	bl	80105c4 <vTaskDelay>
    }
  }

  return (stat);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3710      	adds	r7, #16
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebfc:	f3ef 8305 	mrs	r3, IPSR
 800ec00:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec02:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d12d      	bne.n	800ec64 <osEventFlagsNew+0x74>
    mem = -1;
 800ec08:	f04f 33ff 	mov.w	r3, #4294967295
 800ec0c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d015      	beq.n	800ec40 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	689b      	ldr	r3, [r3, #8]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d006      	beq.n	800ec2a <osEventFlagsNew+0x3a>
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	2b1f      	cmp	r3, #31
 800ec22:	d902      	bls.n	800ec2a <osEventFlagsNew+0x3a>
        mem = 1;
 800ec24:	2301      	movs	r3, #1
 800ec26:	613b      	str	r3, [r7, #16]
 800ec28:	e00c      	b.n	800ec44 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d108      	bne.n	800ec44 <osEventFlagsNew+0x54>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d104      	bne.n	800ec44 <osEventFlagsNew+0x54>
          mem = 0;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	613b      	str	r3, [r7, #16]
 800ec3e:	e001      	b.n	800ec44 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d106      	bne.n	800ec58 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 fa50 	bl	800f0f4 <xEventGroupCreateStatic>
 800ec54:	6178      	str	r0, [r7, #20]
 800ec56:	e005      	b.n	800ec64 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d102      	bne.n	800ec64 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800ec5e:	f000 fa80 	bl	800f162 <xEventGroupCreate>
 800ec62:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800ec64:	697b      	ldr	r3, [r7, #20]
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3718      	adds	r7, #24
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
	...

0800ec70 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d004      	beq.n	800ec8e <osEventFlagsSet+0x1e>
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d003      	beq.n	800ec96 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800ec8e:	f06f 0303 	mvn.w	r3, #3
 800ec92:	617b      	str	r3, [r7, #20]
 800ec94:	e028      	b.n	800ece8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec96:	f3ef 8305 	mrs	r3, IPSR
 800ec9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d01d      	beq.n	800ecde <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800eca2:	2300      	movs	r3, #0
 800eca4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800eca6:	f107 0308 	add.w	r3, r7, #8
 800ecaa:	461a      	mov	r2, r3
 800ecac:	6839      	ldr	r1, [r7, #0]
 800ecae:	6938      	ldr	r0, [r7, #16]
 800ecb0:	f000 fc78 	bl	800f5a4 <xEventGroupSetBitsFromISR>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d103      	bne.n	800ecc2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800ecba:	f06f 0302 	mvn.w	r3, #2
 800ecbe:	617b      	str	r3, [r7, #20]
 800ecc0:	e012      	b.n	800ece8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00d      	beq.n	800ece8 <osEventFlagsSet+0x78>
 800eccc:	4b09      	ldr	r3, [pc, #36]	; (800ecf4 <osEventFlagsSet+0x84>)
 800ecce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	f3bf 8f4f 	dsb	sy
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	e004      	b.n	800ece8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800ecde:	6839      	ldr	r1, [r7, #0]
 800ece0:	6938      	ldr	r0, [r7, #16]
 800ece2:	f000 fb97 	bl	800f414 <xEventGroupSetBits>
 800ece6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800ece8:	697b      	ldr	r3, [r7, #20]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	e000ed04 	.word	0xe000ed04

0800ecf8 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d004      	beq.n	800ed16 <osEventFlagsClear+0x1e>
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d003      	beq.n	800ed1e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800ed16:	f06f 0303 	mvn.w	r3, #3
 800ed1a:	617b      	str	r3, [r7, #20]
 800ed1c:	e019      	b.n	800ed52 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed1e:	f3ef 8305 	mrs	r3, IPSR
 800ed22:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed24:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00e      	beq.n	800ed48 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800ed2a:	6938      	ldr	r0, [r7, #16]
 800ed2c:	f000 fb4e 	bl	800f3cc <xEventGroupGetBitsFromISR>
 800ed30:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	6938      	ldr	r0, [r7, #16]
 800ed36:	f000 fb35 	bl	800f3a4 <xEventGroupClearBitsFromISR>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d108      	bne.n	800ed52 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 800ed40:	f06f 0302 	mvn.w	r3, #2
 800ed44:	617b      	str	r3, [r7, #20]
 800ed46:	e004      	b.n	800ed52 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 800ed48:	6839      	ldr	r1, [r7, #0]
 800ed4a:	6938      	ldr	r0, [r7, #16]
 800ed4c:	f000 faf2 	bl	800f334 <xEventGroupClearBits>
 800ed50:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800ed52:	697b      	ldr	r3, [r7, #20]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3718      	adds	r7, #24
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b08c      	sub	sp, #48	; 0x30
 800ed60:	af02      	add	r7, sp, #8
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	607a      	str	r2, [r7, #4]
 800ed68:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d004      	beq.n	800ed7e <osEventFlagsWait+0x22>
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d003      	beq.n	800ed86 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800ed7e:	f06f 0303 	mvn.w	r3, #3
 800ed82:	61fb      	str	r3, [r7, #28]
 800ed84:	e04b      	b.n	800ee1e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed86:	f3ef 8305 	mrs	r3, IPSR
 800ed8a:	617b      	str	r3, [r7, #20]
  return(result);
 800ed8c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d003      	beq.n	800ed9a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800ed92:	f06f 0305 	mvn.w	r3, #5
 800ed96:	61fb      	str	r3, [r7, #28]
 800ed98:	e041      	b.n	800ee1e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f003 0301 	and.w	r3, r3, #1
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d002      	beq.n	800edaa <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800eda4:	2301      	movs	r3, #1
 800eda6:	627b      	str	r3, [r7, #36]	; 0x24
 800eda8:	e001      	b.n	800edae <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800edaa:	2300      	movs	r3, #0
 800edac:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f003 0302 	and.w	r3, r3, #2
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d002      	beq.n	800edbe <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800edb8:	2300      	movs	r3, #0
 800edba:	623b      	str	r3, [r7, #32]
 800edbc:	e001      	b.n	800edc2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800edbe:	2301      	movs	r3, #1
 800edc0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	9300      	str	r3, [sp, #0]
 800edc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc8:	6a3a      	ldr	r2, [r7, #32]
 800edca:	68b9      	ldr	r1, [r7, #8]
 800edcc:	69b8      	ldr	r0, [r7, #24]
 800edce:	f000 f9e3 	bl	800f198 <xEventGroupWaitBits>
 800edd2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f003 0301 	and.w	r3, r3, #1
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d010      	beq.n	800ee00 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800edde:	68ba      	ldr	r2, [r7, #8]
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	4013      	ands	r3, r2
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d019      	beq.n	800ee1e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d003      	beq.n	800edf8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800edf0:	f06f 0301 	mvn.w	r3, #1
 800edf4:	61fb      	str	r3, [r7, #28]
 800edf6:	e012      	b.n	800ee1e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800edf8:	f06f 0302 	mvn.w	r3, #2
 800edfc:	61fb      	str	r3, [r7, #28]
 800edfe:	e00e      	b.n	800ee1e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	4013      	ands	r3, r2
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d109      	bne.n	800ee1e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d003      	beq.n	800ee18 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800ee10:	f06f 0301 	mvn.w	r3, #1
 800ee14:	61fb      	str	r3, [r7, #28]
 800ee16:	e002      	b.n	800ee1e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800ee18:	f06f 0302 	mvn.w	r3, #2
 800ee1c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800ee1e:	69fb      	ldr	r3, [r7, #28]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3728      	adds	r7, #40	; 0x28
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b08a      	sub	sp, #40	; 0x28
 800ee2c:	af02      	add	r7, sp, #8
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ee34:	2300      	movs	r3, #0
 800ee36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee38:	f3ef 8305 	mrs	r3, IPSR
 800ee3c:	613b      	str	r3, [r7, #16]
  return(result);
 800ee3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d15f      	bne.n	800ef04 <osMessageQueueNew+0xdc>
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d05c      	beq.n	800ef04 <osMessageQueueNew+0xdc>
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d059      	beq.n	800ef04 <osMessageQueueNew+0xdc>
    mem = -1;
 800ee50:	f04f 33ff 	mov.w	r3, #4294967295
 800ee54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d029      	beq.n	800eeb0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d012      	beq.n	800ee8a <osMessageQueueNew+0x62>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	2b4f      	cmp	r3, #79	; 0x4f
 800ee6a:	d90e      	bls.n	800ee8a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00a      	beq.n	800ee8a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	695a      	ldr	r2, [r3, #20]
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	68b9      	ldr	r1, [r7, #8]
 800ee7c:	fb01 f303 	mul.w	r3, r1, r3
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d302      	bcc.n	800ee8a <osMessageQueueNew+0x62>
        mem = 1;
 800ee84:	2301      	movs	r3, #1
 800ee86:	61bb      	str	r3, [r7, #24]
 800ee88:	e014      	b.n	800eeb4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d110      	bne.n	800eeb4 <osMessageQueueNew+0x8c>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d10c      	bne.n	800eeb4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d108      	bne.n	800eeb4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	695b      	ldr	r3, [r3, #20]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d104      	bne.n	800eeb4 <osMessageQueueNew+0x8c>
          mem = 0;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	61bb      	str	r3, [r7, #24]
 800eeae:	e001      	b.n	800eeb4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d10b      	bne.n	800eed2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	691a      	ldr	r2, [r3, #16]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	2100      	movs	r1, #0
 800eec4:	9100      	str	r1, [sp, #0]
 800eec6:	68b9      	ldr	r1, [r7, #8]
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f000 fc9b 	bl	800f804 <xQueueGenericCreateStatic>
 800eece:	61f8      	str	r0, [r7, #28]
 800eed0:	e008      	b.n	800eee4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d105      	bne.n	800eee4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800eed8:	2200      	movs	r2, #0
 800eeda:	68b9      	ldr	r1, [r7, #8]
 800eedc:	68f8      	ldr	r0, [r7, #12]
 800eede:	f000 fd09 	bl	800f8f4 <xQueueGenericCreate>
 800eee2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00c      	beq.n	800ef04 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d003      	beq.n	800eef8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	617b      	str	r3, [r7, #20]
 800eef6:	e001      	b.n	800eefc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800eef8:	2300      	movs	r3, #0
 800eefa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800eefc:	6979      	ldr	r1, [r7, #20]
 800eefe:	69f8      	ldr	r0, [r7, #28]
 800ef00:	f001 f960 	bl	80101c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ef04:	69fb      	ldr	r3, [r7, #28]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3720      	adds	r7, #32
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
	...

0800ef10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b088      	sub	sp, #32
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	60b9      	str	r1, [r7, #8]
 800ef1a:	603b      	str	r3, [r7, #0]
 800ef1c:	4613      	mov	r3, r2
 800ef1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef28:	f3ef 8305 	mrs	r3, IPSR
 800ef2c:	617b      	str	r3, [r7, #20]
  return(result);
 800ef2e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d028      	beq.n	800ef86 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d005      	beq.n	800ef46 <osMessageQueuePut+0x36>
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d002      	beq.n	800ef46 <osMessageQueuePut+0x36>
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d003      	beq.n	800ef4e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ef46:	f06f 0303 	mvn.w	r3, #3
 800ef4a:	61fb      	str	r3, [r7, #28]
 800ef4c:	e038      	b.n	800efc0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ef52:	f107 0210 	add.w	r2, r7, #16
 800ef56:	2300      	movs	r3, #0
 800ef58:	68b9      	ldr	r1, [r7, #8]
 800ef5a:	69b8      	ldr	r0, [r7, #24]
 800ef5c:	f000 fe26 	bl	800fbac <xQueueGenericSendFromISR>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d003      	beq.n	800ef6e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ef66:	f06f 0302 	mvn.w	r3, #2
 800ef6a:	61fb      	str	r3, [r7, #28]
 800ef6c:	e028      	b.n	800efc0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d025      	beq.n	800efc0 <osMessageQueuePut+0xb0>
 800ef74:	4b15      	ldr	r3, [pc, #84]	; (800efcc <osMessageQueuePut+0xbc>)
 800ef76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	f3bf 8f6f 	isb	sy
 800ef84:	e01c      	b.n	800efc0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d002      	beq.n	800ef92 <osMessageQueuePut+0x82>
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d103      	bne.n	800ef9a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ef92:	f06f 0303 	mvn.w	r3, #3
 800ef96:	61fb      	str	r3, [r7, #28]
 800ef98:	e012      	b.n	800efc0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	683a      	ldr	r2, [r7, #0]
 800ef9e:	68b9      	ldr	r1, [r7, #8]
 800efa0:	69b8      	ldr	r0, [r7, #24]
 800efa2:	f000 fd05 	bl	800f9b0 <xQueueGenericSend>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d009      	beq.n	800efc0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d003      	beq.n	800efba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800efb2:	f06f 0301 	mvn.w	r3, #1
 800efb6:	61fb      	str	r3, [r7, #28]
 800efb8:	e002      	b.n	800efc0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800efba:	f06f 0302 	mvn.w	r3, #2
 800efbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800efc0:	69fb      	ldr	r3, [r7, #28]
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3720      	adds	r7, #32
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	e000ed04 	.word	0xe000ed04

0800efd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b088      	sub	sp, #32
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
 800efdc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800efe2:	2300      	movs	r3, #0
 800efe4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efe6:	f3ef 8305 	mrs	r3, IPSR
 800efea:	617b      	str	r3, [r7, #20]
  return(result);
 800efec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d028      	beq.n	800f044 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d005      	beq.n	800f004 <osMessageQueueGet+0x34>
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d002      	beq.n	800f004 <osMessageQueueGet+0x34>
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d003      	beq.n	800f00c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f004:	f06f 0303 	mvn.w	r3, #3
 800f008:	61fb      	str	r3, [r7, #28]
 800f00a:	e037      	b.n	800f07c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f00c:	2300      	movs	r3, #0
 800f00e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f010:	f107 0310 	add.w	r3, r7, #16
 800f014:	461a      	mov	r2, r3
 800f016:	68b9      	ldr	r1, [r7, #8]
 800f018:	69b8      	ldr	r0, [r7, #24]
 800f01a:	f000 ff43 	bl	800fea4 <xQueueReceiveFromISR>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b01      	cmp	r3, #1
 800f022:	d003      	beq.n	800f02c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f024:	f06f 0302 	mvn.w	r3, #2
 800f028:	61fb      	str	r3, [r7, #28]
 800f02a:	e027      	b.n	800f07c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d024      	beq.n	800f07c <osMessageQueueGet+0xac>
 800f032:	4b15      	ldr	r3, [pc, #84]	; (800f088 <osMessageQueueGet+0xb8>)
 800f034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	e01b      	b.n	800f07c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f044:	69bb      	ldr	r3, [r7, #24]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d002      	beq.n	800f050 <osMessageQueueGet+0x80>
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d103      	bne.n	800f058 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f050:	f06f 0303 	mvn.w	r3, #3
 800f054:	61fb      	str	r3, [r7, #28]
 800f056:	e011      	b.n	800f07c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f058:	683a      	ldr	r2, [r7, #0]
 800f05a:	68b9      	ldr	r1, [r7, #8]
 800f05c:	69b8      	ldr	r0, [r7, #24]
 800f05e:	f000 fe41 	bl	800fce4 <xQueueReceive>
 800f062:	4603      	mov	r3, r0
 800f064:	2b01      	cmp	r3, #1
 800f066:	d009      	beq.n	800f07c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d003      	beq.n	800f076 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f06e:	f06f 0301 	mvn.w	r3, #1
 800f072:	61fb      	str	r3, [r7, #28]
 800f074:	e002      	b.n	800f07c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f076:	f06f 0302 	mvn.w	r3, #2
 800f07a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f07c:	69fb      	ldr	r3, [r7, #28]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3720      	adds	r7, #32
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	e000ed04 	.word	0xe000ed04

0800f08c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f08c:	b480      	push	{r7}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4a07      	ldr	r2, [pc, #28]	; (800f0b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f09c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	4a06      	ldr	r2, [pc, #24]	; (800f0bc <vApplicationGetIdleTaskMemory+0x30>)
 800f0a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2280      	movs	r2, #128	; 0x80
 800f0a8:	601a      	str	r2, [r3, #0]
}
 800f0aa:	bf00      	nop
 800f0ac:	3714      	adds	r7, #20
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr
 800f0b6:	bf00      	nop
 800f0b8:	200001f4 	.word	0x200001f4
 800f0bc:	20000250 	.word	0x20000250

0800f0c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f0c0:	b480      	push	{r7}
 800f0c2:	b085      	sub	sp, #20
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	4a07      	ldr	r2, [pc, #28]	; (800f0ec <vApplicationGetTimerTaskMemory+0x2c>)
 800f0d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	4a06      	ldr	r2, [pc, #24]	; (800f0f0 <vApplicationGetTimerTaskMemory+0x30>)
 800f0d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f0de:	601a      	str	r2, [r3, #0]
}
 800f0e0:	bf00      	nop
 800f0e2:	3714      	adds	r7, #20
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ea:	4770      	bx	lr
 800f0ec:	20000450 	.word	0x20000450
 800f0f0:	200004ac 	.word	0x200004ac

0800f0f4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b086      	sub	sp, #24
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d10a      	bne.n	800f118 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f106:	f383 8811 	msr	BASEPRI, r3
 800f10a:	f3bf 8f6f 	isb	sy
 800f10e:	f3bf 8f4f 	dsb	sy
 800f112:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f114:	bf00      	nop
 800f116:	e7fe      	b.n	800f116 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800f118:	2320      	movs	r3, #32
 800f11a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	2b20      	cmp	r3, #32
 800f120:	d00a      	beq.n	800f138 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800f122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	60fb      	str	r3, [r7, #12]
}
 800f134:	bf00      	nop
 800f136:	e7fe      	b.n	800f136 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00a      	beq.n	800f158 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	2200      	movs	r2, #0
 800f146:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	3304      	adds	r3, #4
 800f14c:	4618      	mov	r0, r3
 800f14e:	f000 fa3d 	bl	800f5cc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2201      	movs	r2, #1
 800f156:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800f158:	697b      	ldr	r3, [r7, #20]
	}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3718      	adds	r7, #24
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800f162:	b580      	push	{r7, lr}
 800f164:	b082      	sub	sp, #8
 800f166:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800f168:	2020      	movs	r0, #32
 800f16a:	f002 fe0d 	bl	8011d88 <pvPortMalloc>
 800f16e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d00a      	beq.n	800f18c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	3304      	adds	r3, #4
 800f180:	4618      	mov	r0, r3
 800f182:	f000 fa23 	bl	800f5cc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2200      	movs	r2, #0
 800f18a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800f18c:	687b      	ldr	r3, [r7, #4]
	}
 800f18e:	4618      	mov	r0, r3
 800f190:	3708      	adds	r7, #8
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
	...

0800f198 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b090      	sub	sp, #64	; 0x40
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]
 800f1a4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d10a      	bne.n	800f1ce <xEventGroupWaitBits+0x36>
	__asm volatile
 800f1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1bc:	f383 8811 	msr	BASEPRI, r3
 800f1c0:	f3bf 8f6f 	isb	sy
 800f1c4:	f3bf 8f4f 	dsb	sy
 800f1c8:	623b      	str	r3, [r7, #32]
}
 800f1ca:	bf00      	nop
 800f1cc:	e7fe      	b.n	800f1cc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00a      	beq.n	800f1ee <xEventGroupWaitBits+0x56>
	__asm volatile
 800f1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	61fb      	str	r3, [r7, #28]
}
 800f1ea:	bf00      	nop
 800f1ec:	e7fe      	b.n	800f1ec <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d10a      	bne.n	800f20a <xEventGroupWaitBits+0x72>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	61bb      	str	r3, [r7, #24]
}
 800f206:	bf00      	nop
 800f208:	e7fe      	b.n	800f208 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f20a:	f001 ff07 	bl	801101c <xTaskGetSchedulerState>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d102      	bne.n	800f21a <xEventGroupWaitBits+0x82>
 800f214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f216:	2b00      	cmp	r3, #0
 800f218:	d101      	bne.n	800f21e <xEventGroupWaitBits+0x86>
 800f21a:	2301      	movs	r3, #1
 800f21c:	e000      	b.n	800f220 <xEventGroupWaitBits+0x88>
 800f21e:	2300      	movs	r3, #0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10a      	bne.n	800f23a <xEventGroupWaitBits+0xa2>
	__asm volatile
 800f224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f228:	f383 8811 	msr	BASEPRI, r3
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	617b      	str	r3, [r7, #20]
}
 800f236:	bf00      	nop
 800f238:	e7fe      	b.n	800f238 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800f23a:	f001 fa5d 	bl	80106f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800f23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800f244:	683a      	ldr	r2, [r7, #0]
 800f246:	68b9      	ldr	r1, [r7, #8]
 800f248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f24a:	f000 f988 	bl	800f55e <prvTestWaitCondition>
 800f24e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00e      	beq.n	800f274 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800f25a:	2300      	movs	r3, #0
 800f25c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d028      	beq.n	800f2b6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	43db      	mvns	r3, r3
 800f26c:	401a      	ands	r2, r3
 800f26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f270:	601a      	str	r2, [r3, #0]
 800f272:	e020      	b.n	800f2b6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800f274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f276:	2b00      	cmp	r3, #0
 800f278:	d104      	bne.n	800f284 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800f27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800f27e:	2301      	movs	r3, #1
 800f280:	633b      	str	r3, [r7, #48]	; 0x30
 800f282:	e018      	b.n	800f2b6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d003      	beq.n	800f292 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800f28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f290:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d003      	beq.n	800f2a0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800f298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f29a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f29e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800f2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a2:	1d18      	adds	r0, r3, #4
 800f2a4:	68ba      	ldr	r2, [r7, #8]
 800f2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	f001 fc2d 	bl	8010b0c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800f2b6:	f001 fa2d 	bl	8010714 <xTaskResumeAll>
 800f2ba:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800f2bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d031      	beq.n	800f326 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800f2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d107      	bne.n	800f2d8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800f2c8:	4b19      	ldr	r3, [pc, #100]	; (800f330 <xEventGroupWaitBits+0x198>)
 800f2ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ce:	601a      	str	r2, [r3, #0]
 800f2d0:	f3bf 8f4f 	dsb	sy
 800f2d4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800f2d8:	f001 ff2c 	bl	8011134 <uxTaskResetEventItemValue>
 800f2dc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800f2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d11a      	bne.n	800f31e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800f2e8:	f002 fc2c 	bl	8011b44 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800f2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800f2f2:	683a      	ldr	r2, [r7, #0]
 800f2f4:	68b9      	ldr	r1, [r7, #8]
 800f2f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f2f8:	f000 f931 	bl	800f55e <prvTestWaitCondition>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d009      	beq.n	800f316 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d006      	beq.n	800f316 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f30a:	681a      	ldr	r2, [r3, #0]
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	43db      	mvns	r3, r3
 800f310:	401a      	ands	r2, r3
 800f312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f314:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800f316:	2301      	movs	r3, #1
 800f318:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800f31a:	f002 fc43 	bl	8011ba4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f31e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f324:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800f326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3740      	adds	r7, #64	; 0x40
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	e000ed04 	.word	0xe000ed04

0800f334 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d10a      	bne.n	800f35e <xEventGroupClearBits+0x2a>
	__asm volatile
 800f348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34c:	f383 8811 	msr	BASEPRI, r3
 800f350:	f3bf 8f6f 	isb	sy
 800f354:	f3bf 8f4f 	dsb	sy
 800f358:	60fb      	str	r3, [r7, #12]
}
 800f35a:	bf00      	nop
 800f35c:	e7fe      	b.n	800f35c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00a      	beq.n	800f37e <xEventGroupClearBits+0x4a>
	__asm volatile
 800f368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36c:	f383 8811 	msr	BASEPRI, r3
 800f370:	f3bf 8f6f 	isb	sy
 800f374:	f3bf 8f4f 	dsb	sy
 800f378:	60bb      	str	r3, [r7, #8]
}
 800f37a:	bf00      	nop
 800f37c:	e7fe      	b.n	800f37c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800f37e:	f002 fbe1 	bl	8011b44 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	43db      	mvns	r3, r3
 800f390:	401a      	ands	r2, r3
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800f396:	f002 fc05 	bl	8011ba4 <vPortExitCritical>

	return uxReturn;
 800f39a:	693b      	ldr	r3, [r7, #16]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3718      	adds	r7, #24
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	6879      	ldr	r1, [r7, #4]
 800f3b4:	4804      	ldr	r0, [pc, #16]	; (800f3c8 <xEventGroupClearBitsFromISR+0x24>)
 800f3b6:	f002 fa77 	bl	80118a8 <xTimerPendFunctionCallFromISR>
 800f3ba:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
	}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}
 800f3c6:	bf00      	nop
 800f3c8:	0800f545 	.word	0x0800f545

0800f3cc <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b089      	sub	sp, #36	; 0x24
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f3d8:	f3ef 8211 	mrs	r2, BASEPRI
 800f3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e0:	f383 8811 	msr	BASEPRI, r3
 800f3e4:	f3bf 8f6f 	isb	sy
 800f3e8:	f3bf 8f4f 	dsb	sy
 800f3ec:	60fa      	str	r2, [r7, #12]
 800f3ee:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f3f2:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	617b      	str	r3, [r7, #20]
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f404:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800f406:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800f408:	4618      	mov	r0, r3
 800f40a:	3724      	adds	r7, #36	; 0x24
 800f40c:	46bd      	mov	sp, r7
 800f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f412:	4770      	bx	lr

0800f414 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b08e      	sub	sp, #56	; 0x38
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800f41e:	2300      	movs	r3, #0
 800f420:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800f426:	2300      	movs	r3, #0
 800f428:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10a      	bne.n	800f446 <xEventGroupSetBits+0x32>
	__asm volatile
 800f430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	613b      	str	r3, [r7, #16]
}
 800f442:	bf00      	nop
 800f444:	e7fe      	b.n	800f444 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d00a      	beq.n	800f466 <xEventGroupSetBits+0x52>
	__asm volatile
 800f450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f454:	f383 8811 	msr	BASEPRI, r3
 800f458:	f3bf 8f6f 	isb	sy
 800f45c:	f3bf 8f4f 	dsb	sy
 800f460:	60fb      	str	r3, [r7, #12]
}
 800f462:	bf00      	nop
 800f464:	e7fe      	b.n	800f464 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800f466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f468:	3304      	adds	r3, #4
 800f46a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	3308      	adds	r3, #8
 800f470:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800f472:	f001 f941 	bl	80106f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800f476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f478:	68db      	ldr	r3, [r3, #12]
 800f47a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800f47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	431a      	orrs	r2, r3
 800f484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f486:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800f488:	e03c      	b.n	800f504 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800f48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f48c:	685b      	ldr	r3, [r3, #4]
 800f48e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800f490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800f496:	2300      	movs	r3, #0
 800f498:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f4a0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f4a2:	69bb      	ldr	r3, [r7, #24]
 800f4a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f4a8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d108      	bne.n	800f4c6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d00b      	beq.n	800f4d8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4c4:	e008      	b.n	800f4d8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	4013      	ands	r3, r2
 800f4ce:	69ba      	ldr	r2, [r7, #24]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d101      	bne.n	800f4d8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800f4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d010      	beq.n	800f500 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d003      	beq.n	800f4f0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800f4e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ea:	69bb      	ldr	r3, [r7, #24]
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4fc:	f001 fbd2 	bl	8010ca4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800f504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f506:	6a3b      	ldr	r3, [r7, #32]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d1be      	bne.n	800f48a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800f50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f512:	43db      	mvns	r3, r3
 800f514:	401a      	ands	r2, r3
 800f516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f518:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800f51a:	f001 f8fb 	bl	8010714 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800f51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f520:	681b      	ldr	r3, [r3, #0]
}
 800f522:	4618      	mov	r0, r3
 800f524:	3738      	adds	r7, #56	; 0x38
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800f52a:	b580      	push	{r7, lr}
 800f52c:	b082      	sub	sp, #8
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
 800f532:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800f534:	6839      	ldr	r1, [r7, #0]
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7ff ff6c 	bl	800f414 <xEventGroupSetBits>
}
 800f53c:	bf00      	nop
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800f54e:	6839      	ldr	r1, [r7, #0]
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7ff feef 	bl	800f334 <xEventGroupClearBits>
}
 800f556:	bf00      	nop
 800f558:	3708      	adds	r7, #8
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800f55e:	b480      	push	{r7}
 800f560:	b087      	sub	sp, #28
 800f562:	af00      	add	r7, sp, #0
 800f564:	60f8      	str	r0, [r7, #12]
 800f566:	60b9      	str	r1, [r7, #8]
 800f568:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800f56a:	2300      	movs	r3, #0
 800f56c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d107      	bne.n	800f584 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	4013      	ands	r3, r2
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00a      	beq.n	800f594 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f57e:	2301      	movs	r3, #1
 800f580:	617b      	str	r3, [r7, #20]
 800f582:	e007      	b.n	800f594 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	4013      	ands	r3, r2
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d101      	bne.n	800f594 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f590:	2301      	movs	r3, #1
 800f592:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800f594:	697b      	ldr	r3, [r7, #20]
}
 800f596:	4618      	mov	r0, r3
 800f598:	371c      	adds	r7, #28
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr
	...

0800f5a4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b086      	sub	sp, #24
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	68ba      	ldr	r2, [r7, #8]
 800f5b4:	68f9      	ldr	r1, [r7, #12]
 800f5b6:	4804      	ldr	r0, [pc, #16]	; (800f5c8 <xEventGroupSetBitsFromISR+0x24>)
 800f5b8:	f002 f976 	bl	80118a8 <xTimerPendFunctionCallFromISR>
 800f5bc:	6178      	str	r0, [r7, #20]

		return xReturn;
 800f5be:	697b      	ldr	r3, [r7, #20]
	}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3718      	adds	r7, #24
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	0800f52b 	.word	0x0800f52b

0800f5cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f103 0208 	add.w	r2, r3, #8
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f103 0208 	add.w	r2, r3, #8
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f103 0208 	add.w	r2, r3, #8
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f600:	bf00      	nop
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr

0800f60c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f60c:	b480      	push	{r7}
 800f60e:	b083      	sub	sp, #12
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f61a:	bf00      	nop
 800f61c:	370c      	adds	r7, #12
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr

0800f626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f626:	b480      	push	{r7}
 800f628:	b085      	sub	sp, #20
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
 800f62e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	689a      	ldr	r2, [r3, #8]
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	683a      	ldr	r2, [r7, #0]
 800f64a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	683a      	ldr	r2, [r7, #0]
 800f650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	1c5a      	adds	r2, r3, #1
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	601a      	str	r2, [r3, #0]
}
 800f662:	bf00      	nop
 800f664:	3714      	adds	r7, #20
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr

0800f66e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f66e:	b480      	push	{r7}
 800f670:	b085      	sub	sp, #20
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
 800f676:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f684:	d103      	bne.n	800f68e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	691b      	ldr	r3, [r3, #16]
 800f68a:	60fb      	str	r3, [r7, #12]
 800f68c:	e00c      	b.n	800f6a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	3308      	adds	r3, #8
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	e002      	b.n	800f69c <vListInsert+0x2e>
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	685b      	ldr	r3, [r3, #4]
 800f69a:	60fb      	str	r3, [r7, #12]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	68ba      	ldr	r2, [r7, #8]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d2f6      	bcs.n	800f696 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	685a      	ldr	r2, [r3, #4]
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	683a      	ldr	r2, [r7, #0]
 800f6b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	683a      	ldr	r2, [r7, #0]
 800f6c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	1c5a      	adds	r2, r3, #1
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	601a      	str	r2, [r3, #0]
}
 800f6d4:	bf00      	nop
 800f6d6:	3714      	adds	r7, #20
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b085      	sub	sp, #20
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	6892      	ldr	r2, [r2, #8]
 800f6f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	6852      	ldr	r2, [r2, #4]
 800f700:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d103      	bne.n	800f714 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	689a      	ldr	r2, [r3, #8]
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2200      	movs	r2, #0
 800f718:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	1e5a      	subs	r2, r3, #1
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3714      	adds	r7, #20
 800f72c:	46bd      	mov	sp, r7
 800f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f732:	4770      	bx	lr

0800f734 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d10a      	bne.n	800f75e <xQueueGenericReset+0x2a>
	__asm volatile
 800f748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74c:	f383 8811 	msr	BASEPRI, r3
 800f750:	f3bf 8f6f 	isb	sy
 800f754:	f3bf 8f4f 	dsb	sy
 800f758:	60bb      	str	r3, [r7, #8]
}
 800f75a:	bf00      	nop
 800f75c:	e7fe      	b.n	800f75c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f75e:	f002 f9f1 	bl	8011b44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681a      	ldr	r2, [r3, #0]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f76a:	68f9      	ldr	r1, [r7, #12]
 800f76c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f76e:	fb01 f303 	mul.w	r3, r1, r3
 800f772:	441a      	add	r2, r3
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2200      	movs	r2, #0
 800f77c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f78e:	3b01      	subs	r3, #1
 800f790:	68f9      	ldr	r1, [r7, #12]
 800f792:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f794:	fb01 f303 	mul.w	r3, r1, r3
 800f798:	441a      	add	r2, r3
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	22ff      	movs	r2, #255	; 0xff
 800f7a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	22ff      	movs	r2, #255	; 0xff
 800f7aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d114      	bne.n	800f7de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	691b      	ldr	r3, [r3, #16]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d01a      	beq.n	800f7f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	3310      	adds	r3, #16
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f001 fa0b 	bl	8010bdc <xTaskRemoveFromEventList>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d012      	beq.n	800f7f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f7cc:	4b0c      	ldr	r3, [pc, #48]	; (800f800 <xQueueGenericReset+0xcc>)
 800f7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	e009      	b.n	800f7f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	3310      	adds	r3, #16
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7ff fef2 	bl	800f5cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	3324      	adds	r3, #36	; 0x24
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7ff feed 	bl	800f5cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f7f2:	f002 f9d7 	bl	8011ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f7f6:	2301      	movs	r3, #1
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	e000ed04 	.word	0xe000ed04

0800f804 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f804:	b580      	push	{r7, lr}
 800f806:	b08e      	sub	sp, #56	; 0x38
 800f808:	af02      	add	r7, sp, #8
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
 800f810:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d10a      	bne.n	800f82e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f81c:	f383 8811 	msr	BASEPRI, r3
 800f820:	f3bf 8f6f 	isb	sy
 800f824:	f3bf 8f4f 	dsb	sy
 800f828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f82a:	bf00      	nop
 800f82c:	e7fe      	b.n	800f82c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d10a      	bne.n	800f84a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f838:	f383 8811 	msr	BASEPRI, r3
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f3bf 8f4f 	dsb	sy
 800f844:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f846:	bf00      	nop
 800f848:	e7fe      	b.n	800f848 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d002      	beq.n	800f856 <xQueueGenericCreateStatic+0x52>
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d001      	beq.n	800f85a <xQueueGenericCreateStatic+0x56>
 800f856:	2301      	movs	r3, #1
 800f858:	e000      	b.n	800f85c <xQueueGenericCreateStatic+0x58>
 800f85a:	2300      	movs	r3, #0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d10a      	bne.n	800f876 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f864:	f383 8811 	msr	BASEPRI, r3
 800f868:	f3bf 8f6f 	isb	sy
 800f86c:	f3bf 8f4f 	dsb	sy
 800f870:	623b      	str	r3, [r7, #32]
}
 800f872:	bf00      	nop
 800f874:	e7fe      	b.n	800f874 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d102      	bne.n	800f882 <xQueueGenericCreateStatic+0x7e>
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d101      	bne.n	800f886 <xQueueGenericCreateStatic+0x82>
 800f882:	2301      	movs	r3, #1
 800f884:	e000      	b.n	800f888 <xQueueGenericCreateStatic+0x84>
 800f886:	2300      	movs	r3, #0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d10a      	bne.n	800f8a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f890:	f383 8811 	msr	BASEPRI, r3
 800f894:	f3bf 8f6f 	isb	sy
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	61fb      	str	r3, [r7, #28]
}
 800f89e:	bf00      	nop
 800f8a0:	e7fe      	b.n	800f8a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f8a2:	2350      	movs	r3, #80	; 0x50
 800f8a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	2b50      	cmp	r3, #80	; 0x50
 800f8aa:	d00a      	beq.n	800f8c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b0:	f383 8811 	msr	BASEPRI, r3
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	f3bf 8f4f 	dsb	sy
 800f8bc:	61bb      	str	r3, [r7, #24]
}
 800f8be:	bf00      	nop
 800f8c0:	e7fe      	b.n	800f8c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f8c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00d      	beq.n	800f8ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f8d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8dc:	9300      	str	r3, [sp, #0]
 800f8de:	4613      	mov	r3, r2
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	68b9      	ldr	r1, [r7, #8]
 800f8e4:	68f8      	ldr	r0, [r7, #12]
 800f8e6:	f000 f83f 	bl	800f968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3730      	adds	r7, #48	; 0x30
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b08a      	sub	sp, #40	; 0x28
 800f8f8:	af02      	add	r7, sp, #8
 800f8fa:	60f8      	str	r0, [r7, #12]
 800f8fc:	60b9      	str	r1, [r7, #8]
 800f8fe:	4613      	mov	r3, r2
 800f900:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d10a      	bne.n	800f91e <xQueueGenericCreate+0x2a>
	__asm volatile
 800f908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90c:	f383 8811 	msr	BASEPRI, r3
 800f910:	f3bf 8f6f 	isb	sy
 800f914:	f3bf 8f4f 	dsb	sy
 800f918:	613b      	str	r3, [r7, #16]
}
 800f91a:	bf00      	nop
 800f91c:	e7fe      	b.n	800f91c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	68ba      	ldr	r2, [r7, #8]
 800f922:	fb02 f303 	mul.w	r3, r2, r3
 800f926:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	3350      	adds	r3, #80	; 0x50
 800f92c:	4618      	mov	r0, r3
 800f92e:	f002 fa2b 	bl	8011d88 <pvPortMalloc>
 800f932:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f934:	69bb      	ldr	r3, [r7, #24]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d011      	beq.n	800f95e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f93a:	69bb      	ldr	r3, [r7, #24]
 800f93c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	3350      	adds	r3, #80	; 0x50
 800f942:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	2200      	movs	r2, #0
 800f948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f94c:	79fa      	ldrb	r2, [r7, #7]
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	9300      	str	r3, [sp, #0]
 800f952:	4613      	mov	r3, r2
 800f954:	697a      	ldr	r2, [r7, #20]
 800f956:	68b9      	ldr	r1, [r7, #8]
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	f000 f805 	bl	800f968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f95e:	69bb      	ldr	r3, [r7, #24]
	}
 800f960:	4618      	mov	r0, r3
 800f962:	3720      	adds	r7, #32
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d103      	bne.n	800f984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f97c:	69bb      	ldr	r3, [r7, #24]
 800f97e:	69ba      	ldr	r2, [r7, #24]
 800f980:	601a      	str	r2, [r3, #0]
 800f982:	e002      	b.n	800f98a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	68ba      	ldr	r2, [r7, #8]
 800f994:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f996:	2101      	movs	r1, #1
 800f998:	69b8      	ldr	r0, [r7, #24]
 800f99a:	f7ff fecb 	bl	800f734 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	78fa      	ldrb	r2, [r7, #3]
 800f9a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f9a6:	bf00      	nop
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
	...

0800f9b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b08e      	sub	sp, #56	; 0x38
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	607a      	str	r2, [r7, #4]
 800f9bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d10a      	bne.n	800f9e2 <xQueueGenericSend+0x32>
	__asm volatile
 800f9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d0:	f383 8811 	msr	BASEPRI, r3
 800f9d4:	f3bf 8f6f 	isb	sy
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f9de:	bf00      	nop
 800f9e0:	e7fe      	b.n	800f9e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d103      	bne.n	800f9f0 <xQueueGenericSend+0x40>
 800f9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d101      	bne.n	800f9f4 <xQueueGenericSend+0x44>
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e000      	b.n	800f9f6 <xQueueGenericSend+0x46>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d10a      	bne.n	800fa10 <xQueueGenericSend+0x60>
	__asm volatile
 800f9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fa0c:	bf00      	nop
 800fa0e:	e7fe      	b.n	800fa0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	d103      	bne.n	800fa1e <xQueueGenericSend+0x6e>
 800fa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	d101      	bne.n	800fa22 <xQueueGenericSend+0x72>
 800fa1e:	2301      	movs	r3, #1
 800fa20:	e000      	b.n	800fa24 <xQueueGenericSend+0x74>
 800fa22:	2300      	movs	r3, #0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d10a      	bne.n	800fa3e <xQueueGenericSend+0x8e>
	__asm volatile
 800fa28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2c:	f383 8811 	msr	BASEPRI, r3
 800fa30:	f3bf 8f6f 	isb	sy
 800fa34:	f3bf 8f4f 	dsb	sy
 800fa38:	623b      	str	r3, [r7, #32]
}
 800fa3a:	bf00      	nop
 800fa3c:	e7fe      	b.n	800fa3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa3e:	f001 faed 	bl	801101c <xTaskGetSchedulerState>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d102      	bne.n	800fa4e <xQueueGenericSend+0x9e>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d101      	bne.n	800fa52 <xQueueGenericSend+0xa2>
 800fa4e:	2301      	movs	r3, #1
 800fa50:	e000      	b.n	800fa54 <xQueueGenericSend+0xa4>
 800fa52:	2300      	movs	r3, #0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d10a      	bne.n	800fa6e <xQueueGenericSend+0xbe>
	__asm volatile
 800fa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5c:	f383 8811 	msr	BASEPRI, r3
 800fa60:	f3bf 8f6f 	isb	sy
 800fa64:	f3bf 8f4f 	dsb	sy
 800fa68:	61fb      	str	r3, [r7, #28]
}
 800fa6a:	bf00      	nop
 800fa6c:	e7fe      	b.n	800fa6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa6e:	f002 f869 	bl	8011b44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d302      	bcc.n	800fa84 <xQueueGenericSend+0xd4>
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	d129      	bne.n	800fad8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fa84:	683a      	ldr	r2, [r7, #0]
 800fa86:	68b9      	ldr	r1, [r7, #8]
 800fa88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa8a:	f000 fa8b 	bl	800ffa4 <prvCopyDataToQueue>
 800fa8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d010      	beq.n	800faba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa9a:	3324      	adds	r3, #36	; 0x24
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f001 f89d 	bl	8010bdc <xTaskRemoveFromEventList>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d013      	beq.n	800fad0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800faa8:	4b3f      	ldr	r3, [pc, #252]	; (800fba8 <xQueueGenericSend+0x1f8>)
 800faaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faae:	601a      	str	r2, [r3, #0]
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	f3bf 8f6f 	isb	sy
 800fab8:	e00a      	b.n	800fad0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800faba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d007      	beq.n	800fad0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fac0:	4b39      	ldr	r3, [pc, #228]	; (800fba8 <xQueueGenericSend+0x1f8>)
 800fac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fac6:	601a      	str	r2, [r3, #0]
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fad0:	f002 f868 	bl	8011ba4 <vPortExitCritical>
				return pdPASS;
 800fad4:	2301      	movs	r3, #1
 800fad6:	e063      	b.n	800fba0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d103      	bne.n	800fae6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fade:	f002 f861 	bl	8011ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fae2:	2300      	movs	r3, #0
 800fae4:	e05c      	b.n	800fba0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d106      	bne.n	800fafa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800faec:	f107 0314 	add.w	r3, r7, #20
 800faf0:	4618      	mov	r0, r3
 800faf2:	f001 f939 	bl	8010d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800faf6:	2301      	movs	r3, #1
 800faf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fafa:	f002 f853 	bl	8011ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fafe:	f000 fdfb 	bl	80106f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb02:	f002 f81f 	bl	8011b44 <vPortEnterCritical>
 800fb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb0c:	b25b      	sxtb	r3, r3
 800fb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb12:	d103      	bne.n	800fb1c <xQueueGenericSend+0x16c>
 800fb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb16:	2200      	movs	r2, #0
 800fb18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb22:	b25b      	sxtb	r3, r3
 800fb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb28:	d103      	bne.n	800fb32 <xQueueGenericSend+0x182>
 800fb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb32:	f002 f837 	bl	8011ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb36:	1d3a      	adds	r2, r7, #4
 800fb38:	f107 0314 	add.w	r3, r7, #20
 800fb3c:	4611      	mov	r1, r2
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f001 f928 	bl	8010d94 <xTaskCheckForTimeOut>
 800fb44:	4603      	mov	r3, r0
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d124      	bne.n	800fb94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fb4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb4c:	f000 fb22 	bl	8010194 <prvIsQueueFull>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d018      	beq.n	800fb88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb58:	3310      	adds	r3, #16
 800fb5a:	687a      	ldr	r2, [r7, #4]
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f000 ffb0 	bl	8010ac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fb64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb66:	f000 faad 	bl	80100c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fb6a:	f000 fdd3 	bl	8010714 <xTaskResumeAll>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	f47f af7c 	bne.w	800fa6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fb76:	4b0c      	ldr	r3, [pc, #48]	; (800fba8 <xQueueGenericSend+0x1f8>)
 800fb78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb7c:	601a      	str	r2, [r3, #0]
 800fb7e:	f3bf 8f4f 	dsb	sy
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	e772      	b.n	800fa6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fb88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb8a:	f000 fa9b 	bl	80100c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb8e:	f000 fdc1 	bl	8010714 <xTaskResumeAll>
 800fb92:	e76c      	b.n	800fa6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fb94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb96:	f000 fa95 	bl	80100c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb9a:	f000 fdbb 	bl	8010714 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fb9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fba0:	4618      	mov	r0, r3
 800fba2:	3738      	adds	r7, #56	; 0x38
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	e000ed04 	.word	0xe000ed04

0800fbac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b090      	sub	sp, #64	; 0x40
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
 800fbb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d10a      	bne.n	800fbda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc8:	f383 8811 	msr	BASEPRI, r3
 800fbcc:	f3bf 8f6f 	isb	sy
 800fbd0:	f3bf 8f4f 	dsb	sy
 800fbd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fbd6:	bf00      	nop
 800fbd8:	e7fe      	b.n	800fbd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d103      	bne.n	800fbe8 <xQueueGenericSendFromISR+0x3c>
 800fbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d101      	bne.n	800fbec <xQueueGenericSendFromISR+0x40>
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e000      	b.n	800fbee <xQueueGenericSendFromISR+0x42>
 800fbec:	2300      	movs	r3, #0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d10a      	bne.n	800fc08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fc04:	bf00      	nop
 800fc06:	e7fe      	b.n	800fc06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	2b02      	cmp	r3, #2
 800fc0c:	d103      	bne.n	800fc16 <xQueueGenericSendFromISR+0x6a>
 800fc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d101      	bne.n	800fc1a <xQueueGenericSendFromISR+0x6e>
 800fc16:	2301      	movs	r3, #1
 800fc18:	e000      	b.n	800fc1c <xQueueGenericSendFromISR+0x70>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d10a      	bne.n	800fc36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc24:	f383 8811 	msr	BASEPRI, r3
 800fc28:	f3bf 8f6f 	isb	sy
 800fc2c:	f3bf 8f4f 	dsb	sy
 800fc30:	623b      	str	r3, [r7, #32]
}
 800fc32:	bf00      	nop
 800fc34:	e7fe      	b.n	800fc34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc36:	f002 f867 	bl	8011d08 <vPortValidateInterruptPriority>
	__asm volatile
 800fc3a:	f3ef 8211 	mrs	r2, BASEPRI
 800fc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc42:	f383 8811 	msr	BASEPRI, r3
 800fc46:	f3bf 8f6f 	isb	sy
 800fc4a:	f3bf 8f4f 	dsb	sy
 800fc4e:	61fa      	str	r2, [r7, #28]
 800fc50:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800fc52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d302      	bcc.n	800fc68 <xQueueGenericSendFromISR+0xbc>
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	2b02      	cmp	r3, #2
 800fc66:	d12f      	bne.n	800fcc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fc78:	683a      	ldr	r2, [r7, #0]
 800fc7a:	68b9      	ldr	r1, [r7, #8]
 800fc7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc7e:	f000 f991 	bl	800ffa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fc82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc8a:	d112      	bne.n	800fcb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d016      	beq.n	800fcc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc96:	3324      	adds	r3, #36	; 0x24
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f000 ff9f 	bl	8010bdc <xTaskRemoveFromEventList>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00e      	beq.n	800fcc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d00b      	beq.n	800fcc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2201      	movs	r2, #1
 800fcae:	601a      	str	r2, [r3, #0]
 800fcb0:	e007      	b.n	800fcc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fcb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	b25a      	sxtb	r2, r3
 800fcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fcc6:	e001      	b.n	800fccc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcce:	617b      	str	r3, [r7, #20]
	__asm volatile
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	f383 8811 	msr	BASEPRI, r3
}
 800fcd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3740      	adds	r7, #64	; 0x40
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
	...

0800fce4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b08c      	sub	sp, #48	; 0x30
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	60f8      	str	r0, [r7, #12]
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d10a      	bne.n	800fd14 <xQueueReceive+0x30>
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	623b      	str	r3, [r7, #32]
}
 800fd10:	bf00      	nop
 800fd12:	e7fe      	b.n	800fd12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d103      	bne.n	800fd22 <xQueueReceive+0x3e>
 800fd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d101      	bne.n	800fd26 <xQueueReceive+0x42>
 800fd22:	2301      	movs	r3, #1
 800fd24:	e000      	b.n	800fd28 <xQueueReceive+0x44>
 800fd26:	2300      	movs	r3, #0
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d10a      	bne.n	800fd42 <xQueueReceive+0x5e>
	__asm volatile
 800fd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd30:	f383 8811 	msr	BASEPRI, r3
 800fd34:	f3bf 8f6f 	isb	sy
 800fd38:	f3bf 8f4f 	dsb	sy
 800fd3c:	61fb      	str	r3, [r7, #28]
}
 800fd3e:	bf00      	nop
 800fd40:	e7fe      	b.n	800fd40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd42:	f001 f96b 	bl	801101c <xTaskGetSchedulerState>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d102      	bne.n	800fd52 <xQueueReceive+0x6e>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d101      	bne.n	800fd56 <xQueueReceive+0x72>
 800fd52:	2301      	movs	r3, #1
 800fd54:	e000      	b.n	800fd58 <xQueueReceive+0x74>
 800fd56:	2300      	movs	r3, #0
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d10a      	bne.n	800fd72 <xQueueReceive+0x8e>
	__asm volatile
 800fd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd60:	f383 8811 	msr	BASEPRI, r3
 800fd64:	f3bf 8f6f 	isb	sy
 800fd68:	f3bf 8f4f 	dsb	sy
 800fd6c:	61bb      	str	r3, [r7, #24]
}
 800fd6e:	bf00      	nop
 800fd70:	e7fe      	b.n	800fd70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd72:	f001 fee7 	bl	8011b44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d01f      	beq.n	800fdc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd82:	68b9      	ldr	r1, [r7, #8]
 800fd84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd86:	f000 f977 	bl	8010078 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8c:	1e5a      	subs	r2, r3, #1
 800fd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd94:	691b      	ldr	r3, [r3, #16]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d00f      	beq.n	800fdba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd9c:	3310      	adds	r3, #16
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f000 ff1c 	bl	8010bdc <xTaskRemoveFromEventList>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d007      	beq.n	800fdba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fdaa:	4b3d      	ldr	r3, [pc, #244]	; (800fea0 <xQueueReceive+0x1bc>)
 800fdac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdb0:	601a      	str	r2, [r3, #0]
 800fdb2:	f3bf 8f4f 	dsb	sy
 800fdb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fdba:	f001 fef3 	bl	8011ba4 <vPortExitCritical>
				return pdPASS;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e069      	b.n	800fe96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d103      	bne.n	800fdd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fdc8:	f001 feec 	bl	8011ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	e062      	b.n	800fe96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d106      	bne.n	800fde4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fdd6:	f107 0310 	add.w	r3, r7, #16
 800fdda:	4618      	mov	r0, r3
 800fddc:	f000 ffc4 	bl	8010d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fde0:	2301      	movs	r3, #1
 800fde2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fde4:	f001 fede 	bl	8011ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fde8:	f000 fc86 	bl	80106f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fdec:	f001 feaa 	bl	8011b44 <vPortEnterCritical>
 800fdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fdf6:	b25b      	sxtb	r3, r3
 800fdf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdfc:	d103      	bne.n	800fe06 <xQueueReceive+0x122>
 800fdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe00:	2200      	movs	r2, #0
 800fe02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe0c:	b25b      	sxtb	r3, r3
 800fe0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe12:	d103      	bne.n	800fe1c <xQueueReceive+0x138>
 800fe14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe16:	2200      	movs	r2, #0
 800fe18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe1c:	f001 fec2 	bl	8011ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe20:	1d3a      	adds	r2, r7, #4
 800fe22:	f107 0310 	add.w	r3, r7, #16
 800fe26:	4611      	mov	r1, r2
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f000 ffb3 	bl	8010d94 <xTaskCheckForTimeOut>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d123      	bne.n	800fe7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe36:	f000 f997 	bl	8010168 <prvIsQueueEmpty>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d017      	beq.n	800fe70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fe40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe42:	3324      	adds	r3, #36	; 0x24
 800fe44:	687a      	ldr	r2, [r7, #4]
 800fe46:	4611      	mov	r1, r2
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f000 fe3b 	bl	8010ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe50:	f000 f938 	bl	80100c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fe54:	f000 fc5e 	bl	8010714 <xTaskResumeAll>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d189      	bne.n	800fd72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fe5e:	4b10      	ldr	r3, [pc, #64]	; (800fea0 <xQueueReceive+0x1bc>)
 800fe60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe64:	601a      	str	r2, [r3, #0]
 800fe66:	f3bf 8f4f 	dsb	sy
 800fe6a:	f3bf 8f6f 	isb	sy
 800fe6e:	e780      	b.n	800fd72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fe70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe72:	f000 f927 	bl	80100c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe76:	f000 fc4d 	bl	8010714 <xTaskResumeAll>
 800fe7a:	e77a      	b.n	800fd72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fe7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe7e:	f000 f921 	bl	80100c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe82:	f000 fc47 	bl	8010714 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe88:	f000 f96e 	bl	8010168 <prvIsQueueEmpty>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f43f af6f 	beq.w	800fd72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3730      	adds	r7, #48	; 0x30
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
 800fe9e:	bf00      	nop
 800fea0:	e000ed04 	.word	0xe000ed04

0800fea4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b08e      	sub	sp, #56	; 0x38
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800feb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d10a      	bne.n	800fed0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	623b      	str	r3, [r7, #32]
}
 800fecc:	bf00      	nop
 800fece:	e7fe      	b.n	800fece <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d103      	bne.n	800fede <xQueueReceiveFromISR+0x3a>
 800fed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d101      	bne.n	800fee2 <xQueueReceiveFromISR+0x3e>
 800fede:	2301      	movs	r3, #1
 800fee0:	e000      	b.n	800fee4 <xQueueReceiveFromISR+0x40>
 800fee2:	2300      	movs	r3, #0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d10a      	bne.n	800fefe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feec:	f383 8811 	msr	BASEPRI, r3
 800fef0:	f3bf 8f6f 	isb	sy
 800fef4:	f3bf 8f4f 	dsb	sy
 800fef8:	61fb      	str	r3, [r7, #28]
}
 800fefa:	bf00      	nop
 800fefc:	e7fe      	b.n	800fefc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fefe:	f001 ff03 	bl	8011d08 <vPortValidateInterruptPriority>
	__asm volatile
 800ff02:	f3ef 8211 	mrs	r2, BASEPRI
 800ff06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0a:	f383 8811 	msr	BASEPRI, r3
 800ff0e:	f3bf 8f6f 	isb	sy
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	61ba      	str	r2, [r7, #24]
 800ff18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ff1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d02f      	beq.n	800ff8a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff34:	68b9      	ldr	r1, [r7, #8]
 800ff36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff38:	f000 f89e 	bl	8010078 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3e:	1e5a      	subs	r2, r3, #1
 800ff40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ff44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ff48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff4c:	d112      	bne.n	800ff74 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	691b      	ldr	r3, [r3, #16]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d016      	beq.n	800ff84 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff58:	3310      	adds	r3, #16
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 fe3e 	bl	8010bdc <xTaskRemoveFromEventList>
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d00e      	beq.n	800ff84 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00b      	beq.n	800ff84 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	601a      	str	r2, [r3, #0]
 800ff72:	e007      	b.n	800ff84 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ff74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff78:	3301      	adds	r3, #1
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	b25a      	sxtb	r2, r3
 800ff7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ff84:	2301      	movs	r3, #1
 800ff86:	637b      	str	r3, [r7, #52]	; 0x34
 800ff88:	e001      	b.n	800ff8e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ff8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff90:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	f383 8811 	msr	BASEPRI, r3
}
 800ff98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3738      	adds	r7, #56	; 0x38
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b086      	sub	sp, #24
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d10d      	bne.n	800ffde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d14d      	bne.n	8010066 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	689b      	ldr	r3, [r3, #8]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f001 f842 	bl	8011058 <xTaskPriorityDisinherit>
 800ffd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	609a      	str	r2, [r3, #8]
 800ffdc:	e043      	b.n	8010066 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d119      	bne.n	8010018 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	6858      	ldr	r0, [r3, #4]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffec:	461a      	mov	r2, r3
 800ffee:	68b9      	ldr	r1, [r7, #8]
 800fff0:	f002 ff8a 	bl	8012f08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	685a      	ldr	r2, [r3, #4]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fffc:	441a      	add	r2, r3
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	685a      	ldr	r2, [r3, #4]
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	689b      	ldr	r3, [r3, #8]
 801000a:	429a      	cmp	r2, r3
 801000c:	d32b      	bcc.n	8010066 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	605a      	str	r2, [r3, #4]
 8010016:	e026      	b.n	8010066 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	68d8      	ldr	r0, [r3, #12]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010020:	461a      	mov	r2, r3
 8010022:	68b9      	ldr	r1, [r7, #8]
 8010024:	f002 ff70 	bl	8012f08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	68da      	ldr	r2, [r3, #12]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010030:	425b      	negs	r3, r3
 8010032:	441a      	add	r2, r3
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	68da      	ldr	r2, [r3, #12]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	429a      	cmp	r2, r3
 8010042:	d207      	bcs.n	8010054 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	689a      	ldr	r2, [r3, #8]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801004c:	425b      	negs	r3, r3
 801004e:	441a      	add	r2, r3
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2b02      	cmp	r3, #2
 8010058:	d105      	bne.n	8010066 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d002      	beq.n	8010066 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	3b01      	subs	r3, #1
 8010064:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	1c5a      	adds	r2, r3, #1
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801006e:	697b      	ldr	r3, [r7, #20]
}
 8010070:	4618      	mov	r0, r3
 8010072:	3718      	adds	r7, #24
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010086:	2b00      	cmp	r3, #0
 8010088:	d018      	beq.n	80100bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	68da      	ldr	r2, [r3, #12]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010092:	441a      	add	r2, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	68da      	ldr	r2, [r3, #12]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	689b      	ldr	r3, [r3, #8]
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d303      	bcc.n	80100ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	68d9      	ldr	r1, [r3, #12]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100b4:	461a      	mov	r2, r3
 80100b6:	6838      	ldr	r0, [r7, #0]
 80100b8:	f002 ff26 	bl	8012f08 <memcpy>
	}
}
 80100bc:	bf00      	nop
 80100be:	3708      	adds	r7, #8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80100cc:	f001 fd3a 	bl	8011b44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80100d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80100d8:	e011      	b.n	80100fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d012      	beq.n	8010108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	3324      	adds	r3, #36	; 0x24
 80100e6:	4618      	mov	r0, r3
 80100e8:	f000 fd78 	bl	8010bdc <xTaskRemoveFromEventList>
 80100ec:	4603      	mov	r3, r0
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d001      	beq.n	80100f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80100f2:	f000 feb1 	bl	8010e58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80100f6:	7bfb      	ldrb	r3, [r7, #15]
 80100f8:	3b01      	subs	r3, #1
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80100fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010102:	2b00      	cmp	r3, #0
 8010104:	dce9      	bgt.n	80100da <prvUnlockQueue+0x16>
 8010106:	e000      	b.n	801010a <prvUnlockQueue+0x46>
					break;
 8010108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	22ff      	movs	r2, #255	; 0xff
 801010e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010112:	f001 fd47 	bl	8011ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010116:	f001 fd15 	bl	8011b44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010122:	e011      	b.n	8010148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	691b      	ldr	r3, [r3, #16]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d012      	beq.n	8010152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	3310      	adds	r3, #16
 8010130:	4618      	mov	r0, r3
 8010132:	f000 fd53 	bl	8010bdc <xTaskRemoveFromEventList>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	d001      	beq.n	8010140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801013c:	f000 fe8c 	bl	8010e58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010140:	7bbb      	ldrb	r3, [r7, #14]
 8010142:	3b01      	subs	r3, #1
 8010144:	b2db      	uxtb	r3, r3
 8010146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801014c:	2b00      	cmp	r3, #0
 801014e:	dce9      	bgt.n	8010124 <prvUnlockQueue+0x60>
 8010150:	e000      	b.n	8010154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	22ff      	movs	r2, #255	; 0xff
 8010158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801015c:	f001 fd22 	bl	8011ba4 <vPortExitCritical>
}
 8010160:	bf00      	nop
 8010162:	3710      	adds	r7, #16
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010170:	f001 fce8 	bl	8011b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010178:	2b00      	cmp	r3, #0
 801017a:	d102      	bne.n	8010182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801017c:	2301      	movs	r3, #1
 801017e:	60fb      	str	r3, [r7, #12]
 8010180:	e001      	b.n	8010186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010182:	2300      	movs	r3, #0
 8010184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010186:	f001 fd0d 	bl	8011ba4 <vPortExitCritical>

	return xReturn;
 801018a:	68fb      	ldr	r3, [r7, #12]
}
 801018c:	4618      	mov	r0, r3
 801018e:	3710      	adds	r7, #16
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801019c:	f001 fcd2 	bl	8011b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d102      	bne.n	80101b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80101ac:	2301      	movs	r3, #1
 80101ae:	60fb      	str	r3, [r7, #12]
 80101b0:	e001      	b.n	80101b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80101b2:	2300      	movs	r3, #0
 80101b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80101b6:	f001 fcf5 	bl	8011ba4 <vPortExitCritical>

	return xReturn;
 80101ba:	68fb      	ldr	r3, [r7, #12]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3710      	adds	r7, #16
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80101c4:	b480      	push	{r7}
 80101c6:	b085      	sub	sp, #20
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80101ce:	2300      	movs	r3, #0
 80101d0:	60fb      	str	r3, [r7, #12]
 80101d2:	e014      	b.n	80101fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80101d4:	4a0f      	ldr	r2, [pc, #60]	; (8010214 <vQueueAddToRegistry+0x50>)
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d10b      	bne.n	80101f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80101e0:	490c      	ldr	r1, [pc, #48]	; (8010214 <vQueueAddToRegistry+0x50>)
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	683a      	ldr	r2, [r7, #0]
 80101e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80101ea:	4a0a      	ldr	r2, [pc, #40]	; (8010214 <vQueueAddToRegistry+0x50>)
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	00db      	lsls	r3, r3, #3
 80101f0:	4413      	add	r3, r2
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80101f6:	e006      	b.n	8010206 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	3301      	adds	r3, #1
 80101fc:	60fb      	str	r3, [r7, #12]
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2b07      	cmp	r3, #7
 8010202:	d9e7      	bls.n	80101d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010204:	bf00      	nop
 8010206:	bf00      	nop
 8010208:	3714      	adds	r7, #20
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	20002e04 	.word	0x20002e04

08010218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010218:	b580      	push	{r7, lr}
 801021a:	b086      	sub	sp, #24
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	60b9      	str	r1, [r7, #8]
 8010222:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010228:	f001 fc8c 	bl	8011b44 <vPortEnterCritical>
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010232:	b25b      	sxtb	r3, r3
 8010234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010238:	d103      	bne.n	8010242 <vQueueWaitForMessageRestricted+0x2a>
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	2200      	movs	r2, #0
 801023e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010248:	b25b      	sxtb	r3, r3
 801024a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024e:	d103      	bne.n	8010258 <vQueueWaitForMessageRestricted+0x40>
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	2200      	movs	r2, #0
 8010254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010258:	f001 fca4 	bl	8011ba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010260:	2b00      	cmp	r3, #0
 8010262:	d106      	bne.n	8010272 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	3324      	adds	r3, #36	; 0x24
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	68b9      	ldr	r1, [r7, #8]
 801026c:	4618      	mov	r0, r3
 801026e:	f000 fc89 	bl	8010b84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010272:	6978      	ldr	r0, [r7, #20]
 8010274:	f7ff ff26 	bl	80100c4 <prvUnlockQueue>
	}
 8010278:	bf00      	nop
 801027a:	3718      	adds	r7, #24
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010280:	b580      	push	{r7, lr}
 8010282:	b08e      	sub	sp, #56	; 0x38
 8010284:	af04      	add	r7, sp, #16
 8010286:	60f8      	str	r0, [r7, #12]
 8010288:	60b9      	str	r1, [r7, #8]
 801028a:	607a      	str	r2, [r7, #4]
 801028c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801028e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010290:	2b00      	cmp	r3, #0
 8010292:	d10a      	bne.n	80102aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8010294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010298:	f383 8811 	msr	BASEPRI, r3
 801029c:	f3bf 8f6f 	isb	sy
 80102a0:	f3bf 8f4f 	dsb	sy
 80102a4:	623b      	str	r3, [r7, #32]
}
 80102a6:	bf00      	nop
 80102a8:	e7fe      	b.n	80102a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80102aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d10a      	bne.n	80102c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80102b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b4:	f383 8811 	msr	BASEPRI, r3
 80102b8:	f3bf 8f6f 	isb	sy
 80102bc:	f3bf 8f4f 	dsb	sy
 80102c0:	61fb      	str	r3, [r7, #28]
}
 80102c2:	bf00      	nop
 80102c4:	e7fe      	b.n	80102c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80102c6:	235c      	movs	r3, #92	; 0x5c
 80102c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	2b5c      	cmp	r3, #92	; 0x5c
 80102ce:	d00a      	beq.n	80102e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80102d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d4:	f383 8811 	msr	BASEPRI, r3
 80102d8:	f3bf 8f6f 	isb	sy
 80102dc:	f3bf 8f4f 	dsb	sy
 80102e0:	61bb      	str	r3, [r7, #24]
}
 80102e2:	bf00      	nop
 80102e4:	e7fe      	b.n	80102e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80102e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80102e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d01e      	beq.n	801032c <xTaskCreateStatic+0xac>
 80102ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d01b      	beq.n	801032c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80102f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80102f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80102fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010300:	2202      	movs	r2, #2
 8010302:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010306:	2300      	movs	r3, #0
 8010308:	9303      	str	r3, [sp, #12]
 801030a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030c:	9302      	str	r3, [sp, #8]
 801030e:	f107 0314 	add.w	r3, r7, #20
 8010312:	9301      	str	r3, [sp, #4]
 8010314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010316:	9300      	str	r3, [sp, #0]
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	687a      	ldr	r2, [r7, #4]
 801031c:	68b9      	ldr	r1, [r7, #8]
 801031e:	68f8      	ldr	r0, [r7, #12]
 8010320:	f000 f850 	bl	80103c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010326:	f000 f8dd 	bl	80104e4 <prvAddNewTaskToReadyList>
 801032a:	e001      	b.n	8010330 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801032c:	2300      	movs	r3, #0
 801032e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010330:	697b      	ldr	r3, [r7, #20]
	}
 8010332:	4618      	mov	r0, r3
 8010334:	3728      	adds	r7, #40	; 0x28
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}

0801033a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801033a:	b580      	push	{r7, lr}
 801033c:	b08c      	sub	sp, #48	; 0x30
 801033e:	af04      	add	r7, sp, #16
 8010340:	60f8      	str	r0, [r7, #12]
 8010342:	60b9      	str	r1, [r7, #8]
 8010344:	603b      	str	r3, [r7, #0]
 8010346:	4613      	mov	r3, r2
 8010348:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801034a:	88fb      	ldrh	r3, [r7, #6]
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	4618      	mov	r0, r3
 8010350:	f001 fd1a 	bl	8011d88 <pvPortMalloc>
 8010354:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d00e      	beq.n	801037a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801035c:	205c      	movs	r0, #92	; 0x5c
 801035e:	f001 fd13 	bl	8011d88 <pvPortMalloc>
 8010362:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010364:	69fb      	ldr	r3, [r7, #28]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d003      	beq.n	8010372 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	697a      	ldr	r2, [r7, #20]
 801036e:	631a      	str	r2, [r3, #48]	; 0x30
 8010370:	e005      	b.n	801037e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010372:	6978      	ldr	r0, [r7, #20]
 8010374:	f001 fdd4 	bl	8011f20 <vPortFree>
 8010378:	e001      	b.n	801037e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801037a:	2300      	movs	r3, #0
 801037c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d017      	beq.n	80103b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	2200      	movs	r2, #0
 8010388:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801038c:	88fa      	ldrh	r2, [r7, #6]
 801038e:	2300      	movs	r3, #0
 8010390:	9303      	str	r3, [sp, #12]
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	9302      	str	r3, [sp, #8]
 8010396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010398:	9301      	str	r3, [sp, #4]
 801039a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801039c:	9300      	str	r3, [sp, #0]
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	68b9      	ldr	r1, [r7, #8]
 80103a2:	68f8      	ldr	r0, [r7, #12]
 80103a4:	f000 f80e 	bl	80103c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80103a8:	69f8      	ldr	r0, [r7, #28]
 80103aa:	f000 f89b 	bl	80104e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80103ae:	2301      	movs	r3, #1
 80103b0:	61bb      	str	r3, [r7, #24]
 80103b2:	e002      	b.n	80103ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80103b4:	f04f 33ff 	mov.w	r3, #4294967295
 80103b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80103ba:	69bb      	ldr	r3, [r7, #24]
	}
 80103bc:	4618      	mov	r0, r3
 80103be:	3720      	adds	r7, #32
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b088      	sub	sp, #32
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
 80103d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80103d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	009b      	lsls	r3, r3, #2
 80103da:	461a      	mov	r2, r3
 80103dc:	21a5      	movs	r1, #165	; 0xa5
 80103de:	f002 fda1 	bl	8012f24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80103e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80103ec:	3b01      	subs	r3, #1
 80103ee:	009b      	lsls	r3, r3, #2
 80103f0:	4413      	add	r3, r2
 80103f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	f023 0307 	bic.w	r3, r3, #7
 80103fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	f003 0307 	and.w	r3, r3, #7
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00a      	beq.n	801041c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040a:	f383 8811 	msr	BASEPRI, r3
 801040e:	f3bf 8f6f 	isb	sy
 8010412:	f3bf 8f4f 	dsb	sy
 8010416:	617b      	str	r3, [r7, #20]
}
 8010418:	bf00      	nop
 801041a:	e7fe      	b.n	801041a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d01f      	beq.n	8010462 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010422:	2300      	movs	r3, #0
 8010424:	61fb      	str	r3, [r7, #28]
 8010426:	e012      	b.n	801044e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010428:	68ba      	ldr	r2, [r7, #8]
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	4413      	add	r3, r2
 801042e:	7819      	ldrb	r1, [r3, #0]
 8010430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	4413      	add	r3, r2
 8010436:	3334      	adds	r3, #52	; 0x34
 8010438:	460a      	mov	r2, r1
 801043a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801043c:	68ba      	ldr	r2, [r7, #8]
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	4413      	add	r3, r2
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d006      	beq.n	8010456 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	3301      	adds	r3, #1
 801044c:	61fb      	str	r3, [r7, #28]
 801044e:	69fb      	ldr	r3, [r7, #28]
 8010450:	2b0f      	cmp	r3, #15
 8010452:	d9e9      	bls.n	8010428 <prvInitialiseNewTask+0x64>
 8010454:	e000      	b.n	8010458 <prvInitialiseNewTask+0x94>
			{
				break;
 8010456:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801045a:	2200      	movs	r2, #0
 801045c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010460:	e003      	b.n	801046a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010464:	2200      	movs	r2, #0
 8010466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801046a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046c:	2b37      	cmp	r3, #55	; 0x37
 801046e:	d901      	bls.n	8010474 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010470:	2337      	movs	r3, #55	; 0x37
 8010472:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010478:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801047a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801047e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010482:	2200      	movs	r2, #0
 8010484:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010488:	3304      	adds	r3, #4
 801048a:	4618      	mov	r0, r3
 801048c:	f7ff f8be 	bl	800f60c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010492:	3318      	adds	r3, #24
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff f8b9 	bl	800f60c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801049a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801049e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80104a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80104aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80104b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b2:	2200      	movs	r2, #0
 80104b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80104b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b8:	2200      	movs	r2, #0
 80104ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80104be:	683a      	ldr	r2, [r7, #0]
 80104c0:	68f9      	ldr	r1, [r7, #12]
 80104c2:	69b8      	ldr	r0, [r7, #24]
 80104c4:	f001 fa10 	bl	80118e8 <pxPortInitialiseStack>
 80104c8:	4602      	mov	r2, r0
 80104ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80104ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d002      	beq.n	80104da <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104da:	bf00      	nop
 80104dc:	3720      	adds	r7, #32
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
	...

080104e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80104ec:	f001 fb2a 	bl	8011b44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80104f0:	4b2d      	ldr	r3, [pc, #180]	; (80105a8 <prvAddNewTaskToReadyList+0xc4>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	3301      	adds	r3, #1
 80104f6:	4a2c      	ldr	r2, [pc, #176]	; (80105a8 <prvAddNewTaskToReadyList+0xc4>)
 80104f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80104fa:	4b2c      	ldr	r3, [pc, #176]	; (80105ac <prvAddNewTaskToReadyList+0xc8>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d109      	bne.n	8010516 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010502:	4a2a      	ldr	r2, [pc, #168]	; (80105ac <prvAddNewTaskToReadyList+0xc8>)
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010508:	4b27      	ldr	r3, [pc, #156]	; (80105a8 <prvAddNewTaskToReadyList+0xc4>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	2b01      	cmp	r3, #1
 801050e:	d110      	bne.n	8010532 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010510:	f000 fcc6 	bl	8010ea0 <prvInitialiseTaskLists>
 8010514:	e00d      	b.n	8010532 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010516:	4b26      	ldr	r3, [pc, #152]	; (80105b0 <prvAddNewTaskToReadyList+0xcc>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d109      	bne.n	8010532 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801051e:	4b23      	ldr	r3, [pc, #140]	; (80105ac <prvAddNewTaskToReadyList+0xc8>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010528:	429a      	cmp	r2, r3
 801052a:	d802      	bhi.n	8010532 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801052c:	4a1f      	ldr	r2, [pc, #124]	; (80105ac <prvAddNewTaskToReadyList+0xc8>)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010532:	4b20      	ldr	r3, [pc, #128]	; (80105b4 <prvAddNewTaskToReadyList+0xd0>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	3301      	adds	r3, #1
 8010538:	4a1e      	ldr	r2, [pc, #120]	; (80105b4 <prvAddNewTaskToReadyList+0xd0>)
 801053a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801053c:	4b1d      	ldr	r3, [pc, #116]	; (80105b4 <prvAddNewTaskToReadyList+0xd0>)
 801053e:	681a      	ldr	r2, [r3, #0]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010548:	4b1b      	ldr	r3, [pc, #108]	; (80105b8 <prvAddNewTaskToReadyList+0xd4>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	429a      	cmp	r2, r3
 801054e:	d903      	bls.n	8010558 <prvAddNewTaskToReadyList+0x74>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010554:	4a18      	ldr	r2, [pc, #96]	; (80105b8 <prvAddNewTaskToReadyList+0xd4>)
 8010556:	6013      	str	r3, [r2, #0]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801055c:	4613      	mov	r3, r2
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	4413      	add	r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	4a15      	ldr	r2, [pc, #84]	; (80105bc <prvAddNewTaskToReadyList+0xd8>)
 8010566:	441a      	add	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	3304      	adds	r3, #4
 801056c:	4619      	mov	r1, r3
 801056e:	4610      	mov	r0, r2
 8010570:	f7ff f859 	bl	800f626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010574:	f001 fb16 	bl	8011ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010578:	4b0d      	ldr	r3, [pc, #52]	; (80105b0 <prvAddNewTaskToReadyList+0xcc>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00e      	beq.n	801059e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010580:	4b0a      	ldr	r3, [pc, #40]	; (80105ac <prvAddNewTaskToReadyList+0xc8>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058a:	429a      	cmp	r2, r3
 801058c:	d207      	bcs.n	801059e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801058e:	4b0c      	ldr	r3, [pc, #48]	; (80105c0 <prvAddNewTaskToReadyList+0xdc>)
 8010590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010594:	601a      	str	r2, [r3, #0]
 8010596:	f3bf 8f4f 	dsb	sy
 801059a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801059e:	bf00      	nop
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	20000d80 	.word	0x20000d80
 80105ac:	200008ac 	.word	0x200008ac
 80105b0:	20000d8c 	.word	0x20000d8c
 80105b4:	20000d9c 	.word	0x20000d9c
 80105b8:	20000d88 	.word	0x20000d88
 80105bc:	200008b0 	.word	0x200008b0
 80105c0:	e000ed04 	.word	0xe000ed04

080105c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b084      	sub	sp, #16
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80105cc:	2300      	movs	r3, #0
 80105ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d017      	beq.n	8010606 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80105d6:	4b13      	ldr	r3, [pc, #76]	; (8010624 <vTaskDelay+0x60>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00a      	beq.n	80105f4 <vTaskDelay+0x30>
	__asm volatile
 80105de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e2:	f383 8811 	msr	BASEPRI, r3
 80105e6:	f3bf 8f6f 	isb	sy
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	60bb      	str	r3, [r7, #8]
}
 80105f0:	bf00      	nop
 80105f2:	e7fe      	b.n	80105f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80105f4:	f000 f880 	bl	80106f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80105f8:	2100      	movs	r1, #0
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 fdb2 	bl	8011164 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010600:	f000 f888 	bl	8010714 <xTaskResumeAll>
 8010604:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d107      	bne.n	801061c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801060c:	4b06      	ldr	r3, [pc, #24]	; (8010628 <vTaskDelay+0x64>)
 801060e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010612:	601a      	str	r2, [r3, #0]
 8010614:	f3bf 8f4f 	dsb	sy
 8010618:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801061c:	bf00      	nop
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	20000da8 	.word	0x20000da8
 8010628:	e000ed04 	.word	0xe000ed04

0801062c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b08a      	sub	sp, #40	; 0x28
 8010630:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010632:	2300      	movs	r3, #0
 8010634:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010636:	2300      	movs	r3, #0
 8010638:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801063a:	463a      	mov	r2, r7
 801063c:	1d39      	adds	r1, r7, #4
 801063e:	f107 0308 	add.w	r3, r7, #8
 8010642:	4618      	mov	r0, r3
 8010644:	f7fe fd22 	bl	800f08c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010648:	6839      	ldr	r1, [r7, #0]
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	68ba      	ldr	r2, [r7, #8]
 801064e:	9202      	str	r2, [sp, #8]
 8010650:	9301      	str	r3, [sp, #4]
 8010652:	2300      	movs	r3, #0
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	2300      	movs	r3, #0
 8010658:	460a      	mov	r2, r1
 801065a:	4921      	ldr	r1, [pc, #132]	; (80106e0 <vTaskStartScheduler+0xb4>)
 801065c:	4821      	ldr	r0, [pc, #132]	; (80106e4 <vTaskStartScheduler+0xb8>)
 801065e:	f7ff fe0f 	bl	8010280 <xTaskCreateStatic>
 8010662:	4603      	mov	r3, r0
 8010664:	4a20      	ldr	r2, [pc, #128]	; (80106e8 <vTaskStartScheduler+0xbc>)
 8010666:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010668:	4b1f      	ldr	r3, [pc, #124]	; (80106e8 <vTaskStartScheduler+0xbc>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d002      	beq.n	8010676 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010670:	2301      	movs	r3, #1
 8010672:	617b      	str	r3, [r7, #20]
 8010674:	e001      	b.n	801067a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010676:	2300      	movs	r3, #0
 8010678:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801067a:	697b      	ldr	r3, [r7, #20]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d102      	bne.n	8010686 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010680:	f000 fdc4 	bl	801120c <xTimerCreateTimerTask>
 8010684:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	2b01      	cmp	r3, #1
 801068a:	d116      	bne.n	80106ba <vTaskStartScheduler+0x8e>
	__asm volatile
 801068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010690:	f383 8811 	msr	BASEPRI, r3
 8010694:	f3bf 8f6f 	isb	sy
 8010698:	f3bf 8f4f 	dsb	sy
 801069c:	613b      	str	r3, [r7, #16]
}
 801069e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80106a0:	4b12      	ldr	r3, [pc, #72]	; (80106ec <vTaskStartScheduler+0xc0>)
 80106a2:	f04f 32ff 	mov.w	r2, #4294967295
 80106a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80106a8:	4b11      	ldr	r3, [pc, #68]	; (80106f0 <vTaskStartScheduler+0xc4>)
 80106aa:	2201      	movs	r2, #1
 80106ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80106ae:	4b11      	ldr	r3, [pc, #68]	; (80106f4 <vTaskStartScheduler+0xc8>)
 80106b0:	2200      	movs	r2, #0
 80106b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80106b4:	f001 f9a4 	bl	8011a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80106b8:	e00e      	b.n	80106d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c0:	d10a      	bne.n	80106d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c6:	f383 8811 	msr	BASEPRI, r3
 80106ca:	f3bf 8f6f 	isb	sy
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	60fb      	str	r3, [r7, #12]
}
 80106d4:	bf00      	nop
 80106d6:	e7fe      	b.n	80106d6 <vTaskStartScheduler+0xaa>
}
 80106d8:	bf00      	nop
 80106da:	3718      	adds	r7, #24
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	08012f88 	.word	0x08012f88
 80106e4:	08010e71 	.word	0x08010e71
 80106e8:	20000da4 	.word	0x20000da4
 80106ec:	20000da0 	.word	0x20000da0
 80106f0:	20000d8c 	.word	0x20000d8c
 80106f4:	20000d84 	.word	0x20000d84

080106f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80106f8:	b480      	push	{r7}
 80106fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80106fc:	4b04      	ldr	r3, [pc, #16]	; (8010710 <vTaskSuspendAll+0x18>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	3301      	adds	r3, #1
 8010702:	4a03      	ldr	r2, [pc, #12]	; (8010710 <vTaskSuspendAll+0x18>)
 8010704:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010706:	bf00      	nop
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr
 8010710:	20000da8 	.word	0x20000da8

08010714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801071a:	2300      	movs	r3, #0
 801071c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801071e:	2300      	movs	r3, #0
 8010720:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010722:	4b42      	ldr	r3, [pc, #264]	; (801082c <xTaskResumeAll+0x118>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d10a      	bne.n	8010740 <xTaskResumeAll+0x2c>
	__asm volatile
 801072a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072e:	f383 8811 	msr	BASEPRI, r3
 8010732:	f3bf 8f6f 	isb	sy
 8010736:	f3bf 8f4f 	dsb	sy
 801073a:	603b      	str	r3, [r7, #0]
}
 801073c:	bf00      	nop
 801073e:	e7fe      	b.n	801073e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010740:	f001 fa00 	bl	8011b44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010744:	4b39      	ldr	r3, [pc, #228]	; (801082c <xTaskResumeAll+0x118>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	3b01      	subs	r3, #1
 801074a:	4a38      	ldr	r2, [pc, #224]	; (801082c <xTaskResumeAll+0x118>)
 801074c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801074e:	4b37      	ldr	r3, [pc, #220]	; (801082c <xTaskResumeAll+0x118>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d162      	bne.n	801081c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010756:	4b36      	ldr	r3, [pc, #216]	; (8010830 <xTaskResumeAll+0x11c>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d05e      	beq.n	801081c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801075e:	e02f      	b.n	80107c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010760:	4b34      	ldr	r3, [pc, #208]	; (8010834 <xTaskResumeAll+0x120>)
 8010762:	68db      	ldr	r3, [r3, #12]
 8010764:	68db      	ldr	r3, [r3, #12]
 8010766:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	3318      	adds	r3, #24
 801076c:	4618      	mov	r0, r3
 801076e:	f7fe ffb7 	bl	800f6e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	3304      	adds	r3, #4
 8010776:	4618      	mov	r0, r3
 8010778:	f7fe ffb2 	bl	800f6e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010780:	4b2d      	ldr	r3, [pc, #180]	; (8010838 <xTaskResumeAll+0x124>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	429a      	cmp	r2, r3
 8010786:	d903      	bls.n	8010790 <xTaskResumeAll+0x7c>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801078c:	4a2a      	ldr	r2, [pc, #168]	; (8010838 <xTaskResumeAll+0x124>)
 801078e:	6013      	str	r3, [r2, #0]
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010794:	4613      	mov	r3, r2
 8010796:	009b      	lsls	r3, r3, #2
 8010798:	4413      	add	r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	4a27      	ldr	r2, [pc, #156]	; (801083c <xTaskResumeAll+0x128>)
 801079e:	441a      	add	r2, r3
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	3304      	adds	r3, #4
 80107a4:	4619      	mov	r1, r3
 80107a6:	4610      	mov	r0, r2
 80107a8:	f7fe ff3d 	bl	800f626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107b0:	4b23      	ldr	r3, [pc, #140]	; (8010840 <xTaskResumeAll+0x12c>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d302      	bcc.n	80107c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80107ba:	4b22      	ldr	r3, [pc, #136]	; (8010844 <xTaskResumeAll+0x130>)
 80107bc:	2201      	movs	r2, #1
 80107be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80107c0:	4b1c      	ldr	r3, [pc, #112]	; (8010834 <xTaskResumeAll+0x120>)
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1cb      	bne.n	8010760 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d001      	beq.n	80107d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80107ce:	f000 fc05 	bl	8010fdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80107d2:	4b1d      	ldr	r3, [pc, #116]	; (8010848 <xTaskResumeAll+0x134>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d010      	beq.n	8010800 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80107de:	f000 f859 	bl	8010894 <xTaskIncrementTick>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80107e8:	4b16      	ldr	r3, [pc, #88]	; (8010844 <xTaskResumeAll+0x130>)
 80107ea:	2201      	movs	r2, #1
 80107ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	3b01      	subs	r3, #1
 80107f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d1f1      	bne.n	80107de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80107fa:	4b13      	ldr	r3, [pc, #76]	; (8010848 <xTaskResumeAll+0x134>)
 80107fc:	2200      	movs	r2, #0
 80107fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010800:	4b10      	ldr	r3, [pc, #64]	; (8010844 <xTaskResumeAll+0x130>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d009      	beq.n	801081c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010808:	2301      	movs	r3, #1
 801080a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801080c:	4b0f      	ldr	r3, [pc, #60]	; (801084c <xTaskResumeAll+0x138>)
 801080e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010812:	601a      	str	r2, [r3, #0]
 8010814:	f3bf 8f4f 	dsb	sy
 8010818:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801081c:	f001 f9c2 	bl	8011ba4 <vPortExitCritical>

	return xAlreadyYielded;
 8010820:	68bb      	ldr	r3, [r7, #8]
}
 8010822:	4618      	mov	r0, r3
 8010824:	3710      	adds	r7, #16
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	20000da8 	.word	0x20000da8
 8010830:	20000d80 	.word	0x20000d80
 8010834:	20000d40 	.word	0x20000d40
 8010838:	20000d88 	.word	0x20000d88
 801083c:	200008b0 	.word	0x200008b0
 8010840:	200008ac 	.word	0x200008ac
 8010844:	20000d94 	.word	0x20000d94
 8010848:	20000d90 	.word	0x20000d90
 801084c:	e000ed04 	.word	0xe000ed04

08010850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010856:	4b05      	ldr	r3, [pc, #20]	; (801086c <xTaskGetTickCount+0x1c>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801085c:	687b      	ldr	r3, [r7, #4]
}
 801085e:	4618      	mov	r0, r3
 8010860:	370c      	adds	r7, #12
 8010862:	46bd      	mov	sp, r7
 8010864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop
 801086c:	20000d84 	.word	0x20000d84

08010870 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010876:	f001 fa47 	bl	8011d08 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801087a:	2300      	movs	r3, #0
 801087c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801087e:	4b04      	ldr	r3, [pc, #16]	; (8010890 <xTaskGetTickCountFromISR+0x20>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010884:	683b      	ldr	r3, [r7, #0]
}
 8010886:	4618      	mov	r0, r3
 8010888:	3708      	adds	r7, #8
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	20000d84 	.word	0x20000d84

08010894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b086      	sub	sp, #24
 8010898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801089a:	2300      	movs	r3, #0
 801089c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801089e:	4b4f      	ldr	r3, [pc, #316]	; (80109dc <xTaskIncrementTick+0x148>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f040 808f 	bne.w	80109c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80108a8:	4b4d      	ldr	r3, [pc, #308]	; (80109e0 <xTaskIncrementTick+0x14c>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	3301      	adds	r3, #1
 80108ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80108b0:	4a4b      	ldr	r2, [pc, #300]	; (80109e0 <xTaskIncrementTick+0x14c>)
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d120      	bne.n	80108fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80108bc:	4b49      	ldr	r3, [pc, #292]	; (80109e4 <xTaskIncrementTick+0x150>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d00a      	beq.n	80108dc <xTaskIncrementTick+0x48>
	__asm volatile
 80108c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ca:	f383 8811 	msr	BASEPRI, r3
 80108ce:	f3bf 8f6f 	isb	sy
 80108d2:	f3bf 8f4f 	dsb	sy
 80108d6:	603b      	str	r3, [r7, #0]
}
 80108d8:	bf00      	nop
 80108da:	e7fe      	b.n	80108da <xTaskIncrementTick+0x46>
 80108dc:	4b41      	ldr	r3, [pc, #260]	; (80109e4 <xTaskIncrementTick+0x150>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	60fb      	str	r3, [r7, #12]
 80108e2:	4b41      	ldr	r3, [pc, #260]	; (80109e8 <xTaskIncrementTick+0x154>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a3f      	ldr	r2, [pc, #252]	; (80109e4 <xTaskIncrementTick+0x150>)
 80108e8:	6013      	str	r3, [r2, #0]
 80108ea:	4a3f      	ldr	r2, [pc, #252]	; (80109e8 <xTaskIncrementTick+0x154>)
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	6013      	str	r3, [r2, #0]
 80108f0:	4b3e      	ldr	r3, [pc, #248]	; (80109ec <xTaskIncrementTick+0x158>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	3301      	adds	r3, #1
 80108f6:	4a3d      	ldr	r2, [pc, #244]	; (80109ec <xTaskIncrementTick+0x158>)
 80108f8:	6013      	str	r3, [r2, #0]
 80108fa:	f000 fb6f 	bl	8010fdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80108fe:	4b3c      	ldr	r3, [pc, #240]	; (80109f0 <xTaskIncrementTick+0x15c>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	693a      	ldr	r2, [r7, #16]
 8010904:	429a      	cmp	r2, r3
 8010906:	d349      	bcc.n	801099c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010908:	4b36      	ldr	r3, [pc, #216]	; (80109e4 <xTaskIncrementTick+0x150>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d104      	bne.n	801091c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010912:	4b37      	ldr	r3, [pc, #220]	; (80109f0 <xTaskIncrementTick+0x15c>)
 8010914:	f04f 32ff 	mov.w	r2, #4294967295
 8010918:	601a      	str	r2, [r3, #0]
					break;
 801091a:	e03f      	b.n	801099c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801091c:	4b31      	ldr	r3, [pc, #196]	; (80109e4 <xTaskIncrementTick+0x150>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801092c:	693a      	ldr	r2, [r7, #16]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	429a      	cmp	r2, r3
 8010932:	d203      	bcs.n	801093c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010934:	4a2e      	ldr	r2, [pc, #184]	; (80109f0 <xTaskIncrementTick+0x15c>)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801093a:	e02f      	b.n	801099c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	3304      	adds	r3, #4
 8010940:	4618      	mov	r0, r3
 8010942:	f7fe fecd 	bl	800f6e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801094a:	2b00      	cmp	r3, #0
 801094c:	d004      	beq.n	8010958 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	3318      	adds	r3, #24
 8010952:	4618      	mov	r0, r3
 8010954:	f7fe fec4 	bl	800f6e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801095c:	4b25      	ldr	r3, [pc, #148]	; (80109f4 <xTaskIncrementTick+0x160>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	429a      	cmp	r2, r3
 8010962:	d903      	bls.n	801096c <xTaskIncrementTick+0xd8>
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010968:	4a22      	ldr	r2, [pc, #136]	; (80109f4 <xTaskIncrementTick+0x160>)
 801096a:	6013      	str	r3, [r2, #0]
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010970:	4613      	mov	r3, r2
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	4413      	add	r3, r2
 8010976:	009b      	lsls	r3, r3, #2
 8010978:	4a1f      	ldr	r2, [pc, #124]	; (80109f8 <xTaskIncrementTick+0x164>)
 801097a:	441a      	add	r2, r3
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	3304      	adds	r3, #4
 8010980:	4619      	mov	r1, r3
 8010982:	4610      	mov	r0, r2
 8010984:	f7fe fe4f 	bl	800f626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801098c:	4b1b      	ldr	r3, [pc, #108]	; (80109fc <xTaskIncrementTick+0x168>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010992:	429a      	cmp	r2, r3
 8010994:	d3b8      	bcc.n	8010908 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010996:	2301      	movs	r3, #1
 8010998:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801099a:	e7b5      	b.n	8010908 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801099c:	4b17      	ldr	r3, [pc, #92]	; (80109fc <xTaskIncrementTick+0x168>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109a2:	4915      	ldr	r1, [pc, #84]	; (80109f8 <xTaskIncrementTick+0x164>)
 80109a4:	4613      	mov	r3, r2
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	4413      	add	r3, r2
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	440b      	add	r3, r1
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d901      	bls.n	80109b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80109b4:	2301      	movs	r3, #1
 80109b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80109b8:	4b11      	ldr	r3, [pc, #68]	; (8010a00 <xTaskIncrementTick+0x16c>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d007      	beq.n	80109d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80109c0:	2301      	movs	r3, #1
 80109c2:	617b      	str	r3, [r7, #20]
 80109c4:	e004      	b.n	80109d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80109c6:	4b0f      	ldr	r3, [pc, #60]	; (8010a04 <xTaskIncrementTick+0x170>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	3301      	adds	r3, #1
 80109cc:	4a0d      	ldr	r2, [pc, #52]	; (8010a04 <xTaskIncrementTick+0x170>)
 80109ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80109d0:	697b      	ldr	r3, [r7, #20]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3718      	adds	r7, #24
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	20000da8 	.word	0x20000da8
 80109e0:	20000d84 	.word	0x20000d84
 80109e4:	20000d38 	.word	0x20000d38
 80109e8:	20000d3c 	.word	0x20000d3c
 80109ec:	20000d98 	.word	0x20000d98
 80109f0:	20000da0 	.word	0x20000da0
 80109f4:	20000d88 	.word	0x20000d88
 80109f8:	200008b0 	.word	0x200008b0
 80109fc:	200008ac 	.word	0x200008ac
 8010a00:	20000d94 	.word	0x20000d94
 8010a04:	20000d90 	.word	0x20000d90

08010a08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b085      	sub	sp, #20
 8010a0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010a0e:	4b28      	ldr	r3, [pc, #160]	; (8010ab0 <vTaskSwitchContext+0xa8>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d003      	beq.n	8010a1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010a16:	4b27      	ldr	r3, [pc, #156]	; (8010ab4 <vTaskSwitchContext+0xac>)
 8010a18:	2201      	movs	r2, #1
 8010a1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010a1c:	e041      	b.n	8010aa2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8010a1e:	4b25      	ldr	r3, [pc, #148]	; (8010ab4 <vTaskSwitchContext+0xac>)
 8010a20:	2200      	movs	r2, #0
 8010a22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a24:	4b24      	ldr	r3, [pc, #144]	; (8010ab8 <vTaskSwitchContext+0xb0>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	60fb      	str	r3, [r7, #12]
 8010a2a:	e010      	b.n	8010a4e <vTaskSwitchContext+0x46>
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d10a      	bne.n	8010a48 <vTaskSwitchContext+0x40>
	__asm volatile
 8010a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a36:	f383 8811 	msr	BASEPRI, r3
 8010a3a:	f3bf 8f6f 	isb	sy
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	607b      	str	r3, [r7, #4]
}
 8010a44:	bf00      	nop
 8010a46:	e7fe      	b.n	8010a46 <vTaskSwitchContext+0x3e>
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	60fb      	str	r3, [r7, #12]
 8010a4e:	491b      	ldr	r1, [pc, #108]	; (8010abc <vTaskSwitchContext+0xb4>)
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	4613      	mov	r3, r2
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	4413      	add	r3, r2
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	440b      	add	r3, r1
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d0e4      	beq.n	8010a2c <vTaskSwitchContext+0x24>
 8010a62:	68fa      	ldr	r2, [r7, #12]
 8010a64:	4613      	mov	r3, r2
 8010a66:	009b      	lsls	r3, r3, #2
 8010a68:	4413      	add	r3, r2
 8010a6a:	009b      	lsls	r3, r3, #2
 8010a6c:	4a13      	ldr	r2, [pc, #76]	; (8010abc <vTaskSwitchContext+0xb4>)
 8010a6e:	4413      	add	r3, r2
 8010a70:	60bb      	str	r3, [r7, #8]
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	685a      	ldr	r2, [r3, #4]
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	605a      	str	r2, [r3, #4]
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	685a      	ldr	r2, [r3, #4]
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	3308      	adds	r3, #8
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d104      	bne.n	8010a92 <vTaskSwitchContext+0x8a>
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	685a      	ldr	r2, [r3, #4]
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	605a      	str	r2, [r3, #4]
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	4a09      	ldr	r2, [pc, #36]	; (8010ac0 <vTaskSwitchContext+0xb8>)
 8010a9a:	6013      	str	r3, [r2, #0]
 8010a9c:	4a06      	ldr	r2, [pc, #24]	; (8010ab8 <vTaskSwitchContext+0xb0>)
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	6013      	str	r3, [r2, #0]
}
 8010aa2:	bf00      	nop
 8010aa4:	3714      	adds	r7, #20
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr
 8010aae:	bf00      	nop
 8010ab0:	20000da8 	.word	0x20000da8
 8010ab4:	20000d94 	.word	0x20000d94
 8010ab8:	20000d88 	.word	0x20000d88
 8010abc:	200008b0 	.word	0x200008b0
 8010ac0:	200008ac 	.word	0x200008ac

08010ac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d10a      	bne.n	8010aea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad8:	f383 8811 	msr	BASEPRI, r3
 8010adc:	f3bf 8f6f 	isb	sy
 8010ae0:	f3bf 8f4f 	dsb	sy
 8010ae4:	60fb      	str	r3, [r7, #12]
}
 8010ae6:	bf00      	nop
 8010ae8:	e7fe      	b.n	8010ae8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010aea:	4b07      	ldr	r3, [pc, #28]	; (8010b08 <vTaskPlaceOnEventList+0x44>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	3318      	adds	r3, #24
 8010af0:	4619      	mov	r1, r3
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f7fe fdbb 	bl	800f66e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010af8:	2101      	movs	r1, #1
 8010afa:	6838      	ldr	r0, [r7, #0]
 8010afc:	f000 fb32 	bl	8011164 <prvAddCurrentTaskToDelayedList>
}
 8010b00:	bf00      	nop
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	200008ac 	.word	0x200008ac

08010b0c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b086      	sub	sp, #24
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	60f8      	str	r0, [r7, #12]
 8010b14:	60b9      	str	r1, [r7, #8]
 8010b16:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d10a      	bne.n	8010b34 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8010b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b22:	f383 8811 	msr	BASEPRI, r3
 8010b26:	f3bf 8f6f 	isb	sy
 8010b2a:	f3bf 8f4f 	dsb	sy
 8010b2e:	617b      	str	r3, [r7, #20]
}
 8010b30:	bf00      	nop
 8010b32:	e7fe      	b.n	8010b32 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8010b34:	4b11      	ldr	r3, [pc, #68]	; (8010b7c <vTaskPlaceOnUnorderedEventList+0x70>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d10a      	bne.n	8010b52 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8010b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b40:	f383 8811 	msr	BASEPRI, r3
 8010b44:	f3bf 8f6f 	isb	sy
 8010b48:	f3bf 8f4f 	dsb	sy
 8010b4c:	613b      	str	r3, [r7, #16]
}
 8010b4e:	bf00      	nop
 8010b50:	e7fe      	b.n	8010b50 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010b52:	4b0b      	ldr	r3, [pc, #44]	; (8010b80 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8010b5c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b5e:	4b08      	ldr	r3, [pc, #32]	; (8010b80 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	3318      	adds	r3, #24
 8010b64:	4619      	mov	r1, r3
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f7fe fd5d 	bl	800f626 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010b6c:	2101      	movs	r1, #1
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f000 faf8 	bl	8011164 <prvAddCurrentTaskToDelayedList>
}
 8010b74:	bf00      	nop
 8010b76:	3718      	adds	r7, #24
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	20000da8 	.word	0x20000da8
 8010b80:	200008ac 	.word	0x200008ac

08010b84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b086      	sub	sp, #24
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	60f8      	str	r0, [r7, #12]
 8010b8c:	60b9      	str	r1, [r7, #8]
 8010b8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d10a      	bne.n	8010bac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b9a:	f383 8811 	msr	BASEPRI, r3
 8010b9e:	f3bf 8f6f 	isb	sy
 8010ba2:	f3bf 8f4f 	dsb	sy
 8010ba6:	617b      	str	r3, [r7, #20]
}
 8010ba8:	bf00      	nop
 8010baa:	e7fe      	b.n	8010baa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010bac:	4b0a      	ldr	r3, [pc, #40]	; (8010bd8 <vTaskPlaceOnEventListRestricted+0x54>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	3318      	adds	r3, #24
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f7fe fd36 	bl	800f626 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d002      	beq.n	8010bc6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010bc6:	6879      	ldr	r1, [r7, #4]
 8010bc8:	68b8      	ldr	r0, [r7, #8]
 8010bca:	f000 facb 	bl	8011164 <prvAddCurrentTaskToDelayedList>
	}
 8010bce:	bf00      	nop
 8010bd0:	3718      	adds	r7, #24
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	200008ac 	.word	0x200008ac

08010bdc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b086      	sub	sp, #24
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d10a      	bne.n	8010c08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf6:	f383 8811 	msr	BASEPRI, r3
 8010bfa:	f3bf 8f6f 	isb	sy
 8010bfe:	f3bf 8f4f 	dsb	sy
 8010c02:	60fb      	str	r3, [r7, #12]
}
 8010c04:	bf00      	nop
 8010c06:	e7fe      	b.n	8010c06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	3318      	adds	r3, #24
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fe fd67 	bl	800f6e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c12:	4b1e      	ldr	r3, [pc, #120]	; (8010c8c <xTaskRemoveFromEventList+0xb0>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d11d      	bne.n	8010c56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	3304      	adds	r3, #4
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fe fd5e 	bl	800f6e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c28:	4b19      	ldr	r3, [pc, #100]	; (8010c90 <xTaskRemoveFromEventList+0xb4>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d903      	bls.n	8010c38 <xTaskRemoveFromEventList+0x5c>
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c34:	4a16      	ldr	r2, [pc, #88]	; (8010c90 <xTaskRemoveFromEventList+0xb4>)
 8010c36:	6013      	str	r3, [r2, #0]
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	009b      	lsls	r3, r3, #2
 8010c40:	4413      	add	r3, r2
 8010c42:	009b      	lsls	r3, r3, #2
 8010c44:	4a13      	ldr	r2, [pc, #76]	; (8010c94 <xTaskRemoveFromEventList+0xb8>)
 8010c46:	441a      	add	r2, r3
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	3304      	adds	r3, #4
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	4610      	mov	r0, r2
 8010c50:	f7fe fce9 	bl	800f626 <vListInsertEnd>
 8010c54:	e005      	b.n	8010c62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	3318      	adds	r3, #24
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	480e      	ldr	r0, [pc, #56]	; (8010c98 <xTaskRemoveFromEventList+0xbc>)
 8010c5e:	f7fe fce2 	bl	800f626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c66:	4b0d      	ldr	r3, [pc, #52]	; (8010c9c <xTaskRemoveFromEventList+0xc0>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d905      	bls.n	8010c7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010c70:	2301      	movs	r3, #1
 8010c72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010c74:	4b0a      	ldr	r3, [pc, #40]	; (8010ca0 <xTaskRemoveFromEventList+0xc4>)
 8010c76:	2201      	movs	r2, #1
 8010c78:	601a      	str	r2, [r3, #0]
 8010c7a:	e001      	b.n	8010c80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010c80:	697b      	ldr	r3, [r7, #20]
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3718      	adds	r7, #24
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	20000da8 	.word	0x20000da8
 8010c90:	20000d88 	.word	0x20000d88
 8010c94:	200008b0 	.word	0x200008b0
 8010c98:	20000d40 	.word	0x20000d40
 8010c9c:	200008ac 	.word	0x200008ac
 8010ca0:	20000d94 	.word	0x20000d94

08010ca4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b086      	sub	sp, #24
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8010cae:	4b29      	ldr	r3, [pc, #164]	; (8010d54 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d10a      	bne.n	8010ccc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8010cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cba:	f383 8811 	msr	BASEPRI, r3
 8010cbe:	f3bf 8f6f 	isb	sy
 8010cc2:	f3bf 8f4f 	dsb	sy
 8010cc6:	613b      	str	r3, [r7, #16]
}
 8010cc8:	bf00      	nop
 8010cca:	e7fe      	b.n	8010cca <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d10a      	bne.n	8010cf8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8010ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce6:	f383 8811 	msr	BASEPRI, r3
 8010cea:	f3bf 8f6f 	isb	sy
 8010cee:	f3bf 8f4f 	dsb	sy
 8010cf2:	60fb      	str	r3, [r7, #12]
}
 8010cf4:	bf00      	nop
 8010cf6:	e7fe      	b.n	8010cf6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f7fe fcf1 	bl	800f6e0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	3304      	adds	r3, #4
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7fe fcec 	bl	800f6e0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d0c:	4b12      	ldr	r3, [pc, #72]	; (8010d58 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d903      	bls.n	8010d1c <vTaskRemoveFromUnorderedEventList+0x78>
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d18:	4a0f      	ldr	r2, [pc, #60]	; (8010d58 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8010d1a:	6013      	str	r3, [r2, #0]
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d20:	4613      	mov	r3, r2
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	4413      	add	r3, r2
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	4a0c      	ldr	r2, [pc, #48]	; (8010d5c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8010d2a:	441a      	add	r2, r3
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	3304      	adds	r3, #4
 8010d30:	4619      	mov	r1, r3
 8010d32:	4610      	mov	r0, r2
 8010d34:	f7fe fc77 	bl	800f626 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d3c:	4b08      	ldr	r3, [pc, #32]	; (8010d60 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d902      	bls.n	8010d4c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8010d46:	4b07      	ldr	r3, [pc, #28]	; (8010d64 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8010d48:	2201      	movs	r2, #1
 8010d4a:	601a      	str	r2, [r3, #0]
	}
}
 8010d4c:	bf00      	nop
 8010d4e:	3718      	adds	r7, #24
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}
 8010d54:	20000da8 	.word	0x20000da8
 8010d58:	20000d88 	.word	0x20000d88
 8010d5c:	200008b0 	.word	0x200008b0
 8010d60:	200008ac 	.word	0x200008ac
 8010d64:	20000d94 	.word	0x20000d94

08010d68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b083      	sub	sp, #12
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010d70:	4b06      	ldr	r3, [pc, #24]	; (8010d8c <vTaskInternalSetTimeOutState+0x24>)
 8010d72:	681a      	ldr	r2, [r3, #0]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010d78:	4b05      	ldr	r3, [pc, #20]	; (8010d90 <vTaskInternalSetTimeOutState+0x28>)
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	605a      	str	r2, [r3, #4]
}
 8010d80:	bf00      	nop
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	20000d98 	.word	0x20000d98
 8010d90:	20000d84 	.word	0x20000d84

08010d94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b088      	sub	sp, #32
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
 8010d9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d10a      	bne.n	8010dba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da8:	f383 8811 	msr	BASEPRI, r3
 8010dac:	f3bf 8f6f 	isb	sy
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	613b      	str	r3, [r7, #16]
}
 8010db6:	bf00      	nop
 8010db8:	e7fe      	b.n	8010db8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d10a      	bne.n	8010dd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc4:	f383 8811 	msr	BASEPRI, r3
 8010dc8:	f3bf 8f6f 	isb	sy
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	60fb      	str	r3, [r7, #12]
}
 8010dd2:	bf00      	nop
 8010dd4:	e7fe      	b.n	8010dd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010dd6:	f000 feb5 	bl	8011b44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010dda:	4b1d      	ldr	r3, [pc, #116]	; (8010e50 <xTaskCheckForTimeOut+0xbc>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	69ba      	ldr	r2, [r7, #24]
 8010de6:	1ad3      	subs	r3, r2, r3
 8010de8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010df2:	d102      	bne.n	8010dfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010df4:	2300      	movs	r3, #0
 8010df6:	61fb      	str	r3, [r7, #28]
 8010df8:	e023      	b.n	8010e42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681a      	ldr	r2, [r3, #0]
 8010dfe:	4b15      	ldr	r3, [pc, #84]	; (8010e54 <xTaskCheckForTimeOut+0xc0>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d007      	beq.n	8010e16 <xTaskCheckForTimeOut+0x82>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	69ba      	ldr	r2, [r7, #24]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d302      	bcc.n	8010e16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010e10:	2301      	movs	r3, #1
 8010e12:	61fb      	str	r3, [r7, #28]
 8010e14:	e015      	b.n	8010e42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	697a      	ldr	r2, [r7, #20]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d20b      	bcs.n	8010e38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	1ad2      	subs	r2, r2, r3
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f7ff ff9b 	bl	8010d68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010e32:	2300      	movs	r3, #0
 8010e34:	61fb      	str	r3, [r7, #28]
 8010e36:	e004      	b.n	8010e42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010e42:	f000 feaf 	bl	8011ba4 <vPortExitCritical>

	return xReturn;
 8010e46:	69fb      	ldr	r3, [r7, #28]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3720      	adds	r7, #32
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	20000d84 	.word	0x20000d84
 8010e54:	20000d98 	.word	0x20000d98

08010e58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010e58:	b480      	push	{r7}
 8010e5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010e5c:	4b03      	ldr	r3, [pc, #12]	; (8010e6c <vTaskMissedYield+0x14>)
 8010e5e:	2201      	movs	r2, #1
 8010e60:	601a      	str	r2, [r3, #0]
}
 8010e62:	bf00      	nop
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr
 8010e6c:	20000d94 	.word	0x20000d94

08010e70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010e78:	f000 f852 	bl	8010f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010e7c:	4b06      	ldr	r3, [pc, #24]	; (8010e98 <prvIdleTask+0x28>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	d9f9      	bls.n	8010e78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010e84:	4b05      	ldr	r3, [pc, #20]	; (8010e9c <prvIdleTask+0x2c>)
 8010e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e8a:	601a      	str	r2, [r3, #0]
 8010e8c:	f3bf 8f4f 	dsb	sy
 8010e90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010e94:	e7f0      	b.n	8010e78 <prvIdleTask+0x8>
 8010e96:	bf00      	nop
 8010e98:	200008b0 	.word	0x200008b0
 8010e9c:	e000ed04 	.word	0xe000ed04

08010ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	607b      	str	r3, [r7, #4]
 8010eaa:	e00c      	b.n	8010ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010eac:	687a      	ldr	r2, [r7, #4]
 8010eae:	4613      	mov	r3, r2
 8010eb0:	009b      	lsls	r3, r3, #2
 8010eb2:	4413      	add	r3, r2
 8010eb4:	009b      	lsls	r3, r3, #2
 8010eb6:	4a12      	ldr	r2, [pc, #72]	; (8010f00 <prvInitialiseTaskLists+0x60>)
 8010eb8:	4413      	add	r3, r2
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7fe fb86 	bl	800f5cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	607b      	str	r3, [r7, #4]
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2b37      	cmp	r3, #55	; 0x37
 8010eca:	d9ef      	bls.n	8010eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010ecc:	480d      	ldr	r0, [pc, #52]	; (8010f04 <prvInitialiseTaskLists+0x64>)
 8010ece:	f7fe fb7d 	bl	800f5cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010ed2:	480d      	ldr	r0, [pc, #52]	; (8010f08 <prvInitialiseTaskLists+0x68>)
 8010ed4:	f7fe fb7a 	bl	800f5cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010ed8:	480c      	ldr	r0, [pc, #48]	; (8010f0c <prvInitialiseTaskLists+0x6c>)
 8010eda:	f7fe fb77 	bl	800f5cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010ede:	480c      	ldr	r0, [pc, #48]	; (8010f10 <prvInitialiseTaskLists+0x70>)
 8010ee0:	f7fe fb74 	bl	800f5cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010ee4:	480b      	ldr	r0, [pc, #44]	; (8010f14 <prvInitialiseTaskLists+0x74>)
 8010ee6:	f7fe fb71 	bl	800f5cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010eea:	4b0b      	ldr	r3, [pc, #44]	; (8010f18 <prvInitialiseTaskLists+0x78>)
 8010eec:	4a05      	ldr	r2, [pc, #20]	; (8010f04 <prvInitialiseTaskLists+0x64>)
 8010eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010ef0:	4b0a      	ldr	r3, [pc, #40]	; (8010f1c <prvInitialiseTaskLists+0x7c>)
 8010ef2:	4a05      	ldr	r2, [pc, #20]	; (8010f08 <prvInitialiseTaskLists+0x68>)
 8010ef4:	601a      	str	r2, [r3, #0]
}
 8010ef6:	bf00      	nop
 8010ef8:	3708      	adds	r7, #8
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	bf00      	nop
 8010f00:	200008b0 	.word	0x200008b0
 8010f04:	20000d10 	.word	0x20000d10
 8010f08:	20000d24 	.word	0x20000d24
 8010f0c:	20000d40 	.word	0x20000d40
 8010f10:	20000d54 	.word	0x20000d54
 8010f14:	20000d6c 	.word	0x20000d6c
 8010f18:	20000d38 	.word	0x20000d38
 8010f1c:	20000d3c 	.word	0x20000d3c

08010f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f26:	e019      	b.n	8010f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010f28:	f000 fe0c 	bl	8011b44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f2c:	4b10      	ldr	r3, [pc, #64]	; (8010f70 <prvCheckTasksWaitingTermination+0x50>)
 8010f2e:	68db      	ldr	r3, [r3, #12]
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	3304      	adds	r3, #4
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7fe fbd1 	bl	800f6e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010f3e:	4b0d      	ldr	r3, [pc, #52]	; (8010f74 <prvCheckTasksWaitingTermination+0x54>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	3b01      	subs	r3, #1
 8010f44:	4a0b      	ldr	r2, [pc, #44]	; (8010f74 <prvCheckTasksWaitingTermination+0x54>)
 8010f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010f48:	4b0b      	ldr	r3, [pc, #44]	; (8010f78 <prvCheckTasksWaitingTermination+0x58>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	3b01      	subs	r3, #1
 8010f4e:	4a0a      	ldr	r2, [pc, #40]	; (8010f78 <prvCheckTasksWaitingTermination+0x58>)
 8010f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010f52:	f000 fe27 	bl	8011ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 f810 	bl	8010f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010f5c:	4b06      	ldr	r3, [pc, #24]	; (8010f78 <prvCheckTasksWaitingTermination+0x58>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1e1      	bne.n	8010f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010f64:	bf00      	nop
 8010f66:	bf00      	nop
 8010f68:	3708      	adds	r7, #8
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	20000d54 	.word	0x20000d54
 8010f74:	20000d80 	.word	0x20000d80
 8010f78:	20000d68 	.word	0x20000d68

08010f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b084      	sub	sp, #16
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d108      	bne.n	8010fa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f92:	4618      	mov	r0, r3
 8010f94:	f000 ffc4 	bl	8011f20 <vPortFree>
				vPortFree( pxTCB );
 8010f98:	6878      	ldr	r0, [r7, #4]
 8010f9a:	f000 ffc1 	bl	8011f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010f9e:	e018      	b.n	8010fd2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d103      	bne.n	8010fb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f000 ffb8 	bl	8011f20 <vPortFree>
	}
 8010fb0:	e00f      	b.n	8010fd2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010fb8:	2b02      	cmp	r3, #2
 8010fba:	d00a      	beq.n	8010fd2 <prvDeleteTCB+0x56>
	__asm volatile
 8010fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc0:	f383 8811 	msr	BASEPRI, r3
 8010fc4:	f3bf 8f6f 	isb	sy
 8010fc8:	f3bf 8f4f 	dsb	sy
 8010fcc:	60fb      	str	r3, [r7, #12]
}
 8010fce:	bf00      	nop
 8010fd0:	e7fe      	b.n	8010fd0 <prvDeleteTCB+0x54>
	}
 8010fd2:	bf00      	nop
 8010fd4:	3710      	adds	r7, #16
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
	...

08010fdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010fe2:	4b0c      	ldr	r3, [pc, #48]	; (8011014 <prvResetNextTaskUnblockTime+0x38>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d104      	bne.n	8010ff6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010fec:	4b0a      	ldr	r3, [pc, #40]	; (8011018 <prvResetNextTaskUnblockTime+0x3c>)
 8010fee:	f04f 32ff 	mov.w	r2, #4294967295
 8010ff2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010ff4:	e008      	b.n	8011008 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ff6:	4b07      	ldr	r3, [pc, #28]	; (8011014 <prvResetNextTaskUnblockTime+0x38>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	68db      	ldr	r3, [r3, #12]
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	4a04      	ldr	r2, [pc, #16]	; (8011018 <prvResetNextTaskUnblockTime+0x3c>)
 8011006:	6013      	str	r3, [r2, #0]
}
 8011008:	bf00      	nop
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr
 8011014:	20000d38 	.word	0x20000d38
 8011018:	20000da0 	.word	0x20000da0

0801101c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011022:	4b0b      	ldr	r3, [pc, #44]	; (8011050 <xTaskGetSchedulerState+0x34>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d102      	bne.n	8011030 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801102a:	2301      	movs	r3, #1
 801102c:	607b      	str	r3, [r7, #4]
 801102e:	e008      	b.n	8011042 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011030:	4b08      	ldr	r3, [pc, #32]	; (8011054 <xTaskGetSchedulerState+0x38>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d102      	bne.n	801103e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011038:	2302      	movs	r3, #2
 801103a:	607b      	str	r3, [r7, #4]
 801103c:	e001      	b.n	8011042 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801103e:	2300      	movs	r3, #0
 8011040:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011042:	687b      	ldr	r3, [r7, #4]
	}
 8011044:	4618      	mov	r0, r3
 8011046:	370c      	adds	r7, #12
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr
 8011050:	20000d8c 	.word	0x20000d8c
 8011054:	20000da8 	.word	0x20000da8

08011058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011058:	b580      	push	{r7, lr}
 801105a:	b086      	sub	sp, #24
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011064:	2300      	movs	r3, #0
 8011066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d056      	beq.n	801111c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801106e:	4b2e      	ldr	r3, [pc, #184]	; (8011128 <xTaskPriorityDisinherit+0xd0>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	693a      	ldr	r2, [r7, #16]
 8011074:	429a      	cmp	r2, r3
 8011076:	d00a      	beq.n	801108e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107c:	f383 8811 	msr	BASEPRI, r3
 8011080:	f3bf 8f6f 	isb	sy
 8011084:	f3bf 8f4f 	dsb	sy
 8011088:	60fb      	str	r3, [r7, #12]
}
 801108a:	bf00      	nop
 801108c:	e7fe      	b.n	801108c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10a      	bne.n	80110ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801109a:	f383 8811 	msr	BASEPRI, r3
 801109e:	f3bf 8f6f 	isb	sy
 80110a2:	f3bf 8f4f 	dsb	sy
 80110a6:	60bb      	str	r3, [r7, #8]
}
 80110a8:	bf00      	nop
 80110aa:	e7fe      	b.n	80110aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110b0:	1e5a      	subs	r2, r3, #1
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110be:	429a      	cmp	r2, r3
 80110c0:	d02c      	beq.n	801111c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d128      	bne.n	801111c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	3304      	adds	r3, #4
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7fe fb06 	bl	800f6e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ec:	4b0f      	ldr	r3, [pc, #60]	; (801112c <xTaskPriorityDisinherit+0xd4>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d903      	bls.n	80110fc <xTaskPriorityDisinherit+0xa4>
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f8:	4a0c      	ldr	r2, [pc, #48]	; (801112c <xTaskPriorityDisinherit+0xd4>)
 80110fa:	6013      	str	r3, [r2, #0]
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011100:	4613      	mov	r3, r2
 8011102:	009b      	lsls	r3, r3, #2
 8011104:	4413      	add	r3, r2
 8011106:	009b      	lsls	r3, r3, #2
 8011108:	4a09      	ldr	r2, [pc, #36]	; (8011130 <xTaskPriorityDisinherit+0xd8>)
 801110a:	441a      	add	r2, r3
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	3304      	adds	r3, #4
 8011110:	4619      	mov	r1, r3
 8011112:	4610      	mov	r0, r2
 8011114:	f7fe fa87 	bl	800f626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011118:	2301      	movs	r3, #1
 801111a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801111c:	697b      	ldr	r3, [r7, #20]
	}
 801111e:	4618      	mov	r0, r3
 8011120:	3718      	adds	r7, #24
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	200008ac 	.word	0x200008ac
 801112c:	20000d88 	.word	0x20000d88
 8011130:	200008b0 	.word	0x200008b0

08011134 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8011134:	b480      	push	{r7}
 8011136:	b083      	sub	sp, #12
 8011138:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801113a:	4b09      	ldr	r3, [pc, #36]	; (8011160 <uxTaskResetEventItemValue+0x2c>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	699b      	ldr	r3, [r3, #24]
 8011140:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011142:	4b07      	ldr	r3, [pc, #28]	; (8011160 <uxTaskResetEventItemValue+0x2c>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011148:	4b05      	ldr	r3, [pc, #20]	; (8011160 <uxTaskResetEventItemValue+0x2c>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011150:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8011152:	687b      	ldr	r3, [r7, #4]
}
 8011154:	4618      	mov	r0, r3
 8011156:	370c      	adds	r7, #12
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr
 8011160:	200008ac 	.word	0x200008ac

08011164 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b084      	sub	sp, #16
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801116e:	4b21      	ldr	r3, [pc, #132]	; (80111f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011174:	4b20      	ldr	r3, [pc, #128]	; (80111f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	3304      	adds	r3, #4
 801117a:	4618      	mov	r0, r3
 801117c:	f7fe fab0 	bl	800f6e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011186:	d10a      	bne.n	801119e <prvAddCurrentTaskToDelayedList+0x3a>
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d007      	beq.n	801119e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801118e:	4b1a      	ldr	r3, [pc, #104]	; (80111f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	3304      	adds	r3, #4
 8011194:	4619      	mov	r1, r3
 8011196:	4819      	ldr	r0, [pc, #100]	; (80111fc <prvAddCurrentTaskToDelayedList+0x98>)
 8011198:	f7fe fa45 	bl	800f626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801119c:	e026      	b.n	80111ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801119e:	68fa      	ldr	r2, [r7, #12]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	4413      	add	r3, r2
 80111a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80111a6:	4b14      	ldr	r3, [pc, #80]	; (80111f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	68ba      	ldr	r2, [r7, #8]
 80111ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80111ae:	68ba      	ldr	r2, [r7, #8]
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d209      	bcs.n	80111ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80111b6:	4b12      	ldr	r3, [pc, #72]	; (8011200 <prvAddCurrentTaskToDelayedList+0x9c>)
 80111b8:	681a      	ldr	r2, [r3, #0]
 80111ba:	4b0f      	ldr	r3, [pc, #60]	; (80111f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	3304      	adds	r3, #4
 80111c0:	4619      	mov	r1, r3
 80111c2:	4610      	mov	r0, r2
 80111c4:	f7fe fa53 	bl	800f66e <vListInsert>
}
 80111c8:	e010      	b.n	80111ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80111ca:	4b0e      	ldr	r3, [pc, #56]	; (8011204 <prvAddCurrentTaskToDelayedList+0xa0>)
 80111cc:	681a      	ldr	r2, [r3, #0]
 80111ce:	4b0a      	ldr	r3, [pc, #40]	; (80111f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	3304      	adds	r3, #4
 80111d4:	4619      	mov	r1, r3
 80111d6:	4610      	mov	r0, r2
 80111d8:	f7fe fa49 	bl	800f66e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80111dc:	4b0a      	ldr	r3, [pc, #40]	; (8011208 <prvAddCurrentTaskToDelayedList+0xa4>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	68ba      	ldr	r2, [r7, #8]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d202      	bcs.n	80111ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80111e6:	4a08      	ldr	r2, [pc, #32]	; (8011208 <prvAddCurrentTaskToDelayedList+0xa4>)
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	6013      	str	r3, [r2, #0]
}
 80111ec:	bf00      	nop
 80111ee:	3710      	adds	r7, #16
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	20000d84 	.word	0x20000d84
 80111f8:	200008ac 	.word	0x200008ac
 80111fc:	20000d6c 	.word	0x20000d6c
 8011200:	20000d3c 	.word	0x20000d3c
 8011204:	20000d38 	.word	0x20000d38
 8011208:	20000da0 	.word	0x20000da0

0801120c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b08a      	sub	sp, #40	; 0x28
 8011210:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011212:	2300      	movs	r3, #0
 8011214:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011216:	f000 fb07 	bl	8011828 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801121a:	4b1c      	ldr	r3, [pc, #112]	; (801128c <xTimerCreateTimerTask+0x80>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d021      	beq.n	8011266 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011222:	2300      	movs	r3, #0
 8011224:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011226:	2300      	movs	r3, #0
 8011228:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801122a:	1d3a      	adds	r2, r7, #4
 801122c:	f107 0108 	add.w	r1, r7, #8
 8011230:	f107 030c 	add.w	r3, r7, #12
 8011234:	4618      	mov	r0, r3
 8011236:	f7fd ff43 	bl	800f0c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801123a:	6879      	ldr	r1, [r7, #4]
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	68fa      	ldr	r2, [r7, #12]
 8011240:	9202      	str	r2, [sp, #8]
 8011242:	9301      	str	r3, [sp, #4]
 8011244:	2302      	movs	r3, #2
 8011246:	9300      	str	r3, [sp, #0]
 8011248:	2300      	movs	r3, #0
 801124a:	460a      	mov	r2, r1
 801124c:	4910      	ldr	r1, [pc, #64]	; (8011290 <xTimerCreateTimerTask+0x84>)
 801124e:	4811      	ldr	r0, [pc, #68]	; (8011294 <xTimerCreateTimerTask+0x88>)
 8011250:	f7ff f816 	bl	8010280 <xTaskCreateStatic>
 8011254:	4603      	mov	r3, r0
 8011256:	4a10      	ldr	r2, [pc, #64]	; (8011298 <xTimerCreateTimerTask+0x8c>)
 8011258:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801125a:	4b0f      	ldr	r3, [pc, #60]	; (8011298 <xTimerCreateTimerTask+0x8c>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d001      	beq.n	8011266 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011262:	2301      	movs	r3, #1
 8011264:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d10a      	bne.n	8011282 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801126c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011270:	f383 8811 	msr	BASEPRI, r3
 8011274:	f3bf 8f6f 	isb	sy
 8011278:	f3bf 8f4f 	dsb	sy
 801127c:	613b      	str	r3, [r7, #16]
}
 801127e:	bf00      	nop
 8011280:	e7fe      	b.n	8011280 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011282:	697b      	ldr	r3, [r7, #20]
}
 8011284:	4618      	mov	r0, r3
 8011286:	3718      	adds	r7, #24
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	20000ddc 	.word	0x20000ddc
 8011290:	08012f90 	.word	0x08012f90
 8011294:	080113d1 	.word	0x080113d1
 8011298:	20000de0 	.word	0x20000de0

0801129c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b08a      	sub	sp, #40	; 0x28
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	60f8      	str	r0, [r7, #12]
 80112a4:	60b9      	str	r1, [r7, #8]
 80112a6:	607a      	str	r2, [r7, #4]
 80112a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80112aa:	2300      	movs	r3, #0
 80112ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d10a      	bne.n	80112ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80112b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b8:	f383 8811 	msr	BASEPRI, r3
 80112bc:	f3bf 8f6f 	isb	sy
 80112c0:	f3bf 8f4f 	dsb	sy
 80112c4:	623b      	str	r3, [r7, #32]
}
 80112c6:	bf00      	nop
 80112c8:	e7fe      	b.n	80112c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80112ca:	4b1a      	ldr	r3, [pc, #104]	; (8011334 <xTimerGenericCommand+0x98>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d02a      	beq.n	8011328 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	2b05      	cmp	r3, #5
 80112e2:	dc18      	bgt.n	8011316 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80112e4:	f7ff fe9a 	bl	801101c <xTaskGetSchedulerState>
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	d109      	bne.n	8011302 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80112ee:	4b11      	ldr	r3, [pc, #68]	; (8011334 <xTimerGenericCommand+0x98>)
 80112f0:	6818      	ldr	r0, [r3, #0]
 80112f2:	f107 0110 	add.w	r1, r7, #16
 80112f6:	2300      	movs	r3, #0
 80112f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112fa:	f7fe fb59 	bl	800f9b0 <xQueueGenericSend>
 80112fe:	6278      	str	r0, [r7, #36]	; 0x24
 8011300:	e012      	b.n	8011328 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011302:	4b0c      	ldr	r3, [pc, #48]	; (8011334 <xTimerGenericCommand+0x98>)
 8011304:	6818      	ldr	r0, [r3, #0]
 8011306:	f107 0110 	add.w	r1, r7, #16
 801130a:	2300      	movs	r3, #0
 801130c:	2200      	movs	r2, #0
 801130e:	f7fe fb4f 	bl	800f9b0 <xQueueGenericSend>
 8011312:	6278      	str	r0, [r7, #36]	; 0x24
 8011314:	e008      	b.n	8011328 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011316:	4b07      	ldr	r3, [pc, #28]	; (8011334 <xTimerGenericCommand+0x98>)
 8011318:	6818      	ldr	r0, [r3, #0]
 801131a:	f107 0110 	add.w	r1, r7, #16
 801131e:	2300      	movs	r3, #0
 8011320:	683a      	ldr	r2, [r7, #0]
 8011322:	f7fe fc43 	bl	800fbac <xQueueGenericSendFromISR>
 8011326:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801132a:	4618      	mov	r0, r3
 801132c:	3728      	adds	r7, #40	; 0x28
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	20000ddc 	.word	0x20000ddc

08011338 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b088      	sub	sp, #32
 801133c:	af02      	add	r7, sp, #8
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011342:	4b22      	ldr	r3, [pc, #136]	; (80113cc <prvProcessExpiredTimer+0x94>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	3304      	adds	r3, #4
 8011350:	4618      	mov	r0, r3
 8011352:	f7fe f9c5 	bl	800f6e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801135c:	f003 0304 	and.w	r3, r3, #4
 8011360:	2b00      	cmp	r3, #0
 8011362:	d022      	beq.n	80113aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	699a      	ldr	r2, [r3, #24]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	18d1      	adds	r1, r2, r3
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	683a      	ldr	r2, [r7, #0]
 8011370:	6978      	ldr	r0, [r7, #20]
 8011372:	f000 f8d1 	bl	8011518 <prvInsertTimerInActiveList>
 8011376:	4603      	mov	r3, r0
 8011378:	2b00      	cmp	r3, #0
 801137a:	d01f      	beq.n	80113bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801137c:	2300      	movs	r3, #0
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	2300      	movs	r3, #0
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	2100      	movs	r1, #0
 8011386:	6978      	ldr	r0, [r7, #20]
 8011388:	f7ff ff88 	bl	801129c <xTimerGenericCommand>
 801138c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d113      	bne.n	80113bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011398:	f383 8811 	msr	BASEPRI, r3
 801139c:	f3bf 8f6f 	isb	sy
 80113a0:	f3bf 8f4f 	dsb	sy
 80113a4:	60fb      	str	r3, [r7, #12]
}
 80113a6:	bf00      	nop
 80113a8:	e7fe      	b.n	80113a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113b0:	f023 0301 	bic.w	r3, r3, #1
 80113b4:	b2da      	uxtb	r2, r3
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	6a1b      	ldr	r3, [r3, #32]
 80113c0:	6978      	ldr	r0, [r7, #20]
 80113c2:	4798      	blx	r3
}
 80113c4:	bf00      	nop
 80113c6:	3718      	adds	r7, #24
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	20000dd4 	.word	0x20000dd4

080113d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80113d8:	f107 0308 	add.w	r3, r7, #8
 80113dc:	4618      	mov	r0, r3
 80113de:	f000 f857 	bl	8011490 <prvGetNextExpireTime>
 80113e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	4619      	mov	r1, r3
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f000 f803 	bl	80113f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80113ee:	f000 f8d5 	bl	801159c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80113f2:	e7f1      	b.n	80113d8 <prvTimerTask+0x8>

080113f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b084      	sub	sp, #16
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80113fe:	f7ff f97b 	bl	80106f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011402:	f107 0308 	add.w	r3, r7, #8
 8011406:	4618      	mov	r0, r3
 8011408:	f000 f866 	bl	80114d8 <prvSampleTimeNow>
 801140c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d130      	bne.n	8011476 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d10a      	bne.n	8011430 <prvProcessTimerOrBlockTask+0x3c>
 801141a:	687a      	ldr	r2, [r7, #4]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	429a      	cmp	r2, r3
 8011420:	d806      	bhi.n	8011430 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011422:	f7ff f977 	bl	8010714 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011426:	68f9      	ldr	r1, [r7, #12]
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f7ff ff85 	bl	8011338 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801142e:	e024      	b.n	801147a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d008      	beq.n	8011448 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011436:	4b13      	ldr	r3, [pc, #76]	; (8011484 <prvProcessTimerOrBlockTask+0x90>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d101      	bne.n	8011444 <prvProcessTimerOrBlockTask+0x50>
 8011440:	2301      	movs	r3, #1
 8011442:	e000      	b.n	8011446 <prvProcessTimerOrBlockTask+0x52>
 8011444:	2300      	movs	r3, #0
 8011446:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011448:	4b0f      	ldr	r3, [pc, #60]	; (8011488 <prvProcessTimerOrBlockTask+0x94>)
 801144a:	6818      	ldr	r0, [r3, #0]
 801144c:	687a      	ldr	r2, [r7, #4]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	683a      	ldr	r2, [r7, #0]
 8011454:	4619      	mov	r1, r3
 8011456:	f7fe fedf 	bl	8010218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801145a:	f7ff f95b 	bl	8010714 <xTaskResumeAll>
 801145e:	4603      	mov	r3, r0
 8011460:	2b00      	cmp	r3, #0
 8011462:	d10a      	bne.n	801147a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011464:	4b09      	ldr	r3, [pc, #36]	; (801148c <prvProcessTimerOrBlockTask+0x98>)
 8011466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801146a:	601a      	str	r2, [r3, #0]
 801146c:	f3bf 8f4f 	dsb	sy
 8011470:	f3bf 8f6f 	isb	sy
}
 8011474:	e001      	b.n	801147a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011476:	f7ff f94d 	bl	8010714 <xTaskResumeAll>
}
 801147a:	bf00      	nop
 801147c:	3710      	adds	r7, #16
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	20000dd8 	.word	0x20000dd8
 8011488:	20000ddc 	.word	0x20000ddc
 801148c:	e000ed04 	.word	0xe000ed04

08011490 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011490:	b480      	push	{r7}
 8011492:	b085      	sub	sp, #20
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011498:	4b0e      	ldr	r3, [pc, #56]	; (80114d4 <prvGetNextExpireTime+0x44>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d101      	bne.n	80114a6 <prvGetNextExpireTime+0x16>
 80114a2:	2201      	movs	r2, #1
 80114a4:	e000      	b.n	80114a8 <prvGetNextExpireTime+0x18>
 80114a6:	2200      	movs	r2, #0
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d105      	bne.n	80114c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80114b4:	4b07      	ldr	r3, [pc, #28]	; (80114d4 <prvGetNextExpireTime+0x44>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	60fb      	str	r3, [r7, #12]
 80114be:	e001      	b.n	80114c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80114c0:	2300      	movs	r3, #0
 80114c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80114c4:	68fb      	ldr	r3, [r7, #12]
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	3714      	adds	r7, #20
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	20000dd4 	.word	0x20000dd4

080114d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80114e0:	f7ff f9b6 	bl	8010850 <xTaskGetTickCount>
 80114e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80114e6:	4b0b      	ldr	r3, [pc, #44]	; (8011514 <prvSampleTimeNow+0x3c>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	68fa      	ldr	r2, [r7, #12]
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d205      	bcs.n	80114fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80114f0:	f000 f936 	bl	8011760 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2201      	movs	r2, #1
 80114f8:	601a      	str	r2, [r3, #0]
 80114fa:	e002      	b.n	8011502 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2200      	movs	r2, #0
 8011500:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011502:	4a04      	ldr	r2, [pc, #16]	; (8011514 <prvSampleTimeNow+0x3c>)
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011508:	68fb      	ldr	r3, [r7, #12]
}
 801150a:	4618      	mov	r0, r3
 801150c:	3710      	adds	r7, #16
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
 8011512:	bf00      	nop
 8011514:	20000de4 	.word	0x20000de4

08011518 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	60f8      	str	r0, [r7, #12]
 8011520:	60b9      	str	r1, [r7, #8]
 8011522:	607a      	str	r2, [r7, #4]
 8011524:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011526:	2300      	movs	r3, #0
 8011528:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	68ba      	ldr	r2, [r7, #8]
 801152e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	68fa      	ldr	r2, [r7, #12]
 8011534:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011536:	68ba      	ldr	r2, [r7, #8]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	429a      	cmp	r2, r3
 801153c:	d812      	bhi.n	8011564 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801153e:	687a      	ldr	r2, [r7, #4]
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	1ad2      	subs	r2, r2, r3
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	699b      	ldr	r3, [r3, #24]
 8011548:	429a      	cmp	r2, r3
 801154a:	d302      	bcc.n	8011552 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801154c:	2301      	movs	r3, #1
 801154e:	617b      	str	r3, [r7, #20]
 8011550:	e01b      	b.n	801158a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011552:	4b10      	ldr	r3, [pc, #64]	; (8011594 <prvInsertTimerInActiveList+0x7c>)
 8011554:	681a      	ldr	r2, [r3, #0]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	3304      	adds	r3, #4
 801155a:	4619      	mov	r1, r3
 801155c:	4610      	mov	r0, r2
 801155e:	f7fe f886 	bl	800f66e <vListInsert>
 8011562:	e012      	b.n	801158a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	429a      	cmp	r2, r3
 801156a:	d206      	bcs.n	801157a <prvInsertTimerInActiveList+0x62>
 801156c:	68ba      	ldr	r2, [r7, #8]
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	429a      	cmp	r2, r3
 8011572:	d302      	bcc.n	801157a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011574:	2301      	movs	r3, #1
 8011576:	617b      	str	r3, [r7, #20]
 8011578:	e007      	b.n	801158a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801157a:	4b07      	ldr	r3, [pc, #28]	; (8011598 <prvInsertTimerInActiveList+0x80>)
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	3304      	adds	r3, #4
 8011582:	4619      	mov	r1, r3
 8011584:	4610      	mov	r0, r2
 8011586:	f7fe f872 	bl	800f66e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801158a:	697b      	ldr	r3, [r7, #20]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3718      	adds	r7, #24
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	20000dd8 	.word	0x20000dd8
 8011598:	20000dd4 	.word	0x20000dd4

0801159c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b08e      	sub	sp, #56	; 0x38
 80115a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80115a2:	e0ca      	b.n	801173a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	da18      	bge.n	80115dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80115aa:	1d3b      	adds	r3, r7, #4
 80115ac:	3304      	adds	r3, #4
 80115ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80115b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d10a      	bne.n	80115cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80115b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ba:	f383 8811 	msr	BASEPRI, r3
 80115be:	f3bf 8f6f 	isb	sy
 80115c2:	f3bf 8f4f 	dsb	sy
 80115c6:	61fb      	str	r3, [r7, #28]
}
 80115c8:	bf00      	nop
 80115ca:	e7fe      	b.n	80115ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80115cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115d2:	6850      	ldr	r0, [r2, #4]
 80115d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115d6:	6892      	ldr	r2, [r2, #8]
 80115d8:	4611      	mov	r1, r2
 80115da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	f2c0 80aa 	blt.w	8011738 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80115e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ea:	695b      	ldr	r3, [r3, #20]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d004      	beq.n	80115fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80115f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f2:	3304      	adds	r3, #4
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7fe f873 	bl	800f6e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80115fa:	463b      	mov	r3, r7
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7ff ff6b 	bl	80114d8 <prvSampleTimeNow>
 8011602:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2b09      	cmp	r3, #9
 8011608:	f200 8097 	bhi.w	801173a <prvProcessReceivedCommands+0x19e>
 801160c:	a201      	add	r2, pc, #4	; (adr r2, 8011614 <prvProcessReceivedCommands+0x78>)
 801160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011612:	bf00      	nop
 8011614:	0801163d 	.word	0x0801163d
 8011618:	0801163d 	.word	0x0801163d
 801161c:	0801163d 	.word	0x0801163d
 8011620:	080116b1 	.word	0x080116b1
 8011624:	080116c5 	.word	0x080116c5
 8011628:	0801170f 	.word	0x0801170f
 801162c:	0801163d 	.word	0x0801163d
 8011630:	0801163d 	.word	0x0801163d
 8011634:	080116b1 	.word	0x080116b1
 8011638:	080116c5 	.word	0x080116c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011642:	f043 0301 	orr.w	r3, r3, #1
 8011646:	b2da      	uxtb	r2, r3
 8011648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801164e:	68ba      	ldr	r2, [r7, #8]
 8011650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011652:	699b      	ldr	r3, [r3, #24]
 8011654:	18d1      	adds	r1, r2, r3
 8011656:	68bb      	ldr	r3, [r7, #8]
 8011658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801165a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801165c:	f7ff ff5c 	bl	8011518 <prvInsertTimerInActiveList>
 8011660:	4603      	mov	r3, r0
 8011662:	2b00      	cmp	r3, #0
 8011664:	d069      	beq.n	801173a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011668:	6a1b      	ldr	r3, [r3, #32]
 801166a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801166c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011674:	f003 0304 	and.w	r3, r3, #4
 8011678:	2b00      	cmp	r3, #0
 801167a:	d05e      	beq.n	801173a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801167c:	68ba      	ldr	r2, [r7, #8]
 801167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011680:	699b      	ldr	r3, [r3, #24]
 8011682:	441a      	add	r2, r3
 8011684:	2300      	movs	r3, #0
 8011686:	9300      	str	r3, [sp, #0]
 8011688:	2300      	movs	r3, #0
 801168a:	2100      	movs	r1, #0
 801168c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801168e:	f7ff fe05 	bl	801129c <xTimerGenericCommand>
 8011692:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011694:	6a3b      	ldr	r3, [r7, #32]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d14f      	bne.n	801173a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801169a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801169e:	f383 8811 	msr	BASEPRI, r3
 80116a2:	f3bf 8f6f 	isb	sy
 80116a6:	f3bf 8f4f 	dsb	sy
 80116aa:	61bb      	str	r3, [r7, #24]
}
 80116ac:	bf00      	nop
 80116ae:	e7fe      	b.n	80116ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80116b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80116b6:	f023 0301 	bic.w	r3, r3, #1
 80116ba:	b2da      	uxtb	r2, r3
 80116bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80116c2:	e03a      	b.n	801173a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80116c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80116ca:	f043 0301 	orr.w	r3, r3, #1
 80116ce:	b2da      	uxtb	r2, r3
 80116d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80116d6:	68ba      	ldr	r2, [r7, #8]
 80116d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80116dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116de:	699b      	ldr	r3, [r3, #24]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d10a      	bne.n	80116fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80116e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e8:	f383 8811 	msr	BASEPRI, r3
 80116ec:	f3bf 8f6f 	isb	sy
 80116f0:	f3bf 8f4f 	dsb	sy
 80116f4:	617b      	str	r3, [r7, #20]
}
 80116f6:	bf00      	nop
 80116f8:	e7fe      	b.n	80116f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80116fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116fc:	699a      	ldr	r2, [r3, #24]
 80116fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011700:	18d1      	adds	r1, r2, r3
 8011702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011708:	f7ff ff06 	bl	8011518 <prvInsertTimerInActiveList>
					break;
 801170c:	e015      	b.n	801173a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011714:	f003 0302 	and.w	r3, r3, #2
 8011718:	2b00      	cmp	r3, #0
 801171a:	d103      	bne.n	8011724 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801171c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801171e:	f000 fbff 	bl	8011f20 <vPortFree>
 8011722:	e00a      	b.n	801173a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801172a:	f023 0301 	bic.w	r3, r3, #1
 801172e:	b2da      	uxtb	r2, r3
 8011730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011736:	e000      	b.n	801173a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011738:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801173a:	4b08      	ldr	r3, [pc, #32]	; (801175c <prvProcessReceivedCommands+0x1c0>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	1d39      	adds	r1, r7, #4
 8011740:	2200      	movs	r2, #0
 8011742:	4618      	mov	r0, r3
 8011744:	f7fe face 	bl	800fce4 <xQueueReceive>
 8011748:	4603      	mov	r3, r0
 801174a:	2b00      	cmp	r3, #0
 801174c:	f47f af2a 	bne.w	80115a4 <prvProcessReceivedCommands+0x8>
	}
}
 8011750:	bf00      	nop
 8011752:	bf00      	nop
 8011754:	3730      	adds	r7, #48	; 0x30
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
 801175a:	bf00      	nop
 801175c:	20000ddc 	.word	0x20000ddc

08011760 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b088      	sub	sp, #32
 8011764:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011766:	e048      	b.n	80117fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011768:	4b2d      	ldr	r3, [pc, #180]	; (8011820 <prvSwitchTimerLists+0xc0>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011772:	4b2b      	ldr	r3, [pc, #172]	; (8011820 <prvSwitchTimerLists+0xc0>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	3304      	adds	r3, #4
 8011780:	4618      	mov	r0, r3
 8011782:	f7fd ffad 	bl	800f6e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	6a1b      	ldr	r3, [r3, #32]
 801178a:	68f8      	ldr	r0, [r7, #12]
 801178c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011794:	f003 0304 	and.w	r3, r3, #4
 8011798:	2b00      	cmp	r3, #0
 801179a:	d02e      	beq.n	80117fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	699b      	ldr	r3, [r3, #24]
 80117a0:	693a      	ldr	r2, [r7, #16]
 80117a2:	4413      	add	r3, r2
 80117a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80117a6:	68ba      	ldr	r2, [r7, #8]
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d90e      	bls.n	80117cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	68ba      	ldr	r2, [r7, #8]
 80117b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	68fa      	ldr	r2, [r7, #12]
 80117b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80117ba:	4b19      	ldr	r3, [pc, #100]	; (8011820 <prvSwitchTimerLists+0xc0>)
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	3304      	adds	r3, #4
 80117c2:	4619      	mov	r1, r3
 80117c4:	4610      	mov	r0, r2
 80117c6:	f7fd ff52 	bl	800f66e <vListInsert>
 80117ca:	e016      	b.n	80117fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80117cc:	2300      	movs	r3, #0
 80117ce:	9300      	str	r3, [sp, #0]
 80117d0:	2300      	movs	r3, #0
 80117d2:	693a      	ldr	r2, [r7, #16]
 80117d4:	2100      	movs	r1, #0
 80117d6:	68f8      	ldr	r0, [r7, #12]
 80117d8:	f7ff fd60 	bl	801129c <xTimerGenericCommand>
 80117dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d10a      	bne.n	80117fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80117e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e8:	f383 8811 	msr	BASEPRI, r3
 80117ec:	f3bf 8f6f 	isb	sy
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	603b      	str	r3, [r7, #0]
}
 80117f6:	bf00      	nop
 80117f8:	e7fe      	b.n	80117f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80117fa:	4b09      	ldr	r3, [pc, #36]	; (8011820 <prvSwitchTimerLists+0xc0>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d1b1      	bne.n	8011768 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011804:	4b06      	ldr	r3, [pc, #24]	; (8011820 <prvSwitchTimerLists+0xc0>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801180a:	4b06      	ldr	r3, [pc, #24]	; (8011824 <prvSwitchTimerLists+0xc4>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	4a04      	ldr	r2, [pc, #16]	; (8011820 <prvSwitchTimerLists+0xc0>)
 8011810:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011812:	4a04      	ldr	r2, [pc, #16]	; (8011824 <prvSwitchTimerLists+0xc4>)
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	6013      	str	r3, [r2, #0]
}
 8011818:	bf00      	nop
 801181a:	3718      	adds	r7, #24
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	20000dd4 	.word	0x20000dd4
 8011824:	20000dd8 	.word	0x20000dd8

08011828 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801182e:	f000 f989 	bl	8011b44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011832:	4b15      	ldr	r3, [pc, #84]	; (8011888 <prvCheckForValidListAndQueue+0x60>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d120      	bne.n	801187c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801183a:	4814      	ldr	r0, [pc, #80]	; (801188c <prvCheckForValidListAndQueue+0x64>)
 801183c:	f7fd fec6 	bl	800f5cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011840:	4813      	ldr	r0, [pc, #76]	; (8011890 <prvCheckForValidListAndQueue+0x68>)
 8011842:	f7fd fec3 	bl	800f5cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011846:	4b13      	ldr	r3, [pc, #76]	; (8011894 <prvCheckForValidListAndQueue+0x6c>)
 8011848:	4a10      	ldr	r2, [pc, #64]	; (801188c <prvCheckForValidListAndQueue+0x64>)
 801184a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801184c:	4b12      	ldr	r3, [pc, #72]	; (8011898 <prvCheckForValidListAndQueue+0x70>)
 801184e:	4a10      	ldr	r2, [pc, #64]	; (8011890 <prvCheckForValidListAndQueue+0x68>)
 8011850:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011852:	2300      	movs	r3, #0
 8011854:	9300      	str	r3, [sp, #0]
 8011856:	4b11      	ldr	r3, [pc, #68]	; (801189c <prvCheckForValidListAndQueue+0x74>)
 8011858:	4a11      	ldr	r2, [pc, #68]	; (80118a0 <prvCheckForValidListAndQueue+0x78>)
 801185a:	2110      	movs	r1, #16
 801185c:	200a      	movs	r0, #10
 801185e:	f7fd ffd1 	bl	800f804 <xQueueGenericCreateStatic>
 8011862:	4603      	mov	r3, r0
 8011864:	4a08      	ldr	r2, [pc, #32]	; (8011888 <prvCheckForValidListAndQueue+0x60>)
 8011866:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011868:	4b07      	ldr	r3, [pc, #28]	; (8011888 <prvCheckForValidListAndQueue+0x60>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d005      	beq.n	801187c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011870:	4b05      	ldr	r3, [pc, #20]	; (8011888 <prvCheckForValidListAndQueue+0x60>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	490b      	ldr	r1, [pc, #44]	; (80118a4 <prvCheckForValidListAndQueue+0x7c>)
 8011876:	4618      	mov	r0, r3
 8011878:	f7fe fca4 	bl	80101c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801187c:	f000 f992 	bl	8011ba4 <vPortExitCritical>
}
 8011880:	bf00      	nop
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	20000ddc 	.word	0x20000ddc
 801188c:	20000dac 	.word	0x20000dac
 8011890:	20000dc0 	.word	0x20000dc0
 8011894:	20000dd4 	.word	0x20000dd4
 8011898:	20000dd8 	.word	0x20000dd8
 801189c:	20000e88 	.word	0x20000e88
 80118a0:	20000de8 	.word	0x20000de8
 80118a4:	08012f98 	.word	0x08012f98

080118a8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b08a      	sub	sp, #40	; 0x28
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	60f8      	str	r0, [r7, #12]
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	607a      	str	r2, [r7, #4]
 80118b4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80118b6:	f06f 0301 	mvn.w	r3, #1
 80118ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80118c8:	4b06      	ldr	r3, [pc, #24]	; (80118e4 <xTimerPendFunctionCallFromISR+0x3c>)
 80118ca:	6818      	ldr	r0, [r3, #0]
 80118cc:	f107 0114 	add.w	r1, r7, #20
 80118d0:	2300      	movs	r3, #0
 80118d2:	683a      	ldr	r2, [r7, #0]
 80118d4:	f7fe f96a 	bl	800fbac <xQueueGenericSendFromISR>
 80118d8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80118da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80118dc:	4618      	mov	r0, r3
 80118de:	3728      	adds	r7, #40	; 0x28
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	20000ddc 	.word	0x20000ddc

080118e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80118e8:	b480      	push	{r7}
 80118ea:	b085      	sub	sp, #20
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	3b04      	subs	r3, #4
 80118f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	3b04      	subs	r3, #4
 8011906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	f023 0201 	bic.w	r2, r3, #1
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	3b04      	subs	r3, #4
 8011916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011918:	4a0c      	ldr	r2, [pc, #48]	; (801194c <pxPortInitialiseStack+0x64>)
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	3b14      	subs	r3, #20
 8011922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	3b04      	subs	r3, #4
 801192e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	f06f 0202 	mvn.w	r2, #2
 8011936:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	3b20      	subs	r3, #32
 801193c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801193e:	68fb      	ldr	r3, [r7, #12]
}
 8011940:	4618      	mov	r0, r3
 8011942:	3714      	adds	r7, #20
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr
 801194c:	08011951 	.word	0x08011951

08011950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011950:	b480      	push	{r7}
 8011952:	b085      	sub	sp, #20
 8011954:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011956:	2300      	movs	r3, #0
 8011958:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801195a:	4b12      	ldr	r3, [pc, #72]	; (80119a4 <prvTaskExitError+0x54>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011962:	d00a      	beq.n	801197a <prvTaskExitError+0x2a>
	__asm volatile
 8011964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011968:	f383 8811 	msr	BASEPRI, r3
 801196c:	f3bf 8f6f 	isb	sy
 8011970:	f3bf 8f4f 	dsb	sy
 8011974:	60fb      	str	r3, [r7, #12]
}
 8011976:	bf00      	nop
 8011978:	e7fe      	b.n	8011978 <prvTaskExitError+0x28>
	__asm volatile
 801197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197e:	f383 8811 	msr	BASEPRI, r3
 8011982:	f3bf 8f6f 	isb	sy
 8011986:	f3bf 8f4f 	dsb	sy
 801198a:	60bb      	str	r3, [r7, #8]
}
 801198c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801198e:	bf00      	nop
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d0fc      	beq.n	8011990 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011996:	bf00      	nop
 8011998:	bf00      	nop
 801199a:	3714      	adds	r7, #20
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr
 80119a4:	2000011c 	.word	0x2000011c
	...

080119b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80119b0:	4b07      	ldr	r3, [pc, #28]	; (80119d0 <pxCurrentTCBConst2>)
 80119b2:	6819      	ldr	r1, [r3, #0]
 80119b4:	6808      	ldr	r0, [r1, #0]
 80119b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ba:	f380 8809 	msr	PSP, r0
 80119be:	f3bf 8f6f 	isb	sy
 80119c2:	f04f 0000 	mov.w	r0, #0
 80119c6:	f380 8811 	msr	BASEPRI, r0
 80119ca:	4770      	bx	lr
 80119cc:	f3af 8000 	nop.w

080119d0 <pxCurrentTCBConst2>:
 80119d0:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80119d4:	bf00      	nop
 80119d6:	bf00      	nop

080119d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80119d8:	4808      	ldr	r0, [pc, #32]	; (80119fc <prvPortStartFirstTask+0x24>)
 80119da:	6800      	ldr	r0, [r0, #0]
 80119dc:	6800      	ldr	r0, [r0, #0]
 80119de:	f380 8808 	msr	MSP, r0
 80119e2:	f04f 0000 	mov.w	r0, #0
 80119e6:	f380 8814 	msr	CONTROL, r0
 80119ea:	b662      	cpsie	i
 80119ec:	b661      	cpsie	f
 80119ee:	f3bf 8f4f 	dsb	sy
 80119f2:	f3bf 8f6f 	isb	sy
 80119f6:	df00      	svc	0
 80119f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80119fa:	bf00      	nop
 80119fc:	e000ed08 	.word	0xe000ed08

08011a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b086      	sub	sp, #24
 8011a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011a06:	4b46      	ldr	r3, [pc, #280]	; (8011b20 <xPortStartScheduler+0x120>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	4a46      	ldr	r2, [pc, #280]	; (8011b24 <xPortStartScheduler+0x124>)
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	d10a      	bne.n	8011a26 <xPortStartScheduler+0x26>
	__asm volatile
 8011a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a14:	f383 8811 	msr	BASEPRI, r3
 8011a18:	f3bf 8f6f 	isb	sy
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	613b      	str	r3, [r7, #16]
}
 8011a22:	bf00      	nop
 8011a24:	e7fe      	b.n	8011a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011a26:	4b3e      	ldr	r3, [pc, #248]	; (8011b20 <xPortStartScheduler+0x120>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	4a3f      	ldr	r2, [pc, #252]	; (8011b28 <xPortStartScheduler+0x128>)
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	d10a      	bne.n	8011a46 <xPortStartScheduler+0x46>
	__asm volatile
 8011a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a34:	f383 8811 	msr	BASEPRI, r3
 8011a38:	f3bf 8f6f 	isb	sy
 8011a3c:	f3bf 8f4f 	dsb	sy
 8011a40:	60fb      	str	r3, [r7, #12]
}
 8011a42:	bf00      	nop
 8011a44:	e7fe      	b.n	8011a44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011a46:	4b39      	ldr	r3, [pc, #228]	; (8011b2c <xPortStartScheduler+0x12c>)
 8011a48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	781b      	ldrb	r3, [r3, #0]
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	22ff      	movs	r2, #255	; 0xff
 8011a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	781b      	ldrb	r3, [r3, #0]
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011a60:	78fb      	ldrb	r3, [r7, #3]
 8011a62:	b2db      	uxtb	r3, r3
 8011a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011a68:	b2da      	uxtb	r2, r3
 8011a6a:	4b31      	ldr	r3, [pc, #196]	; (8011b30 <xPortStartScheduler+0x130>)
 8011a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011a6e:	4b31      	ldr	r3, [pc, #196]	; (8011b34 <xPortStartScheduler+0x134>)
 8011a70:	2207      	movs	r2, #7
 8011a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011a74:	e009      	b.n	8011a8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011a76:	4b2f      	ldr	r3, [pc, #188]	; (8011b34 <xPortStartScheduler+0x134>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	3b01      	subs	r3, #1
 8011a7c:	4a2d      	ldr	r2, [pc, #180]	; (8011b34 <xPortStartScheduler+0x134>)
 8011a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011a80:	78fb      	ldrb	r3, [r7, #3]
 8011a82:	b2db      	uxtb	r3, r3
 8011a84:	005b      	lsls	r3, r3, #1
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011a8a:	78fb      	ldrb	r3, [r7, #3]
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a92:	2b80      	cmp	r3, #128	; 0x80
 8011a94:	d0ef      	beq.n	8011a76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011a96:	4b27      	ldr	r3, [pc, #156]	; (8011b34 <xPortStartScheduler+0x134>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	f1c3 0307 	rsb	r3, r3, #7
 8011a9e:	2b04      	cmp	r3, #4
 8011aa0:	d00a      	beq.n	8011ab8 <xPortStartScheduler+0xb8>
	__asm volatile
 8011aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa6:	f383 8811 	msr	BASEPRI, r3
 8011aaa:	f3bf 8f6f 	isb	sy
 8011aae:	f3bf 8f4f 	dsb	sy
 8011ab2:	60bb      	str	r3, [r7, #8]
}
 8011ab4:	bf00      	nop
 8011ab6:	e7fe      	b.n	8011ab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011ab8:	4b1e      	ldr	r3, [pc, #120]	; (8011b34 <xPortStartScheduler+0x134>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	021b      	lsls	r3, r3, #8
 8011abe:	4a1d      	ldr	r2, [pc, #116]	; (8011b34 <xPortStartScheduler+0x134>)
 8011ac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011ac2:	4b1c      	ldr	r3, [pc, #112]	; (8011b34 <xPortStartScheduler+0x134>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011aca:	4a1a      	ldr	r2, [pc, #104]	; (8011b34 <xPortStartScheduler+0x134>)
 8011acc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	b2da      	uxtb	r2, r3
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011ad6:	4b18      	ldr	r3, [pc, #96]	; (8011b38 <xPortStartScheduler+0x138>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	4a17      	ldr	r2, [pc, #92]	; (8011b38 <xPortStartScheduler+0x138>)
 8011adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ae2:	4b15      	ldr	r3, [pc, #84]	; (8011b38 <xPortStartScheduler+0x138>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	4a14      	ldr	r2, [pc, #80]	; (8011b38 <xPortStartScheduler+0x138>)
 8011ae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011aec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011aee:	f000 f8dd 	bl	8011cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011af2:	4b12      	ldr	r3, [pc, #72]	; (8011b3c <xPortStartScheduler+0x13c>)
 8011af4:	2200      	movs	r2, #0
 8011af6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011af8:	f000 f8fc 	bl	8011cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011afc:	4b10      	ldr	r3, [pc, #64]	; (8011b40 <xPortStartScheduler+0x140>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	4a0f      	ldr	r2, [pc, #60]	; (8011b40 <xPortStartScheduler+0x140>)
 8011b02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011b06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011b08:	f7ff ff66 	bl	80119d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011b0c:	f7fe ff7c 	bl	8010a08 <vTaskSwitchContext>
	prvTaskExitError();
 8011b10:	f7ff ff1e 	bl	8011950 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011b14:	2300      	movs	r3, #0
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3718      	adds	r7, #24
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	e000ed00 	.word	0xe000ed00
 8011b24:	410fc271 	.word	0x410fc271
 8011b28:	410fc270 	.word	0x410fc270
 8011b2c:	e000e400 	.word	0xe000e400
 8011b30:	20000ed8 	.word	0x20000ed8
 8011b34:	20000edc 	.word	0x20000edc
 8011b38:	e000ed20 	.word	0xe000ed20
 8011b3c:	2000011c 	.word	0x2000011c
 8011b40:	e000ef34 	.word	0xe000ef34

08011b44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
	__asm volatile
 8011b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b4e:	f383 8811 	msr	BASEPRI, r3
 8011b52:	f3bf 8f6f 	isb	sy
 8011b56:	f3bf 8f4f 	dsb	sy
 8011b5a:	607b      	str	r3, [r7, #4]
}
 8011b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011b5e:	4b0f      	ldr	r3, [pc, #60]	; (8011b9c <vPortEnterCritical+0x58>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	3301      	adds	r3, #1
 8011b64:	4a0d      	ldr	r2, [pc, #52]	; (8011b9c <vPortEnterCritical+0x58>)
 8011b66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011b68:	4b0c      	ldr	r3, [pc, #48]	; (8011b9c <vPortEnterCritical+0x58>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d10f      	bne.n	8011b90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011b70:	4b0b      	ldr	r3, [pc, #44]	; (8011ba0 <vPortEnterCritical+0x5c>)
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d00a      	beq.n	8011b90 <vPortEnterCritical+0x4c>
	__asm volatile
 8011b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b7e:	f383 8811 	msr	BASEPRI, r3
 8011b82:	f3bf 8f6f 	isb	sy
 8011b86:	f3bf 8f4f 	dsb	sy
 8011b8a:	603b      	str	r3, [r7, #0]
}
 8011b8c:	bf00      	nop
 8011b8e:	e7fe      	b.n	8011b8e <vPortEnterCritical+0x4a>
	}
}
 8011b90:	bf00      	nop
 8011b92:	370c      	adds	r7, #12
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	2000011c 	.word	0x2000011c
 8011ba0:	e000ed04 	.word	0xe000ed04

08011ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b083      	sub	sp, #12
 8011ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011baa:	4b12      	ldr	r3, [pc, #72]	; (8011bf4 <vPortExitCritical+0x50>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d10a      	bne.n	8011bc8 <vPortExitCritical+0x24>
	__asm volatile
 8011bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb6:	f383 8811 	msr	BASEPRI, r3
 8011bba:	f3bf 8f6f 	isb	sy
 8011bbe:	f3bf 8f4f 	dsb	sy
 8011bc2:	607b      	str	r3, [r7, #4]
}
 8011bc4:	bf00      	nop
 8011bc6:	e7fe      	b.n	8011bc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011bc8:	4b0a      	ldr	r3, [pc, #40]	; (8011bf4 <vPortExitCritical+0x50>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	4a09      	ldr	r2, [pc, #36]	; (8011bf4 <vPortExitCritical+0x50>)
 8011bd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011bd2:	4b08      	ldr	r3, [pc, #32]	; (8011bf4 <vPortExitCritical+0x50>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d105      	bne.n	8011be6 <vPortExitCritical+0x42>
 8011bda:	2300      	movs	r3, #0
 8011bdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	f383 8811 	msr	BASEPRI, r3
}
 8011be4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011be6:	bf00      	nop
 8011be8:	370c      	adds	r7, #12
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop
 8011bf4:	2000011c 	.word	0x2000011c
	...

08011c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011c00:	f3ef 8009 	mrs	r0, PSP
 8011c04:	f3bf 8f6f 	isb	sy
 8011c08:	4b15      	ldr	r3, [pc, #84]	; (8011c60 <pxCurrentTCBConst>)
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	f01e 0f10 	tst.w	lr, #16
 8011c10:	bf08      	it	eq
 8011c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c1a:	6010      	str	r0, [r2, #0]
 8011c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011c24:	f380 8811 	msr	BASEPRI, r0
 8011c28:	f3bf 8f4f 	dsb	sy
 8011c2c:	f3bf 8f6f 	isb	sy
 8011c30:	f7fe feea 	bl	8010a08 <vTaskSwitchContext>
 8011c34:	f04f 0000 	mov.w	r0, #0
 8011c38:	f380 8811 	msr	BASEPRI, r0
 8011c3c:	bc09      	pop	{r0, r3}
 8011c3e:	6819      	ldr	r1, [r3, #0]
 8011c40:	6808      	ldr	r0, [r1, #0]
 8011c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c46:	f01e 0f10 	tst.w	lr, #16
 8011c4a:	bf08      	it	eq
 8011c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011c50:	f380 8809 	msr	PSP, r0
 8011c54:	f3bf 8f6f 	isb	sy
 8011c58:	4770      	bx	lr
 8011c5a:	bf00      	nop
 8011c5c:	f3af 8000 	nop.w

08011c60 <pxCurrentTCBConst>:
 8011c60:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011c64:	bf00      	nop
 8011c66:	bf00      	nop

08011c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8011c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c72:	f383 8811 	msr	BASEPRI, r3
 8011c76:	f3bf 8f6f 	isb	sy
 8011c7a:	f3bf 8f4f 	dsb	sy
 8011c7e:	607b      	str	r3, [r7, #4]
}
 8011c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011c82:	f7fe fe07 	bl	8010894 <xTaskIncrementTick>
 8011c86:	4603      	mov	r3, r0
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d003      	beq.n	8011c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011c8c:	4b06      	ldr	r3, [pc, #24]	; (8011ca8 <xPortSysTickHandler+0x40>)
 8011c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c92:	601a      	str	r2, [r3, #0]
 8011c94:	2300      	movs	r3, #0
 8011c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	f383 8811 	msr	BASEPRI, r3
}
 8011c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011ca0:	bf00      	nop
 8011ca2:	3708      	adds	r7, #8
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bd80      	pop	{r7, pc}
 8011ca8:	e000ed04 	.word	0xe000ed04

08011cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011cac:	b480      	push	{r7}
 8011cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011cb0:	4b0b      	ldr	r3, [pc, #44]	; (8011ce0 <vPortSetupTimerInterrupt+0x34>)
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011cb6:	4b0b      	ldr	r3, [pc, #44]	; (8011ce4 <vPortSetupTimerInterrupt+0x38>)
 8011cb8:	2200      	movs	r2, #0
 8011cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011cbc:	4b0a      	ldr	r3, [pc, #40]	; (8011ce8 <vPortSetupTimerInterrupt+0x3c>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	4a0a      	ldr	r2, [pc, #40]	; (8011cec <vPortSetupTimerInterrupt+0x40>)
 8011cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8011cc6:	099b      	lsrs	r3, r3, #6
 8011cc8:	4a09      	ldr	r2, [pc, #36]	; (8011cf0 <vPortSetupTimerInterrupt+0x44>)
 8011cca:	3b01      	subs	r3, #1
 8011ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011cce:	4b04      	ldr	r3, [pc, #16]	; (8011ce0 <vPortSetupTimerInterrupt+0x34>)
 8011cd0:	2207      	movs	r2, #7
 8011cd2:	601a      	str	r2, [r3, #0]
}
 8011cd4:	bf00      	nop
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop
 8011ce0:	e000e010 	.word	0xe000e010
 8011ce4:	e000e018 	.word	0xe000e018
 8011ce8:	20000000 	.word	0x20000000
 8011cec:	10624dd3 	.word	0x10624dd3
 8011cf0:	e000e014 	.word	0xe000e014

08011cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011d04 <vPortEnableVFP+0x10>
 8011cf8:	6801      	ldr	r1, [r0, #0]
 8011cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011cfe:	6001      	str	r1, [r0, #0]
 8011d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011d02:	bf00      	nop
 8011d04:	e000ed88 	.word	0xe000ed88

08011d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011d08:	b480      	push	{r7}
 8011d0a:	b085      	sub	sp, #20
 8011d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011d0e:	f3ef 8305 	mrs	r3, IPSR
 8011d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2b0f      	cmp	r3, #15
 8011d18:	d914      	bls.n	8011d44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011d1a:	4a17      	ldr	r2, [pc, #92]	; (8011d78 <vPortValidateInterruptPriority+0x70>)
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	4413      	add	r3, r2
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011d24:	4b15      	ldr	r3, [pc, #84]	; (8011d7c <vPortValidateInterruptPriority+0x74>)
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	7afa      	ldrb	r2, [r7, #11]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d20a      	bcs.n	8011d44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d32:	f383 8811 	msr	BASEPRI, r3
 8011d36:	f3bf 8f6f 	isb	sy
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	607b      	str	r3, [r7, #4]
}
 8011d40:	bf00      	nop
 8011d42:	e7fe      	b.n	8011d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011d44:	4b0e      	ldr	r3, [pc, #56]	; (8011d80 <vPortValidateInterruptPriority+0x78>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011d4c:	4b0d      	ldr	r3, [pc, #52]	; (8011d84 <vPortValidateInterruptPriority+0x7c>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d90a      	bls.n	8011d6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d58:	f383 8811 	msr	BASEPRI, r3
 8011d5c:	f3bf 8f6f 	isb	sy
 8011d60:	f3bf 8f4f 	dsb	sy
 8011d64:	603b      	str	r3, [r7, #0]
}
 8011d66:	bf00      	nop
 8011d68:	e7fe      	b.n	8011d68 <vPortValidateInterruptPriority+0x60>
	}
 8011d6a:	bf00      	nop
 8011d6c:	3714      	adds	r7, #20
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop
 8011d78:	e000e3f0 	.word	0xe000e3f0
 8011d7c:	20000ed8 	.word	0x20000ed8
 8011d80:	e000ed0c 	.word	0xe000ed0c
 8011d84:	20000edc 	.word	0x20000edc

08011d88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b08a      	sub	sp, #40	; 0x28
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011d90:	2300      	movs	r3, #0
 8011d92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011d94:	f7fe fcb0 	bl	80106f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011d98:	4b5b      	ldr	r3, [pc, #364]	; (8011f08 <pvPortMalloc+0x180>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d101      	bne.n	8011da4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011da0:	f000 f920 	bl	8011fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011da4:	4b59      	ldr	r3, [pc, #356]	; (8011f0c <pvPortMalloc+0x184>)
 8011da6:	681a      	ldr	r2, [r3, #0]
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	4013      	ands	r3, r2
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	f040 8093 	bne.w	8011ed8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d01d      	beq.n	8011df4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011db8:	2208      	movs	r2, #8
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	4413      	add	r3, r2
 8011dbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	f003 0307 	and.w	r3, r3, #7
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d014      	beq.n	8011df4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f023 0307 	bic.w	r3, r3, #7
 8011dd0:	3308      	adds	r3, #8
 8011dd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f003 0307 	and.w	r3, r3, #7
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d00a      	beq.n	8011df4 <pvPortMalloc+0x6c>
	__asm volatile
 8011dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de2:	f383 8811 	msr	BASEPRI, r3
 8011de6:	f3bf 8f6f 	isb	sy
 8011dea:	f3bf 8f4f 	dsb	sy
 8011dee:	617b      	str	r3, [r7, #20]
}
 8011df0:	bf00      	nop
 8011df2:	e7fe      	b.n	8011df2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d06e      	beq.n	8011ed8 <pvPortMalloc+0x150>
 8011dfa:	4b45      	ldr	r3, [pc, #276]	; (8011f10 <pvPortMalloc+0x188>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	687a      	ldr	r2, [r7, #4]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d869      	bhi.n	8011ed8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011e04:	4b43      	ldr	r3, [pc, #268]	; (8011f14 <pvPortMalloc+0x18c>)
 8011e06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011e08:	4b42      	ldr	r3, [pc, #264]	; (8011f14 <pvPortMalloc+0x18c>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011e0e:	e004      	b.n	8011e1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d903      	bls.n	8011e2c <pvPortMalloc+0xa4>
 8011e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d1f1      	bne.n	8011e10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011e2c:	4b36      	ldr	r3, [pc, #216]	; (8011f08 <pvPortMalloc+0x180>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d050      	beq.n	8011ed8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011e36:	6a3b      	ldr	r3, [r7, #32]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	2208      	movs	r2, #8
 8011e3c:	4413      	add	r3, r2
 8011e3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e42:	681a      	ldr	r2, [r3, #0]
 8011e44:	6a3b      	ldr	r3, [r7, #32]
 8011e46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4a:	685a      	ldr	r2, [r3, #4]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	1ad2      	subs	r2, r2, r3
 8011e50:	2308      	movs	r3, #8
 8011e52:	005b      	lsls	r3, r3, #1
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d91f      	bls.n	8011e98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	4413      	add	r3, r2
 8011e5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e60:	69bb      	ldr	r3, [r7, #24]
 8011e62:	f003 0307 	and.w	r3, r3, #7
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00a      	beq.n	8011e80 <pvPortMalloc+0xf8>
	__asm volatile
 8011e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6e:	f383 8811 	msr	BASEPRI, r3
 8011e72:	f3bf 8f6f 	isb	sy
 8011e76:	f3bf 8f4f 	dsb	sy
 8011e7a:	613b      	str	r3, [r7, #16]
}
 8011e7c:	bf00      	nop
 8011e7e:	e7fe      	b.n	8011e7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e82:	685a      	ldr	r2, [r3, #4]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	1ad2      	subs	r2, r2, r3
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011e92:	69b8      	ldr	r0, [r7, #24]
 8011e94:	f000 f908 	bl	80120a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011e98:	4b1d      	ldr	r3, [pc, #116]	; (8011f10 <pvPortMalloc+0x188>)
 8011e9a:	681a      	ldr	r2, [r3, #0]
 8011e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	1ad3      	subs	r3, r2, r3
 8011ea2:	4a1b      	ldr	r2, [pc, #108]	; (8011f10 <pvPortMalloc+0x188>)
 8011ea4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011ea6:	4b1a      	ldr	r3, [pc, #104]	; (8011f10 <pvPortMalloc+0x188>)
 8011ea8:	681a      	ldr	r2, [r3, #0]
 8011eaa:	4b1b      	ldr	r3, [pc, #108]	; (8011f18 <pvPortMalloc+0x190>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d203      	bcs.n	8011eba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011eb2:	4b17      	ldr	r3, [pc, #92]	; (8011f10 <pvPortMalloc+0x188>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	4a18      	ldr	r2, [pc, #96]	; (8011f18 <pvPortMalloc+0x190>)
 8011eb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ebc:	685a      	ldr	r2, [r3, #4]
 8011ebe:	4b13      	ldr	r3, [pc, #76]	; (8011f0c <pvPortMalloc+0x184>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	431a      	orrs	r2, r3
 8011ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eca:	2200      	movs	r2, #0
 8011ecc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011ece:	4b13      	ldr	r3, [pc, #76]	; (8011f1c <pvPortMalloc+0x194>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	4a11      	ldr	r2, [pc, #68]	; (8011f1c <pvPortMalloc+0x194>)
 8011ed6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011ed8:	f7fe fc1c 	bl	8010714 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	f003 0307 	and.w	r3, r3, #7
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d00a      	beq.n	8011efc <pvPortMalloc+0x174>
	__asm volatile
 8011ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eea:	f383 8811 	msr	BASEPRI, r3
 8011eee:	f3bf 8f6f 	isb	sy
 8011ef2:	f3bf 8f4f 	dsb	sy
 8011ef6:	60fb      	str	r3, [r7, #12]
}
 8011ef8:	bf00      	nop
 8011efa:	e7fe      	b.n	8011efa <pvPortMalloc+0x172>
	return pvReturn;
 8011efc:	69fb      	ldr	r3, [r7, #28]
}
 8011efe:	4618      	mov	r0, r3
 8011f00:	3728      	adds	r7, #40	; 0x28
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bd80      	pop	{r7, pc}
 8011f06:	bf00      	nop
 8011f08:	20001aa0 	.word	0x20001aa0
 8011f0c:	20001ab4 	.word	0x20001ab4
 8011f10:	20001aa4 	.word	0x20001aa4
 8011f14:	20001a98 	.word	0x20001a98
 8011f18:	20001aa8 	.word	0x20001aa8
 8011f1c:	20001aac 	.word	0x20001aac

08011f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b086      	sub	sp, #24
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d04d      	beq.n	8011fce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011f32:	2308      	movs	r3, #8
 8011f34:	425b      	negs	r3, r3
 8011f36:	697a      	ldr	r2, [r7, #20]
 8011f38:	4413      	add	r3, r2
 8011f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	685a      	ldr	r2, [r3, #4]
 8011f44:	4b24      	ldr	r3, [pc, #144]	; (8011fd8 <vPortFree+0xb8>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4013      	ands	r3, r2
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d10a      	bne.n	8011f64 <vPortFree+0x44>
	__asm volatile
 8011f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f52:	f383 8811 	msr	BASEPRI, r3
 8011f56:	f3bf 8f6f 	isb	sy
 8011f5a:	f3bf 8f4f 	dsb	sy
 8011f5e:	60fb      	str	r3, [r7, #12]
}
 8011f60:	bf00      	nop
 8011f62:	e7fe      	b.n	8011f62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d00a      	beq.n	8011f82 <vPortFree+0x62>
	__asm volatile
 8011f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f70:	f383 8811 	msr	BASEPRI, r3
 8011f74:	f3bf 8f6f 	isb	sy
 8011f78:	f3bf 8f4f 	dsb	sy
 8011f7c:	60bb      	str	r3, [r7, #8]
}
 8011f7e:	bf00      	nop
 8011f80:	e7fe      	b.n	8011f80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	685a      	ldr	r2, [r3, #4]
 8011f86:	4b14      	ldr	r3, [pc, #80]	; (8011fd8 <vPortFree+0xb8>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4013      	ands	r3, r2
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d01e      	beq.n	8011fce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d11a      	bne.n	8011fce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	685a      	ldr	r2, [r3, #4]
 8011f9c:	4b0e      	ldr	r3, [pc, #56]	; (8011fd8 <vPortFree+0xb8>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	43db      	mvns	r3, r3
 8011fa2:	401a      	ands	r2, r3
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011fa8:	f7fe fba6 	bl	80106f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	685a      	ldr	r2, [r3, #4]
 8011fb0:	4b0a      	ldr	r3, [pc, #40]	; (8011fdc <vPortFree+0xbc>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4413      	add	r3, r2
 8011fb6:	4a09      	ldr	r2, [pc, #36]	; (8011fdc <vPortFree+0xbc>)
 8011fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011fba:	6938      	ldr	r0, [r7, #16]
 8011fbc:	f000 f874 	bl	80120a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011fc0:	4b07      	ldr	r3, [pc, #28]	; (8011fe0 <vPortFree+0xc0>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	4a06      	ldr	r2, [pc, #24]	; (8011fe0 <vPortFree+0xc0>)
 8011fc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011fca:	f7fe fba3 	bl	8010714 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011fce:	bf00      	nop
 8011fd0:	3718      	adds	r7, #24
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	20001ab4 	.word	0x20001ab4
 8011fdc:	20001aa4 	.word	0x20001aa4
 8011fe0:	20001ab0 	.word	0x20001ab0

08011fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	b085      	sub	sp, #20
 8011fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011fea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ff0:	4b27      	ldr	r3, [pc, #156]	; (8012090 <prvHeapInit+0xac>)
 8011ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	f003 0307 	and.w	r3, r3, #7
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d00c      	beq.n	8012018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	3307      	adds	r3, #7
 8012002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f023 0307 	bic.w	r3, r3, #7
 801200a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801200c:	68ba      	ldr	r2, [r7, #8]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	1ad3      	subs	r3, r2, r3
 8012012:	4a1f      	ldr	r2, [pc, #124]	; (8012090 <prvHeapInit+0xac>)
 8012014:	4413      	add	r3, r2
 8012016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801201c:	4a1d      	ldr	r2, [pc, #116]	; (8012094 <prvHeapInit+0xb0>)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012022:	4b1c      	ldr	r3, [pc, #112]	; (8012094 <prvHeapInit+0xb0>)
 8012024:	2200      	movs	r2, #0
 8012026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	68ba      	ldr	r2, [r7, #8]
 801202c:	4413      	add	r3, r2
 801202e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012030:	2208      	movs	r2, #8
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	1a9b      	subs	r3, r3, r2
 8012036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	f023 0307 	bic.w	r3, r3, #7
 801203e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	4a15      	ldr	r2, [pc, #84]	; (8012098 <prvHeapInit+0xb4>)
 8012044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012046:	4b14      	ldr	r3, [pc, #80]	; (8012098 <prvHeapInit+0xb4>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	2200      	movs	r2, #0
 801204c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801204e:	4b12      	ldr	r3, [pc, #72]	; (8012098 <prvHeapInit+0xb4>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	2200      	movs	r2, #0
 8012054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	68fa      	ldr	r2, [r7, #12]
 801205e:	1ad2      	subs	r2, r2, r3
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012064:	4b0c      	ldr	r3, [pc, #48]	; (8012098 <prvHeapInit+0xb4>)
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	4a0a      	ldr	r2, [pc, #40]	; (801209c <prvHeapInit+0xb8>)
 8012072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	685b      	ldr	r3, [r3, #4]
 8012078:	4a09      	ldr	r2, [pc, #36]	; (80120a0 <prvHeapInit+0xbc>)
 801207a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801207c:	4b09      	ldr	r3, [pc, #36]	; (80120a4 <prvHeapInit+0xc0>)
 801207e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012082:	601a      	str	r2, [r3, #0]
}
 8012084:	bf00      	nop
 8012086:	3714      	adds	r7, #20
 8012088:	46bd      	mov	sp, r7
 801208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208e:	4770      	bx	lr
 8012090:	20000ee0 	.word	0x20000ee0
 8012094:	20001a98 	.word	0x20001a98
 8012098:	20001aa0 	.word	0x20001aa0
 801209c:	20001aa8 	.word	0x20001aa8
 80120a0:	20001aa4 	.word	0x20001aa4
 80120a4:	20001ab4 	.word	0x20001ab4

080120a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80120a8:	b480      	push	{r7}
 80120aa:	b085      	sub	sp, #20
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80120b0:	4b28      	ldr	r3, [pc, #160]	; (8012154 <prvInsertBlockIntoFreeList+0xac>)
 80120b2:	60fb      	str	r3, [r7, #12]
 80120b4:	e002      	b.n	80120bc <prvInsertBlockIntoFreeList+0x14>
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	60fb      	str	r3, [r7, #12]
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	687a      	ldr	r2, [r7, #4]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d8f7      	bhi.n	80120b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	68ba      	ldr	r2, [r7, #8]
 80120d0:	4413      	add	r3, r2
 80120d2:	687a      	ldr	r2, [r7, #4]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d108      	bne.n	80120ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	685a      	ldr	r2, [r3, #4]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	441a      	add	r2, r3
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	68ba      	ldr	r2, [r7, #8]
 80120f4:	441a      	add	r2, r3
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d118      	bne.n	8012130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	4b15      	ldr	r3, [pc, #84]	; (8012158 <prvInsertBlockIntoFreeList+0xb0>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	429a      	cmp	r2, r3
 8012108:	d00d      	beq.n	8012126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	685a      	ldr	r2, [r3, #4]
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	441a      	add	r2, r3
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	681a      	ldr	r2, [r3, #0]
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	601a      	str	r2, [r3, #0]
 8012124:	e008      	b.n	8012138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012126:	4b0c      	ldr	r3, [pc, #48]	; (8012158 <prvInsertBlockIntoFreeList+0xb0>)
 8012128:	681a      	ldr	r2, [r3, #0]
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	601a      	str	r2, [r3, #0]
 801212e:	e003      	b.n	8012138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	681a      	ldr	r2, [r3, #0]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012138:	68fa      	ldr	r2, [r7, #12]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	429a      	cmp	r2, r3
 801213e:	d002      	beq.n	8012146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	687a      	ldr	r2, [r7, #4]
 8012144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012146:	bf00      	nop
 8012148:	3714      	adds	r7, #20
 801214a:	46bd      	mov	sp, r7
 801214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012150:	4770      	bx	lr
 8012152:	bf00      	nop
 8012154:	20001a98 	.word	0x20001a98
 8012158:	20001aa0 	.word	0x20001aa0

0801215c <InitFastTask>:
//extern osEventFlagsId_t fastTaskEventHandle;

static osEventFlagsId_t *myEvHdl = NULL;

void InitFastTask(osEventFlagsId_t *fTEvHnd)
{
 801215c:	b480      	push	{r7}
 801215e:	b083      	sub	sp, #12
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
	myEvHdl = fTEvHnd;
 8012164:	4a04      	ldr	r2, [pc, #16]	; (8012178 <InitFastTask+0x1c>)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6013      	str	r3, [r2, #0]

}
 801216a:	bf00      	nop
 801216c:	370c      	adds	r7, #12
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr
 8012176:	bf00      	nop
 8012178:	20001ab8 	.word	0x20001ab8

0801217c <StartFastTask>:

void StartFastTask(void *argument)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b084      	sub	sp, #16
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
	uint32_t tim=0;
 8012184:	2300      	movs	r3, #0
 8012186:	60fb      	str	r3, [r7, #12]
	while(!myEvHdl)
 8012188:	bf00      	nop
 801218a:	4b11      	ldr	r3, [pc, #68]	; (80121d0 <StartFastTask+0x54>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d0fb      	beq.n	801218a <StartFastTask+0xe>
		;
	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait (*myEvHdl , FAST_TASK_EVENT, 0, 15);
 8012192:	4b0f      	ldr	r3, [pc, #60]	; (80121d0 <StartFastTask+0x54>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	6818      	ldr	r0, [r3, #0]
 8012198:	230f      	movs	r3, #15
 801219a:	2200      	movs	r2, #0
 801219c:	2101      	movs	r1, #1
 801219e:	f7fc fddd 	bl	800ed5c <osEventFlagsWait>
	    osEventFlagsClear (*myEvHdl , FAST_TASK_EVENT);
 80121a2:	4b0b      	ldr	r3, [pc, #44]	; (80121d0 <StartFastTask+0x54>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2101      	movs	r1, #1
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7fc fda4 	bl	800ecf8 <osEventFlagsClear>
		tim++;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	3301      	adds	r3, #1
 80121b4:	60fb      	str	r3, [r7, #12]
		if(tim >= FAST_TO_NORMAL_TASK){
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	2b09      	cmp	r3, #9
 80121ba:	d9ea      	bls.n	8012192 <StartFastTask+0x16>
			tim= 0;
 80121bc:	2300      	movs	r3, #0
 80121be:	60fb      	str	r3, [r7, #12]
			osEventFlagsSet(*myEvHdl, NORMAL_TASK_EVENT);
 80121c0:	4b03      	ldr	r3, [pc, #12]	; (80121d0 <StartFastTask+0x54>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2102      	movs	r1, #2
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7fc fd51 	bl	800ec70 <osEventFlagsSet>
		osEventFlagsWait (*myEvHdl , FAST_TASK_EVENT, 0, 15);
 80121ce:	e7e0      	b.n	8012192 <StartFastTask+0x16>
 80121d0:	20001ab8 	.word	0x20001ab8

080121d4 <InitNormalTask>:
#include "normalTask.h"

static osEventFlagsId_t *myEvHdl = NULL;

void InitNormalTask(osEventFlagsId_t *fTEvHnd)
{
 80121d4:	b480      	push	{r7}
 80121d6:	b083      	sub	sp, #12
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
	myEvHdl = fTEvHnd;
 80121dc:	4a04      	ldr	r2, [pc, #16]	; (80121f0 <InitNormalTask+0x1c>)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6013      	str	r3, [r2, #0]
}
 80121e2:	bf00      	nop
 80121e4:	370c      	adds	r7, #12
 80121e6:	46bd      	mov	sp, r7
 80121e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ec:	4770      	bx	lr
 80121ee:	bf00      	nop
 80121f0:	20001abc 	.word	0x20001abc

080121f4 <StartNormalTask>:

void StartNormalTask(void *argument)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
	uint32_t tim=0;
 80121fc:	2300      	movs	r3, #0
 80121fe:	60fb      	str	r3, [r7, #12]
	while(!myEvHdl)
 8012200:	bf00      	nop
 8012202:	4b11      	ldr	r3, [pc, #68]	; (8012248 <StartNormalTask+0x54>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0fb      	beq.n	8012202 <StartNormalTask+0xe>
		;
	/* Infinite loop */
	for(;;)
	{
	    osEventFlagsWait (*myEvHdl , NORMAL_TASK_EVENT, 0, 150);
 801220a:	4b0f      	ldr	r3, [pc, #60]	; (8012248 <StartNormalTask+0x54>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	6818      	ldr	r0, [r3, #0]
 8012210:	2396      	movs	r3, #150	; 0x96
 8012212:	2200      	movs	r2, #0
 8012214:	2102      	movs	r1, #2
 8012216:	f7fc fda1 	bl	800ed5c <osEventFlagsWait>
	    osEventFlagsClear (*myEvHdl , NORMAL_TASK_EVENT);
 801221a:	4b0b      	ldr	r3, [pc, #44]	; (8012248 <StartNormalTask+0x54>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2102      	movs	r1, #2
 8012222:	4618      	mov	r0, r3
 8012224:	f7fc fd68 	bl	800ecf8 <osEventFlagsClear>
		tim++;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	3301      	adds	r3, #1
 801222c:	60fb      	str	r3, [r7, #12]
		if(tim >= NORMAL_TO_SLOW_TASK){
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	2b09      	cmp	r3, #9
 8012232:	d9ea      	bls.n	801220a <StartNormalTask+0x16>
			tim= 0;
 8012234:	2300      	movs	r3, #0
 8012236:	60fb      	str	r3, [r7, #12]
			osEventFlagsSet(*myEvHdl, SLOW_TASK_EVENT);
 8012238:	4b03      	ldr	r3, [pc, #12]	; (8012248 <StartNormalTask+0x54>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2104      	movs	r1, #4
 8012240:	4618      	mov	r0, r3
 8012242:	f7fc fd15 	bl	800ec70 <osEventFlagsSet>
	    osEventFlagsWait (*myEvHdl , NORMAL_TASK_EVENT, 0, 150);
 8012246:	e7e0      	b.n	801220a <StartNormalTask+0x16>
 8012248:	20001abc 	.word	0x20001abc

0801224c <InitSlowTask>:
#include "slowTask.h"

static osEventFlagsId_t *myEvHdl = NULL;

void InitSlowTask(osEventFlagsId_t *fTEvHnd)
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
	myEvHdl = fTEvHnd;
 8012254:	4a04      	ldr	r2, [pc, #16]	; (8012268 <InitSlowTask+0x1c>)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6013      	str	r3, [r2, #0]
}
 801225a:	bf00      	nop
 801225c:	370c      	adds	r7, #12
 801225e:	46bd      	mov	sp, r7
 8012260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012264:	4770      	bx	lr
 8012266:	bf00      	nop
 8012268:	20001ac0 	.word	0x20001ac0

0801226c <StartSlowTask>:


void StartSlowTask(void *argument)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
	while(!myEvHdl)
 8012274:	bf00      	nop
 8012276:	4b0c      	ldr	r3, [pc, #48]	; (80122a8 <StartSlowTask+0x3c>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d0fb      	beq.n	8012276 <StartSlowTask+0xa>
		;
	/* Infinite loop */
	for(;;)
	{
	    osEventFlagsWait (*myEvHdl , SLOW_TASK_EVENT, 0, 1500);
 801227e:	4b0a      	ldr	r3, [pc, #40]	; (80122a8 <StartSlowTask+0x3c>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	6818      	ldr	r0, [r3, #0]
 8012284:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8012288:	2200      	movs	r2, #0
 801228a:	2104      	movs	r1, #4
 801228c:	f7fc fd66 	bl	800ed5c <osEventFlagsWait>
	    osEventFlagsClear (*myEvHdl , SLOW_TASK_EVENT);
 8012290:	4b05      	ldr	r3, [pc, #20]	; (80122a8 <StartSlowTask+0x3c>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	2104      	movs	r1, #4
 8012298:	4618      	mov	r0, r3
 801229a:	f7fc fd2d 	bl	800ecf8 <osEventFlagsClear>

		HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
 801229e:	2104      	movs	r1, #4
 80122a0:	4802      	ldr	r0, [pc, #8]	; (80122ac <StartSlowTask+0x40>)
 80122a2:	f7f1 fa3b 	bl	800371c <HAL_GPIO_TogglePin>
	    osEventFlagsWait (*myEvHdl , SLOW_TASK_EVENT, 0, 1500);
 80122a6:	e7ea      	b.n	801227e <StartSlowTask+0x12>
 80122a8:	20001ac0 	.word	0x20001ac0
 80122ac:	48001400 	.word	0x48001400

080122b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80122b4:	2200      	movs	r2, #0
 80122b6:	4912      	ldr	r1, [pc, #72]	; (8012300 <MX_USB_DEVICE_Init+0x50>)
 80122b8:	4812      	ldr	r0, [pc, #72]	; (8012304 <MX_USB_DEVICE_Init+0x54>)
 80122ba:	f7fb f937 	bl	800d52c <USBD_Init>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d001      	beq.n	80122c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80122c4:	f7ee ffc8 	bl	8001258 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80122c8:	490f      	ldr	r1, [pc, #60]	; (8012308 <MX_USB_DEVICE_Init+0x58>)
 80122ca:	480e      	ldr	r0, [pc, #56]	; (8012304 <MX_USB_DEVICE_Init+0x54>)
 80122cc:	f7fb f95e 	bl	800d58c <USBD_RegisterClass>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d001      	beq.n	80122da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80122d6:	f7ee ffbf 	bl	8001258 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80122da:	490c      	ldr	r1, [pc, #48]	; (801230c <MX_USB_DEVICE_Init+0x5c>)
 80122dc:	4809      	ldr	r0, [pc, #36]	; (8012304 <MX_USB_DEVICE_Init+0x54>)
 80122de:	f7fb f8af 	bl	800d440 <USBD_CDC_RegisterInterface>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d001      	beq.n	80122ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80122e8:	f7ee ffb6 	bl	8001258 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80122ec:	4805      	ldr	r0, [pc, #20]	; (8012304 <MX_USB_DEVICE_Init+0x54>)
 80122ee:	f7fb f974 	bl	800d5da <USBD_Start>
 80122f2:	4603      	mov	r3, r0
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d001      	beq.n	80122fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80122f8:	f7ee ffae 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80122fc:	bf00      	nop
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	20000134 	.word	0x20000134
 8012304:	20002e44 	.word	0x20002e44
 8012308:	20000018 	.word	0x20000018
 801230c:	20000120 	.word	0x20000120

08012310 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012314:	2200      	movs	r2, #0
 8012316:	4905      	ldr	r1, [pc, #20]	; (801232c <CDC_Init_FS+0x1c>)
 8012318:	4805      	ldr	r0, [pc, #20]	; (8012330 <CDC_Init_FS+0x20>)
 801231a:	f7fb f8a6 	bl	800d46a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801231e:	4905      	ldr	r1, [pc, #20]	; (8012334 <CDC_Init_FS+0x24>)
 8012320:	4803      	ldr	r0, [pc, #12]	; (8012330 <CDC_Init_FS+0x20>)
 8012322:	f7fb f8c0 	bl	800d4a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012326:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012328:	4618      	mov	r0, r3
 801232a:	bd80      	pop	{r7, pc}
 801232c:	20003914 	.word	0x20003914
 8012330:	20002e44 	.word	0x20002e44
 8012334:	20003114 	.word	0x20003114

08012338 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012338:	b480      	push	{r7}
 801233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801233c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801233e:	4618      	mov	r0, r3
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr

08012348 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012348:	b480      	push	{r7}
 801234a:	b083      	sub	sp, #12
 801234c:	af00      	add	r7, sp, #0
 801234e:	4603      	mov	r3, r0
 8012350:	6039      	str	r1, [r7, #0]
 8012352:	71fb      	strb	r3, [r7, #7]
 8012354:	4613      	mov	r3, r2
 8012356:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012358:	79fb      	ldrb	r3, [r7, #7]
 801235a:	2b23      	cmp	r3, #35	; 0x23
 801235c:	d84a      	bhi.n	80123f4 <CDC_Control_FS+0xac>
 801235e:	a201      	add	r2, pc, #4	; (adr r2, 8012364 <CDC_Control_FS+0x1c>)
 8012360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012364:	080123f5 	.word	0x080123f5
 8012368:	080123f5 	.word	0x080123f5
 801236c:	080123f5 	.word	0x080123f5
 8012370:	080123f5 	.word	0x080123f5
 8012374:	080123f5 	.word	0x080123f5
 8012378:	080123f5 	.word	0x080123f5
 801237c:	080123f5 	.word	0x080123f5
 8012380:	080123f5 	.word	0x080123f5
 8012384:	080123f5 	.word	0x080123f5
 8012388:	080123f5 	.word	0x080123f5
 801238c:	080123f5 	.word	0x080123f5
 8012390:	080123f5 	.word	0x080123f5
 8012394:	080123f5 	.word	0x080123f5
 8012398:	080123f5 	.word	0x080123f5
 801239c:	080123f5 	.word	0x080123f5
 80123a0:	080123f5 	.word	0x080123f5
 80123a4:	080123f5 	.word	0x080123f5
 80123a8:	080123f5 	.word	0x080123f5
 80123ac:	080123f5 	.word	0x080123f5
 80123b0:	080123f5 	.word	0x080123f5
 80123b4:	080123f5 	.word	0x080123f5
 80123b8:	080123f5 	.word	0x080123f5
 80123bc:	080123f5 	.word	0x080123f5
 80123c0:	080123f5 	.word	0x080123f5
 80123c4:	080123f5 	.word	0x080123f5
 80123c8:	080123f5 	.word	0x080123f5
 80123cc:	080123f5 	.word	0x080123f5
 80123d0:	080123f5 	.word	0x080123f5
 80123d4:	080123f5 	.word	0x080123f5
 80123d8:	080123f5 	.word	0x080123f5
 80123dc:	080123f5 	.word	0x080123f5
 80123e0:	080123f5 	.word	0x080123f5
 80123e4:	080123f5 	.word	0x080123f5
 80123e8:	080123f5 	.word	0x080123f5
 80123ec:	080123f5 	.word	0x080123f5
 80123f0:	080123f5 	.word	0x080123f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80123f4:	bf00      	nop
  }

  return (USBD_OK);
 80123f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	370c      	adds	r7, #12
 80123fc:	46bd      	mov	sp, r7
 80123fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012402:	4770      	bx	lr

08012404 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
 801240c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801240e:	6879      	ldr	r1, [r7, #4]
 8012410:	4805      	ldr	r0, [pc, #20]	; (8012428 <CDC_Receive_FS+0x24>)
 8012412:	f7fb f848 	bl	800d4a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012416:	4804      	ldr	r0, [pc, #16]	; (8012428 <CDC_Receive_FS+0x24>)
 8012418:	f7fb f85e 	bl	800d4d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801241c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801241e:	4618      	mov	r0, r3
 8012420:	3708      	adds	r7, #8
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	20002e44 	.word	0x20002e44

0801242c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801242c:	b480      	push	{r7}
 801242e:	b087      	sub	sp, #28
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	4613      	mov	r3, r2
 8012438:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801243a:	2300      	movs	r3, #0
 801243c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801243e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012442:	4618      	mov	r0, r3
 8012444:	371c      	adds	r7, #28
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr
	...

08012450 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012450:	b480      	push	{r7}
 8012452:	b083      	sub	sp, #12
 8012454:	af00      	add	r7, sp, #0
 8012456:	4603      	mov	r3, r0
 8012458:	6039      	str	r1, [r7, #0]
 801245a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	2212      	movs	r2, #18
 8012460:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012462:	4b03      	ldr	r3, [pc, #12]	; (8012470 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012464:	4618      	mov	r0, r3
 8012466:	370c      	adds	r7, #12
 8012468:	46bd      	mov	sp, r7
 801246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246e:	4770      	bx	lr
 8012470:	20000154 	.word	0x20000154

08012474 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012474:	b480      	push	{r7}
 8012476:	b083      	sub	sp, #12
 8012478:	af00      	add	r7, sp, #0
 801247a:	4603      	mov	r3, r0
 801247c:	6039      	str	r1, [r7, #0]
 801247e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	2204      	movs	r2, #4
 8012484:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012486:	4b03      	ldr	r3, [pc, #12]	; (8012494 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012488:	4618      	mov	r0, r3
 801248a:	370c      	adds	r7, #12
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr
 8012494:	20000174 	.word	0x20000174

08012498 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	4603      	mov	r3, r0
 80124a0:	6039      	str	r1, [r7, #0]
 80124a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80124a4:	79fb      	ldrb	r3, [r7, #7]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d105      	bne.n	80124b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80124aa:	683a      	ldr	r2, [r7, #0]
 80124ac:	4907      	ldr	r1, [pc, #28]	; (80124cc <USBD_FS_ProductStrDescriptor+0x34>)
 80124ae:	4808      	ldr	r0, [pc, #32]	; (80124d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80124b0:	f7fc f8ef 	bl	800e692 <USBD_GetString>
 80124b4:	e004      	b.n	80124c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80124b6:	683a      	ldr	r2, [r7, #0]
 80124b8:	4904      	ldr	r1, [pc, #16]	; (80124cc <USBD_FS_ProductStrDescriptor+0x34>)
 80124ba:	4805      	ldr	r0, [pc, #20]	; (80124d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80124bc:	f7fc f8e9 	bl	800e692 <USBD_GetString>
  }
  return USBD_StrDesc;
 80124c0:	4b02      	ldr	r3, [pc, #8]	; (80124cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	3708      	adds	r7, #8
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	20004114 	.word	0x20004114
 80124d0:	08012fa0 	.word	0x08012fa0

080124d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	4603      	mov	r3, r0
 80124dc:	6039      	str	r1, [r7, #0]
 80124de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80124e0:	683a      	ldr	r2, [r7, #0]
 80124e2:	4904      	ldr	r1, [pc, #16]	; (80124f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80124e4:	4804      	ldr	r0, [pc, #16]	; (80124f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80124e6:	f7fc f8d4 	bl	800e692 <USBD_GetString>
  return USBD_StrDesc;
 80124ea:	4b02      	ldr	r3, [pc, #8]	; (80124f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80124ec:	4618      	mov	r0, r3
 80124ee:	3708      	adds	r7, #8
 80124f0:	46bd      	mov	sp, r7
 80124f2:	bd80      	pop	{r7, pc}
 80124f4:	20004114 	.word	0x20004114
 80124f8:	08012fb8 	.word	0x08012fb8

080124fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	af00      	add	r7, sp, #0
 8012502:	4603      	mov	r3, r0
 8012504:	6039      	str	r1, [r7, #0]
 8012506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	221a      	movs	r2, #26
 801250c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801250e:	f000 f855 	bl	80125bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012512:	4b02      	ldr	r3, [pc, #8]	; (801251c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012514:	4618      	mov	r0, r3
 8012516:	3708      	adds	r7, #8
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	20000178 	.word	0x20000178

08012520 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	4603      	mov	r3, r0
 8012528:	6039      	str	r1, [r7, #0]
 801252a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801252c:	79fb      	ldrb	r3, [r7, #7]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d105      	bne.n	801253e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012532:	683a      	ldr	r2, [r7, #0]
 8012534:	4907      	ldr	r1, [pc, #28]	; (8012554 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012536:	4808      	ldr	r0, [pc, #32]	; (8012558 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012538:	f7fc f8ab 	bl	800e692 <USBD_GetString>
 801253c:	e004      	b.n	8012548 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801253e:	683a      	ldr	r2, [r7, #0]
 8012540:	4904      	ldr	r1, [pc, #16]	; (8012554 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012542:	4805      	ldr	r0, [pc, #20]	; (8012558 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012544:	f7fc f8a5 	bl	800e692 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012548:	4b02      	ldr	r3, [pc, #8]	; (8012554 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801254a:	4618      	mov	r0, r3
 801254c:	3708      	adds	r7, #8
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
 8012552:	bf00      	nop
 8012554:	20004114 	.word	0x20004114
 8012558:	08012fcc 	.word	0x08012fcc

0801255c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b082      	sub	sp, #8
 8012560:	af00      	add	r7, sp, #0
 8012562:	4603      	mov	r3, r0
 8012564:	6039      	str	r1, [r7, #0]
 8012566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012568:	79fb      	ldrb	r3, [r7, #7]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d105      	bne.n	801257a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801256e:	683a      	ldr	r2, [r7, #0]
 8012570:	4907      	ldr	r1, [pc, #28]	; (8012590 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012572:	4808      	ldr	r0, [pc, #32]	; (8012594 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012574:	f7fc f88d 	bl	800e692 <USBD_GetString>
 8012578:	e004      	b.n	8012584 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801257a:	683a      	ldr	r2, [r7, #0]
 801257c:	4904      	ldr	r1, [pc, #16]	; (8012590 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801257e:	4805      	ldr	r0, [pc, #20]	; (8012594 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012580:	f7fc f887 	bl	800e692 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012584:	4b02      	ldr	r3, [pc, #8]	; (8012590 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012586:	4618      	mov	r0, r3
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	20004114 	.word	0x20004114
 8012594:	08012fd8 	.word	0x08012fd8

08012598 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012598:	b480      	push	{r7}
 801259a:	b083      	sub	sp, #12
 801259c:	af00      	add	r7, sp, #0
 801259e:	4603      	mov	r3, r0
 80125a0:	6039      	str	r1, [r7, #0]
 80125a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	220c      	movs	r2, #12
 80125a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80125aa:	4b03      	ldr	r3, [pc, #12]	; (80125b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	370c      	adds	r7, #12
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr
 80125b8:	20000168 	.word	0x20000168

080125bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b084      	sub	sp, #16
 80125c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80125c2:	4b0f      	ldr	r3, [pc, #60]	; (8012600 <Get_SerialNum+0x44>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80125c8:	4b0e      	ldr	r3, [pc, #56]	; (8012604 <Get_SerialNum+0x48>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80125ce:	4b0e      	ldr	r3, [pc, #56]	; (8012608 <Get_SerialNum+0x4c>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80125d4:	68fa      	ldr	r2, [r7, #12]
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	4413      	add	r3, r2
 80125da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d009      	beq.n	80125f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80125e2:	2208      	movs	r2, #8
 80125e4:	4909      	ldr	r1, [pc, #36]	; (801260c <Get_SerialNum+0x50>)
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f000 f814 	bl	8012614 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80125ec:	2204      	movs	r2, #4
 80125ee:	4908      	ldr	r1, [pc, #32]	; (8012610 <Get_SerialNum+0x54>)
 80125f0:	68b8      	ldr	r0, [r7, #8]
 80125f2:	f000 f80f 	bl	8012614 <IntToUnicode>
  }
}
 80125f6:	bf00      	nop
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	1fff7590 	.word	0x1fff7590
 8012604:	1fff7594 	.word	0x1fff7594
 8012608:	1fff7598 	.word	0x1fff7598
 801260c:	2000017a 	.word	0x2000017a
 8012610:	2000018a 	.word	0x2000018a

08012614 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012614:	b480      	push	{r7}
 8012616:	b087      	sub	sp, #28
 8012618:	af00      	add	r7, sp, #0
 801261a:	60f8      	str	r0, [r7, #12]
 801261c:	60b9      	str	r1, [r7, #8]
 801261e:	4613      	mov	r3, r2
 8012620:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012622:	2300      	movs	r3, #0
 8012624:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012626:	2300      	movs	r3, #0
 8012628:	75fb      	strb	r3, [r7, #23]
 801262a:	e027      	b.n	801267c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	0f1b      	lsrs	r3, r3, #28
 8012630:	2b09      	cmp	r3, #9
 8012632:	d80b      	bhi.n	801264c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	0f1b      	lsrs	r3, r3, #28
 8012638:	b2da      	uxtb	r2, r3
 801263a:	7dfb      	ldrb	r3, [r7, #23]
 801263c:	005b      	lsls	r3, r3, #1
 801263e:	4619      	mov	r1, r3
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	440b      	add	r3, r1
 8012644:	3230      	adds	r2, #48	; 0x30
 8012646:	b2d2      	uxtb	r2, r2
 8012648:	701a      	strb	r2, [r3, #0]
 801264a:	e00a      	b.n	8012662 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	0f1b      	lsrs	r3, r3, #28
 8012650:	b2da      	uxtb	r2, r3
 8012652:	7dfb      	ldrb	r3, [r7, #23]
 8012654:	005b      	lsls	r3, r3, #1
 8012656:	4619      	mov	r1, r3
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	440b      	add	r3, r1
 801265c:	3237      	adds	r2, #55	; 0x37
 801265e:	b2d2      	uxtb	r2, r2
 8012660:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	011b      	lsls	r3, r3, #4
 8012666:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012668:	7dfb      	ldrb	r3, [r7, #23]
 801266a:	005b      	lsls	r3, r3, #1
 801266c:	3301      	adds	r3, #1
 801266e:	68ba      	ldr	r2, [r7, #8]
 8012670:	4413      	add	r3, r2
 8012672:	2200      	movs	r2, #0
 8012674:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012676:	7dfb      	ldrb	r3, [r7, #23]
 8012678:	3301      	adds	r3, #1
 801267a:	75fb      	strb	r3, [r7, #23]
 801267c:	7dfa      	ldrb	r2, [r7, #23]
 801267e:	79fb      	ldrb	r3, [r7, #7]
 8012680:	429a      	cmp	r2, r3
 8012682:	d3d3      	bcc.n	801262c <IntToUnicode+0x18>
  }
}
 8012684:	bf00      	nop
 8012686:	bf00      	nop
 8012688:	371c      	adds	r7, #28
 801268a:	46bd      	mov	sp, r7
 801268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012690:	4770      	bx	lr
	...

08012694 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b08a      	sub	sp, #40	; 0x28
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801269c:	f107 0314 	add.w	r3, r7, #20
 80126a0:	2200      	movs	r2, #0
 80126a2:	601a      	str	r2, [r3, #0]
 80126a4:	605a      	str	r2, [r3, #4]
 80126a6:	609a      	str	r2, [r3, #8]
 80126a8:	60da      	str	r2, [r3, #12]
 80126aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80126b4:	d14e      	bne.n	8012754 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80126b6:	4b29      	ldr	r3, [pc, #164]	; (801275c <HAL_PCD_MspInit+0xc8>)
 80126b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126ba:	4a28      	ldr	r2, [pc, #160]	; (801275c <HAL_PCD_MspInit+0xc8>)
 80126bc:	f043 0301 	orr.w	r3, r3, #1
 80126c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80126c2:	4b26      	ldr	r3, [pc, #152]	; (801275c <HAL_PCD_MspInit+0xc8>)
 80126c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126c6:	f003 0301 	and.w	r3, r3, #1
 80126ca:	613b      	str	r3, [r7, #16]
 80126cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 80126ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80126d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80126d4:	2302      	movs	r3, #2
 80126d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126d8:	2300      	movs	r3, #0
 80126da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80126dc:	2303      	movs	r3, #3
 80126de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80126e0:	230a      	movs	r3, #10
 80126e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80126e4:	f107 0314 	add.w	r3, r7, #20
 80126e8:	4619      	mov	r1, r3
 80126ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80126ee:	f7f0 fe53 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80126f2:	4b1a      	ldr	r3, [pc, #104]	; (801275c <HAL_PCD_MspInit+0xc8>)
 80126f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126f6:	4a19      	ldr	r2, [pc, #100]	; (801275c <HAL_PCD_MspInit+0xc8>)
 80126f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80126fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80126fe:	4b17      	ldr	r3, [pc, #92]	; (801275c <HAL_PCD_MspInit+0xc8>)
 8012700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012706:	60fb      	str	r3, [r7, #12]
 8012708:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801270a:	4b14      	ldr	r3, [pc, #80]	; (801275c <HAL_PCD_MspInit+0xc8>)
 801270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012712:	2b00      	cmp	r3, #0
 8012714:	d114      	bne.n	8012740 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012716:	4b11      	ldr	r3, [pc, #68]	; (801275c <HAL_PCD_MspInit+0xc8>)
 8012718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801271a:	4a10      	ldr	r2, [pc, #64]	; (801275c <HAL_PCD_MspInit+0xc8>)
 801271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012720:	6593      	str	r3, [r2, #88]	; 0x58
 8012722:	4b0e      	ldr	r3, [pc, #56]	; (801275c <HAL_PCD_MspInit+0xc8>)
 8012724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801272a:	60bb      	str	r3, [r7, #8]
 801272c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 801272e:	f7f2 faa9 	bl	8004c84 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8012732:	4b0a      	ldr	r3, [pc, #40]	; (801275c <HAL_PCD_MspInit+0xc8>)
 8012734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012736:	4a09      	ldr	r2, [pc, #36]	; (801275c <HAL_PCD_MspInit+0xc8>)
 8012738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801273c:	6593      	str	r3, [r2, #88]	; 0x58
 801273e:	e001      	b.n	8012744 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8012740:	f7f2 faa0 	bl	8004c84 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8012744:	2200      	movs	r2, #0
 8012746:	2105      	movs	r1, #5
 8012748:	2043      	movs	r0, #67	; 0x43
 801274a:	f7f0 fa15 	bl	8002b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801274e:	2043      	movs	r0, #67	; 0x43
 8012750:	f7f0 fa2e 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012754:	bf00      	nop
 8012756:	3728      	adds	r7, #40	; 0x28
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}
 801275c:	40021000 	.word	0x40021000

08012760 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012774:	4619      	mov	r1, r3
 8012776:	4610      	mov	r0, r2
 8012778:	f7fa ff7a 	bl	800d670 <USBD_LL_SetupStage>
}
 801277c:	bf00      	nop
 801277e:	3708      	adds	r7, #8
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	460b      	mov	r3, r1
 801278e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012796:	78fa      	ldrb	r2, [r7, #3]
 8012798:	6879      	ldr	r1, [r7, #4]
 801279a:	4613      	mov	r3, r2
 801279c:	00db      	lsls	r3, r3, #3
 801279e:	1a9b      	subs	r3, r3, r2
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	440b      	add	r3, r1
 80127a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80127a8:	681a      	ldr	r2, [r3, #0]
 80127aa:	78fb      	ldrb	r3, [r7, #3]
 80127ac:	4619      	mov	r1, r3
 80127ae:	f7fa ffb4 	bl	800d71a <USBD_LL_DataOutStage>
}
 80127b2:	bf00      	nop
 80127b4:	3708      	adds	r7, #8
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}

080127ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127ba:	b580      	push	{r7, lr}
 80127bc:	b082      	sub	sp, #8
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
 80127c2:	460b      	mov	r3, r1
 80127c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80127cc:	78fa      	ldrb	r2, [r7, #3]
 80127ce:	6879      	ldr	r1, [r7, #4]
 80127d0:	4613      	mov	r3, r2
 80127d2:	00db      	lsls	r3, r3, #3
 80127d4:	1a9b      	subs	r3, r3, r2
 80127d6:	009b      	lsls	r3, r3, #2
 80127d8:	440b      	add	r3, r1
 80127da:	3348      	adds	r3, #72	; 0x48
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	78fb      	ldrb	r3, [r7, #3]
 80127e0:	4619      	mov	r1, r3
 80127e2:	f7fa fffd 	bl	800d7e0 <USBD_LL_DataInStage>
}
 80127e6:	bf00      	nop
 80127e8:	3708      	adds	r7, #8
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}

080127ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127ee:	b580      	push	{r7, lr}
 80127f0:	b082      	sub	sp, #8
 80127f2:	af00      	add	r7, sp, #0
 80127f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7fb f911 	bl	800da24 <USBD_LL_SOF>
}
 8012802:	bf00      	nop
 8012804:	3708      	adds	r7, #8
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}

0801280a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801280a:	b580      	push	{r7, lr}
 801280c:	b084      	sub	sp, #16
 801280e:	af00      	add	r7, sp, #0
 8012810:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012812:	2301      	movs	r3, #1
 8012814:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	68db      	ldr	r3, [r3, #12]
 801281a:	2b02      	cmp	r3, #2
 801281c:	d001      	beq.n	8012822 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801281e:	f7ee fd1b 	bl	8001258 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012828:	7bfa      	ldrb	r2, [r7, #15]
 801282a:	4611      	mov	r1, r2
 801282c:	4618      	mov	r0, r3
 801282e:	f7fb f8bb 	bl	800d9a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012838:	4618      	mov	r0, r3
 801283a:	f7fb f867 	bl	800d90c <USBD_LL_Reset>
}
 801283e:	bf00      	nop
 8012840:	3710      	adds	r7, #16
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
	...

08012848 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b082      	sub	sp, #8
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	687a      	ldr	r2, [r7, #4]
 801285c:	6812      	ldr	r2, [r2, #0]
 801285e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012862:	f043 0301 	orr.w	r3, r3, #1
 8012866:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801286e:	4618      	mov	r0, r3
 8012870:	f7fb f8aa 	bl	800d9c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6a1b      	ldr	r3, [r3, #32]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d005      	beq.n	8012888 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801287c:	4b04      	ldr	r3, [pc, #16]	; (8012890 <HAL_PCD_SuspendCallback+0x48>)
 801287e:	691b      	ldr	r3, [r3, #16]
 8012880:	4a03      	ldr	r2, [pc, #12]	; (8012890 <HAL_PCD_SuspendCallback+0x48>)
 8012882:	f043 0306 	orr.w	r3, r3, #6
 8012886:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012888:	bf00      	nop
 801288a:	3708      	adds	r7, #8
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	e000ed00 	.word	0xe000ed00

08012894 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	687a      	ldr	r2, [r7, #4]
 80128a8:	6812      	ldr	r2, [r2, #0]
 80128aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80128ae:	f023 0301 	bic.w	r3, r3, #1
 80128b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6a1b      	ldr	r3, [r3, #32]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d007      	beq.n	80128cc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80128bc:	4b08      	ldr	r3, [pc, #32]	; (80128e0 <HAL_PCD_ResumeCallback+0x4c>)
 80128be:	691b      	ldr	r3, [r3, #16]
 80128c0:	4a07      	ldr	r2, [pc, #28]	; (80128e0 <HAL_PCD_ResumeCallback+0x4c>)
 80128c2:	f023 0306 	bic.w	r3, r3, #6
 80128c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80128c8:	f000 faf4 	bl	8012eb4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7fb f88e 	bl	800d9f4 <USBD_LL_Resume>
}
 80128d8:	bf00      	nop
 80128da:	3708      	adds	r7, #8
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	e000ed00 	.word	0xe000ed00

080128e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	460b      	mov	r3, r1
 80128ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128f6:	78fa      	ldrb	r2, [r7, #3]
 80128f8:	4611      	mov	r1, r2
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fb f8da 	bl	800dab4 <USBD_LL_IsoOUTIncomplete>
}
 8012900:	bf00      	nop
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}

08012908 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	460b      	mov	r3, r1
 8012912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801291a:	78fa      	ldrb	r2, [r7, #3]
 801291c:	4611      	mov	r1, r2
 801291e:	4618      	mov	r0, r3
 8012920:	f7fb f8a2 	bl	800da68 <USBD_LL_IsoINIncomplete>
}
 8012924:	bf00      	nop
 8012926:	3708      	adds	r7, #8
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801293a:	4618      	mov	r0, r3
 801293c:	f7fb f8e0 	bl	800db00 <USBD_LL_DevConnected>
}
 8012940:	bf00      	nop
 8012942:	3708      	adds	r7, #8
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012956:	4618      	mov	r0, r3
 8012958:	f7fb f8dd 	bl	800db16 <USBD_LL_DevDisconnected>
}
 801295c:	bf00      	nop
 801295e:	3708      	adds	r7, #8
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d139      	bne.n	80129e8 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012974:	4a1f      	ldr	r2, [pc, #124]	; (80129f4 <USBD_LL_Init+0x90>)
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	4a1d      	ldr	r2, [pc, #116]	; (80129f4 <USBD_LL_Init+0x90>)
 8012980:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012984:	4b1b      	ldr	r3, [pc, #108]	; (80129f4 <USBD_LL_Init+0x90>)
 8012986:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801298a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801298c:	4b19      	ldr	r3, [pc, #100]	; (80129f4 <USBD_LL_Init+0x90>)
 801298e:	2206      	movs	r2, #6
 8012990:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012992:	4b18      	ldr	r3, [pc, #96]	; (80129f4 <USBD_LL_Init+0x90>)
 8012994:	2202      	movs	r2, #2
 8012996:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012998:	4b16      	ldr	r3, [pc, #88]	; (80129f4 <USBD_LL_Init+0x90>)
 801299a:	2200      	movs	r2, #0
 801299c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801299e:	4b15      	ldr	r3, [pc, #84]	; (80129f4 <USBD_LL_Init+0x90>)
 80129a0:	2200      	movs	r2, #0
 80129a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80129a4:	4b13      	ldr	r3, [pc, #76]	; (80129f4 <USBD_LL_Init+0x90>)
 80129a6:	2200      	movs	r2, #0
 80129a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80129aa:	4b12      	ldr	r3, [pc, #72]	; (80129f4 <USBD_LL_Init+0x90>)
 80129ac:	2201      	movs	r2, #1
 80129ae:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80129b0:	4b10      	ldr	r3, [pc, #64]	; (80129f4 <USBD_LL_Init+0x90>)
 80129b2:	2200      	movs	r2, #0
 80129b4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80129b6:	4b0f      	ldr	r3, [pc, #60]	; (80129f4 <USBD_LL_Init+0x90>)
 80129b8:	2200      	movs	r2, #0
 80129ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80129bc:	480d      	ldr	r0, [pc, #52]	; (80129f4 <USBD_LL_Init+0x90>)
 80129be:	f7f0 ffed 	bl	800399c <HAL_PCD_Init>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d001      	beq.n	80129cc <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80129c8:	f7ee fc46 	bl	8001258 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80129cc:	2180      	movs	r1, #128	; 0x80
 80129ce:	4809      	ldr	r0, [pc, #36]	; (80129f4 <USBD_LL_Init+0x90>)
 80129d0:	f7f2 f84f 	bl	8004a72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80129d4:	2240      	movs	r2, #64	; 0x40
 80129d6:	2100      	movs	r1, #0
 80129d8:	4806      	ldr	r0, [pc, #24]	; (80129f4 <USBD_LL_Init+0x90>)
 80129da:	f7f2 f803 	bl	80049e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80129de:	2280      	movs	r2, #128	; 0x80
 80129e0:	2101      	movs	r1, #1
 80129e2:	4804      	ldr	r0, [pc, #16]	; (80129f4 <USBD_LL_Init+0x90>)
 80129e4:	f7f1 fffe 	bl	80049e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	20004314 	.word	0x20004314

080129f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b084      	sub	sp, #16
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a00:	2300      	movs	r3, #0
 8012a02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a04:	2300      	movs	r3, #0
 8012a06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7f1 f8e8 	bl	8003be4 <HAL_PCD_Start>
 8012a14:	4603      	mov	r3, r0
 8012a16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012a18:	7bbb      	ldrb	r3, [r7, #14]
 8012a1a:	2b03      	cmp	r3, #3
 8012a1c:	d816      	bhi.n	8012a4c <USBD_LL_Start+0x54>
 8012a1e:	a201      	add	r2, pc, #4	; (adr r2, 8012a24 <USBD_LL_Start+0x2c>)
 8012a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a24:	08012a35 	.word	0x08012a35
 8012a28:	08012a3b 	.word	0x08012a3b
 8012a2c:	08012a41 	.word	0x08012a41
 8012a30:	08012a47 	.word	0x08012a47
    case HAL_OK :
      usb_status = USBD_OK;
 8012a34:	2300      	movs	r3, #0
 8012a36:	73fb      	strb	r3, [r7, #15]
    break;
 8012a38:	e00b      	b.n	8012a52 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012a3a:	2303      	movs	r3, #3
 8012a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8012a3e:	e008      	b.n	8012a52 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012a40:	2301      	movs	r3, #1
 8012a42:	73fb      	strb	r3, [r7, #15]
    break;
 8012a44:	e005      	b.n	8012a52 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012a46:	2303      	movs	r3, #3
 8012a48:	73fb      	strb	r3, [r7, #15]
    break;
 8012a4a:	e002      	b.n	8012a52 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8012a4c:	2303      	movs	r3, #3
 8012a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8012a50:	bf00      	nop
  }
  return usb_status;
 8012a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3710      	adds	r7, #16
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}

08012a5c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	4608      	mov	r0, r1
 8012a66:	4611      	mov	r1, r2
 8012a68:	461a      	mov	r2, r3
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	70fb      	strb	r3, [r7, #3]
 8012a6e:	460b      	mov	r3, r1
 8012a70:	70bb      	strb	r3, [r7, #2]
 8012a72:	4613      	mov	r3, r2
 8012a74:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a76:	2300      	movs	r3, #0
 8012a78:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012a84:	78bb      	ldrb	r3, [r7, #2]
 8012a86:	883a      	ldrh	r2, [r7, #0]
 8012a88:	78f9      	ldrb	r1, [r7, #3]
 8012a8a:	f7f1 fca3 	bl	80043d4 <HAL_PCD_EP_Open>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012a92:	7bbb      	ldrb	r3, [r7, #14]
 8012a94:	2b03      	cmp	r3, #3
 8012a96:	d817      	bhi.n	8012ac8 <USBD_LL_OpenEP+0x6c>
 8012a98:	a201      	add	r2, pc, #4	; (adr r2, 8012aa0 <USBD_LL_OpenEP+0x44>)
 8012a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a9e:	bf00      	nop
 8012aa0:	08012ab1 	.word	0x08012ab1
 8012aa4:	08012ab7 	.word	0x08012ab7
 8012aa8:	08012abd 	.word	0x08012abd
 8012aac:	08012ac3 	.word	0x08012ac3
    case HAL_OK :
      usb_status = USBD_OK;
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8012ab4:	e00b      	b.n	8012ace <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012ab6:	2303      	movs	r3, #3
 8012ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8012aba:	e008      	b.n	8012ace <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012abc:	2301      	movs	r3, #1
 8012abe:	73fb      	strb	r3, [r7, #15]
    break;
 8012ac0:	e005      	b.n	8012ace <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012ac2:	2303      	movs	r3, #3
 8012ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8012ac6:	e002      	b.n	8012ace <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8012ac8:	2303      	movs	r3, #3
 8012aca:	73fb      	strb	r3, [r7, #15]
    break;
 8012acc:	bf00      	nop
  }
  return usb_status;
 8012ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3710      	adds	r7, #16
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b084      	sub	sp, #16
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	460b      	mov	r3, r1
 8012ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012af2:	78fa      	ldrb	r2, [r7, #3]
 8012af4:	4611      	mov	r1, r2
 8012af6:	4618      	mov	r0, r3
 8012af8:	f7f1 fcd4 	bl	80044a4 <HAL_PCD_EP_Close>
 8012afc:	4603      	mov	r3, r0
 8012afe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012b00:	7bbb      	ldrb	r3, [r7, #14]
 8012b02:	2b03      	cmp	r3, #3
 8012b04:	d816      	bhi.n	8012b34 <USBD_LL_CloseEP+0x5c>
 8012b06:	a201      	add	r2, pc, #4	; (adr r2, 8012b0c <USBD_LL_CloseEP+0x34>)
 8012b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b0c:	08012b1d 	.word	0x08012b1d
 8012b10:	08012b23 	.word	0x08012b23
 8012b14:	08012b29 	.word	0x08012b29
 8012b18:	08012b2f 	.word	0x08012b2f
    case HAL_OK :
      usb_status = USBD_OK;
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8012b20:	e00b      	b.n	8012b3a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012b22:	2303      	movs	r3, #3
 8012b24:	73fb      	strb	r3, [r7, #15]
    break;
 8012b26:	e008      	b.n	8012b3a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012b28:	2301      	movs	r3, #1
 8012b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8012b2c:	e005      	b.n	8012b3a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b2e:	2303      	movs	r3, #3
 8012b30:	73fb      	strb	r3, [r7, #15]
    break;
 8012b32:	e002      	b.n	8012b3a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012b34:	2303      	movs	r3, #3
 8012b36:	73fb      	strb	r3, [r7, #15]
    break;
 8012b38:	bf00      	nop
  }
  return usb_status;
 8012b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3710      	adds	r7, #16
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	460b      	mov	r3, r1
 8012b4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b50:	2300      	movs	r3, #0
 8012b52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b54:	2300      	movs	r3, #0
 8012b56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012b5e:	78fa      	ldrb	r2, [r7, #3]
 8012b60:	4611      	mov	r1, r2
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7f1 fd7b 	bl	800465e <HAL_PCD_EP_SetStall>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012b6c:	7bbb      	ldrb	r3, [r7, #14]
 8012b6e:	2b03      	cmp	r3, #3
 8012b70:	d816      	bhi.n	8012ba0 <USBD_LL_StallEP+0x5c>
 8012b72:	a201      	add	r2, pc, #4	; (adr r2, 8012b78 <USBD_LL_StallEP+0x34>)
 8012b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b78:	08012b89 	.word	0x08012b89
 8012b7c:	08012b8f 	.word	0x08012b8f
 8012b80:	08012b95 	.word	0x08012b95
 8012b84:	08012b9b 	.word	0x08012b9b
    case HAL_OK :
      usb_status = USBD_OK;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8012b8c:	e00b      	b.n	8012ba6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012b8e:	2303      	movs	r3, #3
 8012b90:	73fb      	strb	r3, [r7, #15]
    break;
 8012b92:	e008      	b.n	8012ba6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012b94:	2301      	movs	r3, #1
 8012b96:	73fb      	strb	r3, [r7, #15]
    break;
 8012b98:	e005      	b.n	8012ba6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b9a:	2303      	movs	r3, #3
 8012b9c:	73fb      	strb	r3, [r7, #15]
    break;
 8012b9e:	e002      	b.n	8012ba6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012ba0:	2303      	movs	r3, #3
 8012ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8012ba4:	bf00      	nop
  }
  return usb_status;
 8012ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3710      	adds	r7, #16
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012bca:	78fa      	ldrb	r2, [r7, #3]
 8012bcc:	4611      	mov	r1, r2
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7f1 fda7 	bl	8004722 <HAL_PCD_EP_ClrStall>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012bd8:	7bbb      	ldrb	r3, [r7, #14]
 8012bda:	2b03      	cmp	r3, #3
 8012bdc:	d816      	bhi.n	8012c0c <USBD_LL_ClearStallEP+0x5c>
 8012bde:	a201      	add	r2, pc, #4	; (adr r2, 8012be4 <USBD_LL_ClearStallEP+0x34>)
 8012be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012be4:	08012bf5 	.word	0x08012bf5
 8012be8:	08012bfb 	.word	0x08012bfb
 8012bec:	08012c01 	.word	0x08012c01
 8012bf0:	08012c07 	.word	0x08012c07
    case HAL_OK :
      usb_status = USBD_OK;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8012bf8:	e00b      	b.n	8012c12 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012bfa:	2303      	movs	r3, #3
 8012bfc:	73fb      	strb	r3, [r7, #15]
    break;
 8012bfe:	e008      	b.n	8012c12 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012c00:	2301      	movs	r3, #1
 8012c02:	73fb      	strb	r3, [r7, #15]
    break;
 8012c04:	e005      	b.n	8012c12 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012c06:	2303      	movs	r3, #3
 8012c08:	73fb      	strb	r3, [r7, #15]
    break;
 8012c0a:	e002      	b.n	8012c12 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8012c0c:	2303      	movs	r3, #3
 8012c0e:	73fb      	strb	r3, [r7, #15]
    break;
 8012c10:	bf00      	nop
  }
  return usb_status;
 8012c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3710      	adds	r7, #16
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b085      	sub	sp, #20
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	460b      	mov	r3, r1
 8012c26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	da0b      	bge.n	8012c50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012c38:	78fb      	ldrb	r3, [r7, #3]
 8012c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012c3e:	68f9      	ldr	r1, [r7, #12]
 8012c40:	4613      	mov	r3, r2
 8012c42:	00db      	lsls	r3, r3, #3
 8012c44:	1a9b      	subs	r3, r3, r2
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	440b      	add	r3, r1
 8012c4a:	333e      	adds	r3, #62	; 0x3e
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	e00b      	b.n	8012c68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012c50:	78fb      	ldrb	r3, [r7, #3]
 8012c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012c56:	68f9      	ldr	r1, [r7, #12]
 8012c58:	4613      	mov	r3, r2
 8012c5a:	00db      	lsls	r3, r3, #3
 8012c5c:	1a9b      	subs	r3, r3, r2
 8012c5e:	009b      	lsls	r3, r3, #2
 8012c60:	440b      	add	r3, r1
 8012c62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012c66:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3714      	adds	r7, #20
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr

08012c74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c80:	2300      	movs	r3, #0
 8012c82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c84:	2300      	movs	r3, #0
 8012c86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c8e:	78fa      	ldrb	r2, [r7, #3]
 8012c90:	4611      	mov	r1, r2
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7f1 fb79 	bl	800438a <HAL_PCD_SetAddress>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8012c9c:	7bbb      	ldrb	r3, [r7, #14]
 8012c9e:	2b03      	cmp	r3, #3
 8012ca0:	d816      	bhi.n	8012cd0 <USBD_LL_SetUSBAddress+0x5c>
 8012ca2:	a201      	add	r2, pc, #4	; (adr r2, 8012ca8 <USBD_LL_SetUSBAddress+0x34>)
 8012ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ca8:	08012cb9 	.word	0x08012cb9
 8012cac:	08012cbf 	.word	0x08012cbf
 8012cb0:	08012cc5 	.word	0x08012cc5
 8012cb4:	08012ccb 	.word	0x08012ccb
    case HAL_OK :
      usb_status = USBD_OK;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	73fb      	strb	r3, [r7, #15]
    break;
 8012cbc:	e00b      	b.n	8012cd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012cbe:	2303      	movs	r3, #3
 8012cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8012cc2:	e008      	b.n	8012cd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8012cc8:	e005      	b.n	8012cd6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012cca:	2303      	movs	r3, #3
 8012ccc:	73fb      	strb	r3, [r7, #15]
    break;
 8012cce:	e002      	b.n	8012cd6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8012cd0:	2303      	movs	r3, #3
 8012cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8012cd4:	bf00      	nop
  }
  return usb_status;
 8012cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3710      	adds	r7, #16
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b086      	sub	sp, #24
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	607a      	str	r2, [r7, #4]
 8012cea:	603b      	str	r3, [r7, #0]
 8012cec:	460b      	mov	r3, r1
 8012cee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012cfe:	7af9      	ldrb	r1, [r7, #11]
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	687a      	ldr	r2, [r7, #4]
 8012d04:	f7f1 fc6e 	bl	80045e4 <HAL_PCD_EP_Transmit>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8012d0c:	7dbb      	ldrb	r3, [r7, #22]
 8012d0e:	2b03      	cmp	r3, #3
 8012d10:	d816      	bhi.n	8012d40 <USBD_LL_Transmit+0x60>
 8012d12:	a201      	add	r2, pc, #4	; (adr r2, 8012d18 <USBD_LL_Transmit+0x38>)
 8012d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d18:	08012d29 	.word	0x08012d29
 8012d1c:	08012d2f 	.word	0x08012d2f
 8012d20:	08012d35 	.word	0x08012d35
 8012d24:	08012d3b 	.word	0x08012d3b
    case HAL_OK :
      usb_status = USBD_OK;
 8012d28:	2300      	movs	r3, #0
 8012d2a:	75fb      	strb	r3, [r7, #23]
    break;
 8012d2c:	e00b      	b.n	8012d46 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012d2e:	2303      	movs	r3, #3
 8012d30:	75fb      	strb	r3, [r7, #23]
    break;
 8012d32:	e008      	b.n	8012d46 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012d34:	2301      	movs	r3, #1
 8012d36:	75fb      	strb	r3, [r7, #23]
    break;
 8012d38:	e005      	b.n	8012d46 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012d3a:	2303      	movs	r3, #3
 8012d3c:	75fb      	strb	r3, [r7, #23]
    break;
 8012d3e:	e002      	b.n	8012d46 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8012d40:	2303      	movs	r3, #3
 8012d42:	75fb      	strb	r3, [r7, #23]
    break;
 8012d44:	bf00      	nop
  }
  return usb_status;
 8012d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3718      	adds	r7, #24
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}

08012d50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b086      	sub	sp, #24
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	60f8      	str	r0, [r7, #12]
 8012d58:	607a      	str	r2, [r7, #4]
 8012d5a:	603b      	str	r3, [r7, #0]
 8012d5c:	460b      	mov	r3, r1
 8012d5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d60:	2300      	movs	r3, #0
 8012d62:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d64:	2300      	movs	r3, #0
 8012d66:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012d6e:	7af9      	ldrb	r1, [r7, #11]
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	687a      	ldr	r2, [r7, #4]
 8012d74:	f7f1 fbe0 	bl	8004538 <HAL_PCD_EP_Receive>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8012d7c:	7dbb      	ldrb	r3, [r7, #22]
 8012d7e:	2b03      	cmp	r3, #3
 8012d80:	d816      	bhi.n	8012db0 <USBD_LL_PrepareReceive+0x60>
 8012d82:	a201      	add	r2, pc, #4	; (adr r2, 8012d88 <USBD_LL_PrepareReceive+0x38>)
 8012d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d88:	08012d99 	.word	0x08012d99
 8012d8c:	08012d9f 	.word	0x08012d9f
 8012d90:	08012da5 	.word	0x08012da5
 8012d94:	08012dab 	.word	0x08012dab
    case HAL_OK :
      usb_status = USBD_OK;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	75fb      	strb	r3, [r7, #23]
    break;
 8012d9c:	e00b      	b.n	8012db6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012d9e:	2303      	movs	r3, #3
 8012da0:	75fb      	strb	r3, [r7, #23]
    break;
 8012da2:	e008      	b.n	8012db6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012da4:	2301      	movs	r3, #1
 8012da6:	75fb      	strb	r3, [r7, #23]
    break;
 8012da8:	e005      	b.n	8012db6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012daa:	2303      	movs	r3, #3
 8012dac:	75fb      	strb	r3, [r7, #23]
    break;
 8012dae:	e002      	b.n	8012db6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8012db0:	2303      	movs	r3, #3
 8012db2:	75fb      	strb	r3, [r7, #23]
    break;
 8012db4:	bf00      	nop
  }
  return usb_status;
 8012db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	3718      	adds	r7, #24
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}

08012dc0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	460b      	mov	r3, r1
 8012dca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012dd2:	78fa      	ldrb	r2, [r7, #3]
 8012dd4:	4611      	mov	r1, r2
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7f1 fbec 	bl	80045b4 <HAL_PCD_EP_GetRxCount>
 8012ddc:	4603      	mov	r3, r0
}
 8012dde:	4618      	mov	r0, r3
 8012de0:	3708      	adds	r7, #8
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
	...

08012de8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b082      	sub	sp, #8
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	460b      	mov	r3, r1
 8012df2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8012df4:	78fb      	ldrb	r3, [r7, #3]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d002      	beq.n	8012e00 <HAL_PCDEx_LPM_Callback+0x18>
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	d01f      	beq.n	8012e3e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8012dfe:	e03b      	b.n	8012e78 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6a1b      	ldr	r3, [r3, #32]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d007      	beq.n	8012e18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012e08:	f000 f854 	bl	8012eb4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e0c:	4b1c      	ldr	r3, [pc, #112]	; (8012e80 <HAL_PCDEx_LPM_Callback+0x98>)
 8012e0e:	691b      	ldr	r3, [r3, #16]
 8012e10:	4a1b      	ldr	r2, [pc, #108]	; (8012e80 <HAL_PCDEx_LPM_Callback+0x98>)
 8012e12:	f023 0306 	bic.w	r3, r3, #6
 8012e16:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	6812      	ldr	r2, [r2, #0]
 8012e26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012e2a:	f023 0301 	bic.w	r3, r3, #1
 8012e2e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7fa fddc 	bl	800d9f4 <USBD_LL_Resume>
    break;
 8012e3c:	e01c      	b.n	8012e78 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	6812      	ldr	r2, [r2, #0]
 8012e4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012e50:	f043 0301 	orr.w	r3, r3, #1
 8012e54:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7fa fdb3 	bl	800d9c8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	6a1b      	ldr	r3, [r3, #32]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d005      	beq.n	8012e76 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012e6a:	4b05      	ldr	r3, [pc, #20]	; (8012e80 <HAL_PCDEx_LPM_Callback+0x98>)
 8012e6c:	691b      	ldr	r3, [r3, #16]
 8012e6e:	4a04      	ldr	r2, [pc, #16]	; (8012e80 <HAL_PCDEx_LPM_Callback+0x98>)
 8012e70:	f043 0306 	orr.w	r3, r3, #6
 8012e74:	6113      	str	r3, [r2, #16]
    break;
 8012e76:	bf00      	nop
}
 8012e78:	bf00      	nop
 8012e7a:	3708      	adds	r7, #8
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}
 8012e80:	e000ed00 	.word	0xe000ed00

08012e84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012e84:	b480      	push	{r7}
 8012e86:	b083      	sub	sp, #12
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012e8c:	4b03      	ldr	r3, [pc, #12]	; (8012e9c <USBD_static_malloc+0x18>)
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	370c      	adds	r7, #12
 8012e92:	46bd      	mov	sp, r7
 8012e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e98:	4770      	bx	lr
 8012e9a:	bf00      	nop
 8012e9c:	20001ac4 	.word	0x20001ac4

08012ea0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012ea0:	b480      	push	{r7}
 8012ea2:	b083      	sub	sp, #12
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]

}
 8012ea8:	bf00      	nop
 8012eaa:	370c      	adds	r7, #12
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr

08012eb4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012eb8:	f7ed fb9a 	bl	80005f0 <SystemClock_Config>
}
 8012ebc:	bf00      	nop
 8012ebe:	bd80      	pop	{r7, pc}

08012ec0 <__libc_init_array>:
 8012ec0:	b570      	push	{r4, r5, r6, lr}
 8012ec2:	4d0d      	ldr	r5, [pc, #52]	; (8012ef8 <__libc_init_array+0x38>)
 8012ec4:	4c0d      	ldr	r4, [pc, #52]	; (8012efc <__libc_init_array+0x3c>)
 8012ec6:	1b64      	subs	r4, r4, r5
 8012ec8:	10a4      	asrs	r4, r4, #2
 8012eca:	2600      	movs	r6, #0
 8012ecc:	42a6      	cmp	r6, r4
 8012ece:	d109      	bne.n	8012ee4 <__libc_init_array+0x24>
 8012ed0:	4d0b      	ldr	r5, [pc, #44]	; (8012f00 <__libc_init_array+0x40>)
 8012ed2:	4c0c      	ldr	r4, [pc, #48]	; (8012f04 <__libc_init_array+0x44>)
 8012ed4:	f000 f82e 	bl	8012f34 <_init>
 8012ed8:	1b64      	subs	r4, r4, r5
 8012eda:	10a4      	asrs	r4, r4, #2
 8012edc:	2600      	movs	r6, #0
 8012ede:	42a6      	cmp	r6, r4
 8012ee0:	d105      	bne.n	8012eee <__libc_init_array+0x2e>
 8012ee2:	bd70      	pop	{r4, r5, r6, pc}
 8012ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ee8:	4798      	blx	r3
 8012eea:	3601      	adds	r6, #1
 8012eec:	e7ee      	b.n	8012ecc <__libc_init_array+0xc>
 8012eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ef2:	4798      	blx	r3
 8012ef4:	3601      	adds	r6, #1
 8012ef6:	e7f2      	b.n	8012ede <__libc_init_array+0x1e>
 8012ef8:	08013114 	.word	0x08013114
 8012efc:	08013114 	.word	0x08013114
 8012f00:	08013114 	.word	0x08013114
 8012f04:	08013118 	.word	0x08013118

08012f08 <memcpy>:
 8012f08:	440a      	add	r2, r1
 8012f0a:	4291      	cmp	r1, r2
 8012f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f10:	d100      	bne.n	8012f14 <memcpy+0xc>
 8012f12:	4770      	bx	lr
 8012f14:	b510      	push	{r4, lr}
 8012f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f1e:	4291      	cmp	r1, r2
 8012f20:	d1f9      	bne.n	8012f16 <memcpy+0xe>
 8012f22:	bd10      	pop	{r4, pc}

08012f24 <memset>:
 8012f24:	4402      	add	r2, r0
 8012f26:	4603      	mov	r3, r0
 8012f28:	4293      	cmp	r3, r2
 8012f2a:	d100      	bne.n	8012f2e <memset+0xa>
 8012f2c:	4770      	bx	lr
 8012f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8012f32:	e7f9      	b.n	8012f28 <memset+0x4>

08012f34 <_init>:
 8012f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f36:	bf00      	nop
 8012f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f3a:	bc08      	pop	{r3}
 8012f3c:	469e      	mov	lr, r3
 8012f3e:	4770      	bx	lr

08012f40 <_fini>:
 8012f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f42:	bf00      	nop
 8012f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f46:	bc08      	pop	{r3}
 8012f48:	469e      	mov	lr, r3
 8012f4a:	4770      	bx	lr
