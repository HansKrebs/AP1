
AP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113a8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08011568  08011568  00021568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011684  08011684  00030194  2**0
                  CONTENTS
  4 .ARM          00000000  08011684  08011684  00030194  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011684  08011684  00030194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011684  08011684  00021684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011688  08011688  00021688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0801168c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004020  20000194  08011820  00030194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041b4  08011820  000341b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY
 12 .debug_info   000403c3  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000072e7  00000000  00000000  00070587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002cc8  00000000  00000000  00077870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000029c0  00000000  00000000  0007a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b3e4  00000000  00000000  0007cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003651e  00000000  00000000  000882dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00156021  00000000  00000000  000be7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021481b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd70  00000000  00000000  00214870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000194 	.word	0x20000194
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011550 	.word	0x08011550

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000198 	.word	0x20000198
 80001fc:	08011550 	.word	0x08011550

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f001 fa4d 	bl	80016a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f840 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 fc48 	bl	8000aa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000210:	f000 fc1c 	bl	8000a4c <MX_DMA_Init>
  MX_ADC1_Init();
 8000214:	f000 f8e0 	bl	80003d8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000218:	f000 f942 	bl	80004a0 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800021c:	f000 f9a4 	bl	8000568 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000220:	f000 f9e2 	bl	80005e8 <MX_I2C3_Init>
  MX_RTC_Init();
 8000224:	f000 fa20 	bl	8000668 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000228:	f000 fa7a 	bl	8000720 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800022c:	f000 fa9a 	bl	8000764 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000230:	f000 fad6 	bl	80007e0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000234:	f000 fb12 	bl	800085c <MX_SPI3_Init>
  MX_TIM2_Init();
 8000238:	f000 fb4e 	bl	80008d8 <MX_TIM2_Init>
  MX_TIM6_Init();
 800023c:	f000 fb9a 	bl	8000974 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000240:	f000 fbce 	bl	80009e0 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000244:	f00b fc24 	bl	800ba90 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000248:	f00d fbac 	bl	800d9a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800024c:	4a09      	ldr	r2, [pc, #36]	; (8000274 <main+0x74>)
 800024e:	2100      	movs	r1, #0
 8000250:	4809      	ldr	r0, [pc, #36]	; (8000278 <main+0x78>)
 8000252:	f00d fc28 	bl	800daa6 <osThreadNew>
 8000256:	4603      	mov	r3, r0
 8000258:	4a08      	ldr	r2, [pc, #32]	; (800027c <main+0x7c>)
 800025a:	6013      	str	r3, [r2, #0]

  /* creation of fastTask */
  fastTaskHandle = osThreadNew(StartFastTask, NULL, &fastTask_attributes);
 800025c:	4a08      	ldr	r2, [pc, #32]	; (8000280 <main+0x80>)
 800025e:	2100      	movs	r1, #0
 8000260:	4808      	ldr	r0, [pc, #32]	; (8000284 <main+0x84>)
 8000262:	f00d fc20 	bl	800daa6 <osThreadNew>
 8000266:	4603      	mov	r3, r0
 8000268:	4a07      	ldr	r2, [pc, #28]	; (8000288 <main+0x88>)
 800026a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800026c:	f00d fbe0 	bl	800da30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000270:	e7fe      	b.n	8000270 <main+0x70>
 8000272:	bf00      	nop
 8000274:	080115e0 	.word	0x080115e0
 8000278:	08000d79 	.word	0x08000d79
 800027c:	20001cd8 	.word	0x20001cd8
 8000280:	08011604 	.word	0x08011604
 8000284:	080108ad 	.word	0x080108ad
 8000288:	20002258 	.word	0x20002258

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b0be      	sub	sp, #248	; 0xf8
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000296:	2244      	movs	r2, #68	; 0x44
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f011 f950 	bl	8011540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	229c      	movs	r2, #156	; 0x9c
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f011 f942 	bl	8011540 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80002bc:	2000      	movs	r0, #0
 80002be:	f004 f9cf 	bl	8004660 <HAL_PWREx_ControlVoltageScaling>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x40>
  {
    Error_Handler();
 80002c8:	f000 fd72 	bl	8000db0 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002cc:	f004 f998 	bl	8004600 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002d0:	4b3f      	ldr	r3, [pc, #252]	; (80003d0 <SystemClock_Config+0x144>)
 80002d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002d6:	4a3e      	ldr	r2, [pc, #248]	; (80003d0 <SystemClock_Config+0x144>)
 80002d8:	f023 0318 	bic.w	r3, r3, #24
 80002dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80002e0:	2325      	movs	r3, #37	; 0x25
 80002e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002ee:	2301      	movs	r3, #1
 80002f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002f4:	2301      	movs	r3, #1
 80002f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000300:	2303      	movs	r3, #3
 8000302:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000306:	2304      	movs	r3, #4
 8000308:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 800030c:	233c      	movs	r3, #60	; 0x3c
 800030e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000312:	2305      	movs	r3, #5
 8000314:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000318:	2302      	movs	r3, #2
 800031a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800031e:	2302      	movs	r3, #2
 8000320:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000324:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000328:	4618      	mov	r0, r3
 800032a:	f004 fa5d 	bl	80047e8 <HAL_RCC_OscConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000334:	f000 fd3c 	bl	8000db0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000338:	230f      	movs	r3, #15
 800033a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800033e:	2303      	movs	r3, #3
 8000340:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000356:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800035a:	2105      	movs	r1, #5
 800035c:	4618      	mov	r0, r3
 800035e:	f004 fe69 	bl	8005034 <HAL_RCC_ClockConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000368:	f000 fd22 	bl	8000db0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
 800036c:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <SystemClock_Config+0x148>)
 800036e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000370:	2300      	movs	r3, #0
 8000372:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000374:	2300      	movs	r3, #0
 8000376:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000378:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800037c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000380:	2300      	movs	r3, #0
 8000382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800038a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800038e:	2300      	movs	r3, #0
 8000390:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000392:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000396:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000398:	2303      	movs	r3, #3
 800039a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800039c:	2305      	movs	r3, #5
 800039e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 80003a0:	2360      	movs	r3, #96	; 0x60
 80003a2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80003a4:	2302      	movs	r3, #2
 80003a6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 80003a8:	2304      	movs	r3, #4
 80003aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 80003ac:	2304      	movs	r3, #4
 80003ae:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80003b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80003b4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4618      	mov	r0, r3
 80003ba:	f005 f91b 	bl	80055f4 <HAL_RCCEx_PeriphCLKConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80003c4:	f000 fcf4 	bl	8000db0 <Error_Handler>
  }
}
 80003c8:	bf00      	nop
 80003ca:	37f8      	adds	r7, #248	; 0xf8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	40021000 	.word	0x40021000
 80003d4:	000b6140 	.word	0x000b6140

080003d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003de:	463b      	mov	r3, r7
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
 80003ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ee:	4b29      	ldr	r3, [pc, #164]	; (8000494 <MX_ADC1_Init+0xbc>)
 80003f0:	4a29      	ldr	r2, [pc, #164]	; (8000498 <MX_ADC1_Init+0xc0>)
 80003f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003f4:	4b27      	ldr	r3, [pc, #156]	; (8000494 <MX_ADC1_Init+0xbc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003fa:	4b26      	ldr	r3, [pc, #152]	; (8000494 <MX_ADC1_Init+0xbc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000400:	4b24      	ldr	r3, [pc, #144]	; (8000494 <MX_ADC1_Init+0xbc>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <MX_ADC1_Init+0xbc>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <MX_ADC1_Init+0xbc>)
 800040e:	2204      	movs	r2, #4
 8000410:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000412:	4b20      	ldr	r3, [pc, #128]	; (8000494 <MX_ADC1_Init+0xbc>)
 8000414:	2200      	movs	r2, #0
 8000416:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <MX_ADC1_Init+0xbc>)
 800041a:	2201      	movs	r2, #1
 800041c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <MX_ADC1_Init+0xbc>)
 8000420:	2201      	movs	r2, #1
 8000422:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_ADC1_Init+0xbc>)
 8000426:	2200      	movs	r2, #0
 8000428:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800042c:	4b19      	ldr	r3, [pc, #100]	; (8000494 <MX_ADC1_Init+0xbc>)
 800042e:	2200      	movs	r2, #0
 8000430:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000432:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_ADC1_Init+0xbc>)
 8000434:	2200      	movs	r2, #0
 8000436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <MX_ADC1_Init+0xbc>)
 800043a:	2200      	movs	r2, #0
 800043c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <MX_ADC1_Init+0xbc>)
 8000442:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000446:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <MX_ADC1_Init+0xbc>)
 800044a:	2200      	movs	r2, #0
 800044c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000450:	4810      	ldr	r0, [pc, #64]	; (8000494 <MX_ADC1_Init+0xbc>)
 8000452:	f001 fb23 	bl	8001a9c <HAL_ADC_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800045c:	f000 fca8 	bl	8000db0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_ADC1_Init+0xc4>)
 8000462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000464:	2306      	movs	r3, #6
 8000466:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000468:	2302      	movs	r3, #2
 800046a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046c:	237f      	movs	r3, #127	; 0x7f
 800046e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000470:	2304      	movs	r3, #4
 8000472:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000478:	463b      	mov	r3, r7
 800047a:	4619      	mov	r1, r3
 800047c:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_ADC1_Init+0xbc>)
 800047e:	f001 fc59 	bl	8001d34 <HAL_ADC_ConfigChannel>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000488:	f000 fc92 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800048c:	bf00      	nop
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20002110 	.word	0x20002110
 8000498:	50040000 	.word	0x50040000
 800049c:	21800100 	.word	0x21800100

080004a0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80004a4:	4b2c      	ldr	r3, [pc, #176]	; (8000558 <MX_DFSDM1_Init+0xb8>)
 80004a6:	4a2d      	ldr	r2, [pc, #180]	; (800055c <MX_DFSDM1_Init+0xbc>)
 80004a8:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80004aa:	4b2b      	ldr	r3, [pc, #172]	; (8000558 <MX_DFSDM1_Init+0xb8>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80004b0:	4b29      	ldr	r3, [pc, #164]	; (8000558 <MX_DFSDM1_Init+0xb8>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80004b6:	4b28      	ldr	r3, [pc, #160]	; (8000558 <MX_DFSDM1_Init+0xb8>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 80004bc:	4b26      	ldr	r3, [pc, #152]	; (8000558 <MX_DFSDM1_Init+0xb8>)
 80004be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c2:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 80004c4:	4b24      	ldr	r3, [pc, #144]	; (8000558 <MX_DFSDM1_Init+0xb8>)
 80004c6:	22c0      	movs	r2, #192	; 0xc0
 80004c8:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80004ca:	4b23      	ldr	r3, [pc, #140]	; (8000558 <MX_DFSDM1_Init+0xb8>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80004d0:	4821      	ldr	r0, [pc, #132]	; (8000558 <MX_DFSDM1_Init+0xb8>)
 80004d2:	f002 f9cd 	bl	8002870 <HAL_DFSDM_FilterInit>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80004dc:	f000 fc68 	bl	8000db0 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 80004e2:	4a20      	ldr	r2, [pc, #128]	; (8000564 <MX_DFSDM1_Init+0xc4>)
 80004e4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80004e6:	4b1e      	ldr	r3, [pc, #120]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 80004f4:	2202      	movs	r2, #2
 80004f6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 80004f8:	4b19      	ldr	r3, [pc, #100]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 80004fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004fe:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 8000502:	2200      	movs	r2, #0
 8000504:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 8000508:	2200      	movs	r2, #0
 800050a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 800050e:	2200      	movs	r2, #0
 8000510:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 8000514:	2200      	movs	r2, #0
 8000516:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800051e:	4b10      	ldr	r3, [pc, #64]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 8000520:	2201      	movs	r2, #1
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 8000526:	2200      	movs	r2, #0
 8000528:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 800052c:	2207      	movs	r2, #7
 800052e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <MX_DFSDM1_Init+0xc0>)
 8000532:	f002 f8dd 	bl	80026f0 <HAL_DFSDM_ChannelInit>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 800053c:	f000 fc38 	bl	8000db0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000540:	2201      	movs	r2, #1
 8000542:	2101      	movs	r1, #1
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <MX_DFSDM1_Init+0xb8>)
 8000546:	f002 fa6d 	bl	8002a24 <HAL_DFSDM_FilterConfigRegChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8000550:	f000 fc2e 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20001fd8 	.word	0x20001fd8
 800055c:	40016100 	.word	0x40016100
 8000560:	200022a8 	.word	0x200022a8
 8000564:	40016000 	.word	0x40016000

08000568 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_I2C1_Init+0x74>)
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <MX_I2C1_Init+0x78>)
 8000570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_I2C1_Init+0x74>)
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <MX_I2C1_Init+0x7c>)
 8000576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_I2C1_Init+0x74>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <MX_I2C1_Init+0x74>)
 8000580:	2201      	movs	r2, #1
 8000582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_I2C1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_I2C1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_I2C1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a2:	480e      	ldr	r0, [pc, #56]	; (80005dc <MX_I2C1_Init+0x74>)
 80005a4:	f002 fe66 	bl	8003274 <HAL_I2C_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ae:	f000 fbff 	bl	8000db0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005b2:	2100      	movs	r1, #0
 80005b4:	4809      	ldr	r0, [pc, #36]	; (80005dc <MX_I2C1_Init+0x74>)
 80005b6:	f002 feec 	bl	8003392 <HAL_I2CEx_ConfigAnalogFilter>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005c0:	f000 fbf6 	bl	8000db0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c4:	2100      	movs	r1, #0
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_I2C1_Init+0x74>)
 80005c8:	f002 ff2e 	bl	8003428 <HAL_I2CEx_ConfigDigitalFilter>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005d2:	f000 fbed 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20001f8c 	.word	0x20001f8c
 80005e0:	40005400 	.word	0x40005400
 80005e4:	00b03fdb 	.word	0x00b03fdb

080005e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_I2C3_Init+0x74>)
 80005ee:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <MX_I2C3_Init+0x78>)
 80005f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_I2C3_Init+0x74>)
 80005f4:	4a1b      	ldr	r2, [pc, #108]	; (8000664 <MX_I2C3_Init+0x7c>)
 80005f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_I2C3_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_I2C3_Init+0x74>)
 8000600:	2201      	movs	r2, #1
 8000602:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_I2C3_Init+0x74>)
 8000606:	2200      	movs	r2, #0
 8000608:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_I2C3_Init+0x74>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_I2C3_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_I2C3_Init+0x74>)
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_I2C3_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000622:	480e      	ldr	r0, [pc, #56]	; (800065c <MX_I2C3_Init+0x74>)
 8000624:	f002 fe26 	bl	8003274 <HAL_I2C_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800062e:	f000 fbbf 	bl	8000db0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000632:	2100      	movs	r1, #0
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <MX_I2C3_Init+0x74>)
 8000636:	f002 feac 	bl	8003392 <HAL_I2CEx_ConfigAnalogFilter>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000640:	f000 fbb6 	bl	8000db0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000644:	2100      	movs	r1, #0
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <MX_I2C3_Init+0x74>)
 8000648:	f002 feee 	bl	8003428 <HAL_I2CEx_ConfigDigitalFilter>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000652:	f000 fbad 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20001cdc 	.word	0x20001cdc
 8000660:	40005c00 	.word	0x40005c00
 8000664:	00b03fdb 	.word	0x00b03fdb

08000668 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <MX_RTC_Init+0xb0>)
 8000682:	4a26      	ldr	r2, [pc, #152]	; (800071c <MX_RTC_Init+0xb4>)
 8000684:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000686:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_RTC_Init+0xb0>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <MX_RTC_Init+0xb0>)
 800068e:	227f      	movs	r2, #127	; 0x7f
 8000690:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_RTC_Init+0xb0>)
 8000694:	22ff      	movs	r2, #255	; 0xff
 8000696:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_RTC_Init+0xb0>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_RTC_Init+0xb0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_RTC_Init+0xb0>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_RTC_Init+0xb0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006b0:	4819      	ldr	r0, [pc, #100]	; (8000718 <MX_RTC_Init+0xb0>)
 80006b2:	f006 fd45 	bl	8007140 <HAL_RTC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80006bc:	f000 fb78 	bl	8000db0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	4619      	mov	r1, r3
 80006da:	480f      	ldr	r0, [pc, #60]	; (8000718 <MX_RTC_Init+0xb0>)
 80006dc:	f006 fdab 	bl	8007236 <HAL_RTC_SetTime>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80006e6:	f000 fb63 	bl	8000db0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80006ea:	2302      	movs	r3, #2
 80006ec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80006ee:	2304      	movs	r3, #4
 80006f0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 80006f2:	2303      	movs	r3, #3
 80006f4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 80006f6:	2314      	movs	r3, #20
 80006f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_RTC_Init+0xb0>)
 8000702:	f006 fe35 	bl	8007370 <HAL_RTC_SetDate>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800070c:	f000 fb50 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20002234 	.word	0x20002234
 800071c:	40002800 	.word	0x40002800

08000720 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_SDMMC1_SD_Init+0x3c>)
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <MX_SDMMC1_SD_Init+0x40>)
 8000728:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_SDMMC1_SD_Init+0x3c>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_SDMMC1_SD_Init+0x3c>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_SDMMC1_SD_Init+0x3c>)
 8000738:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800073e:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_SDMMC1_SD_Init+0x3c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <MX_SDMMC1_SD_Init+0x3c>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <MX_SDMMC1_SD_Init+0x3c>)
 800074c:	2201      	movs	r2, #1
 800074e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	2000202c 	.word	0x2000202c
 8000760:	50062400 	.word	0x50062400

08000764 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_SPI1_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_SPI1_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_SPI1_Init+0x74>)
 8000770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000774:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_SPI1_Init+0x74>)
 800077e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000782:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_SPI1_Init+0x74>)
 8000786:	2202      	movs	r2, #2
 8000788:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_SPI1_Init+0x74>)
 800078c:	2201      	movs	r2, #1
 800078e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_SPI1_Init+0x74>)
 8000792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000796:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_SPI1_Init+0x74>)
 800079a:	2218      	movs	r2, #24
 800079c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_SPI1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_SPI1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_SPI1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_SPI1_Init+0x74>)
 80007b2:	2207      	movs	r2, #7
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_SPI1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_SPI1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_SPI1_Init+0x74>)
 80007c4:	f008 fc17 	bl	8008ff6 <HAL_SPI_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 faef 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200022e0 	.word	0x200022e0
 80007dc:	40013000 	.word	0x40013000

080007e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_SPI2_Init+0x74>)
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <MX_SPI2_Init+0x78>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_SPI2_Init+0x74>)
 80007ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_SPI2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SPI2_Init+0x74>)
 80007fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SPI2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_SPI2_Init+0x74>)
 8000808:	2201      	movs	r2, #1
 800080a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SPI2_Init+0x74>)
 800080e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000812:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_SPI2_Init+0x74>)
 8000816:	2230      	movs	r2, #48	; 0x30
 8000818:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SPI2_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SPI2_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_SPI2_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SPI2_Init+0x74>)
 800082e:	2207      	movs	r2, #7
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_SPI2_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_SPI2_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_SPI2_Init+0x74>)
 8000840:	f008 fbd9 	bl	8008ff6 <HAL_SPI_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800084a:	f000 fab1 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20001f28 	.word	0x20001f28
 8000858:	40003800 	.word	0x40003800

0800085c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_SPI3_Init+0x74>)
 8000862:	4a1c      	ldr	r2, [pc, #112]	; (80008d4 <MX_SPI3_Init+0x78>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_SPI3_Init+0x74>)
 8000868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800086c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_SPI3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_SPI3_Init+0x74>)
 8000876:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800087a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_SPI3_Init+0x74>)
 800087e:	2202      	movs	r2, #2
 8000880:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_SPI3_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_SPI3_Init+0x74>)
 800088a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_SPI3_Init+0x74>)
 8000892:	2218      	movs	r2, #24
 8000894:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_SPI3_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_SPI3_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_SPI3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_SPI3_Init+0x74>)
 80008aa:	2207      	movs	r2, #7
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_SPI3_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_SPI3_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_SPI3_Init+0x74>)
 80008bc:	f008 fb9b 	bl	8008ff6 <HAL_SPI_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 fa73 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200020ac 	.word	0x200020ac
 80008d4:	40003c00 	.word	0x40003c00

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_TIM2_Init+0x98>)
 80008f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_TIM2_Init+0x98>)
 8000900:	2277      	movs	r2, #119	; 0x77
 8000902:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_TIM2_Init+0x98>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_TIM2_Init+0x98>)
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_TIM2_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_TIM2_Init+0x98>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800091e:	4814      	ldr	r0, [pc, #80]	; (8000970 <MX_TIM2_Init+0x98>)
 8000920:	f008 fc0c 	bl	800913c <HAL_TIM_Base_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800092a:	f000 fa41 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_TIM2_Init+0x98>)
 800093c:	f008 fde5 	bl	800950a <HAL_TIM_ConfigClockSource>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000946:	f000 fa33 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <MX_TIM2_Init+0x98>)
 8000958:	f008 fffa 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000962:	f000 fa25 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20002344 	.word	0x20002344

08000974 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000986:	4a15      	ldr	r2, [pc, #84]	; (80009dc <MX_TIM6_Init+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_TIM6_Init+0x64>)
 800098c:	2277      	movs	r2, #119	; 0x77
 800098e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_TIM6_Init+0x64>)
 8000998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800099c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009a6:	f008 fbc9 	bl	800913c <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009b0:	f000 f9fe 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_TIM6_Init+0x64>)
 80009c2:	f008 ffc5 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 f9f0 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	2000225c 	.word	0x2000225c
 80009dc:	40001000 	.word	0x40001000

080009e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_TIM7_Init+0x64>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_TIM7_Init+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_TIM7_Init+0x64>)
 80009f8:	2277      	movs	r2, #119	; 0x77
 80009fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_TIM7_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_TIM7_Init+0x64>)
 8000a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a08:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_TIM7_Init+0x64>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_TIM7_Init+0x64>)
 8000a12:	f008 fb93 	bl	800913c <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a1c:	f000 f9c8 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_TIM7_Init+0x64>)
 8000a2e:	f008 ff8f 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 f9ba 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20002390 	.word	0x20002390
 8000a48:	40001400 	.word	0x40001400

08000a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_DMA_Init+0x50>)
 8000a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <MX_DMA_Init+0x50>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_DMA_Init+0x50>)
 8000a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_DMA_Init+0x50>)
 8000a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <MX_DMA_Init+0x50>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6493      	str	r3, [r2, #72]	; 0x48
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_DMA_Init+0x50>)
 8000a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2105      	movs	r1, #5
 8000a86:	200e      	movs	r0, #14
 8000a88:	f001 fe08 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000a8c:	200e      	movs	r0, #14
 8000a8e:	f001 fe21 	bl	80026d4 <HAL_NVIC_EnableIRQ>

}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4ba7      	ldr	r3, [pc, #668]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4aa6      	ldr	r2, [pc, #664]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4ba4      	ldr	r3, [pc, #656]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
 8000acc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	4ba1      	ldr	r3, [pc, #644]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4aa0      	ldr	r2, [pc, #640]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b9e      	ldr	r3, [pc, #632]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	4b9b      	ldr	r3, [pc, #620]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a9a      	ldr	r2, [pc, #616]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b98      	ldr	r3, [pc, #608]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	61bb      	str	r3, [r7, #24]
 8000afc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afe:	4b95      	ldr	r3, [pc, #596]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a94      	ldr	r2, [pc, #592]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b92      	ldr	r3, [pc, #584]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b8f      	ldr	r3, [pc, #572]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	4a8e      	ldr	r2, [pc, #568]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b22:	4b8c      	ldr	r3, [pc, #560]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b2e:	4b89      	ldr	r3, [pc, #548]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	4a88      	ldr	r2, [pc, #544]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b34:	f043 0320 	orr.w	r3, r3, #32
 8000b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3a:	4b86      	ldr	r3, [pc, #536]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3e:	f003 0320 	and.w	r3, r3, #32
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b46:	4b83      	ldr	r3, [pc, #524]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a82      	ldr	r2, [pc, #520]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b80      	ldr	r3, [pc, #512]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b5e:	f003 fe33 	bl	80047c8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	4b7c      	ldr	r3, [pc, #496]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a7b      	ldr	r2, [pc, #492]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b79      	ldr	r3, [pc, #484]	; (8000d54 <MX_GPIO_Init+0x2b4>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b84:	f002 fb44 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f641 4130 	movw	r1, #7216	; 0x1c30
 8000b8e:	4872      	ldr	r0, [pc, #456]	; (8000d58 <MX_GPIO_Init+0x2b8>)
 8000b90:	f002 fb3e 	bl	8003210 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2105      	movs	r1, #5
 8000b98:	4870      	ldr	r0, [pc, #448]	; (8000d5c <MX_GPIO_Init+0x2bc>)
 8000b9a:	f002 fb39 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba4:	486e      	ldr	r0, [pc, #440]	; (8000d60 <MX_GPIO_Init+0x2c0>)
 8000ba6:	f002 fb33 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	486b      	ldr	r0, [pc, #428]	; (8000d5c <MX_GPIO_Init+0x2bc>)
 8000bb0:	f002 fb2e 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	4869      	ldr	r0, [pc, #420]	; (8000d60 <MX_GPIO_Init+0x2c0>)
 8000bba:	f002 fb29 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc4:	4867      	ldr	r0, [pc, #412]	; (8000d64 <MX_GPIO_Init+0x2c4>)
 8000bc6:	f002 fb23 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 8000bca:	2348      	movs	r3, #72	; 0x48
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bce:	4b66      	ldr	r3, [pc, #408]	; (8000d68 <MX_GPIO_Init+0x2c8>)
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	485e      	ldr	r0, [pc, #376]	; (8000d58 <MX_GPIO_Init+0x2b8>)
 8000bde:	f002 f96d 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8000be2:	2360      	movs	r3, #96	; 0x60
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	485b      	ldr	r0, [pc, #364]	; (8000d6c <MX_GPIO_Init+0x2cc>)
 8000bfe:	f002 f95d 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 8000c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c08:	2311      	movs	r3, #17
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1e:	f002 f94d 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 8000c22:	2330      	movs	r3, #48	; 0x30
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4847      	ldr	r0, [pc, #284]	; (8000d58 <MX_GPIO_Init+0x2b8>)
 8000c3a:	f002 f93f 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 8000c3e:	2385      	movs	r3, #133	; 0x85
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4841      	ldr	r0, [pc, #260]	; (8000d5c <MX_GPIO_Init+0x2bc>)
 8000c56:	f002 f931 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 8000c5a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	483b      	ldr	r0, [pc, #236]	; (8000d60 <MX_GPIO_Init+0x2c0>)
 8000c74:	f002 f922 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 8000c78:	2308      	movs	r3, #8
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4835      	ldr	r0, [pc, #212]	; (8000d60 <MX_GPIO_Init+0x2c0>)
 8000c8c:	f002 f916 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8000c90:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <MX_GPIO_Init+0x2c8>)
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4831      	ldr	r0, [pc, #196]	; (8000d6c <MX_GPIO_Init+0x2cc>)
 8000ca6:	f002 f909 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8000caa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cb0:	2311      	movs	r3, #17
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4825      	ldr	r0, [pc, #148]	; (8000d58 <MX_GPIO_Init+0x2b8>)
 8000cc4:	f002 f8fa 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8000cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4820      	ldr	r0, [pc, #128]	; (8000d64 <MX_GPIO_Init+0x2c4>)
 8000ce2:	f002 f8eb 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_GPIO_Init+0x2c8>)
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481d      	ldr	r0, [pc, #116]	; (8000d70 <MX_GPIO_Init+0x2d0>)
 8000cfa:	f002 f8df 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_GPIO_Init+0x2c8>)
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f002 f8d2 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_GPIO_Init+0x2c4>)
 8000d2e:	f002 f8c5 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 8000d32:	2302      	movs	r3, #2
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_GPIO_Init+0x2d4>)
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_GPIO_Init+0x2c0>)
 8000d46:	f002 f8b9 	bl	8002ebc <HAL_GPIO_Init>

}
 8000d4a:	bf00      	nop
 8000d4c:	3738      	adds	r7, #56	; 0x38
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48001000 	.word	0x48001000
 8000d5c:	48001400 	.word	0x48001400
 8000d60:	48001800 	.word	0x48001800
 8000d64:	48000400 	.word	0x48000400
 8000d68:	10110000 	.word	0x10110000
 8000d6c:	48000c00 	.word	0x48000c00
 8000d70:	48000800 	.word	0x48000800
 8000d74:	10210000 	.word	0x10210000

08000d78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d80:	f00f fda4 	bl	80108cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f00c ff20 	bl	800dbca <osDelay>
 8000d8a:	e7fb      	b.n	8000d84 <StartDefaultTask+0xc>

08000d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9e:	f000 fc99 	bl	80016d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40000400 	.word	0x40000400

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0x8>
	...

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_MspInit+0x4c>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	210f      	movs	r1, #15
 8000df6:	f06f 0001 	mvn.w	r0, #1
 8000dfa:	f001 fc4f 	bl	800269c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a21      	ldr	r2, [pc, #132]	; (8000eb0 <HAL_ADC_MspInit+0xa4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d13c      	bne.n	8000ea8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_ADC_MspInit+0xa8>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <HAL_ADC_MspInit+0xa8>)
 8000e34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_ADC_MspInit+0xa8>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_ADC_MspInit+0xa8>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <HAL_ADC_MspInit+0xa8>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_ADC_MspInit+0xa8>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_ADC_MspInit+0xa8>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <HAL_ADC_MspInit+0xa8>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_ADC_MspInit+0xa8>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8000e76:	2310      	movs	r3, #16
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e7a:	230b      	movs	r3, #11
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <HAL_ADC_MspInit+0xac>)
 8000e8a:	f002 f817 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8000e8e:	2308      	movs	r3, #8
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e92:	230b      	movs	r3, #11
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f002 f80a 	bl	8002ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	50040000 	.word	0x50040000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000800 	.word	0x48000800

08000ebc <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <HAL_DFSDM_FilterMspInit+0xbc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d119      	bne.n	8000f00 <HAL_DFSDM_FilterMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xc0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4a2a      	ldr	r2, [pc, #168]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xc0>)
 8000ed4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000ed6:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xc0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10b      	bne.n	8000ef6 <HAL_DFSDM_FilterMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_DFSDM_FilterMspInit+0xbc>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <HAL_DFSDM_FilterMspInit+0xbc>)
 8000efe:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <HAL_DFSDM_FilterMspInit+0xc8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d131      	bne.n	8000f6e <HAL_DFSDM_FilterMspInit+0xb2>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f0c:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <HAL_DFSDM_FilterMspInit+0xd0>)
 8000f0e:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f12:	2256      	movs	r2, #86	; 0x56
 8000f14:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f24:	2280      	movs	r2, #128	; 0x80
 8000f26:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f28:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f36:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000f46:	4810      	ldr	r0, [pc, #64]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f48:	f001 fdfe 	bl	8002b48 <HAL_DMA_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_DFSDM_FilterMspInit+0x9a>
    {
      Error_Handler();
 8000f52:	f7ff ff2d 	bl	8000db0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200001b4 	.word	0x200001b4
 8000f7c:	200001b0 	.word	0x200001b0
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40016100 	.word	0x40016100
 8000f88:	20002178 	.word	0x20002178
 8000f8c:	40020044 	.word	0x40020044

08000f90 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d119      	bne.n	8000fd4 <HAL_DFSDM_ChannelMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000fa0:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000fa8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d10b      	bne.n	8000fca <HAL_DFSDM_ChannelMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <HAL_DFSDM_ChannelMspInit+0x58>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <HAL_DFSDM_ChannelMspInit+0x58>)
 8000fb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_DFSDM_ChannelMspInit+0x58>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000fca:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a03      	ldr	r2, [pc, #12]	; (8000fe0 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000fd2:	6013      	str	r3, [r2, #0]
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	200001b4 	.word	0x200001b4
 8000fe4:	200001b0 	.word	0x200001b0
 8000fe8:	40021000 	.word	0x40021000

08000fec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <HAL_I2C_MspInit+0xdc>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d128      	bne.n	8001060 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8001026:	23c0      	movs	r3, #192	; 0xc0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102a:	2312      	movs	r3, #18
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102e:	2301      	movs	r3, #1
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001036:	2304      	movs	r3, #4
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4823      	ldr	r0, [pc, #140]	; (80010d0 <HAL_I2C_MspInit+0xe4>)
 8001042:	f001 ff3b 	bl	8002ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a20      	ldr	r2, [pc, #128]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 800104c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800105e:	e02f      	b.n	80010c0 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C3)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <HAL_I2C_MspInit+0xe8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d12a      	bne.n	80010c0 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 8001070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001082:	f003 fba1 	bl	80047c8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001086:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108c:	2312      	movs	r3, #18
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001090:	2301      	movs	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001098:	2304      	movs	r3, #4
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <HAL_I2C_MspInit+0xec>)
 80010a4:	f001 ff0a 	bl	8002ebc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 80010ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010b2:	6593      	str	r3, [r2, #88]	; 0x58
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_I2C_MspInit+0xe0>)
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3730      	adds	r7, #48	; 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40005400 	.word	0x40005400
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400
 80010d4:	40005c00 	.word	0x40005c00
 80010d8:	48001800 	.word	0x48001800

080010dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_RTC_MspInit+0x30>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d107      	bne.n	80010fe <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_RTC_MspInit+0x34>)
 80010f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_RTC_MspInit+0x34>)
 80010f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40002800 	.word	0x40002800
 8001110:	40021000 	.word	0x40021000

08001114 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a40      	ldr	r2, [pc, #256]	; (8001234 <HAL_SD_MspInit+0x120>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d179      	bne.n	800122a <HAL_SD_MspInit+0x116>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <HAL_SD_MspInit+0x124>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a3f      	ldr	r2, [pc, #252]	; (8001238 <HAL_SD_MspInit+0x124>)
 800113c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <HAL_SD_MspInit+0x124>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <HAL_SD_MspInit+0x124>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a39      	ldr	r2, [pc, #228]	; (8001238 <HAL_SD_MspInit+0x124>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <HAL_SD_MspInit+0x124>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <HAL_SD_MspInit+0x124>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a33      	ldr	r2, [pc, #204]	; (8001238 <HAL_SD_MspInit+0x124>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b31      	ldr	r3, [pc, #196]	; (8001238 <HAL_SD_MspInit+0x124>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <HAL_SD_MspInit+0x124>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <HAL_SD_MspInit+0x124>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_SD_MspInit+0x124>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 8001196:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80011a8:	2308      	movs	r3, #8
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4822      	ldr	r0, [pc, #136]	; (800123c <HAL_SD_MspInit+0x128>)
 80011b4:	f001 fe82 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 80011b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011bc:	61fb      	str	r3, [r7, #28]
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011ca:	230c      	movs	r3, #12
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	481a      	ldr	r0, [pc, #104]	; (8001240 <HAL_SD_MspInit+0x12c>)
 80011d6:	f001 fe71 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 80011da:	2304      	movs	r3, #4
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011ea:	230c      	movs	r3, #12
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <HAL_SD_MspInit+0x130>)
 80011f6:	f001 fe61 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 80011fa:	23c0      	movs	r3, #192	; 0xc0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 800120a:	2308      	movs	r3, #8
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <HAL_SD_MspInit+0x12c>)
 8001216:	f001 fe51 	bl	8002ebc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2105      	movs	r1, #5
 800121e:	2031      	movs	r0, #49	; 0x31
 8001220:	f001 fa3c 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001224:	2031      	movs	r0, #49	; 0x31
 8001226:	f001 fa55 	bl	80026d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	; 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	50062400 	.word	0x50062400
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400
 8001240:	48000800 	.word	0x48000800
 8001244:	48000c00 	.word	0x48000c00

08001248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	; 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a64      	ldr	r2, [pc, #400]	; (80013f8 <HAL_SPI_MspInit+0x1b0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d13a      	bne.n	80012e0 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800126a:	4b64      	ldr	r3, [pc, #400]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	4a63      	ldr	r2, [pc, #396]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001274:	6613      	str	r3, [r2, #96]	; 0x60
 8001276:	4b61      	ldr	r3, [pc, #388]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127e:	623b      	str	r3, [r7, #32]
 8001280:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a5d      	ldr	r2, [pc, #372]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001288:	f043 0310 	orr.w	r3, r3, #16
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b5b      	ldr	r3, [pc, #364]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0310 	and.w	r3, r3, #16
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 800129a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ac:	2305      	movs	r3, #5
 80012ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4852      	ldr	r0, [pc, #328]	; (8001400 <HAL_SPI_MspInit+0x1b8>)
 80012b8:	f001 fe00 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 80012bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ce:	2305      	movs	r3, #5
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	4849      	ldr	r0, [pc, #292]	; (8001400 <HAL_SPI_MspInit+0x1b8>)
 80012da:	f001 fdef 	bl	8002ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012de:	e086      	b.n	80013ee <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a47      	ldr	r2, [pc, #284]	; (8001404 <HAL_SPI_MspInit+0x1bc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d144      	bne.n	8001374 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	4a43      	ldr	r2, [pc, #268]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6593      	str	r3, [r2, #88]	; 0x58
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	4a3d      	ldr	r2, [pc, #244]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130e:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a37      	ldr	r2, [pc, #220]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b35      	ldr	r3, [pc, #212]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 8001332:	230a      	movs	r3, #10
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001342:	2305      	movs	r3, #5
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	482e      	ldr	r0, [pc, #184]	; (8001408 <HAL_SPI_MspInit+0x1c0>)
 800134e:	f001 fdb5 	bl	8002ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001352:	2308      	movs	r3, #8
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001362:	2305      	movs	r3, #5
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	4827      	ldr	r0, [pc, #156]	; (800140c <HAL_SPI_MspInit+0x1c4>)
 800136e:	f001 fda5 	bl	8002ebc <HAL_GPIO_Init>
}
 8001372:	e03c      	b.n	80013ee <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a25      	ldr	r2, [pc, #148]	; (8001410 <HAL_SPI_MspInit+0x1c8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d137      	bne.n	80013ee <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	4a1e      	ldr	r2, [pc, #120]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001388:	6593      	str	r3, [r2, #88]	; 0x58
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 800138c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_SPI_MspInit+0x1b4>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 80013ae:	2330      	movs	r3, #48	; 0x30
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013be:	2306      	movs	r3, #6
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4812      	ldr	r0, [pc, #72]	; (8001414 <HAL_SPI_MspInit+0x1cc>)
 80013ca:	f001 fd77 	bl	8002ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 80013ce:	2308      	movs	r3, #8
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013de:	2306      	movs	r3, #6
 80013e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	4619      	mov	r1, r3
 80013e8:	480a      	ldr	r0, [pc, #40]	; (8001414 <HAL_SPI_MspInit+0x1cc>)
 80013ea:	f001 fd67 	bl	8002ebc <HAL_GPIO_Init>
}
 80013ee:	bf00      	nop
 80013f0:	3738      	adds	r7, #56	; 0x38
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40013000 	.word	0x40013000
 80013fc:	40021000 	.word	0x40021000
 8001400:	48001000 	.word	0x48001000
 8001404:	40003800 	.word	0x40003800
 8001408:	48000c00 	.word	0x48000c00
 800140c:	48000800 	.word	0x48000800
 8001410:	40003c00 	.word	0x40003c00
 8001414:	48000400 	.word	0x48000400

08001418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d10c      	bne.n	8001444 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	4a1d      	ldr	r2, [pc, #116]	; (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6593      	str	r3, [r2, #88]	; 0x58
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001442:	e02a      	b.n	800149a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <HAL_TIM_Base_MspInit+0x90>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d114      	bne.n	8001478 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001454:	f043 0310 	orr.w	r3, r3, #16
 8001458:	6593      	str	r3, [r2, #88]	; 0x58
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2105      	movs	r1, #5
 800146a:	2036      	movs	r0, #54	; 0x36
 800146c:	f001 f916 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001470:	2036      	movs	r0, #54	; 0x36
 8001472:	f001 f92f 	bl	80026d4 <HAL_NVIC_EnableIRQ>
}
 8001476:	e010      	b.n	800149a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_TIM_Base_MspInit+0x94>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d10b      	bne.n	800149a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001488:	f043 0320 	orr.w	r3, r3, #32
 800148c:	6593      	str	r3, [r2, #88]	; 0x58
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	f003 0320 	and.w	r3, r3, #32
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40001000 	.word	0x40001000
 80014ac:	40001400 	.word	0x40001400

080014b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	; 0x30
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	201d      	movs	r0, #29
 80014c6:	f001 f8e9 	bl	800269c <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014ca:	201d      	movs	r0, #29
 80014cc:	f001 f902 	bl	80026d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_InitTick+0x9c>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	4a1d      	ldr	r2, [pc, #116]	; (800154c <HAL_InitTick+0x9c>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	6593      	str	r3, [r2, #88]	; 0x58
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_InitTick+0x9c>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e8:	f107 0210 	add.w	r2, r7, #16
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 ff8c 	bl	8005410 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014f8:	f003 ff5e 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 80014fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_InitTick+0xa0>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0c9b      	lsrs	r3, r3, #18
 8001508:	3b01      	subs	r3, #1
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_InitTick+0xa4>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <HAL_InitTick+0xa8>)
 8001510:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_InitTick+0xa4>)
 8001514:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001518:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_InitTick+0xa4>)
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_InitTick+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_InitTick+0xa4>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <HAL_InitTick+0xa4>)
 800152e:	f007 fe05 	bl	800913c <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d104      	bne.n	8001542 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001538:	4806      	ldr	r0, [pc, #24]	; (8001554 <HAL_InitTick+0xa4>)
 800153a:	f007 fe57 	bl	80091ec <HAL_TIM_Base_Start_IT>
 800153e:	4603      	mov	r3, r0
 8001540:	e000      	b.n	8001544 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	431bde83 	.word	0x431bde83
 8001554:	200023dc 	.word	0x200023dc
 8001558:	40000400 	.word	0x40000400

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <NMI_Handler+0x4>

08001562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <MemManage_Handler+0x4>

0800156e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <UsageFault_Handler+0x4>

0800157a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <DMA1_Channel4_IRQHandler+0x10>)
 800158e:	f001 fb83 	bl	8002c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20002178 	.word	0x20002178

0800159c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <TIM3_IRQHandler+0x10>)
 80015a2:	f007 fe93 	bl	80092cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200023dc 	.word	0x200023dc

080015b0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <SDMMC1_IRQHandler+0x10>)
 80015b6:	f006 faa3 	bl	8007b00 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000202c 	.word	0x2000202c

080015c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <TIM6_DAC_IRQHandler+0x10>)
 80015ca:	f007 fe7f 	bl	80092cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000225c 	.word	0x2000225c

080015d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <OTG_FS_IRQHandler+0x10>)
 80015de:	f002 f8c2 	bl	8003766 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20003dac 	.word	0x20003dac

080015ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <SystemInit+0x5c>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f6:	4a14      	ldr	r2, [pc, #80]	; (8001648 <SystemInit+0x5c>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <SystemInit+0x60>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a11      	ldr	r2, [pc, #68]	; (800164c <SystemInit+0x60>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <SystemInit+0x60>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <SystemInit+0x60>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a0d      	ldr	r2, [pc, #52]	; (800164c <SystemInit+0x60>)
 8001618:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800161c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001620:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <SystemInit+0x60>)
 8001624:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001628:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <SystemInit+0x60>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a07      	ldr	r2, [pc, #28]	; (800164c <SystemInit+0x60>)
 8001630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <SystemInit+0x60>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	40021000 	.word	0x40021000

08001650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff ffca 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001658:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800165a:	e003      	b.n	8001664 <LoopCopyDataInit>

0800165c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800165e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001660:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001662:	3104      	adds	r1, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001668:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800166a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800166c:	d3f6      	bcc.n	800165c <CopyDataInit>
	ldr	r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001670:	e002      	b.n	8001678 <LoopFillZerobss>

08001672 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001672:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001674:	f842 3b04 	str.w	r3, [r2], #4

08001678 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <LoopForever+0x16>)
	cmp	r2, r3
 800167a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800167c:	d3f9      	bcc.n	8001672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f00f ff2d 	bl	80114dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001682:	f7fe fdbd 	bl	8000200 <main>

08001686 <LoopForever>:

LoopForever:
    b LoopForever
 8001686:	e7fe      	b.n	8001686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001688:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800168c:	0801168c 	.word	0x0801168c
	ldr	r0, =_sdata
 8001690:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001694:	20000194 	.word	0x20000194
	ldr	r2, =_sbss
 8001698:	20000194 	.word	0x20000194
	ldr	r3, = _ebss
 800169c:	200041b4 	.word	0x200041b4

080016a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC1_IRQHandler>

080016a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 ffea 	bl	8002686 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff fefc 	bl	80014b0 <HAL_InitTick>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	e001      	b.n	80016c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c4:	f7ff fb7a 	bl	8000dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c8:	79fb      	ldrb	r3, [r7, #7]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_IncTick+0x20>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x24>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <HAL_IncTick+0x24>)
 80016e6:	6013      	str	r3, [r2, #0]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20002428 	.word	0x20002428

080016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_GetTick+0x14>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20002428 	.word	0x20002428

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff ffee 	bl	80016fc <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffde 	bl	80016fc <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008

0800175c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	609a      	str	r2, [r3, #8]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3360      	adds	r3, #96	; 0x60
 80017d6:	461a      	mov	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <LL_ADC_SetOffset+0x44>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	4313      	orrs	r3, r2
 80017f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017fc:	bf00      	nop
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	03fff000 	.word	0x03fff000

0800180c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3360      	adds	r3, #96	; 0x60
 800181a:	461a      	mov	r2, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800182c:	4618      	mov	r0, r3
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3360      	adds	r3, #96	; 0x60
 8001848:	461a      	mov	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	431a      	orrs	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001862:	bf00      	nop
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	615a      	str	r2, [r3, #20]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3330      	adds	r3, #48	; 0x30
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	4413      	add	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	211f      	movs	r1, #31
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	0e9b      	lsrs	r3, r3, #26
 80018cc:	f003 011f 	and.w	r1, r3, #31
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	431a      	orrs	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3314      	adds	r3, #20
 80018fc:	461a      	mov	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	0e5b      	lsrs	r3, r3, #25
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	4413      	add	r3, r2
 800190a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	0d1b      	lsrs	r3, r3, #20
 8001914:	f003 031f 	and.w	r3, r3, #31
 8001918:	2107      	movs	r1, #7
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	401a      	ands	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	0d1b      	lsrs	r3, r3, #20
 8001926:	f003 031f 	and.w	r3, r3, #31
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001936:	bf00      	nop
 8001938:	371c      	adds	r7, #28
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195c:	43db      	mvns	r3, r3
 800195e:	401a      	ands	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0318 	and.w	r3, r3, #24
 8001966:	4908      	ldr	r1, [pc, #32]	; (8001988 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001968:	40d9      	lsrs	r1, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	400b      	ands	r3, r1
 800196e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001972:	431a      	orrs	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	0007ffff 	.word	0x0007ffff

0800198c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800199c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6093      	str	r3, [r2, #8]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019c4:	d101      	bne.n	80019ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a14:	d101      	bne.n	8001a1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <LL_ADC_IsEnabled+0x18>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <LL_ADC_IsEnabled+0x1a>
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d101      	bne.n	8001a66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d101      	bne.n	8001a8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e12f      	b.n	8001d16 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff f9a1 	bl	8000e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff67 	bl	80019b0 <LL_ADC_IsDeepPowerDownEnabled>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff4d 	bl	800198c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff82 	bl	8001a00 <LL_ADC_IsInternalRegulatorEnabled>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d115      	bne.n	8001b2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff66 	bl	80019d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b0c:	4b84      	ldr	r3, [pc, #528]	; (8001d20 <HAL_ADC_Init+0x284>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	4a84      	ldr	r2, [pc, #528]	; (8001d24 <HAL_ADC_Init+0x288>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b20:	e002      	b.n	8001b28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f9      	bne.n	8001b22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff64 	bl	8001a00 <LL_ADC_IsInternalRegulatorEnabled>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10d      	bne.n	8001b5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	f043 0210 	orr.w	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff75 	bl	8001a4e <LL_ADC_REG_IsConversionOngoing>
 8001b64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 80c8 	bne.w	8001d04 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f040 80c4 	bne.w	8001d04 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b84:	f043 0202 	orr.w	r2, r3, #2
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff49 	bl	8001a28 <LL_ADC_IsEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b9c:	4862      	ldr	r0, [pc, #392]	; (8001d28 <HAL_ADC_Init+0x28c>)
 8001b9e:	f7ff ff43 	bl	8001a28 <LL_ADC_IsEnabled>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d105      	bne.n	8001bb4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4619      	mov	r1, r3
 8001bae:	485f      	ldr	r0, [pc, #380]	; (8001d2c <HAL_ADC_Init+0x290>)
 8001bb0:	f7ff fdd4 	bl	800175c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7e5b      	ldrb	r3, [r3, #25]
 8001bb8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bbe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001bc4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001bca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d106      	bne.n	8001bf0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	3b01      	subs	r3, #1
 8001be8:	045b      	lsls	r3, r3, #17
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d009      	beq.n	8001c0c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_ADC_Init+0x294>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	69b9      	ldr	r1, [r7, #24]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff12 	bl	8001a4e <LL_ADC_REG_IsConversionOngoing>
 8001c2a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff1f 	bl	8001a74 <LL_ADC_INJ_IsConversionOngoing>
 8001c36:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d140      	bne.n	8001cc0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d13d      	bne.n	8001cc0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7e1b      	ldrb	r3, [r3, #24]
 8001c4c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c4e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c56:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c66:	f023 0306 	bic.w	r3, r3, #6
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	69b9      	ldr	r1, [r7, #24]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d118      	bne.n	8001cb0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c88:	f023 0304 	bic.w	r3, r3, #4
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c94:	4311      	orrs	r1, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	611a      	str	r2, [r3, #16]
 8001cae:	e007      	b.n	8001cc0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0201 	bic.w	r2, r2, #1
 8001cbe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f023 010f 	bic.w	r1, r3, #15
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
 8001ce0:	e007      	b.n	8001cf2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 020f 	bic.w	r2, r2, #15
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	f023 0303 	bic.w	r3, r3, #3
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	659a      	str	r2, [r3, #88]	; 0x58
 8001d02:	e007      	b.n	8001d14 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f043 0210 	orr.w	r2, r3, #16
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d14:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000
 8001d24:	053e2d63 	.word	0x053e2d63
 8001d28:	50040000 	.word	0x50040000
 8001d2c:	50040300 	.word	0x50040300
 8001d30:	fff0c007 	.word	0xfff0c007

08001d34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0b6      	sub	sp, #216	; 0xd8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x22>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e3d5      	b.n	8002502 <HAL_ADC_ConfigChannel+0x7ce>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fe73 	bl	8001a4e <LL_ADC_REG_IsConversionOngoing>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 83ba 	bne.w	80024e4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d824      	bhi.n	8001dc2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	3b02      	subs	r3, #2
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d81b      	bhi.n	8001dba <HAL_ADC_ConfigChannel+0x86>
 8001d82:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <HAL_ADC_ConfigChannel+0x54>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08001d99 	.word	0x08001d99
 8001d8c:	08001da1 	.word	0x08001da1
 8001d90:	08001da9 	.word	0x08001da9
 8001d94:	08001db1 	.word	0x08001db1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	605a      	str	r2, [r3, #4]
          break;
 8001d9e:	e011      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2212      	movs	r2, #18
 8001da4:	605a      	str	r2, [r3, #4]
          break;
 8001da6:	e00d      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2218      	movs	r2, #24
 8001dac:	605a      	str	r2, [r3, #4]
          break;
 8001dae:	e009      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db6:	605a      	str	r2, [r3, #4]
          break;
 8001db8:	e004      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2206      	movs	r2, #6
 8001dbe:	605a      	str	r2, [r3, #4]
          break;
 8001dc0:	e000      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001dc2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f7ff fd5f 	bl	8001894 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fe37 	bl	8001a4e <LL_ADC_REG_IsConversionOngoing>
 8001de0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fe43 	bl	8001a74 <LL_ADC_INJ_IsConversionOngoing>
 8001dee:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001df2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 81c1 	bne.w	800217e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f040 81bc 	bne.w	800217e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e0e:	d10f      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f7ff fd66 	bl	80018ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fd20 	bl	800186e <LL_ADC_SetSamplingTimeCommonConfig>
 8001e2e:	e00e      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f7ff fd55 	bl	80018ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fd10 	bl	800186e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d00a      	beq.n	8001e86 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6919      	ldr	r1, [r3, #16]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e80:	f7ff fca0 	bl	80017c4 <LL_ADC_SetOffset>
 8001e84:	e17b      	b.n	800217e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fcbd 	bl	800180c <LL_ADC_GetOffsetChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10a      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x17e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fcb2 	bl	800180c <LL_ADC_GetOffsetChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	0e9b      	lsrs	r3, r3, #26
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	e01e      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x1bc>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fca7 	bl	800180c <LL_ADC_GetOffsetChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ed0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	e004      	b.n	8001eee <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001ee4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1d4>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	0e9b      	lsrs	r3, r3, #26
 8001f02:	f003 031f 	and.w	r3, r3, #31
 8001f06:	e018      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x206>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	e004      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001f30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d106      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fc76 	bl	8001838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2101      	movs	r1, #1
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fc5a 	bl	800180c <LL_ADC_GetOffsetChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10a      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x244>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2101      	movs	r1, #1
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fc4f 	bl	800180c <LL_ADC_GetOffsetChannel>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	0e9b      	lsrs	r3, r3, #26
 8001f72:	f003 021f 	and.w	r2, r3, #31
 8001f76:	e01e      	b.n	8001fb6 <HAL_ADC_ConfigChannel+0x282>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fc44 	bl	800180c <LL_ADC_GetOffsetChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	e004      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x29a>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	e018      	b.n	8002000 <HAL_ADC_ConfigChannel+0x2cc>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fe2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e004      	b.n	8002000 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001ff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002000:	429a      	cmp	r2, r3
 8002002:	d106      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2200      	movs	r2, #0
 800200a:	2101      	movs	r1, #1
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fc13 	bl	8001838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2102      	movs	r1, #2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fbf7 	bl	800180c <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10a      	bne.n	800203e <HAL_ADC_ConfigChannel+0x30a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2102      	movs	r1, #2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fbec 	bl	800180c <LL_ADC_GetOffsetChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	0e9b      	lsrs	r3, r3, #26
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	e01e      	b.n	800207c <HAL_ADC_ConfigChannel+0x348>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2102      	movs	r1, #2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fbe1 	bl	800180c <LL_ADC_GetOffsetChannel>
 800204a:	4603      	mov	r3, r0
 800204c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800205c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002060:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002064:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800206c:	2320      	movs	r3, #32
 800206e:	e004      	b.n	800207a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002070:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x360>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	e016      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x38e>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80020a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80020b4:	2320      	movs	r3, #32
 80020b6:	e004      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80020b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d106      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	2102      	movs	r1, #2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fbb2 	bl	8001838 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2103      	movs	r1, #3
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fb96 	bl	800180c <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10a      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x3cc>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2103      	movs	r1, #3
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fb8b 	bl	800180c <LL_ADC_GetOffsetChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	0e9b      	lsrs	r3, r3, #26
 80020fa:	f003 021f 	and.w	r2, r3, #31
 80020fe:	e017      	b.n	8002130 <HAL_ADC_ConfigChannel+0x3fc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2103      	movs	r1, #3
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fb80 	bl	800180c <LL_ADC_GetOffsetChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800211a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800211c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002122:	2320      	movs	r3, #32
 8002124:	e003      	b.n	800212e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x414>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0e9b      	lsrs	r3, r3, #26
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	e011      	b.n	800216c <HAL_ADC_ConfigChannel+0x438>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002158:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800215a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002160:	2320      	movs	r3, #32
 8002162:	e003      	b.n	800216c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2200      	movs	r2, #0
 8002176:	2103      	movs	r1, #3
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fb5d 	bl	8001838 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fc50 	bl	8001a28 <LL_ADC_IsEnabled>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 8140 	bne.w	8002410 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	461a      	mov	r2, r3
 800219e:	f7ff fbd1 	bl	8001944 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4a8f      	ldr	r2, [pc, #572]	; (80023e4 <HAL_ADC_ConfigChannel+0x6b0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	f040 8131 	bne.w	8002410 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10b      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x4a2>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	3301      	adds	r3, #1
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2b09      	cmp	r3, #9
 80021cc:	bf94      	ite	ls
 80021ce:	2301      	movls	r3, #1
 80021d0:	2300      	movhi	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	e019      	b.n	800220a <HAL_ADC_ConfigChannel+0x4d6>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021e6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e003      	b.n	80021fa <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80021f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2b09      	cmp	r3, #9
 8002202:	bf94      	ite	ls
 8002204:	2301      	movls	r3, #1
 8002206:	2300      	movhi	r3, #0
 8002208:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800220a:	2b00      	cmp	r3, #0
 800220c:	d079      	beq.n	8002302 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_ADC_ConfigChannel+0x4f6>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0e9b      	lsrs	r3, r3, #26
 8002220:	3301      	adds	r3, #1
 8002222:	069b      	lsls	r3, r3, #26
 8002224:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002228:	e015      	b.n	8002256 <HAL_ADC_ConfigChannel+0x522>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800223a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800223c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002242:	2320      	movs	r3, #32
 8002244:	e003      	b.n	800224e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	3301      	adds	r3, #1
 8002250:	069b      	lsls	r3, r3, #26
 8002252:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x542>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	0e9b      	lsrs	r3, r3, #26
 8002268:	3301      	adds	r3, #1
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2101      	movs	r1, #1
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	e017      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x572>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002286:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800228e:	2320      	movs	r3, #32
 8002290:	e003      	b.n	800229a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3301      	adds	r3, #1
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	ea42 0103 	orr.w	r1, r2, r3
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10a      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x598>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	0e9b      	lsrs	r3, r3, #26
 80022bc:	3301      	adds	r3, #1
 80022be:	f003 021f 	and.w	r2, r3, #31
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	051b      	lsls	r3, r3, #20
 80022ca:	e018      	b.n	80022fe <HAL_ADC_ConfigChannel+0x5ca>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e003      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80022e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f003 021f 	and.w	r2, r3, #31
 80022f6:	4613      	mov	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022fe:	430b      	orrs	r3, r1
 8002300:	e081      	b.n	8002406 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d107      	bne.n	800231e <HAL_ADC_ConfigChannel+0x5ea>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0e9b      	lsrs	r3, r3, #26
 8002314:	3301      	adds	r3, #1
 8002316:	069b      	lsls	r3, r3, #26
 8002318:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800231c:	e015      	b.n	800234a <HAL_ADC_ConfigChannel+0x616>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800232c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e003      	b.n	8002342 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	069b      	lsls	r3, r3, #26
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_ADC_ConfigChannel+0x636>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0e9b      	lsrs	r3, r3, #26
 800235c:	3301      	adds	r3, #1
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	e017      	b.n	800239a <HAL_ADC_ConfigChannel+0x666>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	61fb      	str	r3, [r7, #28]
  return result;
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002382:	2320      	movs	r3, #32
 8002384:	e003      	b.n	800238e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3301      	adds	r3, #1
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	2101      	movs	r1, #1
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	ea42 0103 	orr.w	r1, r2, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10d      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x692>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0e9b      	lsrs	r3, r3, #26
 80023b0:	3301      	adds	r3, #1
 80023b2:	f003 021f 	and.w	r2, r3, #31
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	3b1e      	subs	r3, #30
 80023be:	051b      	lsls	r3, r3, #20
 80023c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023c4:	e01e      	b.n	8002404 <HAL_ADC_ConfigChannel+0x6d0>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	613b      	str	r3, [r7, #16]
  return result;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d104      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e006      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x6bc>
 80023e2:	bf00      	nop
 80023e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f003 021f 	and.w	r2, r3, #31
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	3b1e      	subs	r3, #30
 80023fe:	051b      	lsls	r3, r3, #20
 8002400:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002404:	430b      	orrs	r3, r1
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	6892      	ldr	r2, [r2, #8]
 800240a:	4619      	mov	r1, r3
 800240c:	f7ff fa6e 	bl	80018ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b3d      	ldr	r3, [pc, #244]	; (800250c <HAL_ADC_ConfigChannel+0x7d8>)
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d06c      	beq.n	80024f6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800241c:	483c      	ldr	r0, [pc, #240]	; (8002510 <HAL_ADC_ConfigChannel+0x7dc>)
 800241e:	f7ff f9c3 	bl	80017a8 <LL_ADC_GetCommonPathInternalCh>
 8002422:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <HAL_ADC_ConfigChannel+0x7e0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d127      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d121      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a35      	ldr	r2, [pc, #212]	; (8002518 <HAL_ADC_ConfigChannel+0x7e4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d157      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800244a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800244e:	4619      	mov	r1, r3
 8002450:	482f      	ldr	r0, [pc, #188]	; (8002510 <HAL_ADC_ConfigChannel+0x7dc>)
 8002452:	f7ff f996 	bl	8001782 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002456:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_ADC_ConfigChannel+0x7e8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	099b      	lsrs	r3, r3, #6
 800245c:	4a30      	ldr	r2, [pc, #192]	; (8002520 <HAL_ADC_ConfigChannel+0x7ec>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002470:	e002      	b.n	8002478 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	3b01      	subs	r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f9      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800247e:	e03a      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a27      	ldr	r2, [pc, #156]	; (8002524 <HAL_ADC_ConfigChannel+0x7f0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d113      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x77e>
 800248a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800248e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10d      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_ADC_ConfigChannel+0x7e4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d12a      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a8:	4619      	mov	r1, r3
 80024aa:	4819      	ldr	r0, [pc, #100]	; (8002510 <HAL_ADC_ConfigChannel+0x7dc>)
 80024ac:	f7ff f969 	bl	8001782 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024b0:	e021      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <HAL_ADC_ConfigChannel+0x7f4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d11c      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d116      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a12      	ldr	r2, [pc, #72]	; (8002518 <HAL_ADC_ConfigChannel+0x7e4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d111      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024da:	4619      	mov	r1, r3
 80024dc:	480c      	ldr	r0, [pc, #48]	; (8002510 <HAL_ADC_ConfigChannel+0x7dc>)
 80024de:	f7ff f950 	bl	8001782 <LL_ADC_SetCommonPathInternalCh>
 80024e2:	e008      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	f043 0220 	orr.w	r2, r3, #32
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80024fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002502:	4618      	mov	r0, r3
 8002504:	37d8      	adds	r7, #216	; 0xd8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	80080000 	.word	0x80080000
 8002510:	50040300 	.word	0x50040300
 8002514:	c7520000 	.word	0xc7520000
 8002518:	50040000 	.word	0x50040000
 800251c:	20000000 	.word	0x20000000
 8002520:	053e2d63 	.word	0x053e2d63
 8002524:	cb840000 	.word	0xcb840000
 8002528:	80000001 	.word	0x80000001

0800252c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	60d3      	str	r3, [r2, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db0b      	blt.n	80025ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <__NVIC_EnableIRQ+0x38>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2001      	movs	r0, #1
 80025b2:	fa00 f202 	lsl.w	r2, r0, r2
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db0a      	blt.n	80025f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	490c      	ldr	r1, [pc, #48]	; (8002618 <__NVIC_SetPriority+0x4c>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f4:	e00a      	b.n	800260c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4908      	ldr	r1, [pc, #32]	; (800261c <__NVIC_SetPriority+0x50>)
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3b04      	subs	r3, #4
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	440b      	add	r3, r1
 800260a:	761a      	strb	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f1c3 0307 	rsb	r3, r3, #7
 800263a:	2b04      	cmp	r3, #4
 800263c:	bf28      	it	cs
 800263e:	2304      	movcs	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3304      	adds	r3, #4
 8002646:	2b06      	cmp	r3, #6
 8002648:	d902      	bls.n	8002650 <NVIC_EncodePriority+0x30>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b03      	subs	r3, #3
 800264e:	e000      	b.n	8002652 <NVIC_EncodePriority+0x32>
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002668:	f04f 31ff 	mov.w	r1, #4294967295
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43d9      	mvns	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	4313      	orrs	r3, r2
         );
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	; 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff4c 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026ae:	f7ff ff61 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f7ff ffb1 	bl	8002620 <NVIC_EncodePriority>
 80026be:	4602      	mov	r2, r0
 80026c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff80 	bl	80025cc <__NVIC_SetPriority>
}
 80026cc:	bf00      	nop
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff54 	bl	8002590 <__NVIC_EnableIRQ>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0ac      	b.n	800285c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f9d2 	bl	8002ab0 <DFSDM_GetChannelFromInstance>
 800270c:	4603      	mov	r3, r0
 800270e:	4a55      	ldr	r2, [pc, #340]	; (8002864 <HAL_DFSDM_ChannelInit+0x174>)
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e09f      	b.n	800285c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7fe fc37 	bl	8000f90 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002722:	4b51      	ldr	r3, [pc, #324]	; (8002868 <HAL_DFSDM_ChannelInit+0x178>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	4a4f      	ldr	r2, [pc, #316]	; (8002868 <HAL_DFSDM_ChannelInit+0x178>)
 800272a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800272c:	4b4e      	ldr	r3, [pc, #312]	; (8002868 <HAL_DFSDM_ChannelInit+0x178>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d125      	bne.n	8002780 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002734:	4b4d      	ldr	r3, [pc, #308]	; (800286c <HAL_DFSDM_ChannelInit+0x17c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a4c      	ldr	r2, [pc, #304]	; (800286c <HAL_DFSDM_ChannelInit+0x17c>)
 800273a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800273e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002740:	4b4a      	ldr	r3, [pc, #296]	; (800286c <HAL_DFSDM_ChannelInit+0x17c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4948      	ldr	r1, [pc, #288]	; (800286c <HAL_DFSDM_ChannelInit+0x17c>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_DFSDM_ChannelInit+0x17c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a46      	ldr	r2, [pc, #280]	; (800286c <HAL_DFSDM_ChannelInit+0x17c>)
 8002754:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002758:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	791b      	ldrb	r3, [r3, #4]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d108      	bne.n	8002774 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002762:	4b42      	ldr	r3, [pc, #264]	; (800286c <HAL_DFSDM_ChannelInit+0x17c>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	3b01      	subs	r3, #1
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	493f      	ldr	r1, [pc, #252]	; (800286c <HAL_DFSDM_ChannelInit+0x17c>)
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002774:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_DFSDM_ChannelInit+0x17c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3c      	ldr	r2, [pc, #240]	; (800286c <HAL_DFSDM_ChannelInit+0x17c>)
 800277a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800277e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800278e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6819      	ldr	r1, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800279e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80027a4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 020f 	bic.w	r2, r2, #15
 80027bc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80027e4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6899      	ldr	r1, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	3b01      	subs	r3, #1
 80027f6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f002 0207 	and.w	r2, r2, #7
 8002810:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800283c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f930 	bl	8002ab0 <DFSDM_GetChannelFromInstance>
 8002850:	4602      	mov	r2, r0
 8002852:	4904      	ldr	r1, [pc, #16]	; (8002864 <HAL_DFSDM_ChannelInit+0x174>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200001bc 	.word	0x200001bc
 8002868:	200001b8 	.word	0x200001b8
 800286c:	40016000 	.word	0x40016000

08002870 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0ca      	b.n	8002a18 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a66      	ldr	r2, [pc, #408]	; (8002a20 <HAL_DFSDM_FilterInit+0x1b0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d109      	bne.n	80028a0 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002890:	2b01      	cmp	r3, #1
 8002892:	d003      	beq.n	800289c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0bb      	b.n	8002a18 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7fe faff 	bl	8000ebc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80028cc:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7a1b      	ldrb	r3, [r3, #8]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d108      	bne.n	80028e8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e007      	b.n	80028f8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80028f6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7a5b      	ldrb	r3, [r3, #9]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d108      	bne.n	8002912 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e007      	b.n	8002922 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002930:	f023 0308 	bic.w	r3, r3, #8
 8002934:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d108      	bne.n	8002950 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6819      	ldr	r1, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7c1b      	ldrb	r3, [r3, #16]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d108      	bne.n	800296a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0210 	orr.w	r2, r2, #16
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e007      	b.n	800297a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0210 	bic.w	r2, r2, #16
 8002978:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7c5b      	ldrb	r3, [r3, #17]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d108      	bne.n	8002994 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f042 0220 	orr.w	r2, r2, #32
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e007      	b.n	80029a4 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0220 	bic.w	r2, r2, #32
 80029a2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80029b2:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80029b6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6959      	ldr	r1, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029ca:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80029d2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	7c1a      	ldrb	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40016100 	.word	0x40016100

08002a24 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d02e      	beq.n	8002a9c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a44:	2bff      	cmp	r3, #255	; 0xff
 8002a46:	d029      	beq.n	8002a9c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10d      	bne.n	8002a7e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	021b      	lsls	r3, r3, #8
 8002a6c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e00a      	b.n	8002a94 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30
 8002a9a:	e001      	b.n	8002aa0 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a1c      	ldr	r2, [pc, #112]	; (8002b2c <DFSDM_GetChannelFromInstance+0x7c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d102      	bne.n	8002ac6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e02b      	b.n	8002b1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <DFSDM_GetChannelFromInstance+0x80>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d102      	bne.n	8002ad4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e024      	b.n	8002b1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <DFSDM_GetChannelFromInstance+0x84>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d102      	bne.n	8002ae2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002adc:	2302      	movs	r3, #2
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e01d      	b.n	8002b1e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <DFSDM_GetChannelFromInstance+0x88>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d102      	bne.n	8002af0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002aea:	2304      	movs	r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e016      	b.n	8002b1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <DFSDM_GetChannelFromInstance+0x8c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d102      	bne.n	8002afe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002af8:	2305      	movs	r3, #5
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e00f      	b.n	8002b1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a0f      	ldr	r2, [pc, #60]	; (8002b40 <DFSDM_GetChannelFromInstance+0x90>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d102      	bne.n	8002b0c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002b06:	2306      	movs	r3, #6
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e008      	b.n	8002b1e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <DFSDM_GetChannelFromInstance+0x94>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d102      	bne.n	8002b1a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002b14:	2307      	movs	r3, #7
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e001      	b.n	8002b1e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	40016000 	.word	0x40016000
 8002b30:	40016020 	.word	0x40016020
 8002b34:	40016040 	.word	0x40016040
 8002b38:	40016080 	.word	0x40016080
 8002b3c:	400160a0 	.word	0x400160a0
 8002b40:	400160c0 	.word	0x400160c0
 8002b44:	400160e0 	.word	0x400160e0

08002b48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e08d      	b.n	8002c76 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_DMA_Init+0x138>)
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d80f      	bhi.n	8002b86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b45      	ldr	r3, [pc, #276]	; (8002c84 <HAL_DMA_Init+0x13c>)
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a45      	ldr	r2, [pc, #276]	; (8002c88 <HAL_DMA_Init+0x140>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	009a      	lsls	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a42      	ldr	r2, [pc, #264]	; (8002c8c <HAL_DMA_Init+0x144>)
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
 8002b84:	e00e      	b.n	8002ba4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <HAL_DMA_Init+0x148>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a3d      	ldr	r2, [pc, #244]	; (8002c88 <HAL_DMA_Init+0x140>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a3c      	ldr	r2, [pc, #240]	; (8002c94 <HAL_DMA_Init+0x14c>)
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8fe 	bl	8002df8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c04:	d102      	bne.n	8002c0c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c20:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <HAL_DMA_Init+0x104>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d80c      	bhi.n	8002c4c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f91e 	bl	8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	e008      	b.n	8002c5e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40020407 	.word	0x40020407
 8002c84:	bffdfff8 	.word	0xbffdfff8
 8002c88:	cccccccd 	.word	0xcccccccd
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	bffdfbf8 	.word	0xbffdfbf8
 8002c94:	40020400 	.word	0x40020400

08002c98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	f003 031c 	and.w	r3, r3, #28
 8002cb8:	2204      	movs	r2, #4
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d026      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x7a>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d021      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d107      	bne.n	8002cec <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0204 	bic.w	r2, r2, #4
 8002cea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	f003 021c 	and.w	r2, r3, #28
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d071      	beq.n	8002dec <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d10:	e06c      	b.n	8002dec <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f003 031c 	and.w	r3, r3, #28
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d02e      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xec>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d029      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10b      	bne.n	8002d56 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 020a 	bic.w	r2, r2, #10
 8002d4c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f003 021c 	and.w	r2, r3, #28
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	2102      	movs	r1, #2
 8002d64:	fa01 f202 	lsl.w	r2, r1, r2
 8002d68:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d038      	beq.n	8002dec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d82:	e033      	b.n	8002dec <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	f003 031c 	and.w	r3, r3, #28
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d02a      	beq.n	8002dee <HAL_DMA_IRQHandler+0x156>
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d025      	beq.n	8002dee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 020e 	bic.w	r2, r2, #14
 8002db0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f003 021c 	and.w	r2, r3, #28
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d004      	beq.n	8002dee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
}
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d80a      	bhi.n	8002e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e18:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6493      	str	r3, [r2, #72]	; 0x48
 8002e20:	e007      	b.n	8002e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e2c:	4413      	add	r3, r2
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3b08      	subs	r3, #8
 8002e3a:	4a0c      	ldr	r2, [pc, #48]	; (8002e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e48:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2201      	movs	r2, #1
 8002e52:	409a      	lsls	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40020407 	.word	0x40020407
 8002e68:	4002081c 	.word	0x4002081c
 8002e6c:	cccccccd 	.word	0xcccccccd
 8002e70:	40020880 	.word	0x40020880

08002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e96:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	1000823f 	.word	0x1000823f
 8002eb8:	40020940 	.word	0x40020940

08002ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eca:	e166      	b.n	800319a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 8158 	beq.w	8003194 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d00b      	beq.n	8002f04 <HAL_GPIO_Init+0x48>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d007      	beq.n	8002f04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ef8:	2b11      	cmp	r3, #17
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b12      	cmp	r3, #18
 8002f02:	d130      	bne.n	8002f66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	f003 0201 	and.w	r2, r3, #1
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	2203      	movs	r2, #3
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0xea>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b12      	cmp	r3, #18
 8002fa4:	d123      	bne.n	8002fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	08da      	lsrs	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3208      	adds	r2, #8
 8002fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	220f      	movs	r2, #15
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	08da      	lsrs	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3208      	adds	r2, #8
 8002fe8:	6939      	ldr	r1, [r7, #16]
 8002fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffe:	43db      	mvns	r3, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0203 	and.w	r2, r3, #3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80b2 	beq.w	8003194 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003030:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <HAL_GPIO_Init+0x2fc>)
 8003032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003034:	4a60      	ldr	r2, [pc, #384]	; (80031b8 <HAL_GPIO_Init+0x2fc>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6613      	str	r3, [r2, #96]	; 0x60
 800303c:	4b5e      	ldr	r3, [pc, #376]	; (80031b8 <HAL_GPIO_Init+0x2fc>)
 800303e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003048:	4a5c      	ldr	r2, [pc, #368]	; (80031bc <HAL_GPIO_Init+0x300>)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	220f      	movs	r2, #15
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003072:	d02b      	beq.n	80030cc <HAL_GPIO_Init+0x210>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <HAL_GPIO_Init+0x304>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d025      	beq.n	80030c8 <HAL_GPIO_Init+0x20c>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a51      	ldr	r2, [pc, #324]	; (80031c4 <HAL_GPIO_Init+0x308>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d01f      	beq.n	80030c4 <HAL_GPIO_Init+0x208>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a50      	ldr	r2, [pc, #320]	; (80031c8 <HAL_GPIO_Init+0x30c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d019      	beq.n	80030c0 <HAL_GPIO_Init+0x204>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a4f      	ldr	r2, [pc, #316]	; (80031cc <HAL_GPIO_Init+0x310>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d013      	beq.n	80030bc <HAL_GPIO_Init+0x200>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a4e      	ldr	r2, [pc, #312]	; (80031d0 <HAL_GPIO_Init+0x314>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00d      	beq.n	80030b8 <HAL_GPIO_Init+0x1fc>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a4d      	ldr	r2, [pc, #308]	; (80031d4 <HAL_GPIO_Init+0x318>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d007      	beq.n	80030b4 <HAL_GPIO_Init+0x1f8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a4c      	ldr	r2, [pc, #304]	; (80031d8 <HAL_GPIO_Init+0x31c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d101      	bne.n	80030b0 <HAL_GPIO_Init+0x1f4>
 80030ac:	2307      	movs	r3, #7
 80030ae:	e00e      	b.n	80030ce <HAL_GPIO_Init+0x212>
 80030b0:	2308      	movs	r3, #8
 80030b2:	e00c      	b.n	80030ce <HAL_GPIO_Init+0x212>
 80030b4:	2306      	movs	r3, #6
 80030b6:	e00a      	b.n	80030ce <HAL_GPIO_Init+0x212>
 80030b8:	2305      	movs	r3, #5
 80030ba:	e008      	b.n	80030ce <HAL_GPIO_Init+0x212>
 80030bc:	2304      	movs	r3, #4
 80030be:	e006      	b.n	80030ce <HAL_GPIO_Init+0x212>
 80030c0:	2303      	movs	r3, #3
 80030c2:	e004      	b.n	80030ce <HAL_GPIO_Init+0x212>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e002      	b.n	80030ce <HAL_GPIO_Init+0x212>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <HAL_GPIO_Init+0x212>
 80030cc:	2300      	movs	r3, #0
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	f002 0203 	and.w	r2, r2, #3
 80030d4:	0092      	lsls	r2, r2, #2
 80030d6:	4093      	lsls	r3, r2
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030de:	4937      	ldr	r1, [pc, #220]	; (80031bc <HAL_GPIO_Init+0x300>)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	3302      	adds	r3, #2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030ec:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_GPIO_Init+0x320>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003110:	4a32      	ldr	r2, [pc, #200]	; (80031dc <HAL_GPIO_Init+0x320>)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_GPIO_Init+0x320>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	43db      	mvns	r3, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800313a:	4a28      	ldr	r2, [pc, #160]	; (80031dc <HAL_GPIO_Init+0x320>)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003140:	4b26      	ldr	r3, [pc, #152]	; (80031dc <HAL_GPIO_Init+0x320>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43db      	mvns	r3, r3
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4013      	ands	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <HAL_GPIO_Init+0x320>)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <HAL_GPIO_Init+0x320>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800318e:	4a13      	ldr	r2, [pc, #76]	; (80031dc <HAL_GPIO_Init+0x320>)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f47f ae91 	bne.w	8002ecc <HAL_GPIO_Init+0x10>
  }
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40010000 	.word	0x40010000
 80031c0:	48000400 	.word	0x48000400
 80031c4:	48000800 	.word	0x48000800
 80031c8:	48000c00 	.word	0x48000c00
 80031cc:	48001000 	.word	0x48001000
 80031d0:	48001400 	.word	0x48001400
 80031d4:	48001800 	.word	0x48001800
 80031d8:	48001c00 	.word	0x48001c00
 80031dc:	40010400 	.word	0x40010400

080031e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	887b      	ldrh	r3, [r7, #2]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e001      	b.n	8003202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
 800321c:	4613      	mov	r3, r2
 800321e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003220:	787b      	ldrb	r3, [r7, #1]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800322c:	e002      	b.n	8003234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800322e:	887a      	ldrh	r2, [r7, #2]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4013      	ands	r3, r2
 8003258:	041a      	lsls	r2, r3, #16
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	43d9      	mvns	r1, r3
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	400b      	ands	r3, r1
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	619a      	str	r2, [r3, #24]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e081      	b.n	800338a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fea6 	bl	8000fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	e006      	b.n	80032fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d104      	bne.n	800330e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800330c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800331c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003320:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003330:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	ea42 0103 	orr.w	r1, r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69d9      	ldr	r1, [r3, #28]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d138      	bne.n	800341a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e032      	b.n	800341c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2224      	movs	r2, #36	; 0x24
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
  }
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b20      	cmp	r3, #32
 800343c:	d139      	bne.n	80034b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003448:	2302      	movs	r3, #2
 800344a:	e033      	b.n	80034b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2224      	movs	r2, #36	; 0x24
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800347a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e000      	b.n	80034b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c2:	b08f      	sub	sp, #60	; 0x3c
 80034c4:	af0a      	add	r7, sp, #40	; 0x28
 80034c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e116      	b.n	8003700 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f00d fbdf 	bl	8010cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f007 f982 	bl	800a81a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	687e      	ldr	r6, [r7, #4]
 800351e:	466d      	mov	r5, sp
 8003520:	f106 0410 	add.w	r4, r6, #16
 8003524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800352c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003530:	e885 0003 	stmia.w	r5, {r0, r1}
 8003534:	1d33      	adds	r3, r6, #4
 8003536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003538:	6838      	ldr	r0, [r7, #0]
 800353a:	f007 f895 	bl	800a668 <USB_CoreInit>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0d7      	b.n	8003700 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f007 f970 	bl	800a83c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e04a      	b.n	80035f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	333d      	adds	r3, #61	; 0x3d
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	333c      	adds	r3, #60	; 0x3c
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	b298      	uxth	r0, r3
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3342      	adds	r3, #66	; 0x42
 800359e:	4602      	mov	r2, r0
 80035a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035a2:	7bfa      	ldrb	r2, [r7, #15]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	333f      	adds	r3, #63	; 0x3f
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b6:	7bfa      	ldrb	r2, [r7, #15]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3344      	adds	r3, #68	; 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035ca:	7bfa      	ldrb	r2, [r7, #15]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	3348      	adds	r3, #72	; 0x48
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035de:	7bfa      	ldrb	r2, [r7, #15]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3350      	adds	r3, #80	; 0x50
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	3301      	adds	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d3af      	bcc.n	8003562 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	e044      	b.n	8003692 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003676:	7bfa      	ldrb	r2, [r7, #15]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	3301      	adds	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	429a      	cmp	r2, r3
 800369a:	d3b5      	bcc.n	8003608 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	687e      	ldr	r6, [r7, #4]
 80036a4:	466d      	mov	r5, sp
 80036a6:	f106 0410 	add.w	r4, r6, #16
 80036aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ba:	1d33      	adds	r3, r6, #4
 80036bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036be:	6838      	ldr	r0, [r7, #0]
 80036c0:	f007 f8e6 	bl	800a890 <USB_DevInit>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e014      	b.n	8003700 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 ff62 	bl	80045b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f008 f868 	bl	800b7ce <USB_DevDisconnect>

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003708 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_PCD_Start+0x1c>
 8003720:	2302      	movs	r3, #2
 8003722:	e01c      	b.n	800375e <HAL_PCD_Start+0x56>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f007 f857 	bl	800a7f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f008 f81c 	bl	800b78c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003766:	b590      	push	{r4, r7, lr}
 8003768:	b08d      	sub	sp, #52	; 0x34
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f008 f8da 	bl	800b936 <USB_GetMode>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	f040 838f 	bne.w	8003ea8 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f008 f83e 	bl	800b810 <USB_ReadInterrupts>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8385 	beq.w	8003ea6 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f008 f835 	bl	800b810 <USB_ReadInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d107      	bne.n	80037c0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f002 0202 	and.w	r2, r2, #2
 80037be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f008 f823 	bl	800b810 <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d161      	bne.n	8003898 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0210 	bic.w	r2, r2, #16
 80037e2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	f003 020f 	and.w	r2, r3, #15
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	3304      	adds	r3, #4
 8003802:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	0c5b      	lsrs	r3, r3, #17
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	2b02      	cmp	r3, #2
 800380e:	d124      	bne.n	800385a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d035      	beq.n	8003888 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	6a38      	ldr	r0, [r7, #32]
 8003830:	f007 fe89 	bl	800b546 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	091b      	lsrs	r3, r3, #4
 800383c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003840:	441a      	add	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	091b      	lsrs	r3, r3, #4
 800384e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003852:	441a      	add	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	619a      	str	r2, [r3, #24]
 8003858:	e016      	b.n	8003888 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	0c5b      	lsrs	r3, r3, #17
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	2b06      	cmp	r3, #6
 8003864:	d110      	bne.n	8003888 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800386c:	2208      	movs	r2, #8
 800386e:	4619      	mov	r1, r3
 8003870:	6a38      	ldr	r0, [r7, #32]
 8003872:	f007 fe68 	bl	800b546 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003882:	441a      	add	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0210 	orr.w	r2, r2, #16
 8003896:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f007 ffb7 	bl	800b810 <USB_ReadInterrupts>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038ac:	d16e      	bne.n	800398c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f007 ffbd 	bl	800b836 <USB_ReadDevAllOutEpInterrupt>
 80038bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038be:	e062      	b.n	8003986 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d057      	beq.n	800397a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f007 ffe2 	bl	800b89e <USB_ReadDevOutEPInterrupt>
 80038da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	2301      	movs	r3, #1
 80038f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fd82 	bl	8004404 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003916:	461a      	mov	r2, r3
 8003918:	2308      	movs	r3, #8
 800391a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800391c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fdbe 	bl	80044a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	2310      	movs	r3, #16
 800393e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	461a      	mov	r2, r3
 8003958:	2320      	movs	r3, #32
 800395a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003972:	461a      	mov	r2, r3
 8003974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003978:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	3301      	adds	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	d199      	bne.n	80038c0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f007 ff3d 	bl	800b810 <USB_ReadInterrupts>
 8003996:	4603      	mov	r3, r0
 8003998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800399c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039a0:	f040 8087 	bne.w	8003ab2 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f007 ff5e 	bl	800b86a <USB_ReadDevAllInEpInterrupt>
 80039ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039b4:	e07a      	b.n	8003aac <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d06f      	beq.n	8003aa0 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f007 ff85 	bl	800b8da <USB_ReadDevInEPInterrupt>
 80039d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	2201      	movs	r2, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69f9      	ldr	r1, [r7, #28]
 80039f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039fc:	4013      	ands	r3, r2
 80039fe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2301      	movs	r3, #1
 8003a10:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	4619      	mov	r1, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f00d f9dc 	bl	8010dd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a34:	461a      	mov	r2, r3
 8003a36:	2308      	movs	r3, #8
 8003a38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	461a      	mov	r2, r3
 8003a52:	2310      	movs	r3, #16
 8003a54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	2340      	movs	r3, #64	; 0x40
 8003a70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fc29 	bl	80042f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	085b      	lsrs	r3, r3, #1
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d181      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f007 feaa 	bl	800b810 <USB_ReadInterrupts>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac6:	d122      	bne.n	8003b0e <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d108      	bne.n	8003af8 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003aee:	2100      	movs	r1, #0
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f00d fc87 	bl	8011404 <HAL_PCDEx_LPM_Callback>
 8003af6:	e002      	b.n	8003afe <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f00d f9d9 	bl	8010eb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f007 fe7c 	bl	800b810 <USB_ReadInterrupts>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b22:	d112      	bne.n	8003b4a <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d102      	bne.n	8003b3a <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f00d f995 	bl	8010e64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f007 fe5e 	bl	800b810 <USB_ReadInterrupts>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b5e:	d121      	bne.n	8003ba4 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003b6e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d111      	bne.n	8003b9e <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	f003 020f 	and.w	r2, r3, #15
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b94:	2101      	movs	r1, #1
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f00d fc34 	bl	8011404 <HAL_PCDEx_LPM_Callback>
 8003b9c:	e002      	b.n	8003ba4 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f00d f960 	bl	8010e64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f007 fe31 	bl	800b810 <USB_ReadInterrupts>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb8:	f040 80c5 	bne.w	8003d46 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2110      	movs	r1, #16
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f006 ffa6 	bl	800ab28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003be0:	e056      	b.n	8003c90 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bf4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c06:	0151      	lsls	r1, r2, #5
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	440a      	add	r2, r1
 8003c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c14:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c26:	0151      	lsls	r1, r2, #5
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	440a      	add	r2, r1
 8003c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c42:	461a      	mov	r2, r3
 8003c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7a:	0151      	lsls	r1, r2, #5
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	440a      	add	r2, r1
 8003c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3a3      	bcc.n	8003be2 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ca8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc6:	f043 030b 	orr.w	r3, r3, #11
 8003cca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cdc:	f043 030b 	orr.w	r3, r3, #11
 8003ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce2:	e015      	b.n	8003d10 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cf6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003cfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0a:	f043 030b 	orr.w	r3, r3, #11
 8003d0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f007 fe31 	bl	800b998 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f007 fd60 	bl	800b810 <USB_ReadInterrupts>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5a:	d124      	bne.n	8003da6 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f007 fdf6 	bl	800b952 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f006 ff3d 	bl	800abea <USB_GetDevSpeed>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681c      	ldr	r4, [r3, #0]
 8003d7c:	f001 fb10 	bl	80053a0 <HAL_RCC_GetHCLKFreq>
 8003d80:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f006 fc98 	bl	800a6c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f00d f848 	bl	8010e26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f007 fd30 	bl	800b810 <USB_ReadInterrupts>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d10a      	bne.n	8003dd0 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f00d f825 	bl	8010e0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f002 0208 	and.w	r2, r2, #8
 8003dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f007 fd1b 	bl	800b810 <USB_ReadInterrupts>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de4:	d10f      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	4619      	mov	r1, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f00d f897 	bl	8010f24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f007 fd00 	bl	800b810 <USB_ReadInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e1a:	d10f      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f00d f86a 	bl	8010f00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f007 fce5 	bl	800b810 <USB_ReadInterrupts>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e50:	d10a      	bne.n	8003e68 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f00d f878 	bl	8010f48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f007 fccf 	bl	800b810 <USB_ReadInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d115      	bne.n	8003ea8 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f00d f868 	bl	8010f64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6859      	ldr	r1, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	e000      	b.n	8003ea8 <HAL_PCD_IRQHandler+0x742>
      return;
 8003ea6:	bf00      	nop
    }
  }
}
 8003ea8:	3734      	adds	r7, #52	; 0x34
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd90      	pop	{r4, r7, pc}

08003eae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_PCD_SetAddress+0x1a>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e013      	b.n	8003ef0 <HAL_PCD_SetAddress+0x42>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f007 fc2d 	bl	800b740 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	70fb      	strb	r3, [r7, #3]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	803b      	strh	r3, [r7, #0]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	da0f      	bge.n	8003f3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	f003 020f 	and.w	r2, r3, #15
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	3338      	adds	r3, #56	; 0x38
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	3304      	adds	r3, #4
 8003f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	705a      	strb	r2, [r3, #1]
 8003f3c:	e00f      	b.n	8003f5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	f003 020f 	and.w	r2, r3, #15
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f6a:	883a      	ldrh	r2, [r7, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	78ba      	ldrb	r2, [r7, #2]
 8003f74:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	785b      	ldrb	r3, [r3, #1]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d004      	beq.n	8003f88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f88:	78bb      	ldrb	r3, [r7, #2]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d102      	bne.n	8003f94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_PCD_EP_Open+0xaa>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e00e      	b.n	8003fc0 <HAL_PCD_EP_Open+0xc8>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f006 fe39 	bl	800ac28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	da0f      	bge.n	8003ffc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	f003 020f 	and.w	r2, r3, #15
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	3338      	adds	r3, #56	; 0x38
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	705a      	strb	r2, [r3, #1]
 8003ffa:	e00f      	b.n	800401c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 020f 	and.w	r2, r3, #15
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	3304      	adds	r3, #4
 8004014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_PCD_EP_Close+0x6e>
 8004032:	2302      	movs	r3, #2
 8004034:	e00e      	b.n	8004054 <HAL_PCD_EP_Close+0x8c>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68f9      	ldr	r1, [r7, #12]
 8004044:	4618      	mov	r0, r3
 8004046:	f006 fe77 	bl	800ad38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	460b      	mov	r3, r1
 800406a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800406c:	7afb      	ldrb	r3, [r7, #11]
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	3304      	adds	r3, #4
 8004084:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2200      	movs	r2, #0
 8004096:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2200      	movs	r2, #0
 800409c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040aa:	7afb      	ldrb	r3, [r7, #11]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6979      	ldr	r1, [r7, #20]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f007 f8f4 	bl	800b2a8 <USB_EP0StartXfer>
 80040c0:	e005      	b.n	80040ce <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6979      	ldr	r1, [r7, #20]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f006 ff11 	bl	800aef0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 020f 	and.w	r2, r3, #15
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	460b      	mov	r3, r1
 8004116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004118:	7afb      	ldrb	r3, [r7, #11]
 800411a:	f003 020f 	and.w	r2, r3, #15
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3338      	adds	r3, #56	; 0x38
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	3304      	adds	r3, #4
 800412e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2200      	movs	r2, #0
 8004140:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2201      	movs	r2, #1
 8004146:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004148:	7afb      	ldrb	r3, [r7, #11]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	b2da      	uxtb	r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6979      	ldr	r1, [r7, #20]
 8004164:	4618      	mov	r0, r3
 8004166:	f007 f89f 	bl	800b2a8 <USB_EP0StartXfer>
 800416a:	e005      	b.n	8004178 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6979      	ldr	r1, [r7, #20]
 8004172:	4618      	mov	r0, r3
 8004174:	f006 febc 	bl	800aef0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	f003 020f 	and.w	r2, r3, #15
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	429a      	cmp	r2, r3
 800419a:	d901      	bls.n	80041a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e04e      	b.n	800423e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da0f      	bge.n	80041c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	f003 020f 	and.w	r2, r3, #15
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	3338      	adds	r3, #56	; 0x38
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	3304      	adds	r3, #4
 80041be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	705a      	strb	r2, [r3, #1]
 80041c6:	e00d      	b.n	80041e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	3304      	adds	r3, #4
 80041dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_PCD_EP_SetStall+0x82>
 8004200:	2302      	movs	r3, #2
 8004202:	e01c      	b.n	800423e <HAL_PCD_EP_SetStall+0xbc>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68f9      	ldr	r1, [r7, #12]
 8004212:	4618      	mov	r0, r3
 8004214:	f007 f9c0 	bl	800b598 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800422c:	4619      	mov	r1, r3
 800422e:	4610      	mov	r0, r2
 8004230:	f007 fbb2 	bl	800b998 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d901      	bls.n	8004264 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e042      	b.n	80042ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004268:	2b00      	cmp	r3, #0
 800426a:	da0f      	bge.n	800428c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	f003 020f 	and.w	r2, r3, #15
 8004272:	4613      	mov	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	3338      	adds	r3, #56	; 0x38
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	3304      	adds	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	705a      	strb	r2, [r3, #1]
 800428a:	e00f      	b.n	80042ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	f003 020f 	and.w	r2, r3, #15
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	3304      	adds	r3, #4
 80042a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_PCD_EP_ClrStall+0x86>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e00e      	b.n	80042ea <HAL_PCD_EP_ClrStall+0xa4>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68f9      	ldr	r1, [r7, #12]
 80042da:	4618      	mov	r0, r3
 80042dc:	f007 f9ca 	bl	800b674 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b088      	sub	sp, #32
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	3338      	adds	r3, #56	; 0x38
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	3304      	adds	r3, #4
 8004318:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	429a      	cmp	r2, r3
 8004324:	d901      	bls.n	800432a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e067      	b.n	80043fa <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	429a      	cmp	r2, r3
 800433e:	d902      	bls.n	8004346 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3303      	adds	r3, #3
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800434e:	e026      	b.n	800439e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	429a      	cmp	r2, r3
 8004364:	d902      	bls.n	800436c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	3303      	adds	r3, #3
 8004370:	089b      	lsrs	r3, r3, #2
 8004372:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	68d9      	ldr	r1, [r3, #12]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	b29b      	uxth	r3, r3
 8004380:	6978      	ldr	r0, [r7, #20]
 8004382:	f007 f8af 	bl	800b4e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	441a      	add	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	441a      	add	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d809      	bhi.n	80043c8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043bc:	429a      	cmp	r2, r3
 80043be:	d203      	bcs.n	80043c8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1c3      	bne.n	8004350 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d811      	bhi.n	80043f8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	2201      	movs	r2, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	43db      	mvns	r3, r3
 80043ee:	6939      	ldr	r1, [r7, #16]
 80043f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f4:	4013      	ands	r3, r2
 80043f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3720      	adds	r7, #32
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	333c      	adds	r3, #60	; 0x3c
 800441c:	3304      	adds	r3, #4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a19      	ldr	r2, [pc, #100]	; (800449c <PCD_EP_OutXfrComplete_int+0x98>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d124      	bne.n	8004484 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	461a      	mov	r2, r3
 8004452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004456:	6093      	str	r3, [r2, #8]
 8004458:	e01a      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f003 0320 	and.w	r3, r3, #32
 8004460:	2b00      	cmp	r3, #0
 8004462:	d008      	beq.n	8004476 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	461a      	mov	r2, r3
 8004472:	2320      	movs	r3, #32
 8004474:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	4619      	mov	r1, r3
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f00c fc8f 	bl	8010da0 <HAL_PCD_DataOutStageCallback>
 8004482:	e005      	b.n	8004490 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f00c fc88 	bl	8010da0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	4f54310a 	.word	0x4f54310a

080044a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	333c      	adds	r3, #60	; 0x3c
 80044b8:	3304      	adds	r3, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <PCD_EP_OutSetupPacket_int+0x64>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d90e      	bls.n	80044f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ec:	461a      	mov	r2, r3
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f00c fc41 	bl	8010d7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	4f54300a 	.word	0x4f54300a

08004508 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
 8004514:	4613      	mov	r3, r2
 8004516:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d107      	bne.n	8004536 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004526:	883b      	ldrh	r3, [r7, #0]
 8004528:	0419      	lsls	r1, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	430a      	orrs	r2, r1
 8004532:	629a      	str	r2, [r3, #40]	; 0x28
 8004534:	e028      	b.n	8004588 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004544:	2300      	movs	r3, #0
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	e00d      	b.n	8004566 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	3340      	adds	r3, #64	; 0x40
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4413      	add	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	3301      	adds	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	3b01      	subs	r3, #1
 800456c:	429a      	cmp	r2, r3
 800456e:	d3ec      	bcc.n	800454a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004570:	883b      	ldrh	r3, [r7, #0]
 8004572:	0418      	lsls	r0, r3, #16
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6819      	ldr	r1, [r3, #0]
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	3b01      	subs	r3, #1
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	4302      	orrs	r2, r0
 8004580:	3340      	adds	r3, #64	; 0x40
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	887a      	ldrh	r2, [r7, #2]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ea:	f043 0303 	orr.w	r3, r3, #3
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a04      	ldr	r2, [pc, #16]	; (800461c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800460a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460e:	6013      	str	r3, [r2, #0]
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40007000 	.word	0x40007000

08004620 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004624:	4b0d      	ldr	r3, [pc, #52]	; (800465c <HAL_PWREx_GetVoltageRange+0x3c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800462c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004630:	d102      	bne.n	8004638 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004636:	e00b      	b.n	8004650 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004638:	4b08      	ldr	r3, [pc, #32]	; (800465c <HAL_PWREx_GetVoltageRange+0x3c>)
 800463a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004646:	d102      	bne.n	800464e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800464c:	e000      	b.n	8004650 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800464e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	40007000 	.word	0x40007000

08004660 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d141      	bne.n	80046f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800466e:	4b4b      	ldr	r3, [pc, #300]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467a:	d131      	bne.n	80046e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800467c:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800467e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004682:	4a46      	ldr	r2, [pc, #280]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004688:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800468c:	4b43      	ldr	r3, [pc, #268]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004694:	4a41      	ldr	r2, [pc, #260]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800469a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800469c:	4b40      	ldr	r3, [pc, #256]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2232      	movs	r2, #50	; 0x32
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	4a3f      	ldr	r2, [pc, #252]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	0c9b      	lsrs	r3, r3, #18
 80046ae:	3301      	adds	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046b2:	e002      	b.n	80046ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ba:	4b38      	ldr	r3, [pc, #224]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d102      	bne.n	80046ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f2      	bne.n	80046b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046ce:	4b33      	ldr	r3, [pc, #204]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d158      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e057      	b.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e0:	4b2e      	ldr	r3, [pc, #184]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e6:	4a2d      	ldr	r2, [pc, #180]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046f0:	e04d      	b.n	800478e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f8:	d141      	bne.n	800477e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046fa:	4b28      	ldr	r3, [pc, #160]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004706:	d131      	bne.n	800476c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800470e:	4a23      	ldr	r2, [pc, #140]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004718:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004720:	4a1e      	ldr	r2, [pc, #120]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004726:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004728:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2232      	movs	r2, #50	; 0x32
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004734:	fba2 2303 	umull	r2, r3, r2, r3
 8004738:	0c9b      	lsrs	r3, r3, #18
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800473e:	e002      	b.n	8004746 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	3b01      	subs	r3, #1
 8004744:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004752:	d102      	bne.n	800475a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f2      	bne.n	8004740 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004766:	d112      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e011      	b.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004772:	4a0a      	ldr	r2, [pc, #40]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004778:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800477c:	e007      	b.n	800478e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004786:	4a05      	ldr	r2, [pc, #20]	; (800479c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004788:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40007000 	.word	0x40007000
 80047a0:	20000000 	.word	0x20000000
 80047a4:	431bde83 	.word	0x431bde83

080047a8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80047b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047b6:	6053      	str	r3, [r2, #4]
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40007000 	.word	0x40007000

080047c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047d6:	6053      	str	r3, [r2, #4]
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40007000 	.word	0x40007000

080047e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f000 bc16 	b.w	8005028 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047fc:	4ba0      	ldr	r3, [pc, #640]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 030c 	and.w	r3, r3, #12
 8004804:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004806:	4b9e      	ldr	r3, [pc, #632]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80e4 	beq.w	80049e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <HAL_RCC_OscConfig+0x4c>
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b0c      	cmp	r3, #12
 8004828:	f040 808b 	bne.w	8004942 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b01      	cmp	r3, #1
 8004830:	f040 8087 	bne.w	8004942 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004834:	4b92      	ldr	r3, [pc, #584]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_RCC_OscConfig+0x64>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e3ed      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	4b8b      	ldr	r3, [pc, #556]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <HAL_RCC_OscConfig+0x7e>
 800485c:	4b88      	ldr	r3, [pc, #544]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004864:	e005      	b.n	8004872 <HAL_RCC_OscConfig+0x8a>
 8004866:	4b86      	ldr	r3, [pc, #536]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004872:	4293      	cmp	r3, r2
 8004874:	d223      	bcs.n	80048be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fdfa 	bl	8005474 <RCC_SetFlashLatencyFromMSIRange>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e3ce      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800488a:	4b7d      	ldr	r3, [pc, #500]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a7c      	ldr	r2, [pc, #496]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004890:	f043 0308 	orr.w	r3, r3, #8
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b7a      	ldr	r3, [pc, #488]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	4977      	ldr	r1, [pc, #476]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048a8:	4b75      	ldr	r3, [pc, #468]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	4972      	ldr	r1, [pc, #456]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	e025      	b.n	800490a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048be:	4b70      	ldr	r3, [pc, #448]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6f      	ldr	r2, [pc, #444]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80048c4:	f043 0308 	orr.w	r3, r3, #8
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	4b6d      	ldr	r3, [pc, #436]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	496a      	ldr	r1, [pc, #424]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048dc:	4b68      	ldr	r3, [pc, #416]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	4965      	ldr	r1, [pc, #404]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fdba 	bl	8005474 <RCC_SetFlashLatencyFromMSIRange>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e38e      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800490a:	f000 fcbf 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800490e:	4602      	mov	r2, r0
 8004910:	4b5b      	ldr	r3, [pc, #364]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	495a      	ldr	r1, [pc, #360]	; (8004a84 <HAL_RCC_OscConfig+0x29c>)
 800491c:	5ccb      	ldrb	r3, [r1, r3]
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	4a58      	ldr	r2, [pc, #352]	; (8004a88 <HAL_RCC_OscConfig+0x2a0>)
 8004928:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800492a:	4b58      	ldr	r3, [pc, #352]	; (8004a8c <HAL_RCC_OscConfig+0x2a4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fc fdbe 	bl	80014b0 <HAL_InitTick>
 8004934:	4603      	mov	r3, r0
 8004936:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d052      	beq.n	80049e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	e372      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d032      	beq.n	80049b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800494a:	4b4d      	ldr	r3, [pc, #308]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a4c      	ldr	r2, [pc, #304]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004956:	f7fc fed1 	bl	80016fc <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800495e:	f7fc fecd 	bl	80016fc <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e35b      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004970:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800497c:	4b40      	ldr	r3, [pc, #256]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3f      	ldr	r2, [pc, #252]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004982:	f043 0308 	orr.w	r3, r3, #8
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	493a      	ldr	r1, [pc, #232]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004996:	4313      	orrs	r3, r2
 8004998:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	4935      	ldr	r1, [pc, #212]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	604b      	str	r3, [r1, #4]
 80049ae:	e01a      	b.n	80049e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049b0:	4b33      	ldr	r3, [pc, #204]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a32      	ldr	r2, [pc, #200]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049bc:	f7fc fe9e 	bl	80016fc <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049c4:	f7fc fe9a 	bl	80016fc <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e328      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049d6:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x1dc>
 80049e2:	e000      	b.n	80049e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d073      	beq.n	8004ada <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_OscConfig+0x21c>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b0c      	cmp	r3, #12
 80049fc:	d10e      	bne.n	8004a1c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d10b      	bne.n	8004a1c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a04:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d063      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x2f0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d15f      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e305      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a24:	d106      	bne.n	8004a34 <HAL_RCC_OscConfig+0x24c>
 8004a26:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e01d      	b.n	8004a70 <HAL_RCC_OscConfig+0x288>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x270>
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a0f      	ldr	r2, [pc, #60]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e00b      	b.n	8004a70 <HAL_RCC_OscConfig+0x288>
 8004a58:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a05      	ldr	r2, [pc, #20]	; (8004a80 <HAL_RCC_OscConfig+0x298>)
 8004a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fc fe40 	bl	80016fc <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a7e:	e010      	b.n	8004aa2 <HAL_RCC_OscConfig+0x2ba>
 8004a80:	40021000 	.word	0x40021000
 8004a84:	08011628 	.word	0x08011628
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a90:	f7fc fe34 	bl	80016fc <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	; 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e2c2      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa2:	4baf      	ldr	r3, [pc, #700]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0x2a8>
 8004aae:	e014      	b.n	8004ada <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fc fe24 	bl	80016fc <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fc fe20 	bl	80016fc <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e2ae      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aca:	4ba5      	ldr	r3, [pc, #660]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x2d0>
 8004ad6:	e000      	b.n	8004ada <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d060      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_OscConfig+0x310>
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b0c      	cmp	r3, #12
 8004af0:	d119      	bne.n	8004b26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d116      	bne.n	8004b26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af8:	4b99      	ldr	r3, [pc, #612]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_RCC_OscConfig+0x328>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e28b      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4b93      	ldr	r3, [pc, #588]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	4990      	ldr	r1, [pc, #576]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b24:	e040      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d023      	beq.n	8004b76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b2e:	4b8c      	ldr	r3, [pc, #560]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a8b      	ldr	r2, [pc, #556]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3a:	f7fc fddf 	bl	80016fc <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b42:	f7fc fddb 	bl	80016fc <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e269      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b54:	4b82      	ldr	r3, [pc, #520]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	4b7f      	ldr	r3, [pc, #508]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	061b      	lsls	r3, r3, #24
 8004b6e:	497c      	ldr	r1, [pc, #496]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	604b      	str	r3, [r1, #4]
 8004b74:	e018      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b76:	4b7a      	ldr	r3, [pc, #488]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a79      	ldr	r2, [pc, #484]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b82:	f7fc fdbb 	bl	80016fc <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8a:	f7fc fdb7 	bl	80016fc <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e245      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b9c:	4b70      	ldr	r3, [pc, #448]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f0      	bne.n	8004b8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d03c      	beq.n	8004c2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01c      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bbc:	4b68      	ldr	r3, [pc, #416]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	4a67      	ldr	r2, [pc, #412]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fc fd96 	bl	80016fc <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7fc fd92 	bl	80016fc <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e220      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004be6:	4b5e      	ldr	r3, [pc, #376]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ef      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x3ec>
 8004bf4:	e01b      	b.n	8004c2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf6:	4b5a      	ldr	r3, [pc, #360]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfc:	4a58      	ldr	r2, [pc, #352]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fc fd79 	bl	80016fc <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0e:	f7fc fd75 	bl	80016fc <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e203      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c20:	4b4f      	ldr	r3, [pc, #316]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ef      	bne.n	8004c0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 80a6 	beq.w	8004d88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c40:	4b47      	ldr	r3, [pc, #284]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10d      	bne.n	8004c68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c4c:	4b44      	ldr	r3, [pc, #272]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	4a43      	ldr	r2, [pc, #268]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6593      	str	r3, [r2, #88]	; 0x58
 8004c58:	4b41      	ldr	r3, [pc, #260]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c64:	2301      	movs	r3, #1
 8004c66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c68:	4b3e      	ldr	r3, [pc, #248]	; (8004d64 <HAL_RCC_OscConfig+0x57c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d118      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c74:	4b3b      	ldr	r3, [pc, #236]	; (8004d64 <HAL_RCC_OscConfig+0x57c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3a      	ldr	r2, [pc, #232]	; (8004d64 <HAL_RCC_OscConfig+0x57c>)
 8004c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c80:	f7fc fd3c 	bl	80016fc <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c88:	f7fc fd38 	bl	80016fc <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1c6      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c9a:	4b32      	ldr	r3, [pc, #200]	; (8004d64 <HAL_RCC_OscConfig+0x57c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d108      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4d8>
 8004cae:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004cb6:	f043 0301 	orr.w	r3, r3, #1
 8004cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cbe:	e024      	b.n	8004d0a <HAL_RCC_OscConfig+0x522>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b05      	cmp	r3, #5
 8004cc6:	d110      	bne.n	8004cea <HAL_RCC_OscConfig+0x502>
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	4a24      	ldr	r2, [pc, #144]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004cd0:	f043 0304 	orr.w	r3, r3, #4
 8004cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cd8:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ce8:	e00f      	b.n	8004d0a <HAL_RCC_OscConfig+0x522>
 8004cea:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf0:	4a1b      	ldr	r2, [pc, #108]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cfa:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004d02:	f023 0304 	bic.w	r3, r3, #4
 8004d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d12:	f7fc fcf3 	bl	80016fc <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d18:	e00a      	b.n	8004d30 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1a:	f7fc fcef 	bl	80016fc <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e17b      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <HAL_RCC_OscConfig+0x578>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ed      	beq.n	8004d1a <HAL_RCC_OscConfig+0x532>
 8004d3e:	e01a      	b.n	8004d76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fc fcdc 	bl	80016fc <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d46:	e00f      	b.n	8004d68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fc fcd8 	bl	80016fc <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d906      	bls.n	8004d68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e164      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d68:	4ba8      	ldr	r3, [pc, #672]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e8      	bne.n	8004d48 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d76:	7ffb      	ldrb	r3, [r7, #31]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d7c:	4ba3      	ldr	r3, [pc, #652]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	4aa2      	ldr	r2, [pc, #648]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d03c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01c      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d9c:	4b9b      	ldr	r3, [pc, #620]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004da2:	4a9a      	ldr	r2, [pc, #616]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fc fca6 	bl	80016fc <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004db4:	f7fc fca2 	bl	80016fc <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e130      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dc6:	4b91      	ldr	r3, [pc, #580]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ef      	beq.n	8004db4 <HAL_RCC_OscConfig+0x5cc>
 8004dd4:	e01b      	b.n	8004e0e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dd6:	4b8d      	ldr	r3, [pc, #564]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ddc:	4a8b      	ldr	r2, [pc, #556]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de6:	f7fc fc89 	bl	80016fc <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dee:	f7fc fc85 	bl	80016fc <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e113      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e00:	4b82      	ldr	r3, [pc, #520]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004e02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1ef      	bne.n	8004dee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 8107 	beq.w	8005026 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	f040 80cb 	bne.w	8004fb8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e22:	4b7a      	ldr	r3, [pc, #488]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f003 0203 	and.w	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d12c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	3b01      	subs	r3, #1
 8004e42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d123      	bne.n	8004e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d11b      	bne.n	8004e90 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d113      	bne.n	8004e90 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	085b      	lsrs	r3, r3, #1
 8004e74:	3b01      	subs	r3, #1
 8004e76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d109      	bne.n	8004e90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d06d      	beq.n	8004f6c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d068      	beq.n	8004f68 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e96:	4b5d      	ldr	r3, [pc, #372]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d105      	bne.n	8004eae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ea2:	4b5a      	ldr	r3, [pc, #360]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e0ba      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b56      	ldr	r3, [pc, #344]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a55      	ldr	r2, [pc, #340]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ebc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ebe:	f7fc fc1d 	bl	80016fc <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fc fc19 	bl	80016fc <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0a7      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed8:	4b4c      	ldr	r3, [pc, #304]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f0      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee4:	4b49      	ldr	r3, [pc, #292]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	4b49      	ldr	r3, [pc, #292]	; (8005010 <HAL_RCC_OscConfig+0x828>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ef4:	3a01      	subs	r2, #1
 8004ef6:	0112      	lsls	r2, r2, #4
 8004ef8:	4311      	orrs	r1, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004efe:	0212      	lsls	r2, r2, #8
 8004f00:	4311      	orrs	r1, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f06:	0852      	lsrs	r2, r2, #1
 8004f08:	3a01      	subs	r2, #1
 8004f0a:	0552      	lsls	r2, r2, #21
 8004f0c:	4311      	orrs	r1, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f12:	0852      	lsrs	r2, r2, #1
 8004f14:	3a01      	subs	r2, #1
 8004f16:	0652      	lsls	r2, r2, #25
 8004f18:	4311      	orrs	r1, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f1e:	06d2      	lsls	r2, r2, #27
 8004f20:	430a      	orrs	r2, r1
 8004f22:	493a      	ldr	r1, [pc, #232]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f28:	4b38      	ldr	r3, [pc, #224]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a37      	ldr	r2, [pc, #220]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f34:	4b35      	ldr	r3, [pc, #212]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a34      	ldr	r2, [pc, #208]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f40:	f7fc fbdc 	bl	80016fc <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fc fbd8 	bl	80016fc <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e066      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5a:	4b2c      	ldr	r3, [pc, #176]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f66:	e05e      	b.n	8005026 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e05d      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6c:	4b27      	ldr	r3, [pc, #156]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d156      	bne.n	8005026 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f78:	4b24      	ldr	r3, [pc, #144]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a23      	ldr	r2, [pc, #140]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f84:	4b21      	ldr	r3, [pc, #132]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	4a20      	ldr	r2, [pc, #128]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f90:	f7fc fbb4 	bl	80016fc <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fc fbb0 	bl	80016fc <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e03e      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004faa:	4b18      	ldr	r3, [pc, #96]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0x7b0>
 8004fb6:	e036      	b.n	8005026 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	2b0c      	cmp	r3, #12
 8004fbc:	d031      	beq.n	8005022 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a12      	ldr	r2, [pc, #72]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fc8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d105      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	4a0c      	ldr	r2, [pc, #48]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004fdc:	f023 0303 	bic.w	r3, r3, #3
 8004fe0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	4a09      	ldr	r2, [pc, #36]	; (800500c <HAL_RCC_OscConfig+0x824>)
 8004fe8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fc fb83 	bl	80016fc <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff8:	e00c      	b.n	8005014 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fc fb7f 	bl	80016fc <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d905      	bls.n	8005014 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e00d      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
 800500c:	40021000 	.word	0x40021000
 8005010:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005014:	4b06      	ldr	r3, [pc, #24]	; (8005030 <HAL_RCC_OscConfig+0x848>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1ec      	bne.n	8004ffa <HAL_RCC_OscConfig+0x812>
 8005020:	e001      	b.n	8005026 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40021000 	.word	0x40021000

08005034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e10f      	b.n	800526c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800504c:	4b89      	ldr	r3, [pc, #548]	; (8005274 <HAL_RCC_ClockConfig+0x240>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d910      	bls.n	800507c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505a:	4b86      	ldr	r3, [pc, #536]	; (8005274 <HAL_RCC_ClockConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 020f 	bic.w	r2, r3, #15
 8005062:	4984      	ldr	r1, [pc, #528]	; (8005274 <HAL_RCC_ClockConfig+0x240>)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	4313      	orrs	r3, r2
 8005068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b82      	ldr	r3, [pc, #520]	; (8005274 <HAL_RCC_ClockConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0f7      	b.n	800526c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8089 	beq.w	800519c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b03      	cmp	r3, #3
 8005090:	d133      	bne.n	80050fa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005092:	4b79      	ldr	r3, [pc, #484]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e0e4      	b.n	800526c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80050a2:	f000 fa41 	bl	8005528 <RCC_GetSysClockFreqFromPLLSource>
 80050a6:	4603      	mov	r3, r0
 80050a8:	4a74      	ldr	r2, [pc, #464]	; (800527c <HAL_RCC_ClockConfig+0x248>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d955      	bls.n	800515a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80050ae:	4b72      	ldr	r3, [pc, #456]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050ba:	4b6f      	ldr	r3, [pc, #444]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c2:	4a6d      	ldr	r2, [pc, #436]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	e044      	b.n	800515a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d03e      	beq.n	800515a <HAL_RCC_ClockConfig+0x126>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d13a      	bne.n	800515a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050e4:	4b64      	ldr	r3, [pc, #400]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ec:	4a62      	ldr	r2, [pc, #392]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 80050ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050f4:	2380      	movs	r3, #128	; 0x80
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	e02f      	b.n	800515a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005102:	4b5d      	ldr	r3, [pc, #372]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d115      	bne.n	800513a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0ac      	b.n	800526c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d107      	bne.n	800512a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800511a:	4b57      	ldr	r3, [pc, #348]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e0a0      	b.n	800526c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800512a:	4b53      	ldr	r3, [pc, #332]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e098      	b.n	800526c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800513a:	f000 f8a7 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800513e:	4603      	mov	r3, r0
 8005140:	4a4e      	ldr	r2, [pc, #312]	; (800527c <HAL_RCC_ClockConfig+0x248>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d909      	bls.n	800515a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005146:	4b4c      	ldr	r3, [pc, #304]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800514e:	4a4a      	ldr	r2, [pc, #296]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005154:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005156:	2380      	movs	r3, #128	; 0x80
 8005158:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800515a:	4b47      	ldr	r3, [pc, #284]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f023 0203 	bic.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4944      	ldr	r1, [pc, #272]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005168:	4313      	orrs	r3, r2
 800516a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516c:	f7fc fac6 	bl	80016fc <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	e00a      	b.n	800518a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005174:	f7fc fac2 	bl	80016fc <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e070      	b.n	800526c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518a:	4b3b      	ldr	r3, [pc, #236]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 020c 	and.w	r2, r3, #12
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	429a      	cmp	r2, r3
 800519a:	d1eb      	bne.n	8005174 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a8:	4b33      	ldr	r3, [pc, #204]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	4930      	ldr	r1, [pc, #192]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	608b      	str	r3, [r1, #8]
 80051ba:	e008      	b.n	80051ce <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b80      	cmp	r3, #128	; 0x80
 80051c0:	d105      	bne.n	80051ce <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051c2:	4b2d      	ldr	r3, [pc, #180]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	4a2c      	ldr	r2, [pc, #176]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 80051c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051cc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051ce:	4b29      	ldr	r3, [pc, #164]	; (8005274 <HAL_RCC_ClockConfig+0x240>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d210      	bcs.n	80051fe <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051dc:	4b25      	ldr	r3, [pc, #148]	; (8005274 <HAL_RCC_ClockConfig+0x240>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f023 020f 	bic.w	r2, r3, #15
 80051e4:	4923      	ldr	r1, [pc, #140]	; (8005274 <HAL_RCC_ClockConfig+0x240>)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ec:	4b21      	ldr	r3, [pc, #132]	; (8005274 <HAL_RCC_ClockConfig+0x240>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d001      	beq.n	80051fe <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e036      	b.n	800526c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d008      	beq.n	800521c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800520a:	4b1b      	ldr	r3, [pc, #108]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	4918      	ldr	r1, [pc, #96]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005228:	4b13      	ldr	r3, [pc, #76]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	4910      	ldr	r1, [pc, #64]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005238:	4313      	orrs	r3, r2
 800523a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800523c:	f000 f826 	bl	800528c <HAL_RCC_GetSysClockFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <HAL_RCC_ClockConfig+0x244>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	490c      	ldr	r1, [pc, #48]	; (8005280 <HAL_RCC_ClockConfig+0x24c>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
 8005258:	4a0a      	ldr	r2, [pc, #40]	; (8005284 <HAL_RCC_ClockConfig+0x250>)
 800525a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <HAL_RCC_ClockConfig+0x254>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f7fc f925 	bl	80014b0 <HAL_InitTick>
 8005266:	4603      	mov	r3, r0
 8005268:	73fb      	strb	r3, [r7, #15]

  return status;
 800526a:	7bfb      	ldrb	r3, [r7, #15]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	40022000 	.word	0x40022000
 8005278:	40021000 	.word	0x40021000
 800527c:	04c4b400 	.word	0x04c4b400
 8005280:	08011628 	.word	0x08011628
 8005284:	20000000 	.word	0x20000000
 8005288:	20000004 	.word	0x20000004

0800528c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800529a:	4b3e      	ldr	r3, [pc, #248]	; (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052a4:	4b3b      	ldr	r3, [pc, #236]	; (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_GetSysClockFreq+0x34>
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d121      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d11e      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052c0:	4b34      	ldr	r3, [pc, #208]	; (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d107      	bne.n	80052dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052cc:	4b31      	ldr	r3, [pc, #196]	; (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d2:	0a1b      	lsrs	r3, r3, #8
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	e005      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052dc:	4b2d      	ldr	r3, [pc, #180]	; (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052e8:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10d      	bne.n	8005314 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052fc:	e00a      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b04      	cmp	r3, #4
 8005302:	d102      	bne.n	800530a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005304:	4b25      	ldr	r3, [pc, #148]	; (800539c <HAL_RCC_GetSysClockFreq+0x110>)
 8005306:	61bb      	str	r3, [r7, #24]
 8005308:	e004      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b08      	cmp	r3, #8
 800530e:	d101      	bne.n	8005314 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005310:	4b22      	ldr	r3, [pc, #136]	; (800539c <HAL_RCC_GetSysClockFreq+0x110>)
 8005312:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b0c      	cmp	r3, #12
 8005318:	d134      	bne.n	8005384 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800531a:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d003      	beq.n	8005332 <HAL_RCC_GetSysClockFreq+0xa6>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b03      	cmp	r3, #3
 800532e:	d003      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0xac>
 8005330:	e005      	b.n	800533e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005332:	4b1a      	ldr	r3, [pc, #104]	; (800539c <HAL_RCC_GetSysClockFreq+0x110>)
 8005334:	617b      	str	r3, [r7, #20]
      break;
 8005336:	e005      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005338:	4b18      	ldr	r3, [pc, #96]	; (800539c <HAL_RCC_GetSysClockFreq+0x110>)
 800533a:	617b      	str	r3, [r7, #20]
      break;
 800533c:	e002      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	617b      	str	r3, [r7, #20]
      break;
 8005342:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005344:	4b13      	ldr	r3, [pc, #76]	; (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	3301      	adds	r3, #1
 8005350:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	fb02 f203 	mul.w	r2, r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800536a:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <HAL_RCC_GetSysClockFreq+0x108>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	0e5b      	lsrs	r3, r3, #25
 8005370:	f003 0303 	and.w	r3, r3, #3
 8005374:	3301      	adds	r3, #1
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005384:	69bb      	ldr	r3, [r7, #24]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3724      	adds	r7, #36	; 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000
 8005398:	08011640 	.word	0x08011640
 800539c:	00f42400 	.word	0x00f42400

080053a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053a6:	681b      	ldr	r3, [r3, #0]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000000 	.word	0x20000000

080053b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053bc:	f7ff fff0 	bl	80053a0 <HAL_RCC_GetHCLKFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4904      	ldr	r1, [pc, #16]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	08011638 	.word	0x08011638

080053e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053e8:	f7ff ffda 	bl	80053a0 <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b06      	ldr	r3, [pc, #24]	; (8005408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	0adb      	lsrs	r3, r3, #11
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4904      	ldr	r1, [pc, #16]	; (800540c <HAL_RCC_GetPCLK2Freq+0x28>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005404:	4618      	mov	r0, r3
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40021000 	.word	0x40021000
 800540c:	08011638 	.word	0x08011638

08005410 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	220f      	movs	r2, #15
 800541e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005420:	4b12      	ldr	r3, [pc, #72]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 0203 	and.w	r2, r3, #3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <HAL_RCC_GetClockConfig+0x5c>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	08db      	lsrs	r3, r3, #3
 800544a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005452:	4b07      	ldr	r3, [pc, #28]	; (8005470 <HAL_RCC_GetClockConfig+0x60>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 020f 	and.w	r2, r3, #15
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	601a      	str	r2, [r3, #0]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40021000 	.word	0x40021000
 8005470:	40022000 	.word	0x40022000

08005474 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005480:	4b27      	ldr	r3, [pc, #156]	; (8005520 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800548c:	f7ff f8c8 	bl	8004620 <HAL_PWREx_GetVoltageRange>
 8005490:	6178      	str	r0, [r7, #20]
 8005492:	e014      	b.n	80054be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005494:	4b22      	ldr	r3, [pc, #136]	; (8005520 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	4a21      	ldr	r2, [pc, #132]	; (8005520 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	6593      	str	r3, [r2, #88]	; 0x58
 80054a0:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054ac:	f7ff f8b8 	bl	8004620 <HAL_PWREx_GetVoltageRange>
 80054b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054b2:	4b1b      	ldr	r3, [pc, #108]	; (8005520 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b6:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c4:	d10b      	bne.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d913      	bls.n	80054f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2ba0      	cmp	r3, #160	; 0xa0
 80054d0:	d902      	bls.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054d2:	2302      	movs	r3, #2
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	e00d      	b.n	80054f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054d8:	2301      	movs	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	e00a      	b.n	80054f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b7f      	cmp	r3, #127	; 0x7f
 80054e2:	d902      	bls.n	80054ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80054e4:	2302      	movs	r3, #2
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	e004      	b.n	80054f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b70      	cmp	r3, #112	; 0x70
 80054ee:	d101      	bne.n	80054f4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054f0:	2301      	movs	r3, #1
 80054f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f023 020f 	bic.w	r2, r3, #15
 80054fc:	4909      	ldr	r1, [pc, #36]	; (8005524 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005504:	4b07      	ldr	r3, [pc, #28]	; (8005524 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	429a      	cmp	r2, r3
 8005510:	d001      	beq.n	8005516 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40021000 	.word	0x40021000
 8005524:	40022000 	.word	0x40022000

08005528 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005532:	4b2d      	ldr	r3, [pc, #180]	; (80055e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b01      	cmp	r3, #1
 800553c:	d118      	bne.n	8005570 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800553e:	4b2a      	ldr	r3, [pc, #168]	; (80055e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d107      	bne.n	800555a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800554a:	4b27      	ldr	r3, [pc, #156]	; (80055e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005550:	0a1b      	lsrs	r3, r3, #8
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e005      	b.n	8005566 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800555a:	4b23      	ldr	r3, [pc, #140]	; (80055e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005566:	4a21      	ldr	r2, [pc, #132]	; (80055ec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d003      	beq.n	8005588 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b03      	cmp	r3, #3
 8005584:	d003      	beq.n	800558e <RCC_GetSysClockFreqFromPLLSource+0x66>
 8005586:	e005      	b.n	8005594 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005588:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800558a:	613b      	str	r3, [r7, #16]
    break;
 800558c:	e005      	b.n	800559a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005590:	613b      	str	r3, [r7, #16]
    break;
 8005592:	e002      	b.n	800559a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	613b      	str	r3, [r7, #16]
    break;
 8005598:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800559a:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	3301      	adds	r3, #1
 80055a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	0a1b      	lsrs	r3, r3, #8
 80055ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	fb02 f203 	mul.w	r2, r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80055be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	0e5b      	lsrs	r3, r3, #25
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	3301      	adds	r3, #1
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80055da:	683b      	ldr	r3, [r7, #0]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	40021000 	.word	0x40021000
 80055ec:	08011640 	.word	0x08011640
 80055f0:	00f42400 	.word	0x00f42400

080055f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055fc:	2300      	movs	r3, #0
 80055fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005600:	2300      	movs	r3, #0
 8005602:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560c:	2b00      	cmp	r3, #0
 800560e:	d040      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005614:	2b80      	cmp	r3, #128	; 0x80
 8005616:	d02a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005618:	2b80      	cmp	r3, #128	; 0x80
 800561a:	d825      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800561c:	2b60      	cmp	r3, #96	; 0x60
 800561e:	d026      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005620:	2b60      	cmp	r3, #96	; 0x60
 8005622:	d821      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d006      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d81d      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005630:	2b20      	cmp	r3, #32
 8005632:	d010      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005634:	e018      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005636:	4b89      	ldr	r3, [pc, #548]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	4a88      	ldr	r2, [pc, #544]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005640:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005642:	e015      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3304      	adds	r3, #4
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f001 fa7e 	bl	8006b4c <RCCEx_PLLSAI1_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005654:	e00c      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3320      	adds	r3, #32
 800565a:	2100      	movs	r1, #0
 800565c:	4618      	mov	r0, r3
 800565e:	f001 fb69 	bl	8006d34 <RCCEx_PLLSAI2_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005666:	e003      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	74fb      	strb	r3, [r7, #19]
      break;
 800566c:	e000      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800566e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005670:	7cfb      	ldrb	r3, [r7, #19]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005676:	4b79      	ldr	r3, [pc, #484]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800567c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005684:	4975      	ldr	r1, [pc, #468]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800568c:	e001      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568e:	7cfb      	ldrb	r3, [r7, #19]
 8005690:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d047      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a6:	d030      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ac:	d82a      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b2:	d02a      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b8:	d824      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056be:	d008      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80056c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c4:	d81e      	bhi.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80056ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ce:	d010      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80056d0:	e018      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056d2:	4b62      	ldr	r3, [pc, #392]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	4a61      	ldr	r2, [pc, #388]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056dc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056de:	e015      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3304      	adds	r3, #4
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 fa30 	bl	8006b4c <RCCEx_PLLSAI1_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056f0:	e00c      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3320      	adds	r3, #32
 80056f6:	2100      	movs	r1, #0
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 fb1b 	bl	8006d34 <RCCEx_PLLSAI2_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005702:	e003      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	74fb      	strb	r3, [r7, #19]
      break;
 8005708:	e000      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800570a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10b      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005712:	4b52      	ldr	r3, [pc, #328]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005714:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	494e      	ldr	r1, [pc, #312]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005728:	e001      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572a:	7cfb      	ldrb	r3, [r7, #19]
 800572c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 809f 	beq.w	800587a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800573c:	2300      	movs	r3, #0
 800573e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005740:	4b46      	ldr	r3, [pc, #280]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005750:	2300      	movs	r3, #0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00d      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005756:	4b41      	ldr	r3, [pc, #260]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575a:	4a40      	ldr	r2, [pc, #256]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005760:	6593      	str	r3, [r2, #88]	; 0x58
 8005762:	4b3e      	ldr	r3, [pc, #248]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800576e:	2301      	movs	r3, #1
 8005770:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005772:	4b3b      	ldr	r3, [pc, #236]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a3a      	ldr	r2, [pc, #232]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800577e:	f7fb ffbd 	bl	80016fc <HAL_GetTick>
 8005782:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005784:	e009      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005786:	f7fb ffb9 	bl	80016fc <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d902      	bls.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	74fb      	strb	r3, [r7, #19]
        break;
 8005798:	e005      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800579a:	4b31      	ldr	r3, [pc, #196]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0ef      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80057a6:	7cfb      	ldrb	r3, [r7, #19]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d15b      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057ac:	4b2b      	ldr	r3, [pc, #172]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01f      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d019      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057ca:	4b24      	ldr	r3, [pc, #144]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057d6:	4b21      	ldr	r3, [pc, #132]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057dc:	4a1f      	ldr	r2, [pc, #124]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057e6:	4b1d      	ldr	r3, [pc, #116]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ec:	4a1b      	ldr	r2, [pc, #108]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057f6:	4a19      	ldr	r2, [pc, #100]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d016      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fb ff78 	bl	80016fc <HAL_GetTick>
 800580c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800580e:	e00b      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005810:	f7fb ff74 	bl	80016fc <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d902      	bls.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	74fb      	strb	r3, [r7, #19]
            break;
 8005826:	e006      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800582a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0ec      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005836:	7cfb      	ldrb	r3, [r7, #19]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10c      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005842:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800584c:	4903      	ldr	r1, [pc, #12]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005854:	e008      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	74bb      	strb	r3, [r7, #18]
 800585a:	e005      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800585c:	40021000 	.word	0x40021000
 8005860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005868:	7c7b      	ldrb	r3, [r7, #17]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d105      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800586e:	4ba0      	ldr	r3, [pc, #640]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005872:	4a9f      	ldr	r2, [pc, #636]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005878:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005886:	4b9a      	ldr	r3, [pc, #616]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588c:	f023 0203 	bic.w	r2, r3, #3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005894:	4996      	ldr	r1, [pc, #600]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058a8:	4b91      	ldr	r3, [pc, #580]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f023 020c 	bic.w	r2, r3, #12
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	498e      	ldr	r1, [pc, #568]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ca:	4b89      	ldr	r3, [pc, #548]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	4985      	ldr	r1, [pc, #532]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058ec:	4b80      	ldr	r3, [pc, #512]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fa:	497d      	ldr	r1, [pc, #500]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0310 	and.w	r3, r3, #16
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800590e:	4b78      	ldr	r3, [pc, #480]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591c:	4974      	ldr	r1, [pc, #464]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005930:	4b6f      	ldr	r3, [pc, #444]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005936:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593e:	496c      	ldr	r1, [pc, #432]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005952:	4b67      	ldr	r3, [pc, #412]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005958:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005960:	4963      	ldr	r1, [pc, #396]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005974:	4b5e      	ldr	r3, [pc, #376]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005982:	495b      	ldr	r1, [pc, #364]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005996:	4b56      	ldr	r3, [pc, #344]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	4952      	ldr	r1, [pc, #328]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059b8:	4b4d      	ldr	r3, [pc, #308]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	494a      	ldr	r1, [pc, #296]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059da:	4b45      	ldr	r3, [pc, #276]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e8:	4941      	ldr	r1, [pc, #260]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059fc:	4b3c      	ldr	r3, [pc, #240]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a02:	f023 0203 	bic.w	r2, r3, #3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0a:	4939      	ldr	r1, [pc, #228]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d028      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a1e:	4b34      	ldr	r3, [pc, #208]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2c:	4930      	ldr	r1, [pc, #192]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a3c:	d106      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a3e:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a48:	60d3      	str	r3, [r2, #12]
 8005a4a:	e011      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a54:	d10c      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 f875 	bl	8006b4c <RCCEx_PLLSAI1_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a66:	7cfb      	ldrb	r3, [r7, #19]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005a6c:	7cfb      	ldrb	r3, [r7, #19]
 8005a6e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d04d      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a84:	d108      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005a86:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a8c:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a92:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a96:	e012      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005a98:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a9e:	4a14      	ldr	r2, [pc, #80]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005aa8:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ab6:	490e      	ldr	r1, [pc, #56]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ac2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac8:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4a08      	ldr	r2, [pc, #32]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ace:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ad2:	60d3      	str	r3, [r2, #12]
 8005ad4:	e020      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ade:	d109      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ae0:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	4a02      	ldr	r2, [pc, #8]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aea:	60d3      	str	r3, [r2, #12]
 8005aec:	e014      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005aee:	bf00      	nop
 8005af0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005afc:	d10c      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	2101      	movs	r1, #1
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 f821 	bl	8006b4c <RCCEx_PLLSAI1_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b0e:	7cfb      	ldrb	r3, [r7, #19]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005b14:	7cfb      	ldrb	r3, [r7, #19]
 8005b16:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d028      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b24:	4b7a      	ldr	r3, [pc, #488]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b32:	4977      	ldr	r1, [pc, #476]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b42:	d106      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b44:	4b72      	ldr	r3, [pc, #456]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	4a71      	ldr	r2, [pc, #452]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b4e:	60d3      	str	r3, [r2, #12]
 8005b50:	e011      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b5a:	d10c      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	2101      	movs	r1, #1
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fff2 	bl	8006b4c <RCCEx_PLLSAI1_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005b72:	7cfb      	ldrb	r3, [r7, #19]
 8005b74:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01e      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b82:	4b63      	ldr	r3, [pc, #396]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b92:	495f      	ldr	r1, [pc, #380]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	2102      	movs	r1, #2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 ffcd 	bl	8006b4c <RCCEx_PLLSAI1_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bb6:	7cfb      	ldrb	r3, [r7, #19]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005bbc:	7cfb      	ldrb	r3, [r7, #19]
 8005bbe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bcc:	4b50      	ldr	r3, [pc, #320]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bd2:	f023 0204 	bic.w	r2, r3, #4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bdc:	494c      	ldr	r1, [pc, #304]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00b      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bf0:	4b47      	ldr	r3, [pc, #284]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bf6:	f023 0218 	bic.w	r2, r3, #24
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	4943      	ldr	r1, [pc, #268]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d035      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c14:	4b3e      	ldr	r3, [pc, #248]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a3d      	ldr	r2, [pc, #244]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c20:	f7fb fd6c 	bl	80016fc <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c26:	e009      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c28:	f7fb fd68 	bl	80016fc <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d902      	bls.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	74fb      	strb	r3, [r7, #19]
        break;
 8005c3a:	e005      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c3c:	4b34      	ldr	r3, [pc, #208]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1ef      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005c48:	7cfb      	ldrb	r3, [r7, #19]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d113      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005c4e:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c5e:	492c      	ldr	r1, [pc, #176]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3320      	adds	r3, #32
 8005c6a:	2102      	movs	r1, #2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f001 f861 	bl	8006d34 <RCCEx_PLLSAI2_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005c76:	7cfb      	ldrb	r3, [r7, #19]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005c7c:	7cfb      	ldrb	r3, [r7, #19]
 8005c7e:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01e      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005c8c:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9c:	491c      	ldr	r1, [pc, #112]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	d10c      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3320      	adds	r3, #32
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f001 f83c 	bl	8006d34 <RCCEx_PLLSAI2_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005cc6:	7cfb      	ldrb	r3, [r7, #19]
 8005cc8:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d017      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005cd6:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce6:	490a      	ldr	r1, [pc, #40]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cf8:	d105      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	4a04      	ldr	r2, [pc, #16]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005d00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d04:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d06:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40021000 	.word	0x40021000

08005d14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d26:	d13e      	bne.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d28:	4bbd      	ldr	r3, [pc, #756]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d32:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d3a:	d028      	beq.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d42:	f200 86ec 	bhi.w	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d4c:	d005      	beq.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d54:	d00e      	beq.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005d56:	f000 bee2 	b.w	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d5a:	4bb1      	ldr	r3, [pc, #708]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	f040 86e3 	bne.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
        frequency = LSE_VALUE;
 8005d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d6e:	61fb      	str	r3, [r7, #28]
      break;
 8005d70:	f000 bede 	b.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d74:	4baa      	ldr	r3, [pc, #680]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	f040 86d8 	bne.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
          frequency = LSI_VALUE;
 8005d84:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d88:	61fb      	str	r3, [r7, #28]
      break;
 8005d8a:	f000 bed3 	b.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d8e:	4ba4      	ldr	r3, [pc, #656]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d9a:	f040 86cd 	bne.w	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
        frequency = HSE_VALUE / 32U;
 8005d9e:	4ba1      	ldr	r3, [pc, #644]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8005da0:	61fb      	str	r3, [r7, #28]
      break;
 8005da2:	f000 bec9 	b.w	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da6:	4b9e      	ldr	r3, [pc, #632]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d036      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d840      	bhi.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d003      	beq.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d020      	beq.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005dc8:	e039      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005dca:	4b95      	ldr	r3, [pc, #596]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d116      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005dd6:	4b92      	ldr	r3, [pc, #584]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005de2:	4b8f      	ldr	r3, [pc, #572]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	091b      	lsrs	r3, r3, #4
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	e005      	b.n	8005dfa <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005dee:	4b8c      	ldr	r3, [pc, #560]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df4:	0a1b      	lsrs	r3, r3, #8
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	4a8b      	ldr	r2, [pc, #556]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8005dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e02:	e01f      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61bb      	str	r3, [r7, #24]
      break;
 8005e08:	e01c      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e0a:	4b85      	ldr	r3, [pc, #532]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e16:	d102      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005e18:	4b84      	ldr	r3, [pc, #528]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8005e1a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e1c:	e012      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
      break;
 8005e22:	e00f      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e24:	4b7e      	ldr	r3, [pc, #504]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e30:	d102      	bne.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005e32:	4b7e      	ldr	r3, [pc, #504]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8005e34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e36:	e005      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61bb      	str	r3, [r7, #24]
      break;
 8005e3c:	e002      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61bb      	str	r3, [r7, #24]
      break;
 8005e42:	bf00      	nop
    }

    switch(PeriphClk)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e4a:	f000 85fe 	beq.w	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e54:	f200 8672 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e5e:	f000 8466 	beq.w	800672e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e68:	f200 8668 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e72:	f000 852d 	beq.w	80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7c:	f200 865e 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e86:	f000 8183 	beq.w	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e90:	f200 8654 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e9a:	f000 80c9 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ea4:	f200 864a 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eae:	f000 842d 	beq.w	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb8:	f200 8640 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec2:	f000 83e1 	beq.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ecc:	f200 8636 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed6:	f000 80ab 	beq.w	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee0:	f200 862c 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	f000 8091 	beq.w	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef4:	f200 8622 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efe:	d07f      	beq.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f06:	f200 8619 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f10:	f000 8551 	beq.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1a:	f200 860f 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f24:	f000 84fd 	beq.w	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f2e:	f200 8605 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f38:	f000 849e 	beq.w	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f42:	f200 85fb 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b80      	cmp	r3, #128	; 0x80
 8005f4a:	f000 8463 	beq.w	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b80      	cmp	r3, #128	; 0x80
 8005f52:	f200 85f3 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d84b      	bhi.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 85ec 	beq.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	2b1f      	cmp	r3, #31
 8005f6a:	f200 85e7 	bhi.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08006383 	.word	0x08006383
 8005f78:	080063f3 	.word	0x080063f3
 8005f7c:	08006b3d 	.word	0x08006b3d
 8005f80:	08006487 	.word	0x08006487
 8005f84:	08006b3d 	.word	0x08006b3d
 8005f88:	08006b3d 	.word	0x08006b3d
 8005f8c:	08006b3d 	.word	0x08006b3d
 8005f90:	080064ff 	.word	0x080064ff
 8005f94:	08006b3d 	.word	0x08006b3d
 8005f98:	08006b3d 	.word	0x08006b3d
 8005f9c:	08006b3d 	.word	0x08006b3d
 8005fa0:	08006b3d 	.word	0x08006b3d
 8005fa4:	08006b3d 	.word	0x08006b3d
 8005fa8:	08006b3d 	.word	0x08006b3d
 8005fac:	08006b3d 	.word	0x08006b3d
 8005fb0:	08006577 	.word	0x08006577
 8005fb4:	08006b3d 	.word	0x08006b3d
 8005fb8:	08006b3d 	.word	0x08006b3d
 8005fbc:	08006b3d 	.word	0x08006b3d
 8005fc0:	08006b3d 	.word	0x08006b3d
 8005fc4:	08006b3d 	.word	0x08006b3d
 8005fc8:	08006b3d 	.word	0x08006b3d
 8005fcc:	08006b3d 	.word	0x08006b3d
 8005fd0:	08006b3d 	.word	0x08006b3d
 8005fd4:	08006b3d 	.word	0x08006b3d
 8005fd8:	08006b3d 	.word	0x08006b3d
 8005fdc:	08006b3d 	.word	0x08006b3d
 8005fe0:	08006b3d 	.word	0x08006b3d
 8005fe4:	08006b3d 	.word	0x08006b3d
 8005fe8:	08006b3d 	.word	0x08006b3d
 8005fec:	08006b3d 	.word	0x08006b3d
 8005ff0:	08006607 	.word	0x08006607
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	f000 83e0 	beq.w	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005ffc:	f000 bd9e 	b.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006000:	69b9      	ldr	r1, [r7, #24]
 8006002:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006006:	f000 ff89 	bl	8006f1c <RCCEx_GetSAIxPeriphCLKFreq>
 800600a:	61f8      	str	r0, [r7, #28]
      break;
 800600c:	f000 bd99 	b.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006010:	69b9      	ldr	r1, [r7, #24]
 8006012:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006016:	f000 ff81 	bl	8006f1c <RCCEx_GetSAIxPeriphCLKFreq>
 800601a:	61f8      	str	r0, [r7, #28]
      break;
 800601c:	f000 bd91 	b.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006020:	40021000 	.word	0x40021000
 8006024:	0007a120 	.word	0x0007a120
 8006028:	08011640 	.word	0x08011640
 800602c:	00f42400 	.word	0x00f42400
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006030:	4bb0      	ldr	r3, [pc, #704]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006036:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006042:	d015      	beq.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800604a:	f200 8092 	bhi.w	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006054:	d029      	beq.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800605c:	f200 8089 	bhi.w	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d07b      	beq.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800606c:	d04a      	beq.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
          break;
 800606e:	e080      	b.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006070:	4ba0      	ldr	r3, [pc, #640]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b02      	cmp	r3, #2
 800607a:	d17d      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800607c:	4b9d      	ldr	r3, [pc, #628]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0308 	and.w	r3, r3, #8
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8006088:	4b9a      	ldr	r3, [pc, #616]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	091b      	lsrs	r3, r3, #4
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	e005      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 8006094:	4b97      	ldr	r3, [pc, #604]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800609a:	0a1b      	lsrs	r3, r3, #8
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	4a95      	ldr	r2, [pc, #596]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80060a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a6:	61fb      	str	r3, [r7, #28]
          break;
 80060a8:	e066      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80060aa:	4b92      	ldr	r3, [pc, #584]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060b6:	d162      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80060b8:	4b8e      	ldr	r3, [pc, #568]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060c4:	d15b      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060c6:	4b8b      	ldr	r3, [pc, #556]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	0a1b      	lsrs	r3, r3, #8
 80060cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	fb02 f203 	mul.w	r2, r2, r3
 80060da:	4b86      	ldr	r3, [pc, #536]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	091b      	lsrs	r3, r3, #4
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	3301      	adds	r3, #1
 80060e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ea:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80060ec:	4b81      	ldr	r3, [pc, #516]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	0d5b      	lsrs	r3, r3, #21
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	3301      	adds	r3, #1
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006100:	61fb      	str	r3, [r7, #28]
          break;
 8006102:	e03c      	b.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006104:	4b7b      	ldr	r3, [pc, #492]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800610c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006110:	d138      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006112:	4b78      	ldr	r3, [pc, #480]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800611a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800611e:	d131      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006120:	4b74      	ldr	r3, [pc, #464]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	0a1b      	lsrs	r3, r3, #8
 8006126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	fb02 f203 	mul.w	r2, r2, r3
 8006134:	4b6f      	ldr	r3, [pc, #444]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	091b      	lsrs	r3, r3, #4
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	3301      	adds	r3, #1
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006146:	4b6b      	ldr	r3, [pc, #428]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	0d5b      	lsrs	r3, r3, #21
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	3301      	adds	r3, #1
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	fbb2 f3f3 	udiv	r3, r2, r3
 800615a:	61fb      	str	r3, [r7, #28]
          break;
 800615c:	e012      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800615e:	4b65      	ldr	r3, [pc, #404]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b02      	cmp	r3, #2
 800616a:	d10e      	bne.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
            frequency = HSI48_VALUE;
 800616c:	4b63      	ldr	r3, [pc, #396]	; (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 800616e:	61fb      	str	r3, [r7, #28]
          break;
 8006170:	e00b      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
          break;
 8006172:	bf00      	nop
 8006174:	f000 bce5 	b.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006178:	bf00      	nop
 800617a:	f000 bce2 	b.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800617e:	bf00      	nop
 8006180:	f000 bcdf 	b.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006184:	bf00      	nop
 8006186:	f000 bcdc 	b.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800618a:	bf00      	nop
        break;
 800618c:	f000 bcd9 	b.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006190:	4b58      	ldr	r3, [pc, #352]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800619a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800619e:	d13d      	bne.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x508>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80061a0:	4b54      	ldr	r3, [pc, #336]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ac:	f040 84c8 	bne.w	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80061b0:	4b50      	ldr	r3, [pc, #320]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061bc:	f040 84c0 	bne.w	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061c0:	4b4c      	ldr	r3, [pc, #304]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	0a1b      	lsrs	r3, r3, #8
 80061c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ca:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	fb02 f203 	mul.w	r2, r2, r3
 80061d4:	4b47      	ldr	r3, [pc, #284]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	091b      	lsrs	r3, r3, #4
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	3301      	adds	r3, #1
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80061e6:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	0edb      	lsrs	r3, r3, #27
 80061ec:	f003 031f 	and.w	r3, r3, #31
 80061f0:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80061f8:	4b3e      	ldr	r3, [pc, #248]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
                pllp = 17U;
 8006204:	2311      	movs	r3, #17
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	e001      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 7U;
 800620a:	2307      	movs	r3, #7
 800620c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	fbb2 f3f3 	udiv	r3, r2, r3
 8006216:	61fb      	str	r3, [r7, #28]
      break;
 8006218:	f000 bc92 	b.w	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800621c:	4b35      	ldr	r3, [pc, #212]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800621e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006222:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800622e:	d016      	beq.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006236:	f200 809a 	bhi.w	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006240:	d02b      	beq.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006248:	f200 8091 	bhi.w	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 8083 	beq.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800625a:	d051      	beq.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 800625c:	e087      	b.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800625e:	4b25      	ldr	r3, [pc, #148]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	f040 8083 	bne.w	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800626c:	4b21      	ldr	r3, [pc, #132]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
 8006278:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	091b      	lsrs	r3, r3, #4
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	e005      	b.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8006284:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800628a:	0a1b      	lsrs	r3, r3, #8
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	4a19      	ldr	r2, [pc, #100]	; (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006296:	61fb      	str	r3, [r7, #28]
          break;
 8006298:	e06b      	b.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800629a:	4b16      	ldr	r3, [pc, #88]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062a6:	d166      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80062a8:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b4:	d15f      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062b6:	4b0f      	ldr	r3, [pc, #60]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	0a1b      	lsrs	r3, r3, #8
 80062bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	fb02 f203 	mul.w	r2, r2, r3
 80062ca:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	091b      	lsrs	r3, r3, #4
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	3301      	adds	r3, #1
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	0d5b      	lsrs	r3, r3, #21
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	3301      	adds	r3, #1
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	61fb      	str	r3, [r7, #28]
          break;
 80062f2:	e040      	b.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80062f4:	40021000 	.word	0x40021000
 80062f8:	08011640 	.word	0x08011640
 80062fc:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006300:	4bae      	ldr	r3, [pc, #696]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800630c:	d135      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800630e:	4bab      	ldr	r3, [pc, #684]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631a:	d12e      	bne.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800631c:	4ba7      	ldr	r3, [pc, #668]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	0a1b      	lsrs	r3, r3, #8
 8006322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006326:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	fb02 f203 	mul.w	r2, r2, r3
 8006330:	4ba2      	ldr	r3, [pc, #648]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	091b      	lsrs	r3, r3, #4
 8006336:	f003 030f 	and.w	r3, r3, #15
 800633a:	3301      	adds	r3, #1
 800633c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006340:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006342:	4b9e      	ldr	r3, [pc, #632]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	0d5b      	lsrs	r3, r3, #21
 8006348:	f003 0303 	and.w	r3, r3, #3
 800634c:	3301      	adds	r3, #1
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	fbb2 f3f3 	udiv	r3, r2, r3
 8006356:	61fb      	str	r3, [r7, #28]
          break;
 8006358:	e00f      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800635a:	4b98      	ldr	r3, [pc, #608]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800635c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b02      	cmp	r3, #2
 8006366:	d10a      	bne.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
            frequency = HSI48_VALUE;
 8006368:	4b95      	ldr	r3, [pc, #596]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 800636a:	61fb      	str	r3, [r7, #28]
          break;
 800636c:	e007      	b.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
          break;
 800636e:	bf00      	nop
 8006370:	e3e6      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006372:	bf00      	nop
 8006374:	e3e4      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006376:	bf00      	nop
 8006378:	e3e2      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800637a:	bf00      	nop
 800637c:	e3e0      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800637e:	bf00      	nop
      break;
 8006380:	e3de      	b.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006382:	4b8e      	ldr	r3, [pc, #568]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	f003 0303 	and.w	r3, r3, #3
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d828      	bhi.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063b5 	.word	0x080063b5
 80063a4:	080063bd 	.word	0x080063bd
 80063a8:	080063d1 	.word	0x080063d1
          frequency = HAL_RCC_GetPCLK2Freq();
 80063ac:	f7ff f81a 	bl	80053e4 <HAL_RCC_GetPCLK2Freq>
 80063b0:	61f8      	str	r0, [r7, #28]
          break;
 80063b2:	e01d      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetSysClockFreq();
 80063b4:	f7fe ff6a 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80063b8:	61f8      	str	r0, [r7, #28]
          break;
 80063ba:	e019      	b.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063bc:	4b7f      	ldr	r3, [pc, #508]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c8:	d10f      	bne.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
            frequency = HSI_VALUE;
 80063ca:	4b7e      	ldr	r3, [pc, #504]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80063cc:	61fb      	str	r3, [r7, #28]
          break;
 80063ce:	e00c      	b.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063d0:	4b7a      	ldr	r3, [pc, #488]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d107      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = LSE_VALUE;
 80063de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e2:	61fb      	str	r3, [r7, #28]
          break;
 80063e4:	e003      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          break;
 80063e6:	bf00      	nop
 80063e8:	e3ab      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063ea:	bf00      	nop
 80063ec:	e3a9      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063ee:	bf00      	nop
        break;
 80063f0:	e3a7      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80063f2:	4b72      	ldr	r3, [pc, #456]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f8:	f003 030c 	and.w	r3, r3, #12
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b0c      	cmp	r3, #12
 8006402:	d83a      	bhi.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8006404:	a201      	add	r2, pc, #4	; (adr r2, 800640c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8006406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640a:	bf00      	nop
 800640c:	08006441 	.word	0x08006441
 8006410:	0800647b 	.word	0x0800647b
 8006414:	0800647b 	.word	0x0800647b
 8006418:	0800647b 	.word	0x0800647b
 800641c:	08006449 	.word	0x08006449
 8006420:	0800647b 	.word	0x0800647b
 8006424:	0800647b 	.word	0x0800647b
 8006428:	0800647b 	.word	0x0800647b
 800642c:	08006451 	.word	0x08006451
 8006430:	0800647b 	.word	0x0800647b
 8006434:	0800647b 	.word	0x0800647b
 8006438:	0800647b 	.word	0x0800647b
 800643c:	08006465 	.word	0x08006465
          frequency = HAL_RCC_GetPCLK1Freq();
 8006440:	f7fe ffba 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 8006444:	61f8      	str	r0, [r7, #28]
          break;
 8006446:	e01d      	b.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          frequency = HAL_RCC_GetSysClockFreq();
 8006448:	f7fe ff20 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800644c:	61f8      	str	r0, [r7, #28]
          break;
 800644e:	e019      	b.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006450:	4b5a      	ldr	r3, [pc, #360]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645c:	d10f      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
            frequency = HSI_VALUE;
 800645e:	4b59      	ldr	r3, [pc, #356]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8006460:	61fb      	str	r3, [r7, #28]
          break;
 8006462:	e00c      	b.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006464:	4b55      	ldr	r3, [pc, #340]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b02      	cmp	r3, #2
 8006470:	d107      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = LSE_VALUE;
 8006472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006476:	61fb      	str	r3, [r7, #28]
          break;
 8006478:	e003      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          break;
 800647a:	bf00      	nop
 800647c:	e361      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800647e:	bf00      	nop
 8006480:	e35f      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006482:	bf00      	nop
        break;
 8006484:	e35d      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006486:	4b4d      	ldr	r3, [pc, #308]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b30      	cmp	r3, #48	; 0x30
 8006496:	d021      	beq.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b30      	cmp	r3, #48	; 0x30
 800649c:	d829      	bhi.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	d011      	beq.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d823      	bhi.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b10      	cmp	r3, #16
 80064b4:	d004      	beq.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          break;
 80064b6:	e01c      	b.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064b8:	f7fe ff7e 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 80064bc:	61f8      	str	r0, [r7, #28]
          break;
 80064be:	e01d      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80064c0:	f7fe fee4 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80064c4:	61f8      	str	r0, [r7, #28]
          break;
 80064c6:	e019      	b.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064c8:	4b3c      	ldr	r3, [pc, #240]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064d4:	d10f      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 80064d6:	4b3b      	ldr	r3, [pc, #236]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80064d8:	61fb      	str	r3, [r7, #28]
          break;
 80064da:	e00c      	b.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064dc:	4b37      	ldr	r3, [pc, #220]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d107      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = LSE_VALUE;
 80064ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ee:	61fb      	str	r3, [r7, #28]
          break;
 80064f0:	e003      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          break;
 80064f2:	bf00      	nop
 80064f4:	e325      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80064f6:	bf00      	nop
 80064f8:	e323      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80064fa:	bf00      	nop
        break;
 80064fc:	e321      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80064fe:	4b2f      	ldr	r3, [pc, #188]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006504:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2bc0      	cmp	r3, #192	; 0xc0
 800650e:	d021      	beq.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2bc0      	cmp	r3, #192	; 0xc0
 8006514:	d829      	bhi.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b80      	cmp	r3, #128	; 0x80
 800651a:	d011      	beq.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b80      	cmp	r3, #128	; 0x80
 8006520:	d823      	bhi.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d004      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          break;
 800652e:	e01c      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006530:	f7fe ff42 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 8006534:	61f8      	str	r0, [r7, #28]
          break;
 8006536:	e01d      	b.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          frequency = HAL_RCC_GetSysClockFreq();
 8006538:	f7fe fea8 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800653c:	61f8      	str	r0, [r7, #28]
          break;
 800653e:	e019      	b.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006540:	4b1e      	ldr	r3, [pc, #120]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654c:	d10f      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            frequency = HSI_VALUE;
 800654e:	4b1d      	ldr	r3, [pc, #116]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8006550:	61fb      	str	r3, [r7, #28]
          break;
 8006552:	e00c      	b.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006554:	4b19      	ldr	r3, [pc, #100]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d107      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = LSE_VALUE;
 8006562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006566:	61fb      	str	r3, [r7, #28]
          break;
 8006568:	e003      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          break;
 800656a:	bf00      	nop
 800656c:	e2e9      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800656e:	bf00      	nop
 8006570:	e2e7      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006572:	bf00      	nop
        break;
 8006574:	e2e5      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006576:	4b11      	ldr	r3, [pc, #68]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006588:	d02c      	beq.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006590:	d833      	bhi.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006598:	d01a      	beq.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a0:	d82b      	bhi.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ae:	d00b      	beq.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          break;
 80065b0:	e023      	b.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b2:	f7fe ff01 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 80065b6:	61f8      	str	r0, [r7, #28]
          break;
 80065b8:	e024      	b.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 80065ba:	bf00      	nop
 80065bc:	40021000 	.word	0x40021000
 80065c0:	02dc6c00 	.word	0x02dc6c00
 80065c4:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetSysClockFreq();
 80065c8:	f7fe fe60 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80065cc:	61f8      	str	r0, [r7, #28]
          break;
 80065ce:	e019      	b.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065d0:	4ba6      	ldr	r3, [pc, #664]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065dc:	d10f      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 80065de:	4ba4      	ldr	r3, [pc, #656]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80065e0:	61fb      	str	r3, [r7, #28]
          break;
 80065e2:	e00c      	b.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065e4:	4ba1      	ldr	r3, [pc, #644]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d107      	bne.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = LSE_VALUE;
 80065f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065f6:	61fb      	str	r3, [r7, #28]
          break;
 80065f8:	e003      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80065fa:	bf00      	nop
 80065fc:	e2a1      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80065fe:	bf00      	nop
 8006600:	e29f      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006602:	bf00      	nop
        break;
 8006604:	e29d      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006606:	4b99      	ldr	r3, [pc, #612]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006618:	d025      	beq.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006620:	d82c      	bhi.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006628:	d013      	beq.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006630:	d824      	bhi.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663e:	d004      	beq.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          break;
 8006640:	e01c      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006642:	f7fe feb9 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 8006646:	61f8      	str	r0, [r7, #28]
          break;
 8006648:	e01d      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = HAL_RCC_GetSysClockFreq();
 800664a:	f7fe fe1f 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800664e:	61f8      	str	r0, [r7, #28]
          break;
 8006650:	e019      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006652:	4b86      	ldr	r3, [pc, #536]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665e:	d10f      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            frequency = HSI_VALUE;
 8006660:	4b83      	ldr	r3, [pc, #524]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006662:	61fb      	str	r3, [r7, #28]
          break;
 8006664:	e00c      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006666:	4b81      	ldr	r3, [pc, #516]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b02      	cmp	r3, #2
 8006672:	d107      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
            frequency = LSE_VALUE;
 8006674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006678:	61fb      	str	r3, [r7, #28]
          break;
 800667a:	e003      	b.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          break;
 800667c:	bf00      	nop
 800667e:	e260      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006680:	bf00      	nop
 8006682:	e25e      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006684:	bf00      	nop
        break;
 8006686:	e25c      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006688:	4b78      	ldr	r3, [pc, #480]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800669a:	d007      	beq.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066a2:	d12f      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80066a4:	f7fe fdf2 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80066a8:	61f8      	str	r0, [r7, #28]
          break;
 80066aa:	e02e      	b.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80066ac:	4b6f      	ldr	r3, [pc, #444]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066b8:	d126      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80066ba:	4b6c      	ldr	r3, [pc, #432]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d020      	beq.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80066c6:	4b69      	ldr	r3, [pc, #420]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066d0:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	fb02 f203 	mul.w	r2, r2, r3
 80066da:	4b64      	ldr	r3, [pc, #400]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	091b      	lsrs	r3, r3, #4
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	3301      	adds	r3, #1
 80066e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ea:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80066ec:	4b5f      	ldr	r3, [pc, #380]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	0e5b      	lsrs	r3, r3, #25
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	3301      	adds	r3, #1
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006700:	61fb      	str	r3, [r7, #28]
          break;
 8006702:	e001      	b.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
          break;
 8006704:	bf00      	nop
 8006706:	e21c      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006708:	bf00      	nop
        break;
 800670a:	e21a      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800670c:	4b57      	ldr	r3, [pc, #348]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800670e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d103      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
          frequency = HAL_RCC_GetPCLK2Freq();
 800671e:	f7fe fe61 	bl	80053e4 <HAL_RCC_GetPCLK2Freq>
 8006722:	61f8      	str	r0, [r7, #28]
        break;
 8006724:	e20d      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006726:	f7fe fdb1 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800672a:	61f8      	str	r0, [r7, #28]
        break;
 800672c:	e209      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800672e:	4b4f      	ldr	r3, [pc, #316]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006734:	f003 0318 	and.w	r3, r3, #24
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b10      	cmp	r3, #16
 800673e:	d010      	beq.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b10      	cmp	r3, #16
 8006744:	d834      	bhi.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b08      	cmp	r3, #8
 8006750:	d024      	beq.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
          break;
 8006752:	e02d      	b.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006754:	69b9      	ldr	r1, [r7, #24]
 8006756:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800675a:	f000 fbdf 	bl	8006f1c <RCCEx_GetSAIxPeriphCLKFreq>
 800675e:	61f8      	str	r0, [r7, #28]
          break;
 8006760:	e02b      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006762:	4b42      	ldr	r3, [pc, #264]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b02      	cmp	r3, #2
 800676c:	d122      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800676e:	4b3f      	ldr	r3, [pc, #252]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0308 	and.w	r3, r3, #8
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800677a:	4b3c      	ldr	r3, [pc, #240]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	091b      	lsrs	r3, r3, #4
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	e005      	b.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 8006786:	4b39      	ldr	r3, [pc, #228]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800678c:	0a1b      	lsrs	r3, r3, #8
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	4a38      	ldr	r2, [pc, #224]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 8006794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006798:	61fb      	str	r3, [r7, #28]
          break;
 800679a:	e00b      	b.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800679c:	4b33      	ldr	r3, [pc, #204]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a8:	d106      	bne.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = HSI_VALUE;
 80067aa:	4b31      	ldr	r3, [pc, #196]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80067ac:	61fb      	str	r3, [r7, #28]
          break;
 80067ae:	e003      	b.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          break;
 80067b0:	bf00      	nop
 80067b2:	e1c6      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80067b4:	bf00      	nop
 80067b6:	e1c4      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80067b8:	bf00      	nop
        break;
 80067ba:	e1c2      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80067bc:	4b2b      	ldr	r3, [pc, #172]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ce:	d013      	beq.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d6:	d819      	bhi.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d004      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e4:	d004      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
          break;
 80067e6:	e011      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067e8:	f7fe fde6 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 80067ec:	61f8      	str	r0, [r7, #28]
          break;
 80067ee:	e010      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          frequency = HAL_RCC_GetSysClockFreq();
 80067f0:	f7fe fd4c 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80067f4:	61f8      	str	r0, [r7, #28]
          break;
 80067f6:	e00c      	b.n	8006812 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067f8:	4b1c      	ldr	r3, [pc, #112]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006804:	d104      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
            frequency = HSI_VALUE;
 8006806:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006808:	61fb      	str	r3, [r7, #28]
          break;
 800680a:	e001      	b.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
          break;
 800680c:	bf00      	nop
 800680e:	e198      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006810:	bf00      	nop
        break;
 8006812:	e196      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006814:	4b15      	ldr	r3, [pc, #84]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006826:	d013      	beq.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682e:	d819      	bhi.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d004      	beq.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800683c:	d004      	beq.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 800683e:	e011      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006840:	f7fe fdba 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 8006844:	61f8      	str	r0, [r7, #28]
          break;
 8006846:	e010      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = HAL_RCC_GetSysClockFreq();
 8006848:	f7fe fd20 	bl	800528c <HAL_RCC_GetSysClockFreq>
 800684c:	61f8      	str	r0, [r7, #28]
          break;
 800684e:	e00c      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685c:	d104      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
            frequency = HSI_VALUE;
 800685e:	4b04      	ldr	r3, [pc, #16]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006860:	61fb      	str	r3, [r7, #28]
          break;
 8006862:	e001      	b.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
          break;
 8006864:	bf00      	nop
 8006866:	e16c      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006868:	bf00      	nop
        break;
 800686a:	e16a      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 800686c:	40021000 	.word	0x40021000
 8006870:	00f42400 	.word	0x00f42400
 8006874:	08011640 	.word	0x08011640
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006878:	4baa      	ldr	r3, [pc, #680]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 800687a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800688a:	d013      	beq.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006892:	d819      	bhi.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d004      	beq.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a0:	d004      	beq.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
          break;
 80068a2:	e011      	b.n	80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068a4:	f7fe fd88 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 80068a8:	61f8      	str	r0, [r7, #28]
          break;
 80068aa:	e010      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = HAL_RCC_GetSysClockFreq();
 80068ac:	f7fe fcee 	bl	800528c <HAL_RCC_GetSysClockFreq>
 80068b0:	61f8      	str	r0, [r7, #28]
          break;
 80068b2:	e00c      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068b4:	4b9b      	ldr	r3, [pc, #620]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068c0:	d104      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
            frequency = HSI_VALUE;
 80068c2:	4b99      	ldr	r3, [pc, #612]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80068c4:	61fb      	str	r3, [r7, #28]
          break;
 80068c6:	e001      	b.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          break;
 80068c8:	bf00      	nop
 80068ca:	e13a      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80068cc:	bf00      	nop
        break;
 80068ce:	e138      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80068d0:	4b94      	ldr	r3, [pc, #592]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80068d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d011      	beq.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d818      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d004      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 80068f4:	e011      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068f6:	f7fe fd5f 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 80068fa:	61f8      	str	r0, [r7, #28]
          break;
 80068fc:	e010      	b.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          frequency = HAL_RCC_GetSysClockFreq();
 80068fe:	f7fe fcc5 	bl	800528c <HAL_RCC_GetSysClockFreq>
 8006902:	61f8      	str	r0, [r7, #28]
          break;
 8006904:	e00c      	b.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006906:	4b87      	ldr	r3, [pc, #540]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006912:	d104      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
            frequency = HSI_VALUE;
 8006914:	4b84      	ldr	r3, [pc, #528]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006916:	61fb      	str	r3, [r7, #28]
          break;
 8006918:	e001      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          break;
 800691a:	bf00      	nop
 800691c:	e111      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800691e:	bf00      	nop
        break;
 8006920:	e10f      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006922:	4b80      	ldr	r3, [pc, #512]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006928:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006934:	d02c      	beq.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800693c:	d833      	bhi.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006944:	d01a      	beq.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800694c:	d82b      	bhi.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800695a:	d004      	beq.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          break;
 800695c:	e023      	b.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
          frequency = HAL_RCC_GetPCLK1Freq();
 800695e:	f7fe fd2b 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 8006962:	61f8      	str	r0, [r7, #28]
          break;
 8006964:	e026      	b.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0xca0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006966:	4b6f      	ldr	r3, [pc, #444]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b02      	cmp	r3, #2
 8006972:	d11a      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
              frequency = LSI_VALUE;
 8006974:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006978:	61fb      	str	r3, [r7, #28]
          break;
 800697a:	e016      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800697c:	4b69      	ldr	r3, [pc, #420]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006988:	d111      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
            frequency = HSI_VALUE;
 800698a:	4b67      	ldr	r3, [pc, #412]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 800698c:	61fb      	str	r3, [r7, #28]
          break;
 800698e:	e00e      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006990:	4b64      	ldr	r3, [pc, #400]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b02      	cmp	r3, #2
 800699c:	d109      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = LSE_VALUE;
 800699e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a2:	61fb      	str	r3, [r7, #28]
          break;
 80069a4:	e005      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          break;
 80069a6:	bf00      	nop
 80069a8:	e0cb      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069aa:	bf00      	nop
 80069ac:	e0c9      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069ae:	bf00      	nop
 80069b0:	e0c7      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069b2:	bf00      	nop
        break;
 80069b4:	e0c5      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80069b6:	4b5b      	ldr	r3, [pc, #364]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069bc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069c8:	d02c      	beq.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069d0:	d833      	bhi.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069d8:	d01a      	beq.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e0:	d82b      	bhi.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ee:	d004      	beq.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
          break;
 80069f0:	e023      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069f2:	f7fe fce1 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 80069f6:	61f8      	str	r0, [r7, #28]
          break;
 80069f8:	e026      	b.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80069fa:	4b4a      	ldr	r3, [pc, #296]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d11a      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
              frequency = LSI_VALUE;
 8006a08:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a0c:	61fb      	str	r3, [r7, #28]
          break;
 8006a0e:	e016      	b.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a10:	4b44      	ldr	r3, [pc, #272]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a1c:	d111      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = HSI_VALUE;
 8006a1e:	4b42      	ldr	r3, [pc, #264]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006a20:	61fb      	str	r3, [r7, #28]
          break;
 8006a22:	e00e      	b.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a24:	4b3f      	ldr	r3, [pc, #252]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d109      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
            frequency = LSE_VALUE;
 8006a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a36:	61fb      	str	r3, [r7, #28]
          break;
 8006a38:	e005      	b.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          break;
 8006a3a:	bf00      	nop
 8006a3c:	e081      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a3e:	bf00      	nop
 8006a40:	e07f      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a42:	bf00      	nop
 8006a44:	e07d      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a46:	bf00      	nop
        break;
 8006a48:	e07b      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006a4a:	4b36      	ldr	r3, [pc, #216]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a5c:	d02c      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a64:	d855      	bhi.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d004      	beq.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a72:	d004      	beq.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
          break;
 8006a74:	e04d      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a76:	f7fe fc09 	bl	800528c <HAL_RCC_GetSysClockFreq>
 8006a7a:	61f8      	str	r0, [r7, #28]
          break;
 8006a7c:	e04e      	b.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006a7e:	4b29      	ldr	r3, [pc, #164]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d145      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006a8a:	4b26      	ldr	r3, [pc, #152]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006a96:	4b23      	ldr	r3, [pc, #140]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	091b      	lsrs	r3, r3, #4
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	e005      	b.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8006aa2:	4b20      	ldr	r3, [pc, #128]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aa8:	0a1b      	lsrs	r3, r3, #8
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>)
 8006ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab4:	61fb      	str	r3, [r7, #28]
          break;
 8006ab6:	e02e      	b.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006ab8:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ac4:	d129      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006ac6:	4b17      	ldr	r3, [pc, #92]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad2:	d122      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006ad4:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	0a1b      	lsrs	r3, r3, #8
 8006ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ade:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	fb02 f203 	mul.w	r2, r2, r3
 8006ae8:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	3301      	adds	r3, #1
 8006af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	0d5b      	lsrs	r3, r3, #21
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	3301      	adds	r3, #1
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0e:	61fb      	str	r3, [r7, #28]
          break;
 8006b10:	e003      	b.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
          break;
 8006b12:	bf00      	nop
 8006b14:	e015      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006b16:	bf00      	nop
 8006b18:	e013      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006b1a:	bf00      	nop
        break;
 8006b1c:	e011      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006b1e:	bf00      	nop
 8006b20:	e00f      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006b22:	bf00      	nop
 8006b24:	40021000 	.word	0x40021000
 8006b28:	00f42400 	.word	0x00f42400
 8006b2c:	08011640 	.word	0x08011640
      break;
 8006b30:	bf00      	nop
 8006b32:	e006      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006b34:	bf00      	nop
 8006b36:	e004      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006b38:	bf00      	nop
 8006b3a:	e002      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006b3c:	bf00      	nop
 8006b3e:	e000      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006b40:	bf00      	nop
    }
  }

  return(frequency);
 8006b42:	69fb      	ldr	r3, [r7, #28]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b5a:	4b72      	ldr	r3, [pc, #456]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00e      	beq.n	8006b84 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b66:	4b6f      	ldr	r3, [pc, #444]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f003 0203 	and.w	r2, r3, #3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d103      	bne.n	8006b7e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
       ||
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d142      	bne.n	8006c04 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	73fb      	strb	r3, [r7, #15]
 8006b82:	e03f      	b.n	8006c04 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d018      	beq.n	8006bbe <RCCEx_PLLSAI1_Config+0x72>
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d825      	bhi.n	8006bdc <RCCEx_PLLSAI1_Config+0x90>
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d002      	beq.n	8006b9a <RCCEx_PLLSAI1_Config+0x4e>
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d009      	beq.n	8006bac <RCCEx_PLLSAI1_Config+0x60>
 8006b98:	e020      	b.n	8006bdc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b9a:	4b62      	ldr	r3, [pc, #392]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d11d      	bne.n	8006be2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006baa:	e01a      	b.n	8006be2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bac:	4b5d      	ldr	r3, [pc, #372]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d116      	bne.n	8006be6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bbc:	e013      	b.n	8006be6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006bbe:	4b59      	ldr	r3, [pc, #356]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10f      	bne.n	8006bea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bca:	4b56      	ldr	r3, [pc, #344]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bda:	e006      	b.n	8006bea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
      break;
 8006be0:	e004      	b.n	8006bec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006be2:	bf00      	nop
 8006be4:	e002      	b.n	8006bec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006be6:	bf00      	nop
 8006be8:	e000      	b.n	8006bec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d108      	bne.n	8006c04 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006bf2:	4b4c      	ldr	r3, [pc, #304]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f023 0203 	bic.w	r2, r3, #3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4949      	ldr	r1, [pc, #292]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f040 8086 	bne.w	8006d18 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c0c:	4b45      	ldr	r3, [pc, #276]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a44      	ldr	r2, [pc, #272]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c18:	f7fa fd70 	bl	80016fc <HAL_GetTick>
 8006c1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c1e:	e009      	b.n	8006c34 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c20:	f7fa fd6c 	bl	80016fc <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d902      	bls.n	8006c34 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	73fb      	strb	r3, [r7, #15]
        break;
 8006c32:	e005      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c34:	4b3b      	ldr	r3, [pc, #236]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1ef      	bne.n	8006c20 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d168      	bne.n	8006d18 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d113      	bne.n	8006c74 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c4c:	4b35      	ldr	r3, [pc, #212]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	4b35      	ldr	r3, [pc, #212]	; (8006d28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6892      	ldr	r2, [r2, #8]
 8006c58:	0211      	lsls	r1, r2, #8
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68d2      	ldr	r2, [r2, #12]
 8006c5e:	06d2      	lsls	r2, r2, #27
 8006c60:	4311      	orrs	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6852      	ldr	r2, [r2, #4]
 8006c66:	3a01      	subs	r2, #1
 8006c68:	0112      	lsls	r2, r2, #4
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	492d      	ldr	r1, [pc, #180]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	610b      	str	r3, [r1, #16]
 8006c72:	e02d      	b.n	8006cd0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d115      	bne.n	8006ca6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c7a:	4b2a      	ldr	r3, [pc, #168]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c7c:	691a      	ldr	r2, [r3, #16]
 8006c7e:	4b2b      	ldr	r3, [pc, #172]	; (8006d2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6892      	ldr	r2, [r2, #8]
 8006c86:	0211      	lsls	r1, r2, #8
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6912      	ldr	r2, [r2, #16]
 8006c8c:	0852      	lsrs	r2, r2, #1
 8006c8e:	3a01      	subs	r2, #1
 8006c90:	0552      	lsls	r2, r2, #21
 8006c92:	4311      	orrs	r1, r2
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6852      	ldr	r2, [r2, #4]
 8006c98:	3a01      	subs	r2, #1
 8006c9a:	0112      	lsls	r2, r2, #4
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	4921      	ldr	r1, [pc, #132]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	610b      	str	r3, [r1, #16]
 8006ca4:	e014      	b.n	8006cd0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ca6:	4b1f      	ldr	r3, [pc, #124]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	4b21      	ldr	r3, [pc, #132]	; (8006d30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6892      	ldr	r2, [r2, #8]
 8006cb2:	0211      	lsls	r1, r2, #8
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6952      	ldr	r2, [r2, #20]
 8006cb8:	0852      	lsrs	r2, r2, #1
 8006cba:	3a01      	subs	r2, #1
 8006cbc:	0652      	lsls	r2, r2, #25
 8006cbe:	4311      	orrs	r1, r2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6852      	ldr	r2, [r2, #4]
 8006cc4:	3a01      	subs	r2, #1
 8006cc6:	0112      	lsls	r2, r2, #4
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	4916      	ldr	r1, [pc, #88]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006cd0:	4b14      	ldr	r3, [pc, #80]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a13      	ldr	r2, [pc, #76]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cdc:	f7fa fd0e 	bl	80016fc <HAL_GetTick>
 8006ce0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006ce2:	e009      	b.n	8006cf8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ce4:	f7fa fd0a 	bl	80016fc <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d902      	bls.n	8006cf8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	73fb      	strb	r3, [r7, #15]
          break;
 8006cf6:	e005      	b.n	8006d04 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0ef      	beq.n	8006ce4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d0a:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	4904      	ldr	r1, [pc, #16]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	40021000 	.word	0x40021000
 8006d28:	07ff800f 	.word	0x07ff800f
 8006d2c:	ff9f800f 	.word	0xff9f800f
 8006d30:	f9ff800f 	.word	0xf9ff800f

08006d34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d42:	4b72      	ldr	r3, [pc, #456]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00e      	beq.n	8006d6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d4e:	4b6f      	ldr	r3, [pc, #444]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f003 0203 	and.w	r2, r3, #3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d103      	bne.n	8006d66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
       ||
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d142      	bne.n	8006dec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	73fb      	strb	r3, [r7, #15]
 8006d6a:	e03f      	b.n	8006dec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b03      	cmp	r3, #3
 8006d72:	d018      	beq.n	8006da6 <RCCEx_PLLSAI2_Config+0x72>
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d825      	bhi.n	8006dc4 <RCCEx_PLLSAI2_Config+0x90>
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d002      	beq.n	8006d82 <RCCEx_PLLSAI2_Config+0x4e>
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d009      	beq.n	8006d94 <RCCEx_PLLSAI2_Config+0x60>
 8006d80:	e020      	b.n	8006dc4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d82:	4b62      	ldr	r3, [pc, #392]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0302 	and.w	r3, r3, #2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d11d      	bne.n	8006dca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d92:	e01a      	b.n	8006dca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d94:	4b5d      	ldr	r3, [pc, #372]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d116      	bne.n	8006dce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006da4:	e013      	b.n	8006dce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006da6:	4b59      	ldr	r3, [pc, #356]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10f      	bne.n	8006dd2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006db2:	4b56      	ldr	r3, [pc, #344]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006dc2:	e006      	b.n	8006dd2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc8:	e004      	b.n	8006dd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006dca:	bf00      	nop
 8006dcc:	e002      	b.n	8006dd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006dce:	bf00      	nop
 8006dd0:	e000      	b.n	8006dd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006dd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d108      	bne.n	8006dec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006dda:	4b4c      	ldr	r3, [pc, #304]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f023 0203 	bic.w	r2, r3, #3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4949      	ldr	r1, [pc, #292]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f040 8086 	bne.w	8006f00 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006df4:	4b45      	ldr	r3, [pc, #276]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a44      	ldr	r2, [pc, #272]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e00:	f7fa fc7c 	bl	80016fc <HAL_GetTick>
 8006e04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e06:	e009      	b.n	8006e1c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e08:	f7fa fc78 	bl	80016fc <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d902      	bls.n	8006e1c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	73fb      	strb	r3, [r7, #15]
        break;
 8006e1a:	e005      	b.n	8006e28 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e1c:	4b3b      	ldr	r3, [pc, #236]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1ef      	bne.n	8006e08 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d168      	bne.n	8006f00 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d113      	bne.n	8006e5c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e34:	4b35      	ldr	r3, [pc, #212]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e36:	695a      	ldr	r2, [r3, #20]
 8006e38:	4b35      	ldr	r3, [pc, #212]	; (8006f10 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6892      	ldr	r2, [r2, #8]
 8006e40:	0211      	lsls	r1, r2, #8
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	68d2      	ldr	r2, [r2, #12]
 8006e46:	06d2      	lsls	r2, r2, #27
 8006e48:	4311      	orrs	r1, r2
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	6852      	ldr	r2, [r2, #4]
 8006e4e:	3a01      	subs	r2, #1
 8006e50:	0112      	lsls	r2, r2, #4
 8006e52:	430a      	orrs	r2, r1
 8006e54:	492d      	ldr	r1, [pc, #180]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	614b      	str	r3, [r1, #20]
 8006e5a:	e02d      	b.n	8006eb8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d115      	bne.n	8006e8e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e62:	4b2a      	ldr	r3, [pc, #168]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	4b2b      	ldr	r3, [pc, #172]	; (8006f14 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6892      	ldr	r2, [r2, #8]
 8006e6e:	0211      	lsls	r1, r2, #8
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6912      	ldr	r2, [r2, #16]
 8006e74:	0852      	lsrs	r2, r2, #1
 8006e76:	3a01      	subs	r2, #1
 8006e78:	0552      	lsls	r2, r2, #21
 8006e7a:	4311      	orrs	r1, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6852      	ldr	r2, [r2, #4]
 8006e80:	3a01      	subs	r2, #1
 8006e82:	0112      	lsls	r2, r2, #4
 8006e84:	430a      	orrs	r2, r1
 8006e86:	4921      	ldr	r1, [pc, #132]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	614b      	str	r3, [r1, #20]
 8006e8c:	e014      	b.n	8006eb8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e8e:	4b1f      	ldr	r3, [pc, #124]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e90:	695a      	ldr	r2, [r3, #20]
 8006e92:	4b21      	ldr	r3, [pc, #132]	; (8006f18 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6892      	ldr	r2, [r2, #8]
 8006e9a:	0211      	lsls	r1, r2, #8
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6952      	ldr	r2, [r2, #20]
 8006ea0:	0852      	lsrs	r2, r2, #1
 8006ea2:	3a01      	subs	r2, #1
 8006ea4:	0652      	lsls	r2, r2, #25
 8006ea6:	4311      	orrs	r1, r2
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6852      	ldr	r2, [r2, #4]
 8006eac:	3a01      	subs	r2, #1
 8006eae:	0112      	lsls	r2, r2, #4
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	4916      	ldr	r1, [pc, #88]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006eb8:	4b14      	ldr	r3, [pc, #80]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ec2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ec4:	f7fa fc1a 	bl	80016fc <HAL_GetTick>
 8006ec8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eca:	e009      	b.n	8006ee0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ecc:	f7fa fc16 	bl	80016fc <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d902      	bls.n	8006ee0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	73fb      	strb	r3, [r7, #15]
          break;
 8006ede:	e005      	b.n	8006eec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0ef      	beq.n	8006ecc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ef2:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ef4:	695a      	ldr	r2, [r3, #20]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	4904      	ldr	r1, [pc, #16]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	07ff800f 	.word	0x07ff800f
 8006f14:	ff9f800f 	.word	0xff9f800f
 8006f18:	f9ff800f 	.word	0xf9ff800f

08006f1c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b089      	sub	sp, #36	; 0x24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f38:	d10b      	bne.n	8006f52 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006f3a:	4b7e      	ldr	r3, [pc, #504]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f40:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006f44:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2b60      	cmp	r3, #96	; 0x60
 8006f4a:	d112      	bne.n	8006f72 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f4c:	4b7a      	ldr	r3, [pc, #488]	; (8007138 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	e00f      	b.n	8006f72 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f58:	d10b      	bne.n	8006f72 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006f5a:	4b76      	ldr	r3, [pc, #472]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f64:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f6c:	d101      	bne.n	8006f72 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006f6e:	4b72      	ldr	r3, [pc, #456]	; (8007138 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006f70:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f040 80d6 	bne.w	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d003      	beq.n	8006f8c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f8a:	d13b      	bne.n	8007004 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f8c:	4b69      	ldr	r3, [pc, #420]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f98:	f040 80c4 	bne.w	8007124 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006f9c:	4b65      	ldr	r3, [pc, #404]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80bd 	beq.w	8007124 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006faa:	4b62      	ldr	r3, [pc, #392]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	091b      	lsrs	r3, r3, #4
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006fbe:	4b5d      	ldr	r3, [pc, #372]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fc8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006fca:	4b5a      	ldr	r3, [pc, #360]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	0edb      	lsrs	r3, r3, #27
 8006fd0:	f003 031f 	and.w	r3, r3, #31
 8006fd4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10a      	bne.n	8006ff2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006fdc:	4b55      	ldr	r3, [pc, #340]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006fe8:	2311      	movs	r3, #17
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e001      	b.n	8006ff2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006fee:	2307      	movs	r3, #7
 8006ff0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	fb02 f203 	mul.w	r2, r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007000:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007002:	e08f      	b.n	8007124 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d13a      	bne.n	8007080 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800700a:	4b4a      	ldr	r3, [pc, #296]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007016:	f040 8086 	bne.w	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800701a:	4b46      	ldr	r3, [pc, #280]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d07f      	beq.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007026:	4b43      	ldr	r3, [pc, #268]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	091b      	lsrs	r3, r3, #4
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	3301      	adds	r3, #1
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	fbb2 f3f3 	udiv	r3, r2, r3
 8007038:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800703a:	4b3e      	ldr	r3, [pc, #248]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	0a1b      	lsrs	r3, r3, #8
 8007040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007044:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007046:	4b3b      	ldr	r3, [pc, #236]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	0edb      	lsrs	r3, r3, #27
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007058:	4b36      	ldr	r3, [pc, #216]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007064:	2311      	movs	r3, #17
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	e001      	b.n	800706e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800706a:	2307      	movs	r3, #7
 800706c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	fb02 f203 	mul.w	r2, r2, r3
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	61fb      	str	r3, [r7, #28]
 800707e:	e052      	b.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	2b80      	cmp	r3, #128	; 0x80
 8007084:	d003      	beq.n	800708e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708c:	d109      	bne.n	80070a2 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800708e:	4b29      	ldr	r3, [pc, #164]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800709a:	d144      	bne.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800709c:	4b27      	ldr	r3, [pc, #156]	; (800713c <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800709e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070a0:	e041      	b.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b20      	cmp	r3, #32
 80070a6:	d003      	beq.n	80070b0 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ae:	d13a      	bne.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80070b0:	4b20      	ldr	r3, [pc, #128]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070bc:	d133      	bne.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80070be:	4b1d      	ldr	r3, [pc, #116]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d02d      	beq.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80070ca:	4b1a      	ldr	r3, [pc, #104]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	091b      	lsrs	r3, r3, #4
 80070d0:	f003 030f 	and.w	r3, r3, #15
 80070d4:	3301      	adds	r3, #1
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80070de:	4b15      	ldr	r3, [pc, #84]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80070ea:	4b12      	ldr	r3, [pc, #72]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	0edb      	lsrs	r3, r3, #27
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80070fc:	4b0d      	ldr	r3, [pc, #52]	; (8007134 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007108:	2311      	movs	r3, #17
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	e001      	b.n	8007112 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800710e:	2307      	movs	r3, #7
 8007110:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	fb02 f203 	mul.w	r2, r2, r3
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	e000      	b.n	8007126 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007124:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007126:	69fb      	ldr	r3, [r7, #28]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3724      	adds	r7, #36	; 0x24
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	40021000 	.word	0x40021000
 8007138:	001fff68 	.word	0x001fff68
 800713c:	00f42400 	.word	0x00f42400

08007140 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d06c      	beq.n	800722c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7f9 ffb8 	bl	80010dc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	22ca      	movs	r2, #202	; 0xca
 800717a:	625a      	str	r2, [r3, #36]	; 0x24
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2253      	movs	r2, #83	; 0x53
 8007182:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f9a0 	bl	80074ca <RTC_EnterInitMode>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d14b      	bne.n	800722c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80071a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071a6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6899      	ldr	r1, [r3, #8]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	431a      	orrs	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68d2      	ldr	r2, [r2, #12]
 80071ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6919      	ldr	r1, [r3, #16]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	041a      	lsls	r2, r3, #16
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f9a3 	bl	8007530 <RTC_ExitInitMode>
 80071ea:	4603      	mov	r3, r0
 80071ec:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d11b      	bne.n	800722c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0203 	bic.w	r2, r2, #3
 8007202:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69da      	ldr	r2, [r3, #28]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	22ff      	movs	r2, #255	; 0xff
 8007222:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800722c:	7bfb      	ldrb	r3, [r7, #15]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007236:	b590      	push	{r4, r7, lr}
 8007238:	b087      	sub	sp, #28
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_RTC_SetTime+0x1a>
 800724c:	2302      	movs	r3, #2
 800724e:	e08b      	b.n	8007368 <HAL_RTC_SetTime+0x132>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	22ca      	movs	r2, #202	; 0xca
 8007266:	625a      	str	r2, [r3, #36]	; 0x24
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2253      	movs	r2, #83	; 0x53
 800726e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 f92a 	bl	80074ca <RTC_EnterInitMode>
 8007276:	4603      	mov	r3, r0
 8007278:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800727a:	7cfb      	ldrb	r3, [r7, #19]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d163      	bne.n	8007348 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d126      	bne.n	80072d4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f984 	bl	80075ac <RTC_ByteToBcd2>
 80072a4:	4603      	mov	r3, r0
 80072a6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f000 f97d 	bl	80075ac <RTC_ByteToBcd2>
 80072b2:	4603      	mov	r3, r0
 80072b4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072b6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	789b      	ldrb	r3, [r3, #2]
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f975 	bl	80075ac <RTC_ByteToBcd2>
 80072c2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072c4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	78db      	ldrb	r3, [r3, #3]
 80072cc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	e018      	b.n	8007306 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d102      	bne.n	80072e8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2200      	movs	r2, #0
 80072e6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	785b      	ldrb	r3, [r3, #1]
 80072f2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072f4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072fa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	78db      	ldrb	r3, [r3, #3]
 8007300:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007310:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007314:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007324:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6899      	ldr	r1, [r3, #8]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	431a      	orrs	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f8f6 	bl	8007530 <RTC_ExitInitMode>
 8007344:	4603      	mov	r3, r0
 8007346:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	22ff      	movs	r2, #255	; 0xff
 800734e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007350:	7cfb      	ldrb	r3, [r7, #19]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d103      	bne.n	800735e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007366:	7cfb      	ldrb	r3, [r7, #19]
}
 8007368:	4618      	mov	r0, r3
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	bd90      	pop	{r4, r7, pc}

08007370 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007370:	b590      	push	{r4, r7, lr}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <HAL_RTC_SetDate+0x1a>
 8007386:	2302      	movs	r3, #2
 8007388:	e075      	b.n	8007476 <HAL_RTC_SetDate+0x106>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10e      	bne.n	80073be <HAL_RTC_SetDate+0x4e>
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d008      	beq.n	80073be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	f023 0310 	bic.w	r3, r3, #16
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	330a      	adds	r3, #10
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d11c      	bne.n	80073fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	78db      	ldrb	r3, [r3, #3]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 f8ef 	bl	80075ac <RTC_ByteToBcd2>
 80073ce:	4603      	mov	r3, r0
 80073d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 f8e8 	bl	80075ac <RTC_ByteToBcd2>
 80073dc:	4603      	mov	r3, r0
 80073de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80073e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	789b      	ldrb	r3, [r3, #2]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 f8e0 	bl	80075ac <RTC_ByteToBcd2>
 80073ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80073ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e00e      	b.n	800741c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	78db      	ldrb	r3, [r3, #3]
 8007402:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	785b      	ldrb	r3, [r3, #1]
 8007408:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800740a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007410:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007418:	4313      	orrs	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	22ca      	movs	r2, #202	; 0xca
 8007422:	625a      	str	r2, [r3, #36]	; 0x24
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2253      	movs	r2, #83	; 0x53
 800742a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f84c 	bl	80074ca <RTC_EnterInitMode>
 8007432:	4603      	mov	r3, r0
 8007434:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007436:	7cfb      	ldrb	r3, [r7, #19]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10c      	bne.n	8007456 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007446:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800744a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f86f 	bl	8007530 <RTC_ExitInitMode>
 8007452:	4603      	mov	r3, r0
 8007454:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	22ff      	movs	r2, #255	; 0xff
 800745c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007474:	7cfb      	ldrb	r3, [r7, #19]
}
 8007476:	4618      	mov	r0, r3
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	bd90      	pop	{r4, r7, pc}

0800747e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007494:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007496:	f7fa f931 	bl	80016fc <HAL_GetTick>
 800749a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800749c:	e009      	b.n	80074b2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800749e:	f7fa f92d 	bl	80016fc <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ac:	d901      	bls.n	80074b2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e007      	b.n	80074c2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0320 	and.w	r3, r3, #32
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0ee      	beq.n	800749e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d120      	bne.n	8007526 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80074ee:	f7fa f905 	bl	80016fc <HAL_GetTick>
 80074f2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80074f4:	e00d      	b.n	8007512 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80074f6:	f7fa f901 	bl	80016fc <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007504:	d905      	bls.n	8007512 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2203      	movs	r2, #3
 800750e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <RTC_EnterInitMode+0x5c>
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b03      	cmp	r3, #3
 8007524:	d1e7      	bne.n	80074f6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800753c:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <RTC_ExitInitMode+0x78>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	4a19      	ldr	r2, [pc, #100]	; (80075a8 <RTC_ExitInitMode+0x78>)
 8007542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007546:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007548:	4b17      	ldr	r3, [pc, #92]	; (80075a8 <RTC_ExitInitMode+0x78>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10c      	bne.n	800756e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff ff92 	bl	800747e <HAL_RTC_WaitForSynchro>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01e      	beq.n	800759e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2203      	movs	r2, #3
 8007564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	73fb      	strb	r3, [r7, #15]
 800756c:	e017      	b.n	800759e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800756e:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <RTC_ExitInitMode+0x78>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	4a0d      	ldr	r2, [pc, #52]	; (80075a8 <RTC_ExitInitMode+0x78>)
 8007574:	f023 0320 	bic.w	r3, r3, #32
 8007578:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff ff7f 	bl	800747e <HAL_RTC_WaitForSynchro>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2203      	movs	r2, #3
 800758a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <RTC_ExitInitMode+0x78>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	4a04      	ldr	r2, [pc, #16]	; (80075a8 <RTC_ExitInitMode+0x78>)
 8007598:	f043 0320 	orr.w	r3, r3, #32
 800759c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40002800 	.word	0x40002800

080075ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80075be:	e005      	b.n	80075cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80075c6:	7afb      	ldrb	r3, [r7, #11]
 80075c8:	3b0a      	subs	r3, #10
 80075ca:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d8f6      	bhi.n	80075c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	7afb      	ldrb	r3, [r7, #11]
 80075dc:	4313      	orrs	r3, r2
 80075de:	b2db      	uxtb	r3, r3
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	; 0x28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e078      	b.n	80076f0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d105      	bne.n	8007616 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7f9 fd7f 	bl	8001114 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2203      	movs	r2, #3
 800761a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f86a 	bl	80076f8 <HAL_SD_InitCard>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e060      	b.n	80076f0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fdc7 	bl	80081c8 <HAL_SD_GetCardStatus>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e055      	b.n	80076f0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007644:	7e3b      	ldrb	r3, [r7, #24]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800764a:	7e7b      	ldrb	r3, [r7, #25]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007654:	2b01      	cmp	r3, #1
 8007656:	d10a      	bne.n	800766e <HAL_SD_Init+0x82>
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <HAL_SD_Init+0x78>
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d004      	beq.n	800766e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f44f 7200 	mov.w	r2, #512	; 0x200
 800766a:	65da      	str	r2, [r3, #92]	; 0x5c
 800766c:	e00b      	b.n	8007686 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	2b01      	cmp	r3, #1
 8007674:	d104      	bne.n	8007680 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800767c:	65da      	str	r2, [r3, #92]	; 0x5c
 800767e:	e002      	b.n	8007686 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fe7d 	bl	800838c <HAL_SD_ConfigWideBusOperation>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e029      	b.n	80076f0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800769c:	f7fa f82e 	bl	80016fc <HAL_GetTick>
 80076a0:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80076a2:	e014      	b.n	80076ce <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80076a4:	f7fa f82a 	bl	80016fc <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b2:	d10c      	bne.n	80076ce <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e010      	b.n	80076f0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 ff70 	bl	80085b4 <HAL_SD_GetCardState>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d1e4      	bne.n	80076a4 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3728      	adds	r7, #40	; 0x28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076f8:	b5b0      	push	{r4, r5, r7, lr}
 80076fa:	b090      	sub	sp, #64	; 0x40
 80076fc:	af04      	add	r7, sp, #16
 80076fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007700:	2300      	movs	r3, #0
 8007702:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007704:	2300      	movs	r3, #0
 8007706:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800770c:	2300      	movs	r3, #0
 800770e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007710:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007714:	f7fe fafe 	bl	8005d14 <HAL_RCCEx_GetPeriphCLKFreq>
 8007718:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 800771a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d109      	bne.n	8007734 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800772e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e08b      	b.n	800784c <HAL_SD_InitCard+0x154>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	0a1b      	lsrs	r3, r3, #8
 8007738:	4a46      	ldr	r2, [pc, #280]	; (8007854 <HAL_SD_InitCard+0x15c>)
 800773a:	fba2 2303 	umull	r2, r3, r2, r3
 800773e:	091b      	lsrs	r3, r3, #4
 8007740:	61fb      	str	r3, [r7, #28]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	623b      	str	r3, [r7, #32]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d107      	bne.n	8007760 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0210 	orr.w	r2, r2, #16
 800775e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681d      	ldr	r5, [r3, #0]
 8007764:	466c      	mov	r4, sp
 8007766:	f107 0318 	add.w	r3, r7, #24
 800776a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800776e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007772:	f107 030c 	add.w	r3, r7, #12
 8007776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007778:	4628      	mov	r0, r5
 800777a:	f002 f98f 	bl	8009a9c <SDMMC_Init>
 800777e:	4603      	mov	r3, r0
 8007780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8007784:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_SD_InitCard+0x98>
  {
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e05d      	b.n	800784c <HAL_SD_InitCard+0x154>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	f002 f9c9 	bl	8009b2c <SDMMC_PowerState_ON>
 800779a:	4603      	mov	r3, r0
 800779c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 80077a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <HAL_SD_InitCard+0xb4>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e04f      	b.n	800784c <HAL_SD_InitCard+0x154>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b6:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80077b8:	4a27      	ldr	r2, [pc, #156]	; (8007858 <HAL_SD_InitCard+0x160>)
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c0:	3301      	adds	r3, #1
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7f9 ffa6 	bl	8001714 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 ffd1 	bl	8008770 <SD_PowerON>
 80077ce:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <HAL_SD_InitCard+0xf6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e02e      	b.n	800784c <HAL_SD_InitCard+0x154>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 ff00 	bl	80085f4 <SD_InitCard>
 80077f4:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00b      	beq.n	8007814 <HAL_SD_InitCard+0x11c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e01b      	b.n	800784c <HAL_SD_InitCard+0x154>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800781c:	4618      	mov	r0, r3
 800781e:	f002 fa1b 	bl	8009c58 <SDMMC_CmdBlockLength>
 8007822:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00f      	beq.n	800784a <HAL_SD_InitCard+0x152>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a0b      	ldr	r2, [pc, #44]	; (800785c <HAL_SD_InitCard+0x164>)
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <HAL_SD_InitCard+0x154>
  }

  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3730      	adds	r7, #48	; 0x30
 8007850:	46bd      	mov	sp, r7
 8007852:	bdb0      	pop	{r4, r5, r7, pc}
 8007854:	014f8b59 	.word	0x014f8b59
 8007858:	00012110 	.word	0x00012110
 800785c:	1fe00fff 	.word	0x1fe00fff

08007860 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08c      	sub	sp, #48	; 0x30
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d107      	bne.n	8007888 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e08d      	b.n	80079a4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800788e:	b2db      	uxtb	r3, r3
 8007890:	2b01      	cmp	r3, #1
 8007892:	f040 8086 	bne.w	80079a2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800789c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	441a      	add	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d907      	bls.n	80078ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e074      	b.n	80079a4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2203      	movs	r2, #3
 80078be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2200      	movs	r2, #0
 80078c8:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	025a      	lsls	r2, r3, #9
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d002      	beq.n	80078e6 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	025b      	lsls	r3, r3, #9
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078e6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	025b      	lsls	r3, r3, #9
 80078f0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80078f2:	2390      	movs	r3, #144	; 0x90
 80078f4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078f6:	2302      	movs	r3, #2
 80078f8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80078fe:	2300      	movs	r3, #0
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f107 0210 	add.w	r2, r7, #16
 800790a:	4611      	mov	r1, r2
 800790c:	4618      	mov	r0, r3
 800790e:	f002 f977 	bl	8009c00 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007920:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2201      	movs	r2, #1
 8007930:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d90a      	bls.n	800794e <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2282      	movs	r2, #130	; 0x82
 800793c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007944:	4618      	mov	r0, r3
 8007946:	f002 f9cd 	bl	8009ce4 <SDMMC_CmdReadMultiBlock>
 800794a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800794c:	e009      	b.n	8007962 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2281      	movs	r2, #129	; 0x81
 8007952:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800795a:	4618      	mov	r0, r3
 800795c:	f002 f99f 	bl	8009c9e <SDMMC_CmdReadSingleBlock>
 8007960:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	2b00      	cmp	r3, #0
 8007966:	d012      	beq.n	800798e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a0f      	ldr	r2, [pc, #60]	; (80079ac <HAL_SD_ReadBlocks_DMA+0x14c>)
 800796e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	431a      	orrs	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e00a      	b.n	80079a4 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800799c:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	e000      	b.n	80079a4 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80079a2:	2302      	movs	r3, #2
  }
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3730      	adds	r7, #48	; 0x30
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	1fe00fff 	.word	0x1fe00fff

080079b0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08c      	sub	sp, #48	; 0x30
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d107      	bne.n	80079d8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e08d      	b.n	8007af4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	f040 8086 	bne.w	8007af2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	441a      	add	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d907      	bls.n	8007a0a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e074      	b.n	8007af4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2203      	movs	r2, #3
 8007a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2200      	movs	r2, #0
 8007a18:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	025a      	lsls	r2, r3, #9
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d002      	beq.n	8007a36 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a32:	025b      	lsls	r3, r3, #9
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a36:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	025b      	lsls	r3, r3, #9
 8007a40:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a42:	2390      	movs	r3, #144	; 0x90
 8007a44:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a46:	2300      	movs	r3, #0
 8007a48:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f107 0210 	add.w	r2, r7, #16
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f002 f8cf 	bl	8009c00 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a70:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d90a      	bls.n	8007a9e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	22a0      	movs	r2, #160	; 0xa0
 8007a8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a94:	4618      	mov	r0, r3
 8007a96:	f002 f96b 	bl	8009d70 <SDMMC_CmdWriteMultiBlock>
 8007a9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007a9c:	e009      	b.n	8007ab2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2290      	movs	r2, #144	; 0x90
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f002 f93d 	bl	8009d2a <SDMMC_CmdWriteSingleBlock>
 8007ab0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d012      	beq.n	8007ade <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a0f      	ldr	r2, [pc, #60]	; (8007afc <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e00a      	b.n	8007af4 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007aec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e000      	b.n	8007af4 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007af2:	2302      	movs	r3, #2
  }
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3730      	adds	r7, #48	; 0x30
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	1fe00fff 	.word	0x1fe00fff

08007b00 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d008      	beq.n	8007b2e <HAL_SD_IRQHandler+0x2e>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 f98c 	bl	8008e44 <SD_Read_IT>
 8007b2c:	e199      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80ae 	beq.w	8007c9a <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6812      	ldr	r2, [r2, #0]
 8007b52:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007b56:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007b5a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b7a:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d038      	beq.n	8007bf8 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d104      	bne.n	8007b9a <HAL_SD_IRQHandler+0x9a>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d011      	beq.n	8007bbe <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f002 f90a 	bl	8009db8 <SDMMC_CmdStopTransfer>
 8007ba4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d008      	beq.n	8007bbe <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f957 	bl	8007e6c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4aa0      	ldr	r2, [pc, #640]	; (8007e44 <HAL_SD_IRQHandler+0x344>)
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d104      	bne.n	8007be8 <HAL_SD_IRQHandler+0xe8>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f003 ffe5 	bl	800bbb8 <HAL_SD_RxCpltCallback>
 8007bee:	e138      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f003 ffd7 	bl	800bba4 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007bf6:	e134      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 812f 	beq.w	8007e62 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2200      	movs	r2, #0
 8007c12:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <HAL_SD_IRQHandler+0x130>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d011      	beq.n	8007c54 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f002 f8bf 	bl	8009db8 <SDMMC_CmdStopTransfer>
 8007c3a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d008      	beq.n	8007c54 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f90c 	bl	8007e6c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f003 0310 	and.w	r3, r3, #16
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d104      	bne.n	8007c76 <HAL_SD_IRQHandler+0x176>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f003 ff94 	bl	800bba4 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d105      	bne.n	8007c92 <HAL_SD_IRQHandler+0x192>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 80e8 	beq.w	8007e62 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f003 ff90 	bl	800bbb8 <HAL_SD_RxCpltCallback>
}
 8007c98:	e0e3      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d008      	beq.n	8007cba <HAL_SD_IRQHandler+0x1ba>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 f917 	bl	8008ee6 <SD_Write_IT>
 8007cb8:	e0d3      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc0:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 809d 	beq.w	8007e04 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	f043 0202 	orr.w	r2, r3, #2
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cea:	f003 0308 	and.w	r3, r3, #8
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	f043 0208 	orr.w	r2, r3, #8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d005      	beq.n	8007d18 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	f043 0220 	orr.w	r2, r3, #32
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d005      	beq.n	8007d32 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2a:	f043 0210 	orr.w	r2, r3, #16
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a43      	ldr	r2, [pc, #268]	; (8007e44 <HAL_SD_IRQHandler+0x344>)
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007d48:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d58:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d68:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d78:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f002 f81a 	bl	8009db8 <SDMMC_CmdStopTransfer>
 8007d84:	4602      	mov	r2, r0
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d9e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007da8:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f852 	bl	8007e6c <HAL_SD_ErrorCallback>
}
 8007dc8:	e04b      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d046      	beq.n	8007e62 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d042      	beq.n	8007e62 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007dea:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2200      	movs	r2, #0
 8007df2:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f835 	bl	8007e6c <HAL_SD_ErrorCallback>
}
 8007e02:	e02e      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d027      	beq.n	8007e62 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1a:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10e      	bne.n	8007e48 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 f8d4 	bl	8008fe2 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8007e3a:	e012      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 f8bc 	bl	8008fba <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8007e42:	e00e      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
 8007e44:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f001 f8bb 	bl	8008fce <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8007e58:	e003      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 f8a3 	bl	8008fa6 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8007e60:	e7ff      	b.n	8007e62 <HAL_SD_IRQHandler+0x362>
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop

08007e6c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8e:	0f9b      	lsrs	r3, r3, #30
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e9a:	0e9b      	lsrs	r3, r3, #26
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f003 030f 	and.w	r3, r3, #15
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eac:	0e1b      	lsrs	r3, r3, #24
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 0303 	and.w	r3, r3, #3
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ebe:	0c1b      	lsrs	r3, r3, #16
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eca:	0a1b      	lsrs	r3, r3, #8
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee0:	0d1b      	lsrs	r3, r3, #20
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eec:	0c1b      	lsrs	r3, r3, #16
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	f003 030f 	and.w	r3, r3, #15
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007efe:	0bdb      	lsrs	r3, r3, #15
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f10:	0b9b      	lsrs	r3, r3, #14
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f22:	0b5b      	lsrs	r3, r3, #13
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f34:	0b1b      	lsrs	r3, r3, #12
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2200      	movs	r2, #0
 8007f46:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d163      	bne.n	8008018 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f54:	009a      	lsls	r2, r3, #2
 8007f56:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f60:	0f92      	lsrs	r2, r2, #30
 8007f62:	431a      	orrs	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f6c:	0edb      	lsrs	r3, r3, #27
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	f003 0307 	and.w	r3, r3, #7
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f7e:	0e1b      	lsrs	r3, r3, #24
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f90:	0d5b      	lsrs	r3, r3, #21
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fa2:	0c9b      	lsrs	r3, r3, #18
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f003 0307 	and.w	r3, r3, #7
 8007faa:	b2da      	uxtb	r2, r3
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fb4:	0bdb      	lsrs	r3, r3, #15
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	7e1b      	ldrb	r3, [r3, #24]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f003 0307 	and.w	r3, r3, #7
 8007fd6:	3302      	adds	r3, #2
 8007fd8:	2201      	movs	r2, #1
 8007fda:	fa02 f303 	lsl.w	r3, r2, r3
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007fe2:	fb02 f203 	mul.w	r2, r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	7a1b      	ldrb	r3, [r3, #8]
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	409a      	lsls	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008004:	0a52      	lsrs	r2, r2, #9
 8008006:	fb02 f203 	mul.w	r2, r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008014:	659a      	str	r2, [r3, #88]	; 0x58
 8008016:	e031      	b.n	800807c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801c:	2b01      	cmp	r3, #1
 800801e:	d11d      	bne.n	800805c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008024:	041b      	lsls	r3, r3, #16
 8008026:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800802e:	0c1b      	lsrs	r3, r3, #16
 8008030:	431a      	orrs	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	3301      	adds	r3, #1
 800803c:	029a      	lsls	r2, r3, #10
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008050:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	659a      	str	r2, [r3, #88]	; 0x58
 800805a:	e00f      	b.n	800807c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a58      	ldr	r2, [pc, #352]	; (80081c4 <HAL_SD_GetCardCSD+0x344>)
 8008062:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008068:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e09d      	b.n	80081b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008080:	0b9b      	lsrs	r3, r3, #14
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	b2da      	uxtb	r2, r3
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008092:	09db      	lsrs	r3, r3, #7
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809a:	b2da      	uxtb	r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b4:	0fdb      	lsrs	r3, r3, #31
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c0:	0f5b      	lsrs	r3, r3, #29
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f003 0303 	and.w	r3, r3, #3
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d2:	0e9b      	lsrs	r3, r3, #26
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080e4:	0d9b      	lsrs	r3, r3, #22
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f003 030f 	and.w	r3, r3, #15
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f6:	0d5b      	lsrs	r3, r3, #21
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008112:	0c1b      	lsrs	r3, r3, #16
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	b2da      	uxtb	r2, r3
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008126:	0bdb      	lsrs	r3, r3, #15
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	b2da      	uxtb	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800813a:	0b9b      	lsrs	r3, r3, #14
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800814e:	0b5b      	lsrs	r3, r3, #13
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	b2da      	uxtb	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008162:	0b1b      	lsrs	r3, r3, #12
 8008164:	b2db      	uxtb	r3, r3
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	b2da      	uxtb	r2, r3
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008176:	0a9b      	lsrs	r3, r3, #10
 8008178:	b2db      	uxtb	r3, r3
 800817a:	f003 0303 	and.w	r3, r3, #3
 800817e:	b2da      	uxtb	r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800818a:	0a1b      	lsrs	r3, r3, #8
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	b2da      	uxtb	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800819e:	085b      	lsrs	r3, r3, #1
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	1fe00fff 	.word	0x1fe00fff

080081c8 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b094      	sub	sp, #80	; 0x50
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80081d8:	f107 0308 	add.w	r3, r7, #8
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fbd2 	bl	8008988 <SD_SendSDStatus>
 80081e4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80081e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d011      	beq.n	8008210 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a4f      	ldr	r2, [pc, #316]	; (8008330 <HAL_SD_GetCardStatus+0x168>)
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800820e:	e070      	b.n	80082f2 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	099b      	lsrs	r3, r3, #6
 8008214:	b2db      	uxtb	r3, r3
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	b2da      	uxtb	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	095b      	lsrs	r3, r3, #5
 8008224:	b2db      	uxtb	r3, r3
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	0a1b      	lsrs	r3, r3, #8
 8008234:	b29b      	uxth	r3, r3
 8008236:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800823a:	b29a      	uxth	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	0e1b      	lsrs	r3, r3, #24
 8008240:	b29b      	uxth	r3, r3
 8008242:	4313      	orrs	r3, r2
 8008244:	b29a      	uxth	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	061a      	lsls	r2, r3, #24
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	021b      	lsls	r3, r3, #8
 8008252:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008256:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008260:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	0e1b      	lsrs	r3, r3, #24
 8008266:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	b2da      	uxtb	r2, r3
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	0a1b      	lsrs	r3, r3, #8
 8008278:	b2da      	uxtb	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	0d1b      	lsrs	r3, r3, #20
 8008282:	b2db      	uxtb	r3, r3
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	b2da      	uxtb	r2, r3
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	0c1b      	lsrs	r3, r3, #16
 8008292:	b29b      	uxth	r3, r3
 8008294:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008298:	b29a      	uxth	r2, r3
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	b29b      	uxth	r3, r3
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	4313      	orrs	r3, r2
 80082a4:	b29a      	uxth	r2, r3
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	0a9b      	lsrs	r3, r3, #10
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	0a1b      	lsrs	r3, r3, #8
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	091b      	lsrs	r3, r3, #4
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f003 030f 	and.w	r3, r3, #15
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80082e8:	69bb      	ldr	r3, [r7, #24]
 80082ea:	0e1b      	lsrs	r3, r3, #24
 80082ec:	b2da      	uxtb	r2, r3
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 fcac 	bl	8009c58 <SDMMC_CmdBlockLength>
 8008300:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00d      	beq.n	8008324 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a08      	ldr	r2, [pc, #32]	; (8008330 <HAL_SD_GetCardStatus+0x168>)
 800830e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008314:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008324:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008328:	4618      	mov	r0, r3
 800832a:	3750      	adds	r7, #80	; 0x50
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	1fe00fff 	.word	0x1fe00fff

08008334 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800838c:	b5b0      	push	{r4, r5, r7, lr}
 800838e:	b090      	sub	sp, #64	; 0x40
 8008390:	af04      	add	r7, sp, #16
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2203      	movs	r2, #3
 80083a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d02e      	beq.n	800840a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b2:	d106      	bne.n	80083c2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	639a      	str	r2, [r3, #56]	; 0x38
 80083c0:	e029      	b.n	8008416 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083c8:	d10a      	bne.n	80083e0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fbd4 	bl	8008b78 <SD_WideBus_Enable>
 80083d0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	431a      	orrs	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	639a      	str	r2, [r3, #56]	; 0x38
 80083de:	e01a      	b.n	8008416 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10a      	bne.n	80083fc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fc11 	bl	8008c0e <SD_WideBus_Disable>
 80083ec:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	431a      	orrs	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
 80083fa:	e00c      	b.n	8008416 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008400:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	639a      	str	r2, [r3, #56]	; 0x38
 8008408:	e005      	b.n	8008416 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a60      	ldr	r2, [pc, #384]	; (80085a4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008424:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800842c:	e097      	b.n	800855e <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800842e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008432:	f7fd fc6f 	bl	8005d14 <HAL_RCCEx_GetPeriphCLKFreq>
 8008436:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 8086 	beq.w	800854c <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	695a      	ldr	r2, [r3, #20]
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	4952      	ldr	r1, [pc, #328]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800845e:	fba1 1303 	umull	r1, r3, r1, r3
 8008462:	0e1b      	lsrs	r3, r3, #24
 8008464:	429a      	cmp	r2, r3
 8008466:	d303      	bcc.n	8008470 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	e05a      	b.n	8008526 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008478:	d103      	bne.n	8008482 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	61fb      	str	r3, [r7, #28]
 8008480:	e051      	b.n	8008526 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800848a:	d126      	bne.n	80084da <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10e      	bne.n	80084b2 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	4a45      	ldr	r2, [pc, #276]	; (80085ac <HAL_SD_ConfigWideBusOperation+0x220>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d906      	bls.n	80084aa <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	4a42      	ldr	r2, [pc, #264]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80084a0:	fba2 2303 	umull	r2, r3, r2, r3
 80084a4:	0e5b      	lsrs	r3, r3, #25
 80084a6:	61fb      	str	r3, [r7, #28]
 80084a8:	e03d      	b.n	8008526 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	61fb      	str	r3, [r7, #28]
 80084b0:	e039      	b.n	8008526 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80084be:	4a3b      	ldr	r2, [pc, #236]	; (80085ac <HAL_SD_ConfigWideBusOperation+0x220>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d906      	bls.n	80084d2 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	4a38      	ldr	r2, [pc, #224]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80084c8:	fba2 2303 	umull	r2, r3, r2, r3
 80084cc:	0e5b      	lsrs	r3, r3, #25
 80084ce:	61fb      	str	r3, [r7, #28]
 80084d0:	e029      	b.n	8008526 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	61fb      	str	r3, [r7, #28]
 80084d8:	e025      	b.n	8008526 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10e      	bne.n	8008500 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	4a32      	ldr	r2, [pc, #200]	; (80085b0 <HAL_SD_ConfigWideBusOperation+0x224>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d906      	bls.n	80084f8 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	4a2e      	ldr	r2, [pc, #184]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80084ee:	fba2 2303 	umull	r2, r3, r2, r3
 80084f2:	0e1b      	lsrs	r3, r3, #24
 80084f4:	61fb      	str	r3, [r7, #28]
 80084f6:	e016      	b.n	8008526 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	61fb      	str	r3, [r7, #28]
 80084fe:	e012      	b.n	8008526 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008508:	fbb2 f3f3 	udiv	r3, r2, r3
 800850c:	4a28      	ldr	r2, [pc, #160]	; (80085b0 <HAL_SD_ConfigWideBusOperation+0x224>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d906      	bls.n	8008520 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	4a24      	ldr	r2, [pc, #144]	; (80085a8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008516:	fba2 2303 	umull	r2, r3, r2, r3
 800851a:	0e1b      	lsrs	r3, r3, #24
 800851c:	61fb      	str	r3, [r7, #28]
 800851e:	e002      	b.n	8008526 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681d      	ldr	r5, [r3, #0]
 8008530:	466c      	mov	r4, sp
 8008532:	f107 0318 	add.w	r3, r7, #24
 8008536:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800853a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800853e:	f107 030c 	add.w	r3, r7, #12
 8008542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008544:	4628      	mov	r0, r5
 8008546:	f001 faa9 	bl	8009a9c <SDMMC_Init>
 800854a:	e008      	b.n	800855e <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008550:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008566:	4618      	mov	r0, r3
 8008568:	f001 fb76 	bl	8009c58 <SDMMC_CmdBlockLength>
 800856c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00c      	beq.n	800858e <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a0a      	ldr	r2, [pc, #40]	; (80085a4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800857a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	431a      	orrs	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800859a:	4618      	mov	r0, r3
 800859c:	3730      	adds	r7, #48	; 0x30
 800859e:	46bd      	mov	sp, r7
 80085a0:	bdb0      	pop	{r4, r5, r7, pc}
 80085a2:	bf00      	nop
 80085a4:	1fe00fff 	.word	0x1fe00fff
 80085a8:	55e63b89 	.word	0x55e63b89
 80085ac:	02faf080 	.word	0x02faf080
 80085b0:	017d7840 	.word	0x017d7840

080085b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80085c0:	f107 030c 	add.w	r3, r7, #12
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 faae 	bl	8008b28 <SD_SendStatus>
 80085cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d005      	beq.n	80085e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	0a5b      	lsrs	r3, r3, #9
 80085e4:	f003 030f 	and.w	r3, r3, #15
 80085e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80085ea:	693b      	ldr	r3, [r7, #16]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b090      	sub	sp, #64	; 0x40
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80085fc:	2301      	movs	r3, #1
 80085fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f001 faa3 	bl	8009b50 <SDMMC_GetPowerState>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d102      	bne.n	8008616 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008610:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008614:	e0a7      	b.n	8008766 <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	2b03      	cmp	r3, #3
 800861c:	d02e      	beq.n	800867c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f001 fce8 	bl	8009ff8 <SDMMC_CmdSendCID>
 8008628:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800862a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <SD_InitCard+0x40>
    {
      return errorstate;
 8008630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008632:	e098      	b.n	8008766 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2100      	movs	r1, #0
 800863a:	4618      	mov	r0, r3
 800863c:	f001 facd 	bl	8009bda <SDMMC_GetResponse>
 8008640:	4602      	mov	r2, r0
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2104      	movs	r1, #4
 800864c:	4618      	mov	r0, r3
 800864e:	f001 fac4 	bl	8009bda <SDMMC_GetResponse>
 8008652:	4602      	mov	r2, r0
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2108      	movs	r1, #8
 800865e:	4618      	mov	r0, r3
 8008660:	f001 fabb 	bl	8009bda <SDMMC_GetResponse>
 8008664:	4602      	mov	r2, r0
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	210c      	movs	r1, #12
 8008670:	4618      	mov	r0, r3
 8008672:	f001 fab2 	bl	8009bda <SDMMC_GetResponse>
 8008676:	4602      	mov	r2, r0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008680:	2b03      	cmp	r3, #3
 8008682:	d00d      	beq.n	80086a0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f107 020e 	add.w	r2, r7, #14
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f001 fcf1 	bl	800a076 <SDMMC_CmdSetRelAdd>
 8008694:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <SD_InitCard+0xac>
    {
      return errorstate;
 800869c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869e:	e062      	b.n	8008766 <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d036      	beq.n	8008716 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80086a8:	89fb      	ldrh	r3, [r7, #14]
 80086aa:	461a      	mov	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086b8:	041b      	lsls	r3, r3, #16
 80086ba:	4619      	mov	r1, r3
 80086bc:	4610      	mov	r0, r2
 80086be:	f001 fcba 	bl	800a036 <SDMMC_CmdSendCSD>
 80086c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80086c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <SD_InitCard+0xda>
    {
      return errorstate;
 80086ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086cc:	e04b      	b.n	8008766 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2100      	movs	r1, #0
 80086d4:	4618      	mov	r0, r3
 80086d6:	f001 fa80 	bl	8009bda <SDMMC_GetResponse>
 80086da:	4602      	mov	r2, r0
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2104      	movs	r1, #4
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 fa77 	bl	8009bda <SDMMC_GetResponse>
 80086ec:	4602      	mov	r2, r0
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2108      	movs	r1, #8
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 fa6e 	bl	8009bda <SDMMC_GetResponse>
 80086fe:	4602      	mov	r2, r0
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	210c      	movs	r1, #12
 800870a:	4618      	mov	r0, r3
 800870c:	f001 fa65 	bl	8009bda <SDMMC_GetResponse>
 8008710:	4602      	mov	r2, r0
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2104      	movs	r1, #4
 800871c:	4618      	mov	r0, r3
 800871e:	f001 fa5c 	bl	8009bda <SDMMC_GetResponse>
 8008722:	4603      	mov	r3, r0
 8008724:	0d1a      	lsrs	r2, r3, #20
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800872a:	f107 0310 	add.w	r3, r7, #16
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fba5 	bl	8007e80 <HAL_SD_GetCardCSD>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800873c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008740:	e011      	b.n	8008766 <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6819      	ldr	r1, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800874a:	041b      	lsls	r3, r3, #16
 800874c:	461a      	mov	r2, r3
 800874e:	f04f 0300 	mov.w	r3, #0
 8008752:	4608      	mov	r0, r1
 8008754:	f001 fb66 	bl	8009e24 <SDMMC_CmdSelDesel>
 8008758:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800875a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <SD_InitCard+0x170>
  {
    return errorstate;
 8008760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008762:	e000      	b.n	8008766 <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3740      	adds	r7, #64	; 0x40
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	2300      	movs	r3, #0
 8008782:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8008784:	f7f8 ffba 	bl	80016fc <HAL_GetTick>
 8008788:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f001 fb6c 	bl	8009e6c <SDMMC_CmdGoIdleState>
 8008794:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <SD_PowerON+0x30>
  {
    return errorstate;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	e0ed      	b.n	800897c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 fb7f 	bl	8009ea8 <SDMMC_CmdOperCond>
 80087aa:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00d      	beq.n	80087ce <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f001 fb55 	bl	8009e6c <SDMMC_CmdGoIdleState>
 80087c2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d004      	beq.n	80087d4 <SD_PowerON+0x64>
    {
      return errorstate;
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	e0d6      	b.n	800897c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d137      	bne.n	800884c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2100      	movs	r1, #0
 80087e2:	4618      	mov	r0, r3
 80087e4:	f001 fb80 	bl	8009ee8 <SDMMC_CmdAppCommand>
 80087e8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d02d      	beq.n	800884c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087f4:	e0c2      	b.n	800897c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2100      	movs	r1, #0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fb73 	bl	8009ee8 <SDMMC_CmdAppCommand>
 8008802:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <SD_PowerON+0x9e>
    {
      return errorstate;
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	e0b6      	b.n	800897c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	495c      	ldr	r1, [pc, #368]	; (8008984 <SD_PowerON+0x214>)
 8008814:	4618      	mov	r0, r3
 8008816:	f001 fb8a 	bl	8009f2e <SDMMC_CmdAppOperCommand>
 800881a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008822:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008826:	e0a9      	b.n	800897c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f001 f9d3 	bl	8009bda <SDMMC_GetResponse>
 8008834:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	0fdb      	lsrs	r3, r3, #31
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <SD_PowerON+0xd2>
 800883e:	2301      	movs	r3, #1
 8008840:	e000      	b.n	8008844 <SD_PowerON+0xd4>
 8008842:	2300      	movs	r3, #0
 8008844:	61bb      	str	r3, [r7, #24]

    count++;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3301      	adds	r3, #1
 800884a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008852:	4293      	cmp	r3, r2
 8008854:	d802      	bhi.n	800885c <SD_PowerON+0xec>
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0cc      	beq.n	80087f6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008862:	4293      	cmp	r3, r2
 8008864:	d902      	bls.n	800886c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008866:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800886a:	e087      	b.n	800897c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d07e      	beq.n	8008974 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d17a      	bne.n	800897a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d075      	beq.n	800897a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008894:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f042 0208 	orr.w	r2, r2, #8
 80088a4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 fc4a 	bl	800a144 <SDMMC_CmdVoltageSwitch>
 80088b0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00c      	beq.n	80088d2 <SD_PowerON+0x162>
        {
          return errorstate;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	e05f      	b.n	800897c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80088bc:	f7f8 ff1e 	bl	80016fc <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ca:	d102      	bne.n	80088d2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80088cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088d0:	e054      	b.n	800897c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088e0:	d1ec      	bne.n	80088bc <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088fa:	d002      	beq.n	8008902 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80088fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008900:	e03c      	b.n	800897c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008902:	2001      	movs	r0, #1
 8008904:	f000 fb44 	bl	8008f90 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0204 	orr.w	r2, r2, #4
 8008916:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008918:	e00a      	b.n	8008930 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800891a:	f7f8 feef 	bl	80016fc <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d102      	bne.n	8008930 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800892a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800892e:	e025      	b.n	800897c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800893a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800893e:	d1ec      	bne.n	800891a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008948:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008958:	d102      	bne.n	8008960 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800895a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800895e:	e00d      	b.n	800897c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2213      	movs	r2, #19
 8008966:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f04f 32ff 	mov.w	r2, #4294967295
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
 8008972:	e002      	b.n	800897a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3720      	adds	r7, #32
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	c1100000 	.word	0xc1100000

08008988 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08c      	sub	sp, #48	; 0x30
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008992:	f7f8 feb3 	bl	80016fc <HAL_GetTick>
 8008996:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f001 f919 	bl	8009bda <SDMMC_GetResponse>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089b2:	d102      	bne.n	80089ba <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80089b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089b8:	e0b0      	b.n	8008b1c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2140      	movs	r1, #64	; 0x40
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 f949 	bl	8009c58 <SDMMC_CmdBlockLength>
 80089c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d005      	beq.n	80089da <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	e0a0      	b.n	8008b1c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e2:	041b      	lsls	r3, r3, #16
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f001 fa7e 	bl	8009ee8 <SDMMC_CmdAppCommand>
 80089ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089ee:	6a3b      	ldr	r3, [r7, #32]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d005      	beq.n	8008a00 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	e08d      	b.n	8008b1c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a00:	f04f 33ff 	mov.w	r3, #4294967295
 8008a04:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008a06:	2340      	movs	r3, #64	; 0x40
 8008a08:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008a0a:	2360      	movs	r3, #96	; 0x60
 8008a0c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a16:	2301      	movs	r3, #1
 8008a18:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f107 0208 	add.w	r2, r7, #8
 8008a22:	4611      	mov	r1, r2
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 f8eb 	bl	8009c00 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 fb66 	bl	800a100 <SDMMC_CmdStatusRegister>
 8008a34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d02b      	beq.n	8008a94 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	e069      	b.n	8008b1c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d013      	beq.n	8008a7e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008a56:	2300      	movs	r3, #0
 8008a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a5a:	e00d      	b.n	8008a78 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 f845 	bl	8009af0 <SDMMC_ReadFIFO>
 8008a66:	4602      	mov	r2, r0
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	601a      	str	r2, [r3, #0]
        pData++;
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	3304      	adds	r3, #4
 8008a70:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	3301      	adds	r3, #1
 8008a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7a:	2b07      	cmp	r3, #7
 8008a7c:	d9ee      	bls.n	8008a5c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a7e:	f7f8 fe3d 	bl	80016fc <HAL_GetTick>
 8008a82:	4602      	mov	r2, r0
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8c:	d102      	bne.n	8008a94 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a92:	e043      	b.n	8008b1c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0d2      	beq.n	8008a48 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa8:	f003 0308 	and.w	r3, r3, #8
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008ab0:	2308      	movs	r3, #8
 8008ab2:	e033      	b.n	8008b1c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e02a      	b.n	8008b1c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d017      	beq.n	8008b04 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	e021      	b.n	8008b1c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f001 f807 	bl	8009af0 <SDMMC_ReadFIFO>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	601a      	str	r2, [r3, #0]
    pData++;
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	3304      	adds	r3, #4
 8008aec:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008aee:	f7f8 fe05 	bl	80016fc <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afc:	d102      	bne.n	8008b04 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008afe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b02:	e00b      	b.n	8008b1c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1e2      	bne.n	8008ad8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a03      	ldr	r2, [pc, #12]	; (8008b24 <SD_SendSDStatus+0x19c>)
 8008b18:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3730      	adds	r7, #48	; 0x30
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	18000f3a 	.word	0x18000f3a

08008b28 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d102      	bne.n	8008b3e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008b38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b3c:	e018      	b.n	8008b70 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b46:	041b      	lsls	r3, r3, #16
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f001 fab5 	bl	800a0ba <SDMMC_CmdSendStatus>
 8008b50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	e009      	b.n	8008b70 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2100      	movs	r1, #0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 f839 	bl	8009bda <SDMMC_GetResponse>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	2300      	movs	r3, #0
 8008b86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 f823 	bl	8009bda <SDMMC_GetResponse>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b9e:	d102      	bne.n	8008ba6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ba0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ba4:	e02f      	b.n	8008c06 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ba6:	f107 030c 	add.w	r3, r7, #12
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f879 	bl	8008ca4 <SD_FindSCR>
 8008bb2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	e023      	b.n	8008c06 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d01c      	beq.n	8008c02 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bd0:	041b      	lsls	r3, r3, #16
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	f001 f987 	bl	8009ee8 <SDMMC_CmdAppCommand>
 8008bda:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	e00f      	b.n	8008c06 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2102      	movs	r1, #2
 8008bec:	4618      	mov	r0, r3
 8008bee:	f001 f9be 	bl	8009f6e <SDMMC_CmdBusWidth>
 8008bf2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	e003      	b.n	8008c06 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	e001      	b.n	8008c06 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b086      	sub	sp, #24
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008c16:	2300      	movs	r3, #0
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2100      	movs	r1, #0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 ffd8 	bl	8009bda <SDMMC_GetResponse>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c34:	d102      	bne.n	8008c3c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c3a:	e02f      	b.n	8008c9c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c3c:	f107 030c 	add.w	r3, r7, #12
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f82e 	bl	8008ca4 <SD_FindSCR>
 8008c48:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d001      	beq.n	8008c54 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	e023      	b.n	8008c9c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d01c      	beq.n	8008c98 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c66:	041b      	lsls	r3, r3, #16
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f001 f93c 	bl	8009ee8 <SDMMC_CmdAppCommand>
 8008c70:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	e00f      	b.n	8008c9c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2100      	movs	r1, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f973 	bl	8009f6e <SDMMC_CmdBusWidth>
 8008c88:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	e003      	b.n	8008c9c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	e001      	b.n	8008c9c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08e      	sub	sp, #56	; 0x38
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008cae:	f7f8 fd25 	bl	80016fc <HAL_GetTick>
 8008cb2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008cb8:	2300      	movs	r3, #0
 8008cba:	60bb      	str	r3, [r7, #8]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2108      	movs	r1, #8
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 ffc4 	bl	8009c58 <SDMMC_CmdBlockLength>
 8008cd0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <SD_FindSCR+0x38>
  {
    return errorstate;
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	e0ad      	b.n	8008e38 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ce4:	041b      	lsls	r3, r3, #16
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4610      	mov	r0, r2
 8008cea:	f001 f8fd 	bl	8009ee8 <SDMMC_CmdAppCommand>
 8008cee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <SD_FindSCR+0x56>
  {
    return errorstate;
 8008cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf8:	e09e      	b.n	8008e38 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008d00:	2308      	movs	r3, #8
 8008d02:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008d04:	2330      	movs	r3, #48	; 0x30
 8008d06:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d10:	2301      	movs	r3, #1
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f107 0210 	add.w	r2, r7, #16
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 ff6e 	bl	8009c00 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f001 f943 	bl	8009fb4 <SDMMC_CmdSendSCR>
 8008d2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d027      	beq.n	8008d86 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	e07e      	b.n	8008e38 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d113      	bne.n	8008d70 <SD_FindSCR+0xcc>
 8008d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d110      	bne.n	8008d70 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fecc 	bl	8009af0 <SDMMC_ReadFIFO>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f000 fec5 	bl	8009af0 <SDMMC_ReadFIFO>
 8008d66:	4603      	mov	r3, r0
 8008d68:	60fb      	str	r3, [r7, #12]
      index++;
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d70:	f7f8 fcc4 	bl	80016fc <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7e:	d102      	bne.n	8008d86 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d84:	e058      	b.n	8008e38 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d8c:	f240 532a 	movw	r3, #1322	; 0x52a
 8008d90:	4013      	ands	r3, r2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0d1      	beq.n	8008d3a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9c:	f003 0308 	and.w	r3, r3, #8
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2208      	movs	r2, #8
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008dac:	2308      	movs	r3, #8
 8008dae:	e043      	b.n	8008e38 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d005      	beq.n	8008dca <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	e036      	b.n	8008e38 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd0:	f003 0320 	and.w	r3, r3, #32
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008de0:	2320      	movs	r3, #32
 8008de2:	e029      	b.n	8008e38 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a15      	ldr	r2, [pc, #84]	; (8008e40 <SD_FindSCR+0x19c>)
 8008dea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	061a      	lsls	r2, r3, #24
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008df8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	0a1b      	lsrs	r3, r3, #8
 8008dfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	0e1b      	lsrs	r3, r3, #24
 8008e08:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0c:	601a      	str	r2, [r3, #0]
    scr++;
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	3304      	adds	r3, #4
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	061a      	lsls	r2, r3, #24
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	021b      	lsls	r3, r3, #8
 8008e1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	0a1b      	lsrs	r3, r3, #8
 8008e26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	0e1b      	lsrs	r3, r3, #24
 8008e30:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3738      	adds	r7, #56	; 0x38
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	18000f3a 	.word	0x18000f3a

08008e44 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e50:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d03f      	beq.n	8008ede <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	e033      	b.n	8008ecc <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fe41 	bl	8009af0 <SDMMC_ReadFIFO>
 8008e6e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	0a1b      	lsrs	r3, r3, #8
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	3301      	adds	r3, #1
 8008e92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	0c1b      	lsrs	r3, r3, #16
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	0e1b      	lsrs	r3, r3, #24
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b07      	cmp	r3, #7
 8008ed0:	d9c8      	bls.n	8008e64 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008ede:	bf00      	nop
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d043      	beq.n	8008f88 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	e037      	b.n	8008f76 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	021a      	lsls	r2, r3, #8
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	3301      	adds	r3, #1
 8008f28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	041a      	lsls	r2, r3, #16
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	061a      	lsls	r2, r3, #24
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3301      	adds	r3, #1
 8008f58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f107 0208 	add.w	r2, r7, #8
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fdcd 	bl	8009b0a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	3301      	adds	r3, #1
 8008f74:	617b      	str	r3, [r7, #20]
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b07      	cmp	r3, #7
 8008f7a:	d9c4      	bls.n	8008f06 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008f88:	bf00      	nop
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8008f9a:	bf00      	nop
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8008fc2:	bf00      	nop
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b083      	sub	sp, #12
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008fd6:	bf00      	nop
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b083      	sub	sp, #12
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e095      	b.n	8009134 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	2b00      	cmp	r3, #0
 800900e:	d108      	bne.n	8009022 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009018:	d009      	beq.n	800902e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	61da      	str	r2, [r3, #28]
 8009020:	e005      	b.n	800902e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d106      	bne.n	800904e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7f8 f8fd 	bl	8001248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2202      	movs	r2, #2
 8009052:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009064:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800906e:	d902      	bls.n	8009076 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009070:	2300      	movs	r3, #0
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	e002      	b.n	800907c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800907a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009084:	d007      	beq.n	8009096 <HAL_SPI_Init+0xa0>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800908e:	d002      	beq.n	8009096 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	f003 0302 	and.w	r3, r3, #2
 80090b0:	431a      	orrs	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	f003 0301 	and.w	r3, r3, #1
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090c4:	431a      	orrs	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090ce:	431a      	orrs	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d8:	ea42 0103 	orr.w	r1, r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	0c1b      	lsrs	r3, r3, #16
 80090f2:	f003 0204 	and.w	r2, r3, #4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	f003 0310 	and.w	r3, r3, #16
 80090fe:	431a      	orrs	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	431a      	orrs	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009112:	ea42 0103 	orr.w	r1, r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009132:	2300      	movs	r3, #0
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e049      	b.n	80091e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7f8 f958 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3304      	adds	r3, #4
 8009178:	4619      	mov	r1, r3
 800917a:	4610      	mov	r0, r2
 800917c:	f000 fab4 	bl	80096e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d001      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e04f      	b.n	80092a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68da      	ldr	r2, [r3, #12]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f042 0201 	orr.w	r2, r2, #1
 800921a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a23      	ldr	r2, [pc, #140]	; (80092b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d01d      	beq.n	8009262 <HAL_TIM_Base_Start_IT+0x76>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800922e:	d018      	beq.n	8009262 <HAL_TIM_Base_Start_IT+0x76>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a1f      	ldr	r2, [pc, #124]	; (80092b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d013      	beq.n	8009262 <HAL_TIM_Base_Start_IT+0x76>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a1e      	ldr	r2, [pc, #120]	; (80092b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d00e      	beq.n	8009262 <HAL_TIM_Base_Start_IT+0x76>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a1c      	ldr	r2, [pc, #112]	; (80092bc <HAL_TIM_Base_Start_IT+0xd0>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d009      	beq.n	8009262 <HAL_TIM_Base_Start_IT+0x76>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a1b      	ldr	r2, [pc, #108]	; (80092c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d004      	beq.n	8009262 <HAL_TIM_Base_Start_IT+0x76>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a19      	ldr	r2, [pc, #100]	; (80092c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d115      	bne.n	800928e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	689a      	ldr	r2, [r3, #8]
 8009268:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800926a:	4013      	ands	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b06      	cmp	r3, #6
 8009272:	d015      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0xb4>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800927a:	d011      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0201 	orr.w	r2, r2, #1
 800928a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800928c:	e008      	b.n	80092a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f042 0201 	orr.w	r2, r2, #1
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	e000      	b.n	80092a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	40012c00 	.word	0x40012c00
 80092b4:	40000400 	.word	0x40000400
 80092b8:	40000800 	.word	0x40000800
 80092bc:	40000c00 	.word	0x40000c00
 80092c0:	40013400 	.word	0x40013400
 80092c4:	40014000 	.word	0x40014000
 80092c8:	00010007 	.word	0x00010007

080092cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d122      	bne.n	8009328 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d11b      	bne.n	8009328 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f06f 0202 	mvn.w	r2, #2
 80092f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f9cb 	bl	80096aa <HAL_TIM_IC_CaptureCallback>
 8009314:	e005      	b.n	8009322 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f9bd 	bl	8009696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f9ce 	bl	80096be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b04      	cmp	r3, #4
 8009334:	d122      	bne.n	800937c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b04      	cmp	r3, #4
 8009342:	d11b      	bne.n	800937c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f06f 0204 	mvn.w	r2, #4
 800934c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2202      	movs	r2, #2
 8009352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f9a1 	bl	80096aa <HAL_TIM_IC_CaptureCallback>
 8009368:	e005      	b.n	8009376 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f993 	bl	8009696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f9a4 	bl	80096be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	f003 0308 	and.w	r3, r3, #8
 8009386:	2b08      	cmp	r3, #8
 8009388:	d122      	bne.n	80093d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	f003 0308 	and.w	r3, r3, #8
 8009394:	2b08      	cmp	r3, #8
 8009396:	d11b      	bne.n	80093d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f06f 0208 	mvn.w	r2, #8
 80093a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2204      	movs	r2, #4
 80093a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	f003 0303 	and.w	r3, r3, #3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d003      	beq.n	80093be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f977 	bl	80096aa <HAL_TIM_IC_CaptureCallback>
 80093bc:	e005      	b.n	80093ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f969 	bl	8009696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f97a 	bl	80096be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	f003 0310 	and.w	r3, r3, #16
 80093da:	2b10      	cmp	r3, #16
 80093dc:	d122      	bne.n	8009424 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	f003 0310 	and.w	r3, r3, #16
 80093e8:	2b10      	cmp	r3, #16
 80093ea:	d11b      	bne.n	8009424 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f06f 0210 	mvn.w	r2, #16
 80093f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2208      	movs	r2, #8
 80093fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f94d 	bl	80096aa <HAL_TIM_IC_CaptureCallback>
 8009410:	e005      	b.n	800941e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f93f 	bl	8009696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f950 	bl	80096be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b01      	cmp	r3, #1
 8009430:	d10e      	bne.n	8009450 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b01      	cmp	r3, #1
 800943e:	d107      	bne.n	8009450 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f06f 0201 	mvn.w	r2, #1
 8009448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7f7 fc9e 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945a:	2b80      	cmp	r3, #128	; 0x80
 800945c:	d10e      	bne.n	800947c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009468:	2b80      	cmp	r3, #128	; 0x80
 800946a:	d107      	bne.n	800947c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fafc 	bl	8009a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948a:	d10e      	bne.n	80094aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009496:	2b80      	cmp	r3, #128	; 0x80
 8009498:	d107      	bne.n	80094aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 faef 	bl	8009a88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b4:	2b40      	cmp	r3, #64	; 0x40
 80094b6:	d10e      	bne.n	80094d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c2:	2b40      	cmp	r3, #64	; 0x40
 80094c4:	d107      	bne.n	80094d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f8fe 	bl	80096d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	f003 0320 	and.w	r3, r3, #32
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d10e      	bne.n	8009502 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	f003 0320 	and.w	r3, r3, #32
 80094ee:	2b20      	cmp	r3, #32
 80094f0:	d107      	bne.n	8009502 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f06f 0220 	mvn.w	r2, #32
 80094fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 faaf 	bl	8009a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <HAL_TIM_ConfigClockSource+0x18>
 800951e:	2302      	movs	r3, #2
 8009520:	e0b5      	b.n	800968e <HAL_TIM_ConfigClockSource+0x184>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2202      	movs	r2, #2
 800952e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009540:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009544:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800954c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800955e:	d03e      	beq.n	80095de <HAL_TIM_ConfigClockSource+0xd4>
 8009560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009564:	f200 8087 	bhi.w	8009676 <HAL_TIM_ConfigClockSource+0x16c>
 8009568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800956c:	f000 8085 	beq.w	800967a <HAL_TIM_ConfigClockSource+0x170>
 8009570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009574:	d87f      	bhi.n	8009676 <HAL_TIM_ConfigClockSource+0x16c>
 8009576:	2b70      	cmp	r3, #112	; 0x70
 8009578:	d01a      	beq.n	80095b0 <HAL_TIM_ConfigClockSource+0xa6>
 800957a:	2b70      	cmp	r3, #112	; 0x70
 800957c:	d87b      	bhi.n	8009676 <HAL_TIM_ConfigClockSource+0x16c>
 800957e:	2b60      	cmp	r3, #96	; 0x60
 8009580:	d050      	beq.n	8009624 <HAL_TIM_ConfigClockSource+0x11a>
 8009582:	2b60      	cmp	r3, #96	; 0x60
 8009584:	d877      	bhi.n	8009676 <HAL_TIM_ConfigClockSource+0x16c>
 8009586:	2b50      	cmp	r3, #80	; 0x50
 8009588:	d03c      	beq.n	8009604 <HAL_TIM_ConfigClockSource+0xfa>
 800958a:	2b50      	cmp	r3, #80	; 0x50
 800958c:	d873      	bhi.n	8009676 <HAL_TIM_ConfigClockSource+0x16c>
 800958e:	2b40      	cmp	r3, #64	; 0x40
 8009590:	d058      	beq.n	8009644 <HAL_TIM_ConfigClockSource+0x13a>
 8009592:	2b40      	cmp	r3, #64	; 0x40
 8009594:	d86f      	bhi.n	8009676 <HAL_TIM_ConfigClockSource+0x16c>
 8009596:	2b30      	cmp	r3, #48	; 0x30
 8009598:	d064      	beq.n	8009664 <HAL_TIM_ConfigClockSource+0x15a>
 800959a:	2b30      	cmp	r3, #48	; 0x30
 800959c:	d86b      	bhi.n	8009676 <HAL_TIM_ConfigClockSource+0x16c>
 800959e:	2b20      	cmp	r3, #32
 80095a0:	d060      	beq.n	8009664 <HAL_TIM_ConfigClockSource+0x15a>
 80095a2:	2b20      	cmp	r3, #32
 80095a4:	d867      	bhi.n	8009676 <HAL_TIM_ConfigClockSource+0x16c>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d05c      	beq.n	8009664 <HAL_TIM_ConfigClockSource+0x15a>
 80095aa:	2b10      	cmp	r3, #16
 80095ac:	d05a      	beq.n	8009664 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80095ae:	e062      	b.n	8009676 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6818      	ldr	r0, [r3, #0]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	6899      	ldr	r1, [r3, #8]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f000 f9a6 	bl	8009910 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80095d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	609a      	str	r2, [r3, #8]
      break;
 80095dc:	e04e      	b.n	800967c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	6899      	ldr	r1, [r3, #8]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f000 f98f 	bl	8009910 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689a      	ldr	r2, [r3, #8]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009600:	609a      	str	r2, [r3, #8]
      break;
 8009602:	e03b      	b.n	800967c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6818      	ldr	r0, [r3, #0]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	6859      	ldr	r1, [r3, #4]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	461a      	mov	r2, r3
 8009612:	f000 f903 	bl	800981c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2150      	movs	r1, #80	; 0x50
 800961c:	4618      	mov	r0, r3
 800961e:	f000 f95c 	bl	80098da <TIM_ITRx_SetConfig>
      break;
 8009622:	e02b      	b.n	800967c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6818      	ldr	r0, [r3, #0]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	6859      	ldr	r1, [r3, #4]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	461a      	mov	r2, r3
 8009632:	f000 f922 	bl	800987a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	2160      	movs	r1, #96	; 0x60
 800963c:	4618      	mov	r0, r3
 800963e:	f000 f94c 	bl	80098da <TIM_ITRx_SetConfig>
      break;
 8009642:	e01b      	b.n	800967c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	6859      	ldr	r1, [r3, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	461a      	mov	r2, r3
 8009652:	f000 f8e3 	bl	800981c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2140      	movs	r1, #64	; 0x40
 800965c:	4618      	mov	r0, r3
 800965e:	f000 f93c 	bl	80098da <TIM_ITRx_SetConfig>
      break;
 8009662:	e00b      	b.n	800967c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f000 f933 	bl	80098da <TIM_ITRx_SetConfig>
        break;
 8009674:	e002      	b.n	800967c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8009676:	bf00      	nop
 8009678:	e000      	b.n	800967c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800967a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096b2:	bf00      	nop
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096be:	b480      	push	{r7}
 80096c0:	b083      	sub	sp, #12
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096da:	bf00      	nop
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
	...

080096e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a40      	ldr	r2, [pc, #256]	; (80097fc <TIM_Base_SetConfig+0x114>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d013      	beq.n	8009728 <TIM_Base_SetConfig+0x40>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009706:	d00f      	beq.n	8009728 <TIM_Base_SetConfig+0x40>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a3d      	ldr	r2, [pc, #244]	; (8009800 <TIM_Base_SetConfig+0x118>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d00b      	beq.n	8009728 <TIM_Base_SetConfig+0x40>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a3c      	ldr	r2, [pc, #240]	; (8009804 <TIM_Base_SetConfig+0x11c>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d007      	beq.n	8009728 <TIM_Base_SetConfig+0x40>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a3b      	ldr	r2, [pc, #236]	; (8009808 <TIM_Base_SetConfig+0x120>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_Base_SetConfig+0x40>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a3a      	ldr	r2, [pc, #232]	; (800980c <TIM_Base_SetConfig+0x124>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d108      	bne.n	800973a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	4313      	orrs	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a2f      	ldr	r2, [pc, #188]	; (80097fc <TIM_Base_SetConfig+0x114>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d01f      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009748:	d01b      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a2c      	ldr	r2, [pc, #176]	; (8009800 <TIM_Base_SetConfig+0x118>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d017      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a2b      	ldr	r2, [pc, #172]	; (8009804 <TIM_Base_SetConfig+0x11c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d013      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a2a      	ldr	r2, [pc, #168]	; (8009808 <TIM_Base_SetConfig+0x120>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d00f      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a29      	ldr	r2, [pc, #164]	; (800980c <TIM_Base_SetConfig+0x124>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00b      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4a28      	ldr	r2, [pc, #160]	; (8009810 <TIM_Base_SetConfig+0x128>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d007      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a27      	ldr	r2, [pc, #156]	; (8009814 <TIM_Base_SetConfig+0x12c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d003      	beq.n	8009782 <TIM_Base_SetConfig+0x9a>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a26      	ldr	r2, [pc, #152]	; (8009818 <TIM_Base_SetConfig+0x130>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d108      	bne.n	8009794 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	4313      	orrs	r3, r2
 80097a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	689a      	ldr	r2, [r3, #8]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a10      	ldr	r2, [pc, #64]	; (80097fc <TIM_Base_SetConfig+0x114>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00f      	beq.n	80097e0 <TIM_Base_SetConfig+0xf8>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a12      	ldr	r2, [pc, #72]	; (800980c <TIM_Base_SetConfig+0x124>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d00b      	beq.n	80097e0 <TIM_Base_SetConfig+0xf8>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a11      	ldr	r2, [pc, #68]	; (8009810 <TIM_Base_SetConfig+0x128>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d007      	beq.n	80097e0 <TIM_Base_SetConfig+0xf8>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a10      	ldr	r2, [pc, #64]	; (8009814 <TIM_Base_SetConfig+0x12c>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d003      	beq.n	80097e0 <TIM_Base_SetConfig+0xf8>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a0f      	ldr	r2, [pc, #60]	; (8009818 <TIM_Base_SetConfig+0x130>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d103      	bne.n	80097e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	691a      	ldr	r2, [r3, #16]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	615a      	str	r2, [r3, #20]
}
 80097ee:	bf00      	nop
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	40012c00 	.word	0x40012c00
 8009800:	40000400 	.word	0x40000400
 8009804:	40000800 	.word	0x40000800
 8009808:	40000c00 	.word	0x40000c00
 800980c:	40013400 	.word	0x40013400
 8009810:	40014000 	.word	0x40014000
 8009814:	40014400 	.word	0x40014400
 8009818:	40014800 	.word	0x40014800

0800981c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	f023 0201 	bic.w	r2, r3, #1
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	011b      	lsls	r3, r3, #4
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	4313      	orrs	r3, r2
 8009850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	f023 030a 	bic.w	r3, r3, #10
 8009858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4313      	orrs	r3, r2
 8009860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	621a      	str	r2, [r3, #32]
}
 800986e:	bf00      	nop
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800987a:	b480      	push	{r7}
 800987c:	b087      	sub	sp, #28
 800987e:	af00      	add	r7, sp, #0
 8009880:	60f8      	str	r0, [r7, #12]
 8009882:	60b9      	str	r1, [r7, #8]
 8009884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	f023 0210 	bic.w	r2, r3, #16
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a1b      	ldr	r3, [r3, #32]
 800989c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	031b      	lsls	r3, r3, #12
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	011b      	lsls	r3, r3, #4
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	4313      	orrs	r3, r2
 80098c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	621a      	str	r2, [r3, #32]
}
 80098ce:	bf00      	nop
 80098d0:	371c      	adds	r7, #28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	f043 0307 	orr.w	r3, r3, #7
 80098fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	609a      	str	r2, [r3, #8]
}
 8009904:	bf00      	nop
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009910:	b480      	push	{r7}
 8009912:	b087      	sub	sp, #28
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800992a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	021a      	lsls	r2, r3, #8
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	431a      	orrs	r2, r3
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	4313      	orrs	r3, r2
 8009938:	697a      	ldr	r2, [r7, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	609a      	str	r2, [r3, #8]
}
 8009944:	bf00      	nop
 8009946:	371c      	adds	r7, #28
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009964:	2302      	movs	r3, #2
 8009966:	e068      	b.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2202      	movs	r2, #2
 8009974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a2e      	ldr	r2, [pc, #184]	; (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d004      	beq.n	800999c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a2d      	ldr	r2, [pc, #180]	; (8009a4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d108      	bne.n	80099ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4313      	orrs	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a1e      	ldr	r2, [pc, #120]	; (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d01d      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099da:	d018      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a1b      	ldr	r2, [pc, #108]	; (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d013      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a1a      	ldr	r2, [pc, #104]	; (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00e      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a18      	ldr	r2, [pc, #96]	; (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d009      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a13      	ldr	r2, [pc, #76]	; (8009a4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d004      	beq.n	8009a0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a14      	ldr	r2, [pc, #80]	; (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d10c      	bne.n	8009a28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	40012c00 	.word	0x40012c00
 8009a4c:	40013400 	.word	0x40013400
 8009a50:	40000400 	.word	0x40000400
 8009a54:	40000800 	.word	0x40000800
 8009a58:	40000c00 	.word	0x40000c00
 8009a5c:	40014000 	.word	0x40014000

08009a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	b480      	push	{r7}
 8009aa0:	b085      	sub	sp, #20
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	f107 001c 	add.w	r0, r7, #28
 8009aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009ab2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009ab6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8009aba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8009abe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8009ac2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	4b07      	ldr	r3, [pc, #28]	; (8009aec <SDMMC_Init+0x50>)
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	431a      	orrs	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	b004      	add	sp, #16
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	ffc02c00 	.word	0xffc02c00

08009af0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b083      	sub	sp, #12
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f043 0203 	orr.w	r2, r3, #3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009b40:	2002      	movs	r0, #2
 8009b42:	f7f7 fde7 	bl	8001714 <HAL_Delay>

  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0303 	and.w	r3, r3, #3
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b8a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009b90:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009b96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <SDMMC_SendCommand+0x50>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	fffee0c0 	.word	0xfffee0c0

08009bc0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	b2db      	uxtb	r3, r3
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b085      	sub	sp, #20
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3314      	adds	r3, #20
 8009be8:	461a      	mov	r2, r3
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	4413      	add	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c26:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009c2c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009c32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0

}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009c66:	2310      	movs	r3, #16
 8009c68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c70:	2300      	movs	r3, #0
 8009c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c7a:	f107 0308 	add.w	r3, r7, #8
 8009c7e:	4619      	mov	r1, r3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff ff73 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c8a:	2110      	movs	r1, #16
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 fa7b 	bl	800a188 <SDMMC_GetCmdResp1>
 8009c92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c94:	69fb      	ldr	r3, [r7, #28]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3720      	adds	r7, #32
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b088      	sub	sp, #32
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009cac:	2311      	movs	r3, #17
 8009cae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cc0:	f107 0308 	add.w	r3, r7, #8
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7ff ff50 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd0:	2111      	movs	r1, #17
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fa58 	bl	800a188 <SDMMC_GetCmdResp1>
 8009cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cda:	69fb      	ldr	r3, [r7, #28]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3720      	adds	r7, #32
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b088      	sub	sp, #32
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009cf2:	2312      	movs	r3, #18
 8009cf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d06:	f107 0308 	add.w	r3, r7, #8
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff ff2d 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d16:	2112      	movs	r1, #18
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fa35 	bl	800a188 <SDMMC_GetCmdResp1>
 8009d1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d20:	69fb      	ldr	r3, [r7, #28]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b088      	sub	sp, #32
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009d38:	2318      	movs	r3, #24
 8009d3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d42:	2300      	movs	r3, #0
 8009d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d4c:	f107 0308 	add.w	r3, r7, #8
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff ff0a 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d5c:	2118      	movs	r1, #24
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fa12 	bl	800a188 <SDMMC_GetCmdResp1>
 8009d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d66:	69fb      	ldr	r3, [r7, #28]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3720      	adds	r7, #32
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009d7e:	2319      	movs	r3, #25
 8009d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d92:	f107 0308 	add.w	r3, r7, #8
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff fee7 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da2:	2119      	movs	r1, #25
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f9ef 	bl	800a188 <SDMMC_GetCmdResp1>
 8009daa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dac:	69fb      	ldr	r3, [r7, #28]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
	...

08009db8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b088      	sub	sp, #32
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009dc4:	230c      	movs	r3, #12
 8009dc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dd6:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009df0:	f107 0308 	add.w	r3, r7, #8
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7ff feb8 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009dfc:	4a08      	ldr	r2, [pc, #32]	; (8009e20 <SDMMC_CmdStopTransfer+0x68>)
 8009dfe:	210c      	movs	r1, #12
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f9c1 	bl	800a188 <SDMMC_GetCmdResp1>
 8009e06:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009e14:	69fb      	ldr	r3, [r7, #28]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3720      	adds	r7, #32
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	05f5e100 	.word	0x05f5e100

08009e24 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08a      	sub	sp, #40	; 0x28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009e34:	2307      	movs	r3, #7
 8009e36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e3c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e46:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e48:	f107 0310 	add.w	r3, r7, #16
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f7ff fe8c 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e58:	2107      	movs	r1, #7
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 f994 	bl	800a188 <SDMMC_GetCmdResp1>
 8009e60:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3728      	adds	r7, #40	; 0x28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b088      	sub	sp, #32
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e80:	2300      	movs	r3, #0
 8009e82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e8a:	f107 0308 	add.w	r3, r7, #8
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7ff fe6b 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fbb8 	bl	800a60c <SDMMC_GetCmdError>
 8009e9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e9e:	69fb      	ldr	r3, [r7, #28]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3720      	adds	r7, #32
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b088      	sub	sp, #32
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009eb0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009eb6:	2308      	movs	r3, #8
 8009eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ec8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eca:	f107 0308 	add.w	r3, r7, #8
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff fe4b 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fb4a 	bl	800a570 <SDMMC_GetCmdResp7>
 8009edc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ede:	69fb      	ldr	r3, [r7, #28]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3720      	adds	r7, #32
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b088      	sub	sp, #32
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009ef6:	2337      	movs	r3, #55	; 0x37
 8009ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f00:	2300      	movs	r3, #0
 8009f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f0a:	f107 0308 	add.w	r3, r7, #8
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff fe2b 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f1a:	2137      	movs	r1, #55	; 0x37
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f933 	bl	800a188 <SDMMC_GetCmdResp1>
 8009f22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f24:	69fb      	ldr	r3, [r7, #28]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3720      	adds	r7, #32
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b088      	sub	sp, #32
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009f3c:	2329      	movs	r3, #41	; 0x29
 8009f3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f46:	2300      	movs	r3, #0
 8009f48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f50:	f107 0308 	add.w	r3, r7, #8
 8009f54:	4619      	mov	r1, r3
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7ff fe08 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fa4f 	bl	800a400 <SDMMC_GetCmdResp3>
 8009f62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f64:	69fb      	ldr	r3, [r7, #28]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3720      	adds	r7, #32
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b088      	sub	sp, #32
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009f7c:	2306      	movs	r3, #6
 8009f7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f86:	2300      	movs	r3, #0
 8009f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f90:	f107 0308 	add.w	r3, r7, #8
 8009f94:	4619      	mov	r1, r3
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff fde8 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fa0:	2106      	movs	r1, #6
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f8f0 	bl	800a188 <SDMMC_GetCmdResp1>
 8009fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009faa:	69fb      	ldr	r3, [r7, #28]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3720      	adds	r7, #32
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009fc0:	2333      	movs	r3, #51	; 0x33
 8009fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fd4:	f107 0308 	add.w	r3, r7, #8
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff fdc6 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fe4:	2133      	movs	r1, #51	; 0x33
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f8ce 	bl	800a188 <SDMMC_GetCmdResp1>
 8009fec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fee:	69fb      	ldr	r3, [r7, #28]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3720      	adds	r7, #32
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b088      	sub	sp, #32
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a000:	2300      	movs	r3, #0
 800a002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a004:	2302      	movs	r3, #2
 800a006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a008:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a00c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a00e:	2300      	movs	r3, #0
 800a010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a016:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a018:	f107 0308 	add.w	r3, r7, #8
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7ff fda4 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f9a1 	bl	800a36c <SDMMC_GetCmdResp2>
 800a02a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a02c:	69fb      	ldr	r3, [r7, #28]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3720      	adds	r7, #32
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b088      	sub	sp, #32
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a044:	2309      	movs	r3, #9
 800a046:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a048:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a056:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a058:	f107 0308 	add.w	r3, r7, #8
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fd84 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f981 	bl	800a36c <SDMMC_GetCmdResp2>
 800a06a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a06c:	69fb      	ldr	r3, [r7, #28]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3720      	adds	r7, #32
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b088      	sub	sp, #32
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a084:	2303      	movs	r3, #3
 800a086:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a08c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a08e:	2300      	movs	r3, #0
 800a090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a096:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a098:	f107 0308 	add.w	r3, r7, #8
 800a09c:	4619      	mov	r1, r3
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7ff fd64 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	2103      	movs	r1, #3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f9e9 	bl	800a480 <SDMMC_GetCmdResp6>
 800a0ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b0:	69fb      	ldr	r3, [r7, #28]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3720      	adds	r7, #32
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b088      	sub	sp, #32
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a0c8:	230d      	movs	r3, #13
 800a0ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0dc:	f107 0308 	add.w	r3, r7, #8
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7ff fd42 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a0e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ec:	210d      	movs	r1, #13
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f84a 	bl	800a188 <SDMMC_GetCmdResp1>
 800a0f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0f6:	69fb      	ldr	r3, [r7, #28]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b088      	sub	sp, #32
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a10c:	230d      	movs	r3, #13
 800a10e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a110:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a116:	2300      	movs	r3, #0
 800a118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a11a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a11e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a120:	f107 0308 	add.w	r3, r7, #8
 800a124:	4619      	mov	r1, r3
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7ff fd20 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a130:	210d      	movs	r1, #13
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f828 	bl	800a188 <SDMMC_GetCmdResp1>
 800a138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a13a:	69fb      	ldr	r3, [r7, #28]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3720      	adds	r7, #32
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800a14c:	2300      	movs	r3, #0
 800a14e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800a150:	230b      	movs	r3, #11
 800a152:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a154:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a15e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a162:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a164:	f107 0308 	add.w	r3, r7, #8
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f7ff fcfe 	bl	8009b6c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800a170:	f241 3288 	movw	r2, #5000	; 0x1388
 800a174:	210b      	movs	r1, #11
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f806 	bl	800a188 <SDMMC_GetCmdResp1>
 800a17c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a17e:	69fb      	ldr	r3, [r7, #28]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3720      	adds	r7, #32
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	460b      	mov	r3, r1
 800a192:	607a      	str	r2, [r7, #4]
 800a194:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a196:	4b70      	ldr	r3, [pc, #448]	; (800a358 <SDMMC_GetCmdResp1+0x1d0>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a70      	ldr	r2, [pc, #448]	; (800a35c <SDMMC_GetCmdResp1+0x1d4>)
 800a19c:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a0:	0a5a      	lsrs	r2, r3, #9
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	fb02 f303 	mul.w	r3, r2, r3
 800a1a8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	1e5a      	subs	r2, r3, #1
 800a1ae:	61fa      	str	r2, [r7, #28]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d102      	bne.n	800a1ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1b8:	e0c9      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1be:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a1c0:	69ba      	ldr	r2, [r7, #24]
 800a1c2:	4b67      	ldr	r3, [pc, #412]	; (800a360 <SDMMC_GetCmdResp1+0x1d8>)
 800a1c4:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0ef      	beq.n	800a1aa <SDMMC_GetCmdResp1+0x22>
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1ea      	bne.n	800a1aa <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d8:	f003 0304 	and.w	r3, r3, #4
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d004      	beq.n	800a1ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2204      	movs	r2, #4
 800a1e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1e6:	2304      	movs	r3, #4
 800a1e8:	e0b1      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d004      	beq.n	800a200 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e0a6      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4a58      	ldr	r2, [pc, #352]	; (800a364 <SDMMC_GetCmdResp1+0x1dc>)
 800a204:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f7ff fcda 	bl	8009bc0 <SDMMC_GetCommandResponse>
 800a20c:	4603      	mov	r3, r0
 800a20e:	461a      	mov	r2, r3
 800a210:	7afb      	ldrb	r3, [r7, #11]
 800a212:	4293      	cmp	r3, r2
 800a214:	d001      	beq.n	800a21a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a216:	2301      	movs	r3, #1
 800a218:	e099      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a21a:	2100      	movs	r1, #0
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7ff fcdc 	bl	8009bda <SDMMC_GetResponse>
 800a222:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	4b50      	ldr	r3, [pc, #320]	; (800a368 <SDMMC_GetCmdResp1+0x1e0>)
 800a228:	4013      	ands	r3, r2
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a22e:	2300      	movs	r3, #0
 800a230:	e08d      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2b00      	cmp	r3, #0
 800a236:	da02      	bge.n	800a23e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a23c:	e087      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a248:	2340      	movs	r3, #64	; 0x40
 800a24a:	e080      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a256:	2380      	movs	r3, #128	; 0x80
 800a258:	e079      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a264:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a268:	e071      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a274:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a278:	e069      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a288:	e061      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a298:	e059      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2a8:	e051      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2b8:	e049      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a2c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2c8:	e041      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a2d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2d8:	e039      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a2e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a2e8:	e031      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a2f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a2f8:	e029      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a304:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a308:	e021      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a314:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a318:	e019      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a328:	e011      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a334:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a338:	e009      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f003 0308 	and.w	r3, r3, #8
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a344:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a348:	e001      	b.n	800a34e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a34a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3720      	adds	r7, #32
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20000000 	.word	0x20000000
 800a35c:	10624dd3 	.word	0x10624dd3
 800a360:	00200045 	.word	0x00200045
 800a364:	002000c5 	.word	0x002000c5
 800a368:	fdffe008 	.word	0xfdffe008

0800a36c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a374:	4b1f      	ldr	r3, [pc, #124]	; (800a3f4 <SDMMC_GetCmdResp2+0x88>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a1f      	ldr	r2, [pc, #124]	; (800a3f8 <SDMMC_GetCmdResp2+0x8c>)
 800a37a:	fba2 2303 	umull	r2, r3, r2, r3
 800a37e:	0a5b      	lsrs	r3, r3, #9
 800a380:	f241 3288 	movw	r2, #5000	; 0x1388
 800a384:	fb02 f303 	mul.w	r3, r2, r3
 800a388:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	1e5a      	subs	r2, r3, #1
 800a38e:	60fa      	str	r2, [r7, #12]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d102      	bne.n	800a39a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a394:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a398:	e026      	b.n	800a3e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0ef      	beq.n	800a38a <SDMMC_GetCmdResp2+0x1e>
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1ea      	bne.n	800a38a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b8:	f003 0304 	and.w	r3, r3, #4
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d004      	beq.n	800a3ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2204      	movs	r2, #4
 800a3c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3c6:	2304      	movs	r3, #4
 800a3c8:	e00e      	b.n	800a3e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d004      	beq.n	800a3e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e003      	b.n	800a3e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a06      	ldr	r2, [pc, #24]	; (800a3fc <SDMMC_GetCmdResp2+0x90>)
 800a3e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	20000000 	.word	0x20000000
 800a3f8:	10624dd3 	.word	0x10624dd3
 800a3fc:	002000c5 	.word	0x002000c5

0800a400 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a408:	4b1a      	ldr	r3, [pc, #104]	; (800a474 <SDMMC_GetCmdResp3+0x74>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a1a      	ldr	r2, [pc, #104]	; (800a478 <SDMMC_GetCmdResp3+0x78>)
 800a40e:	fba2 2303 	umull	r2, r3, r2, r3
 800a412:	0a5b      	lsrs	r3, r3, #9
 800a414:	f241 3288 	movw	r2, #5000	; 0x1388
 800a418:	fb02 f303 	mul.w	r3, r2, r3
 800a41c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	1e5a      	subs	r2, r3, #1
 800a422:	60fa      	str	r2, [r7, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d102      	bne.n	800a42e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a428:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a42c:	e01b      	b.n	800a466 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a432:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d0ef      	beq.n	800a41e <SDMMC_GetCmdResp3+0x1e>
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1ea      	bne.n	800a41e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a44c:	f003 0304 	and.w	r3, r3, #4
 800a450:	2b00      	cmp	r3, #0
 800a452:	d004      	beq.n	800a45e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2204      	movs	r2, #4
 800a458:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a45a:	2304      	movs	r3, #4
 800a45c:	e003      	b.n	800a466 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a06      	ldr	r2, [pc, #24]	; (800a47c <SDMMC_GetCmdResp3+0x7c>)
 800a462:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20000000 	.word	0x20000000
 800a478:	10624dd3 	.word	0x10624dd3
 800a47c:	002000c5 	.word	0x002000c5

0800a480 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b088      	sub	sp, #32
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	460b      	mov	r3, r1
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a48e:	4b35      	ldr	r3, [pc, #212]	; (800a564 <SDMMC_GetCmdResp6+0xe4>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a35      	ldr	r2, [pc, #212]	; (800a568 <SDMMC_GetCmdResp6+0xe8>)
 800a494:	fba2 2303 	umull	r2, r3, r2, r3
 800a498:	0a5b      	lsrs	r3, r3, #9
 800a49a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a49e:	fb02 f303 	mul.w	r3, r2, r3
 800a4a2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	1e5a      	subs	r2, r3, #1
 800a4a8:	61fa      	str	r2, [r7, #28]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d102      	bne.n	800a4b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4b2:	e052      	b.n	800a55a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d0ef      	beq.n	800a4a4 <SDMMC_GetCmdResp6+0x24>
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1ea      	bne.n	800a4a4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d2:	f003 0304 	and.w	r3, r3, #4
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d004      	beq.n	800a4e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2204      	movs	r2, #4
 800a4de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	e03a      	b.n	800a55a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d004      	beq.n	800a4fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e02f      	b.n	800a55a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f7ff fb60 	bl	8009bc0 <SDMMC_GetCommandResponse>
 800a500:	4603      	mov	r3, r0
 800a502:	461a      	mov	r2, r3
 800a504:	7afb      	ldrb	r3, [r7, #11]
 800a506:	4293      	cmp	r3, r2
 800a508:	d001      	beq.n	800a50e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e025      	b.n	800a55a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	4a16      	ldr	r2, [pc, #88]	; (800a56c <SDMMC_GetCmdResp6+0xec>)
 800a512:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a514:	2100      	movs	r1, #0
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f7ff fb5f 	bl	8009bda <SDMMC_GetResponse>
 800a51c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d106      	bne.n	800a536 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	0c1b      	lsrs	r3, r3, #16
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a532:	2300      	movs	r3, #0
 800a534:	e011      	b.n	800a55a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a544:	e009      	b.n	800a55a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a554:	e001      	b.n	800a55a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3720      	adds	r7, #32
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	20000000 	.word	0x20000000
 800a568:	10624dd3 	.word	0x10624dd3
 800a56c:	002000c5 	.word	0x002000c5

0800a570 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a578:	4b22      	ldr	r3, [pc, #136]	; (800a604 <SDMMC_GetCmdResp7+0x94>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a22      	ldr	r2, [pc, #136]	; (800a608 <SDMMC_GetCmdResp7+0x98>)
 800a57e:	fba2 2303 	umull	r2, r3, r2, r3
 800a582:	0a5b      	lsrs	r3, r3, #9
 800a584:	f241 3288 	movw	r2, #5000	; 0x1388
 800a588:	fb02 f303 	mul.w	r3, r2, r3
 800a58c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	1e5a      	subs	r2, r3, #1
 800a592:	60fa      	str	r2, [r7, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a59c:	e02c      	b.n	800a5f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d0ef      	beq.n	800a58e <SDMMC_GetCmdResp7+0x1e>
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1ea      	bne.n	800a58e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2204      	movs	r2, #4
 800a5c8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5ca:	2304      	movs	r3, #4
 800a5cc:	e014      	b.n	800a5f8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d004      	beq.n	800a5e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e009      	b.n	800a5f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2240      	movs	r2, #64	; 0x40
 800a5f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5f6:	2300      	movs	r3, #0

}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	20000000 	.word	0x20000000
 800a608:	10624dd3 	.word	0x10624dd3

0800a60c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a614:	4b11      	ldr	r3, [pc, #68]	; (800a65c <SDMMC_GetCmdError+0x50>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a11      	ldr	r2, [pc, #68]	; (800a660 <SDMMC_GetCmdError+0x54>)
 800a61a:	fba2 2303 	umull	r2, r3, r2, r3
 800a61e:	0a5b      	lsrs	r3, r3, #9
 800a620:	f241 3288 	movw	r2, #5000	; 0x1388
 800a624:	fb02 f303 	mul.w	r3, r2, r3
 800a628:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	1e5a      	subs	r2, r3, #1
 800a62e:	60fa      	str	r2, [r7, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d102      	bne.n	800a63a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a634:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a638:	e009      	b.n	800a64e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a642:	2b00      	cmp	r3, #0
 800a644:	d0f1      	beq.n	800a62a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a06      	ldr	r2, [pc, #24]	; (800a664 <SDMMC_GetCmdError+0x58>)
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	20000000 	.word	0x20000000
 800a660:	10624dd3 	.word	0x10624dd3
 800a664:	002000c5 	.word	0x002000c5

0800a668 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a668:	b084      	sub	sp, #16
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	f107 001c 	add.w	r0, r7, #28
 800a676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f001 f9ce 	bl	800ba28 <USB_CoreReset>
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	639a      	str	r2, [r3, #56]	; 0x38
 800a6a2:	e005      	b.n	800a6b0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6bc:	b004      	add	sp, #16
 800a6be:	4770      	bx	lr

0800a6c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a6ce:	79fb      	ldrb	r3, [r7, #7]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d165      	bne.n	800a7a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	4a3e      	ldr	r2, [pc, #248]	; (800a7d0 <USB_SetTurnaroundTime+0x110>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d906      	bls.n	800a6ea <USB_SetTurnaroundTime+0x2a>
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4a3d      	ldr	r2, [pc, #244]	; (800a7d4 <USB_SetTurnaroundTime+0x114>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d202      	bcs.n	800a6ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a6e4:	230f      	movs	r3, #15
 800a6e6:	617b      	str	r3, [r7, #20]
 800a6e8:	e05c      	b.n	800a7a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	4a39      	ldr	r2, [pc, #228]	; (800a7d4 <USB_SetTurnaroundTime+0x114>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d306      	bcc.n	800a700 <USB_SetTurnaroundTime+0x40>
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	4a38      	ldr	r2, [pc, #224]	; (800a7d8 <USB_SetTurnaroundTime+0x118>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d202      	bcs.n	800a700 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a6fa:	230e      	movs	r3, #14
 800a6fc:	617b      	str	r3, [r7, #20]
 800a6fe:	e051      	b.n	800a7a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4a35      	ldr	r2, [pc, #212]	; (800a7d8 <USB_SetTurnaroundTime+0x118>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d306      	bcc.n	800a716 <USB_SetTurnaroundTime+0x56>
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	4a34      	ldr	r2, [pc, #208]	; (800a7dc <USB_SetTurnaroundTime+0x11c>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d202      	bcs.n	800a716 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a710:	230d      	movs	r3, #13
 800a712:	617b      	str	r3, [r7, #20]
 800a714:	e046      	b.n	800a7a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	4a30      	ldr	r2, [pc, #192]	; (800a7dc <USB_SetTurnaroundTime+0x11c>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d306      	bcc.n	800a72c <USB_SetTurnaroundTime+0x6c>
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	4a2f      	ldr	r2, [pc, #188]	; (800a7e0 <USB_SetTurnaroundTime+0x120>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d802      	bhi.n	800a72c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a726:	230c      	movs	r3, #12
 800a728:	617b      	str	r3, [r7, #20]
 800a72a:	e03b      	b.n	800a7a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4a2c      	ldr	r2, [pc, #176]	; (800a7e0 <USB_SetTurnaroundTime+0x120>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d906      	bls.n	800a742 <USB_SetTurnaroundTime+0x82>
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4a2b      	ldr	r2, [pc, #172]	; (800a7e4 <USB_SetTurnaroundTime+0x124>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d802      	bhi.n	800a742 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a73c:	230b      	movs	r3, #11
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	e030      	b.n	800a7a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	4a27      	ldr	r2, [pc, #156]	; (800a7e4 <USB_SetTurnaroundTime+0x124>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d906      	bls.n	800a758 <USB_SetTurnaroundTime+0x98>
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	4a26      	ldr	r2, [pc, #152]	; (800a7e8 <USB_SetTurnaroundTime+0x128>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d802      	bhi.n	800a758 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a752:	230a      	movs	r3, #10
 800a754:	617b      	str	r3, [r7, #20]
 800a756:	e025      	b.n	800a7a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	4a23      	ldr	r2, [pc, #140]	; (800a7e8 <USB_SetTurnaroundTime+0x128>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d906      	bls.n	800a76e <USB_SetTurnaroundTime+0xae>
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	4a22      	ldr	r2, [pc, #136]	; (800a7ec <USB_SetTurnaroundTime+0x12c>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d202      	bcs.n	800a76e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a768:	2309      	movs	r3, #9
 800a76a:	617b      	str	r3, [r7, #20]
 800a76c:	e01a      	b.n	800a7a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	4a1e      	ldr	r2, [pc, #120]	; (800a7ec <USB_SetTurnaroundTime+0x12c>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d306      	bcc.n	800a784 <USB_SetTurnaroundTime+0xc4>
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	4a1d      	ldr	r2, [pc, #116]	; (800a7f0 <USB_SetTurnaroundTime+0x130>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d802      	bhi.n	800a784 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a77e:	2308      	movs	r3, #8
 800a780:	617b      	str	r3, [r7, #20]
 800a782:	e00f      	b.n	800a7a4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4a1a      	ldr	r2, [pc, #104]	; (800a7f0 <USB_SetTurnaroundTime+0x130>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d906      	bls.n	800a79a <USB_SetTurnaroundTime+0xda>
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	4a19      	ldr	r2, [pc, #100]	; (800a7f4 <USB_SetTurnaroundTime+0x134>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d202      	bcs.n	800a79a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a794:	2307      	movs	r3, #7
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	e004      	b.n	800a7a4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a79a:	2306      	movs	r3, #6
 800a79c:	617b      	str	r3, [r7, #20]
 800a79e:	e001      	b.n	800a7a4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a7a0:	2309      	movs	r3, #9
 800a7a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	029b      	lsls	r3, r3, #10
 800a7b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a7bc:	431a      	orrs	r2, r3
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	371c      	adds	r7, #28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	00d8acbf 	.word	0x00d8acbf
 800a7d4:	00e4e1c0 	.word	0x00e4e1c0
 800a7d8:	00f42400 	.word	0x00f42400
 800a7dc:	01067380 	.word	0x01067380
 800a7e0:	011a499f 	.word	0x011a499f
 800a7e4:	01312cff 	.word	0x01312cff
 800a7e8:	014ca43f 	.word	0x014ca43f
 800a7ec:	016e3600 	.word	0x016e3600
 800a7f0:	01a6ab1f 	.word	0x01a6ab1f
 800a7f4:	01e84800 	.word	0x01e84800

0800a7f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f043 0201 	orr.w	r2, r3, #1
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b083      	sub	sp, #12
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	f023 0201 	bic.w	r2, r3, #1
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d106      	bne.n	800a868 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	60da      	str	r2, [r3, #12]
 800a866:	e00b      	b.n	800a880 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a868:	78fb      	ldrb	r3, [r7, #3]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d106      	bne.n	800a87c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60da      	str	r2, [r3, #12]
 800a87a:	e001      	b.n	800a880 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e003      	b.n	800a888 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a880:	2032      	movs	r0, #50	; 0x32
 800a882:	f7f6 ff47 	bl	8001714 <HAL_Delay>

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a890:	b084      	sub	sp, #16
 800a892:	b580      	push	{r7, lr}
 800a894:	b086      	sub	sp, #24
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
 800a89a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a89e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	613b      	str	r3, [r7, #16]
 800a8ae:	e009      	b.n	800a8c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	3340      	adds	r3, #64	; 0x40
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	613b      	str	r3, [r7, #16]
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	2b0e      	cmp	r3, #14
 800a8c8:	d9f2      	bls.n	800a8b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d11c      	bne.n	800a90a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8de:	f043 0302 	orr.w	r3, r3, #2
 800a8e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	601a      	str	r2, [r3, #0]
 800a908:	e005      	b.n	800a916 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a91c:	461a      	mov	r2, r3
 800a91e:	2300      	movs	r3, #0
 800a920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a928:	4619      	mov	r1, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a930:	461a      	mov	r2, r3
 800a932:	680b      	ldr	r3, [r1, #0]
 800a934:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a936:	2103      	movs	r1, #3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f93d 	bl	800abb8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a93e:	2110      	movs	r1, #16
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f8f1 	bl	800ab28 <USB_FlushTxFifo>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f90f 	bl	800ab74 <USB_FlushRxFifo>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a966:	461a      	mov	r2, r3
 800a968:	2300      	movs	r3, #0
 800a96a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a972:	461a      	mov	r2, r3
 800a974:	2300      	movs	r3, #0
 800a976:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97e:	461a      	mov	r2, r3
 800a980:	2300      	movs	r3, #0
 800a982:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a984:	2300      	movs	r3, #0
 800a986:	613b      	str	r3, [r7, #16]
 800a988:	e043      	b.n	800aa12 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a99c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9a0:	d118      	bne.n	800a9d4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	015a      	lsls	r2, r3, #5
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	e013      	b.n	800a9e6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9d0:	6013      	str	r3, [r2, #0]
 800a9d2:	e008      	b.n	800a9e6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	015a      	lsls	r2, r3, #5
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	015a      	lsls	r2, r3, #5
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa04:	461a      	mov	r2, r3
 800aa06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	613b      	str	r3, [r7, #16]
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d3b7      	bcc.n	800a98a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	613b      	str	r3, [r7, #16]
 800aa1e:	e043      	b.n	800aaa8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	015a      	lsls	r2, r3, #5
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4413      	add	r3, r2
 800aa28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa36:	d118      	bne.n	800aa6a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10a      	bne.n	800aa54 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa50:	6013      	str	r3, [r2, #0]
 800aa52:	e013      	b.n	800aa7c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa60:	461a      	mov	r2, r3
 800aa62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	e008      	b.n	800aa7c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	015a      	lsls	r2, r3, #5
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	4413      	add	r3, r2
 800aa72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa76:	461a      	mov	r2, r3
 800aa78:	2300      	movs	r3, #0
 800aa7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	015a      	lsls	r2, r3, #5
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4413      	add	r3, r2
 800aa84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa88:	461a      	mov	r2, r3
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aaa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	613b      	str	r3, [r7, #16]
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d3b7      	bcc.n	800aa20 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aabe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aac2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aad0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	f043 0210 	orr.w	r2, r3, #16
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	699a      	ldr	r2, [r3, #24]
 800aae2:	4b10      	ldr	r3, [pc, #64]	; (800ab24 <USB_DevInit+0x294>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aaea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d005      	beq.n	800aafc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	f043 0208 	orr.w	r2, r3, #8
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aafc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d107      	bne.n	800ab12 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab0a:	f043 0304 	orr.w	r3, r3, #4
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab1e:	b004      	add	sp, #16
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	803c3800 	.word	0x803c3800

0800ab28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	019b      	lsls	r3, r3, #6
 800ab3a:	f043 0220 	orr.w	r2, r3, #32
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	3301      	adds	r3, #1
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4a09      	ldr	r2, [pc, #36]	; (800ab70 <USB_FlushTxFifo+0x48>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d901      	bls.n	800ab54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e006      	b.n	800ab62 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	f003 0320 	and.w	r3, r3, #32
 800ab5c:	2b20      	cmp	r3, #32
 800ab5e:	d0f0      	beq.n	800ab42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	00030d40 	.word	0x00030d40

0800ab74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2210      	movs	r2, #16
 800ab84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	4a09      	ldr	r2, [pc, #36]	; (800abb4 <USB_FlushRxFifo+0x40>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d901      	bls.n	800ab98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ab94:	2303      	movs	r3, #3
 800ab96:	e006      	b.n	800aba6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	f003 0310 	and.w	r3, r3, #16
 800aba0:	2b10      	cmp	r3, #16
 800aba2:	d0f0      	beq.n	800ab86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	00030d40 	.word	0x00030d40

0800abb8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	78fb      	ldrb	r3, [r7, #3]
 800abd2:	68f9      	ldr	r1, [r7, #12]
 800abd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abd8:	4313      	orrs	r3, r2
 800abda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3714      	adds	r7, #20
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800abea:	b480      	push	{r7}
 800abec:	b087      	sub	sp, #28
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f003 0306 	and.w	r3, r3, #6
 800ac02:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d002      	beq.n	800ac10 <USB_GetDevSpeed+0x26>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b06      	cmp	r3, #6
 800ac0e:	d102      	bne.n	800ac16 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac10:	2302      	movs	r3, #2
 800ac12:	75fb      	strb	r3, [r7, #23]
 800ac14:	e001      	b.n	800ac1a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800ac16:	230f      	movs	r3, #15
 800ac18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	371c      	adds	r7, #28
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	785b      	ldrb	r3, [r3, #1]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d13a      	bne.n	800acba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac4a:	69da      	ldr	r2, [r3, #28]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	f003 030f 	and.w	r3, r3, #15
 800ac54:	2101      	movs	r1, #1
 800ac56:	fa01 f303 	lsl.w	r3, r1, r3
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	68f9      	ldr	r1, [r7, #12]
 800ac5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac62:	4313      	orrs	r3, r2
 800ac64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	015a      	lsls	r2, r3, #5
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d155      	bne.n	800ad28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	78db      	ldrb	r3, [r3, #3]
 800ac96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	059b      	lsls	r3, r3, #22
 800ac9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aca0:	4313      	orrs	r3, r2
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	0151      	lsls	r1, r2, #5
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	440a      	add	r2, r1
 800acaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800acb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	e036      	b.n	800ad28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc0:	69da      	ldr	r2, [r3, #28]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	f003 030f 	and.w	r3, r3, #15
 800acca:	2101      	movs	r1, #1
 800accc:	fa01 f303 	lsl.w	r3, r1, r3
 800acd0:	041b      	lsls	r3, r3, #16
 800acd2:	68f9      	ldr	r1, [r7, #12]
 800acd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acd8:	4313      	orrs	r3, r2
 800acda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	015a      	lsls	r2, r3, #5
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4413      	add	r3, r2
 800ace4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d11a      	bne.n	800ad28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	78db      	ldrb	r3, [r3, #3]
 800ad0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad0e:	430b      	orrs	r3, r1
 800ad10:	4313      	orrs	r3, r2
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	0151      	lsls	r1, r2, #5
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	440a      	add	r2, r1
 800ad1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
	...

0800ad38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	785b      	ldrb	r3, [r3, #1]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d161      	bne.n	800ae18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad6a:	d11f      	bne.n	800adac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	015a      	lsls	r2, r3, #5
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4413      	add	r3, r2
 800ad74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	0151      	lsls	r1, r2, #5
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	440a      	add	r2, r1
 800ad82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	015a      	lsls	r2, r3, #5
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	4413      	add	r3, r2
 800ad94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	0151      	lsls	r1, r2, #5
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	440a      	add	r2, r1
 800ada2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ada6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800adaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	f003 030f 	and.w	r3, r3, #15
 800adbc:	2101      	movs	r1, #1
 800adbe:	fa01 f303 	lsl.w	r3, r1, r3
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	43db      	mvns	r3, r3
 800adc6:	68f9      	ldr	r1, [r7, #12]
 800adc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adcc:	4013      	ands	r3, r2
 800adce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800add6:	69da      	ldr	r2, [r3, #28]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	f003 030f 	and.w	r3, r3, #15
 800ade0:	2101      	movs	r1, #1
 800ade2:	fa01 f303 	lsl.w	r3, r1, r3
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	43db      	mvns	r3, r3
 800adea:	68f9      	ldr	r1, [r7, #12]
 800adec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adf0:	4013      	ands	r3, r2
 800adf2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	015a      	lsls	r2, r3, #5
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	4413      	add	r3, r2
 800adfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	0159      	lsls	r1, r3, #5
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	440b      	add	r3, r1
 800ae0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4b35      	ldr	r3, [pc, #212]	; (800aee8 <USB_DeactivateEndpoint+0x1b0>)
 800ae12:	4013      	ands	r3, r2
 800ae14:	600b      	str	r3, [r1, #0]
 800ae16:	e060      	b.n	800aeda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	015a      	lsls	r2, r3, #5
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	4413      	add	r3, r2
 800ae20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae2e:	d11f      	bne.n	800ae70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	015a      	lsls	r2, r3, #5
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4413      	add	r3, r2
 800ae38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	0151      	lsls	r1, r2, #5
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	440a      	add	r2, r1
 800ae46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	0151      	lsls	r1, r2, #5
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	440a      	add	r2, r1
 800ae66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	f003 030f 	and.w	r3, r3, #15
 800ae80:	2101      	movs	r1, #1
 800ae82:	fa01 f303 	lsl.w	r3, r1, r3
 800ae86:	041b      	lsls	r3, r3, #16
 800ae88:	43db      	mvns	r3, r3
 800ae8a:	68f9      	ldr	r1, [r7, #12]
 800ae8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae90:	4013      	ands	r3, r2
 800ae92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae9a:	69da      	ldr	r2, [r3, #28]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	f003 030f 	and.w	r3, r3, #15
 800aea4:	2101      	movs	r1, #1
 800aea6:	fa01 f303 	lsl.w	r3, r1, r3
 800aeaa:	041b      	lsls	r3, r3, #16
 800aeac:	43db      	mvns	r3, r3
 800aeae:	68f9      	ldr	r1, [r7, #12]
 800aeb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	0159      	lsls	r1, r3, #5
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	440b      	add	r3, r1
 800aece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed2:	4619      	mov	r1, r3
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <USB_DeactivateEndpoint+0x1b4>)
 800aed6:	4013      	ands	r3, r2
 800aed8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	ec337800 	.word	0xec337800
 800aeec:	eff37800 	.word	0xeff37800

0800aef0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	785b      	ldrb	r3, [r3, #1]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	f040 810a 	bne.w	800b122 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d132      	bne.n	800af7c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	0151      	lsls	r1, r2, #5
 800af28:	697a      	ldr	r2, [r7, #20]
 800af2a:	440a      	add	r2, r1
 800af2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	015a      	lsls	r2, r3, #5
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	4413      	add	r3, r2
 800af42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	0151      	lsls	r1, r2, #5
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	440a      	add	r2, r1
 800af50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	015a      	lsls	r2, r3, #5
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	4413      	add	r3, r2
 800af62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	0151      	lsls	r1, r2, #5
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	440a      	add	r2, r1
 800af70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af74:	0cdb      	lsrs	r3, r3, #19
 800af76:	04db      	lsls	r3, r3, #19
 800af78:	6113      	str	r3, [r2, #16]
 800af7a:	e074      	b.n	800b066 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	4413      	add	r3, r2
 800af84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	0151      	lsls	r1, r2, #5
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	440a      	add	r2, r1
 800af92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af96:	0cdb      	lsrs	r3, r3, #19
 800af98:	04db      	lsls	r3, r3, #19
 800af9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	015a      	lsls	r2, r3, #5
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	4413      	add	r3, r2
 800afa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	0151      	lsls	r1, r2, #5
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	440a      	add	r2, r1
 800afb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afcc:	691a      	ldr	r2, [r3, #16]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	6959      	ldr	r1, [r3, #20]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	440b      	add	r3, r1
 800afd8:	1e59      	subs	r1, r3, #1
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	fbb1 f3f3 	udiv	r3, r1, r3
 800afe2:	04d9      	lsls	r1, r3, #19
 800afe4:	4baf      	ldr	r3, [pc, #700]	; (800b2a4 <USB_EPStartXfer+0x3b4>)
 800afe6:	400b      	ands	r3, r1
 800afe8:	6939      	ldr	r1, [r7, #16]
 800afea:	0148      	lsls	r0, r1, #5
 800afec:	6979      	ldr	r1, [r7, #20]
 800afee:	4401      	add	r1, r0
 800aff0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aff4:	4313      	orrs	r3, r2
 800aff6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	015a      	lsls	r2, r3, #5
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	4413      	add	r3, r2
 800b000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b004:	691a      	ldr	r2, [r3, #16]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b00e:	6939      	ldr	r1, [r7, #16]
 800b010:	0148      	lsls	r0, r1, #5
 800b012:	6979      	ldr	r1, [r7, #20]
 800b014:	4401      	add	r1, r0
 800b016:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b01a:	4313      	orrs	r3, r2
 800b01c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	78db      	ldrb	r3, [r3, #3]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d11f      	bne.n	800b066 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	0151      	lsls	r1, r2, #5
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	440a      	add	r2, r1
 800b03c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b040:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b044:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	015a      	lsls	r2, r3, #5
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	4413      	add	r3, r2
 800b04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	0151      	lsls	r1, r2, #5
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	440a      	add	r2, r1
 800b05c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b060:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b064:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	015a      	lsls	r2, r3, #5
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	4413      	add	r3, r2
 800b06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	0151      	lsls	r1, r2, #5
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	440a      	add	r2, r1
 800b07c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b080:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b084:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	78db      	ldrb	r3, [r3, #3]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d015      	beq.n	800b0ba <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	695b      	ldr	r3, [r3, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 8100 	beq.w	800b298 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b09e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	f003 030f 	and.w	r3, r3, #15
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b0ae:	6979      	ldr	r1, [r7, #20]
 800b0b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	634b      	str	r3, [r1, #52]	; 0x34
 800b0b8:	e0ee      	b.n	800b298 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d110      	bne.n	800b0ec <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	015a      	lsls	r2, r3, #5
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	0151      	lsls	r1, r2, #5
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	440a      	add	r2, r1
 800b0e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	e00f      	b.n	800b10c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	015a      	lsls	r2, r3, #5
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	0151      	lsls	r1, r2, #5
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	440a      	add	r2, r1
 800b102:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b10a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	68d9      	ldr	r1, [r3, #12]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	781a      	ldrb	r2, [r3, #0]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	695b      	ldr	r3, [r3, #20]
 800b118:	b29b      	uxth	r3, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f9e2 	bl	800b4e4 <USB_WritePacket>
 800b120:	e0ba      	b.n	800b298 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	0151      	lsls	r1, r2, #5
 800b134:	697a      	ldr	r2, [r7, #20]
 800b136:	440a      	add	r2, r1
 800b138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b13c:	0cdb      	lsrs	r3, r3, #19
 800b13e:	04db      	lsls	r3, r3, #19
 800b140:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	015a      	lsls	r2, r3, #5
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	4413      	add	r3, r2
 800b14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	0151      	lsls	r1, r2, #5
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	440a      	add	r2, r1
 800b158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b15c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b160:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b164:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d123      	bne.n	800b1b6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b17a:	691a      	ldr	r2, [r3, #16]
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b184:	6939      	ldr	r1, [r7, #16]
 800b186:	0148      	lsls	r0, r1, #5
 800b188:	6979      	ldr	r1, [r7, #20]
 800b18a:	4401      	add	r1, r0
 800b18c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b190:	4313      	orrs	r3, r2
 800b192:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	0151      	lsls	r1, r2, #5
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	440a      	add	r2, r1
 800b1aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1b2:	6113      	str	r3, [r2, #16]
 800b1b4:	e033      	b.n	800b21e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	695a      	ldr	r2, [r3, #20]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	4413      	add	r3, r2
 800b1c0:	1e5a      	subs	r2, r3, #1
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ca:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d8:	691a      	ldr	r2, [r3, #16]
 800b1da:	89fb      	ldrh	r3, [r7, #14]
 800b1dc:	04d9      	lsls	r1, r3, #19
 800b1de:	4b31      	ldr	r3, [pc, #196]	; (800b2a4 <USB_EPStartXfer+0x3b4>)
 800b1e0:	400b      	ands	r3, r1
 800b1e2:	6939      	ldr	r1, [r7, #16]
 800b1e4:	0148      	lsls	r0, r1, #5
 800b1e6:	6979      	ldr	r1, [r7, #20]
 800b1e8:	4401      	add	r1, r0
 800b1ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	015a      	lsls	r2, r3, #5
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1fe:	691a      	ldr	r2, [r3, #16]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	89f9      	ldrh	r1, [r7, #14]
 800b206:	fb01 f303 	mul.w	r3, r1, r3
 800b20a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b20e:	6939      	ldr	r1, [r7, #16]
 800b210:	0148      	lsls	r0, r1, #5
 800b212:	6979      	ldr	r1, [r7, #20]
 800b214:	4401      	add	r1, r0
 800b216:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b21a:	4313      	orrs	r3, r2
 800b21c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	78db      	ldrb	r3, [r3, #3]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d128      	bne.n	800b278 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b232:	2b00      	cmp	r3, #0
 800b234:	d110      	bne.n	800b258 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	015a      	lsls	r2, r3, #5
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	4413      	add	r3, r2
 800b23e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	0151      	lsls	r1, r2, #5
 800b248:	697a      	ldr	r2, [r7, #20]
 800b24a:	440a      	add	r2, r1
 800b24c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b250:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b254:	6013      	str	r3, [r2, #0]
 800b256:	e00f      	b.n	800b278 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	0151      	lsls	r1, r2, #5
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	440a      	add	r2, r1
 800b26e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b276:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	0151      	lsls	r1, r2, #5
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	440a      	add	r2, r1
 800b28e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b292:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b296:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	1ff80000 	.word	0x1ff80000

0800b2a8 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	785b      	ldrb	r3, [r3, #1]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	f040 80ab 	bne.w	800b41c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	695b      	ldr	r3, [r3, #20]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d132      	bne.n	800b334 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	015a      	lsls	r2, r3, #5
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	0151      	lsls	r1, r2, #5
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	440a      	add	r2, r1
 800b2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	015a      	lsls	r2, r3, #5
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	0151      	lsls	r1, r2, #5
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	440a      	add	r2, r1
 800b308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b30c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	0151      	lsls	r1, r2, #5
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	440a      	add	r2, r1
 800b328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b32c:	0cdb      	lsrs	r3, r3, #19
 800b32e:	04db      	lsls	r3, r3, #19
 800b330:	6113      	str	r3, [r2, #16]
 800b332:	e04e      	b.n	800b3d2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	015a      	lsls	r2, r3, #5
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	4413      	add	r3, r2
 800b33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	0151      	lsls	r1, r2, #5
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	440a      	add	r2, r1
 800b34a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b34e:	0cdb      	lsrs	r3, r3, #19
 800b350:	04db      	lsls	r3, r3, #19
 800b352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	0151      	lsls	r1, r2, #5
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	440a      	add	r2, r1
 800b36a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b36e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b372:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b376:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	695a      	ldr	r2, [r3, #20]
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	429a      	cmp	r2, r3
 800b382:	d903      	bls.n	800b38c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	689a      	ldr	r2, [r3, #8]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	0151      	lsls	r1, r2, #5
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	440a      	add	r2, r1
 800b3a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	015a      	lsls	r2, r3, #5
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b8:	691a      	ldr	r2, [r3, #16]
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3c2:	68b9      	ldr	r1, [r7, #8]
 800b3c4:	0148      	lsls	r0, r1, #5
 800b3c6:	68f9      	ldr	r1, [r7, #12]
 800b3c8:	4401      	add	r1, r0
 800b3ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	015a      	lsls	r2, r3, #5
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	4413      	add	r3, r2
 800b3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	0151      	lsls	r1, r2, #5
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	440a      	add	r2, r1
 800b3e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3f0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	695b      	ldr	r3, [r3, #20]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d06d      	beq.n	800b4d6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	f003 030f 	and.w	r3, r3, #15
 800b40a:	2101      	movs	r1, #1
 800b40c:	fa01 f303 	lsl.w	r3, r1, r3
 800b410:	68f9      	ldr	r1, [r7, #12]
 800b412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b416:	4313      	orrs	r3, r2
 800b418:	634b      	str	r3, [r1, #52]	; 0x34
 800b41a:	e05c      	b.n	800b4d6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	015a      	lsls	r2, r3, #5
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4413      	add	r3, r2
 800b424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	0151      	lsls	r1, r2, #5
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	440a      	add	r2, r1
 800b432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b436:	0cdb      	lsrs	r3, r3, #19
 800b438:	04db      	lsls	r3, r3, #19
 800b43a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	015a      	lsls	r2, r3, #5
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	4413      	add	r3, r2
 800b444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	0151      	lsls	r1, r2, #5
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	440a      	add	r2, r1
 800b452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b456:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b45a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b45e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	695b      	ldr	r3, [r3, #20]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d003      	beq.n	800b470 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	689a      	ldr	r2, [r3, #8]
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	015a      	lsls	r2, r3, #5
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	4413      	add	r3, r2
 800b478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	0151      	lsls	r1, r2, #5
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	440a      	add	r2, r1
 800b486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b48a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b48e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	015a      	lsls	r2, r3, #5
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	4413      	add	r3, r2
 800b498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b49c:	691a      	ldr	r2, [r3, #16]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	0148      	lsls	r0, r1, #5
 800b4aa:	68f9      	ldr	r1, [r7, #12]
 800b4ac:	4401      	add	r1, r0
 800b4ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	015a      	lsls	r2, r3, #5
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	0151      	lsls	r1, r2, #5
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	440a      	add	r2, r1
 800b4cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b089      	sub	sp, #36	; 0x24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	71fb      	strb	r3, [r7, #7]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b502:	88bb      	ldrh	r3, [r7, #4]
 800b504:	3303      	adds	r3, #3
 800b506:	089b      	lsrs	r3, r3, #2
 800b508:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b50a:	2300      	movs	r3, #0
 800b50c:	61bb      	str	r3, [r7, #24]
 800b50e:	e00f      	b.n	800b530 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b510:	79fb      	ldrb	r3, [r7, #7]
 800b512:	031a      	lsls	r2, r3, #12
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	4413      	add	r3, r2
 800b518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b51c:	461a      	mov	r2, r3
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	3304      	adds	r3, #4
 800b528:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	3301      	adds	r3, #1
 800b52e:	61bb      	str	r3, [r7, #24]
 800b530:	69ba      	ldr	r2, [r7, #24]
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	429a      	cmp	r2, r3
 800b536:	d3eb      	bcc.n	800b510 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3724      	adds	r7, #36	; 0x24
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b546:	b480      	push	{r7}
 800b548:	b089      	sub	sp, #36	; 0x24
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	4613      	mov	r3, r2
 800b552:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b55c:	88fb      	ldrh	r3, [r7, #6]
 800b55e:	3303      	adds	r3, #3
 800b560:	089b      	lsrs	r3, r3, #2
 800b562:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b564:	2300      	movs	r3, #0
 800b566:	61bb      	str	r3, [r7, #24]
 800b568:	e00b      	b.n	800b582 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	601a      	str	r2, [r3, #0]
    pDest++;
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	3304      	adds	r3, #4
 800b57a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	3301      	adds	r3, #1
 800b580:	61bb      	str	r3, [r7, #24]
 800b582:	69ba      	ldr	r2, [r7, #24]
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	429a      	cmp	r2, r3
 800b588:	d3ef      	bcc.n	800b56a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b58a:	69fb      	ldr	r3, [r7, #28]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3724      	adds	r7, #36	; 0x24
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	785b      	ldrb	r3, [r3, #1]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d12c      	bne.n	800b60e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	015a      	lsls	r2, r3, #5
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	db12      	blt.n	800b5ec <USB_EPSetStall+0x54>
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00f      	beq.n	800b5ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	015a      	lsls	r2, r3, #5
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	0151      	lsls	r1, r2, #5
 800b5de:	68fa      	ldr	r2, [r7, #12]
 800b5e0:	440a      	add	r2, r1
 800b5e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b5ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	015a      	lsls	r2, r3, #5
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	0151      	lsls	r1, r2, #5
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	440a      	add	r2, r1
 800b602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b60a:	6013      	str	r3, [r2, #0]
 800b60c:	e02b      	b.n	800b666 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	015a      	lsls	r2, r3, #5
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	4413      	add	r3, r2
 800b616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	db12      	blt.n	800b646 <USB_EPSetStall+0xae>
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	015a      	lsls	r2, r3, #5
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	4413      	add	r3, r2
 800b62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	0151      	lsls	r1, r2, #5
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	440a      	add	r2, r1
 800b63c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b640:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b644:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	015a      	lsls	r2, r3, #5
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	4413      	add	r3, r2
 800b64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	0151      	lsls	r1, r2, #5
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	440a      	add	r2, r1
 800b65c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b664:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	785b      	ldrb	r3, [r3, #1]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d128      	bne.n	800b6e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4413      	add	r3, r2
 800b698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	0151      	lsls	r1, r2, #5
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	440a      	add	r2, r1
 800b6a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	78db      	ldrb	r3, [r3, #3]
 800b6b4:	2b03      	cmp	r3, #3
 800b6b6:	d003      	beq.n	800b6c0 <USB_EPClearStall+0x4c>
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	78db      	ldrb	r3, [r3, #3]
 800b6bc:	2b02      	cmp	r3, #2
 800b6be:	d138      	bne.n	800b732 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	0151      	lsls	r1, r2, #5
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	440a      	add	r2, r1
 800b6d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	e027      	b.n	800b732 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	015a      	lsls	r2, r3, #5
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	0151      	lsls	r1, r2, #5
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	440a      	add	r2, r1
 800b6f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b700:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	78db      	ldrb	r3, [r3, #3]
 800b706:	2b03      	cmp	r3, #3
 800b708:	d003      	beq.n	800b712 <USB_EPClearStall+0x9e>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	78db      	ldrb	r3, [r3, #3]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d10f      	bne.n	800b732 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	0151      	lsls	r1, r2, #5
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	440a      	add	r2, r1
 800b728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b72c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b730:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	460b      	mov	r3, r1
 800b74a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b75e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b762:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	78fb      	ldrb	r3, [r7, #3]
 800b76e:	011b      	lsls	r3, r3, #4
 800b770:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b774:	68f9      	ldr	r1, [r7, #12]
 800b776:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b77a:	4313      	orrs	r3, r2
 800b77c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3714      	adds	r7, #20
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7a6:	f023 0303 	bic.w	r3, r3, #3
 800b7aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7ba:	f023 0302 	bic.w	r3, r3, #2
 800b7be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3714      	adds	r7, #20
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b085      	sub	sp, #20
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7e8:	f023 0303 	bic.w	r3, r3, #3
 800b7ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7fc:	f043 0302 	orr.w	r3, r3, #2
 800b800:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	695b      	ldr	r3, [r3, #20]
 800b81c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	4013      	ands	r3, r2
 800b826:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b828:	68fb      	ldr	r3, [r7, #12]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3714      	adds	r7, #20
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b836:	b480      	push	{r7}
 800b838:	b085      	sub	sp, #20
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b852:	69db      	ldr	r3, [r3, #28]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	4013      	ands	r3, r2
 800b858:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	0c1b      	lsrs	r3, r3, #16
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b085      	sub	sp, #20
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b886:	69db      	ldr	r3, [r3, #28]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	4013      	ands	r3, r2
 800b88c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	b29b      	uxth	r3, r3
}
 800b892:	4618      	mov	r0, r3
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b085      	sub	sp, #20
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b8ae:	78fb      	ldrb	r3, [r7, #3]
 800b8b0:	015a      	lsls	r2, r3, #5
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b8cc:	68bb      	ldr	r3, [r7, #8]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b087      	sub	sp, #28
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b8fe:	78fb      	ldrb	r3, [r7, #3]
 800b900:	f003 030f 	and.w	r3, r3, #15
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	fa22 f303 	lsr.w	r3, r2, r3
 800b90a:	01db      	lsls	r3, r3, #7
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	4313      	orrs	r3, r2
 800b912:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	015a      	lsls	r2, r3, #5
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	4413      	add	r3, r2
 800b91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	693a      	ldr	r2, [r7, #16]
 800b924:	4013      	ands	r3, r2
 800b926:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b928:	68bb      	ldr	r3, [r7, #8]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	371c      	adds	r7, #28
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b936:	b480      	push	{r7}
 800b938:	b083      	sub	sp, #12
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	f003 0301 	and.w	r3, r3, #1
}
 800b946:	4618      	mov	r0, r3
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr

0800b952 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b952:	b480      	push	{r7}
 800b954:	b085      	sub	sp, #20
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b96c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b970:	f023 0307 	bic.w	r3, r3, #7
 800b974:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b988:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	333c      	adds	r3, #60	; 0x3c
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	4a1c      	ldr	r2, [pc, #112]	; (800ba24 <USB_EP0_OutStart+0x8c>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d90a      	bls.n	800b9ce <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9c8:	d101      	bne.n	800b9ce <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e024      	b.n	800ba18 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9fc:	f043 0318 	orr.w	r3, r3, #24
 800ba00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ba14:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	4f54300a 	.word	0x4f54300a

0800ba28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ba30:	2300      	movs	r3, #0
 800ba32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	3301      	adds	r3, #1
 800ba38:	60fb      	str	r3, [r7, #12]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	4a13      	ldr	r2, [pc, #76]	; (800ba8c <USB_CoreReset+0x64>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d901      	bls.n	800ba46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ba42:	2303      	movs	r3, #3
 800ba44:	e01b      	b.n	800ba7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	daf2      	bge.n	800ba34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	f043 0201 	orr.w	r2, r3, #1
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	3301      	adds	r3, #1
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	4a09      	ldr	r2, [pc, #36]	; (800ba8c <USB_CoreReset+0x64>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d901      	bls.n	800ba70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e006      	b.n	800ba7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	f003 0301 	and.w	r3, r3, #1
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d0f0      	beq.n	800ba5e <USB_CoreReset+0x36>

  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	00030d40 	.word	0x00030d40

0800ba90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ba94:	4904      	ldr	r1, [pc, #16]	; (800baa8 <MX_FATFS_Init+0x18>)
 800ba96:	4805      	ldr	r0, [pc, #20]	; (800baac <MX_FATFS_Init+0x1c>)
 800ba98:	f001 ff30 	bl	800d8fc <FATFS_LinkDriver>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	461a      	mov	r2, r3
 800baa0:	4b03      	ldr	r3, [pc, #12]	; (800bab0 <MX_FATFS_Init+0x20>)
 800baa2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800baa4:	bf00      	nop
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	20002430 	.word	0x20002430
 800baac:	08011670 	.word	0x08011670
 800bab0:	2000242c 	.word	0x2000242c

0800bab4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800babe:	f000 f885 	bl	800bbcc <BSP_SD_IsDetected>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d001      	beq.n	800bacc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bac8:	2302      	movs	r3, #2
 800baca:	e012      	b.n	800baf2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bacc:	480b      	ldr	r0, [pc, #44]	; (800bafc <BSP_SD_Init+0x48>)
 800bace:	f7fb fd8d 	bl	80075ec <HAL_SD_Init>
 800bad2:	4603      	mov	r3, r0
 800bad4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bad6:	79fb      	ldrb	r3, [r7, #7]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d109      	bne.n	800baf0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800badc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bae0:	4806      	ldr	r0, [pc, #24]	; (800bafc <BSP_SD_Init+0x48>)
 800bae2:	f7fc fc53 	bl	800838c <HAL_SD_ConfigWideBusOperation>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800baf0:	79fb      	ldrb	r3, [r7, #7]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	2000202c 	.word	0x2000202c

0800bb00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	68f9      	ldr	r1, [r7, #12]
 800bb16:	4806      	ldr	r0, [pc, #24]	; (800bb30 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bb18:	f7fb fea2 	bl	8007860 <HAL_SD_ReadBlocks_DMA>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d001      	beq.n	800bb26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bb22:	2301      	movs	r3, #1
 800bb24:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3718      	adds	r7, #24
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	2000202c 	.word	0x2000202c

0800bb34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	68f9      	ldr	r1, [r7, #12]
 800bb4a:	4806      	ldr	r0, [pc, #24]	; (800bb64 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bb4c:	f7fb ff30 	bl	80079b0 <HAL_SD_WriteBlocks_DMA>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bb56:	2301      	movs	r3, #1
 800bb58:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	2000202c 	.word	0x2000202c

0800bb68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bb6c:	4805      	ldr	r0, [pc, #20]	; (800bb84 <BSP_SD_GetCardState+0x1c>)
 800bb6e:	f7fc fd21 	bl	80085b4 <HAL_SD_GetCardState>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b04      	cmp	r3, #4
 800bb76:	bf14      	ite	ne
 800bb78:	2301      	movne	r3, #1
 800bb7a:	2300      	moveq	r3, #0
 800bb7c:	b2db      	uxtb	r3, r3
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	2000202c 	.word	0x2000202c

0800bb88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bb90:	6879      	ldr	r1, [r7, #4]
 800bb92:	4803      	ldr	r0, [pc, #12]	; (800bba0 <BSP_SD_GetCardInfo+0x18>)
 800bb94:	f7fc fbce 	bl	8008334 <HAL_SD_GetCardInfo>
}
 800bb98:	bf00      	nop
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	2000202c 	.word	0x2000202c

0800bba4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bbac:	f000 f9ac 	bl	800bf08 <BSP_SD_WriteCpltCallback>
}
 800bbb0:	bf00      	nop
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bbc0:	f000 f9b4 	bl	800bf2c <BSP_SD_ReadCpltCallback>
}
 800bbc4:	bf00      	nop
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bbd6:	f000 f80b 	bl	800bbf0 <BSP_PlatformIsDetected>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bbe4:	79fb      	ldrb	r3, [r7, #7]
 800bbe6:	b2db      	uxtb	r3, r3
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bbfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bbfe:	4806      	ldr	r0, [pc, #24]	; (800bc18 <BSP_PlatformIsDetected+0x28>)
 800bc00:	f7f7 faee 	bl	80031e0 <HAL_GPIO_ReadPin>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d001      	beq.n	800bc0e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3708      	adds	r7, #8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	48000400 	.word	0x48000400

0800bc1c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800bc24:	f001 ff2a 	bl	800da7c <osKernelGetTickCount>
 800bc28:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800bc2a:	e006      	b.n	800bc3a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc2c:	f7ff ff9c 	bl	800bb68 <BSP_SD_GetCardState>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d101      	bne.n	800bc3a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bc36:	2300      	movs	r3, #0
 800bc38:	e009      	b.n	800bc4e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800bc3a:	f001 ff1f 	bl	800da7c <osKernelGetTickCount>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	1ad3      	subs	r3, r2, r3
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d8f0      	bhi.n	800bc2c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bc4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bc62:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <SD_CheckStatus+0x38>)
 800bc64:	2201      	movs	r2, #1
 800bc66:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc68:	f7ff ff7e 	bl	800bb68 <BSP_SD_GetCardState>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d107      	bne.n	800bc82 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bc72:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <SD_CheckStatus+0x38>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	f023 0301 	bic.w	r3, r3, #1
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	4b04      	ldr	r3, [pc, #16]	; (800bc90 <SD_CheckStatus+0x38>)
 800bc80:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bc82:	4b03      	ldr	r3, [pc, #12]	; (800bc90 <SD_CheckStatus+0x38>)
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	b2db      	uxtb	r3, r3
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20000009 	.word	0x20000009

0800bc94 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bc9e:	4b1c      	ldr	r3, [pc, #112]	; (800bd10 <SD_initialize+0x7c>)
 800bca0:	2201      	movs	r2, #1
 800bca2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800bca4:	f001 fea2 	bl	800d9ec <osKernelGetState>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d129      	bne.n	800bd02 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bcae:	f7ff ff01 	bl	800bab4 <BSP_SD_Init>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d107      	bne.n	800bcc8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800bcb8:	79fb      	ldrb	r3, [r7, #7]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff ffcc 	bl	800bc58 <SD_CheckStatus>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	4b12      	ldr	r3, [pc, #72]	; (800bd10 <SD_initialize+0x7c>)
 800bcc6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800bcc8:	4b11      	ldr	r3, [pc, #68]	; (800bd10 <SD_initialize+0x7c>)
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d017      	beq.n	800bd02 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800bcd2:	4b10      	ldr	r3, [pc, #64]	; (800bd14 <SD_initialize+0x80>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d107      	bne.n	800bcea <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2102      	movs	r1, #2
 800bcde:	200a      	movs	r0, #10
 800bce0:	f001 ff8e 	bl	800dc00 <osMessageQueueNew>
 800bce4:	4603      	mov	r3, r0
 800bce6:	4a0b      	ldr	r2, [pc, #44]	; (800bd14 <SD_initialize+0x80>)
 800bce8:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800bcea:	4b0a      	ldr	r3, [pc, #40]	; (800bd14 <SD_initialize+0x80>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d107      	bne.n	800bd02 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800bcf2:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <SD_initialize+0x7c>)
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	f043 0301 	orr.w	r3, r3, #1
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	4b04      	ldr	r3, [pc, #16]	; (800bd10 <SD_initialize+0x7c>)
 800bd00:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bd02:	4b03      	ldr	r3, [pc, #12]	; (800bd10 <SD_initialize+0x7c>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	b2db      	uxtb	r3, r3
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	20000009 	.word	0x20000009
 800bd14:	200001dc 	.word	0x200001dc

0800bd18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff ff97 	bl	800bc58 <SD_CheckStatus>
 800bd2a:	4603      	mov	r3, r0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b088      	sub	sp, #32
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	607a      	str	r2, [r7, #4]
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	4603      	mov	r3, r0
 800bd42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bd48:	f247 5030 	movw	r0, #30000	; 0x7530
 800bd4c:	f7ff ff66 	bl	800bc1c <SD_CheckStatusWithTimeout>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	da01      	bge.n	800bd5a <SD_read+0x26>
  {
    return res;
 800bd56:	7ffb      	ldrb	r3, [r7, #31]
 800bd58:	e02f      	b.n	800bdba <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	6879      	ldr	r1, [r7, #4]
 800bd5e:	68b8      	ldr	r0, [r7, #8]
 800bd60:	f7ff fece 	bl	800bb00 <BSP_SD_ReadBlocks_DMA>
 800bd64:	4603      	mov	r3, r0
 800bd66:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800bd68:	7fbb      	ldrb	r3, [r7, #30]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d124      	bne.n	800bdb8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bd6e:	4b15      	ldr	r3, [pc, #84]	; (800bdc4 <SD_read+0x90>)
 800bd70:	6818      	ldr	r0, [r3, #0]
 800bd72:	f107 0112 	add.w	r1, r7, #18
 800bd76:	f247 5330 	movw	r3, #30000	; 0x7530
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f002 f814 	bl	800dda8 <osMessageQueueGet>
 800bd80:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d117      	bne.n	800bdb8 <SD_read+0x84>
 800bd88:	8a7b      	ldrh	r3, [r7, #18]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d114      	bne.n	800bdb8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800bd8e:	f001 fe75 	bl	800da7c <osKernelGetTickCount>
 800bd92:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bd94:	e007      	b.n	800bda6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd96:	f7ff fee7 	bl	800bb68 <BSP_SD_GetCardState>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d102      	bne.n	800bda6 <SD_read+0x72>
              {
                res = RES_OK;
 800bda0:	2300      	movs	r3, #0
 800bda2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bda4:	e008      	b.n	800bdb8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bda6:	f001 fe69 	bl	800da7c <osKernelGetTickCount>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	f247 522f 	movw	r2, #29999	; 0x752f
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d9ee      	bls.n	800bd96 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bdb8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3720      	adds	r7, #32
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	200001dc 	.word	0x200001dc

0800bdc8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
 800bdd2:	603b      	str	r3, [r7, #0]
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdd8:	2301      	movs	r3, #1
 800bdda:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bddc:	f247 5030 	movw	r0, #30000	; 0x7530
 800bde0:	f7ff ff1c 	bl	800bc1c <SD_CheckStatusWithTimeout>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	da01      	bge.n	800bdee <SD_write+0x26>
  {
    return res;
 800bdea:	7ffb      	ldrb	r3, [r7, #31]
 800bdec:	e02d      	b.n	800be4a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	6879      	ldr	r1, [r7, #4]
 800bdf2:	68b8      	ldr	r0, [r7, #8]
 800bdf4:	f7ff fe9e 	bl	800bb34 <BSP_SD_WriteBlocks_DMA>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d124      	bne.n	800be48 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bdfe:	4b15      	ldr	r3, [pc, #84]	; (800be54 <SD_write+0x8c>)
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	f107 0112 	add.w	r1, r7, #18
 800be06:	f247 5330 	movw	r3, #30000	; 0x7530
 800be0a:	2200      	movs	r2, #0
 800be0c:	f001 ffcc 	bl	800dda8 <osMessageQueueGet>
 800be10:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d117      	bne.n	800be48 <SD_write+0x80>
 800be18:	8a7b      	ldrh	r3, [r7, #18]
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d114      	bne.n	800be48 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800be1e:	f001 fe2d 	bl	800da7c <osKernelGetTickCount>
 800be22:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800be24:	e007      	b.n	800be36 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be26:	f7ff fe9f 	bl	800bb68 <BSP_SD_GetCardState>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d102      	bne.n	800be36 <SD_write+0x6e>
          {
            res = RES_OK;
 800be30:	2300      	movs	r3, #0
 800be32:	77fb      	strb	r3, [r7, #31]
            break;
 800be34:	e008      	b.n	800be48 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800be36:	f001 fe21 	bl	800da7c <osKernelGetTickCount>
 800be3a:	4602      	mov	r2, r0
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	f247 522f 	movw	r2, #29999	; 0x752f
 800be44:	4293      	cmp	r3, r2
 800be46:	d9ee      	bls.n	800be26 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800be48:	7ffb      	ldrb	r3, [r7, #31]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3720      	adds	r7, #32
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	200001dc 	.word	0x200001dc

0800be58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b08c      	sub	sp, #48	; 0x30
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	603a      	str	r2, [r7, #0]
 800be62:	71fb      	strb	r3, [r7, #7]
 800be64:	460b      	mov	r3, r1
 800be66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be6e:	4b25      	ldr	r3, [pc, #148]	; (800bf04 <SD_ioctl+0xac>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	b2db      	uxtb	r3, r3
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d001      	beq.n	800be80 <SD_ioctl+0x28>
 800be7c:	2303      	movs	r3, #3
 800be7e:	e03c      	b.n	800befa <SD_ioctl+0xa2>

  switch (cmd)
 800be80:	79bb      	ldrb	r3, [r7, #6]
 800be82:	2b03      	cmp	r3, #3
 800be84:	d834      	bhi.n	800bef0 <SD_ioctl+0x98>
 800be86:	a201      	add	r2, pc, #4	; (adr r2, 800be8c <SD_ioctl+0x34>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800be9d 	.word	0x0800be9d
 800be90:	0800bea5 	.word	0x0800bea5
 800be94:	0800bebd 	.word	0x0800bebd
 800be98:	0800bed7 	.word	0x0800bed7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bea2:	e028      	b.n	800bef6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bea4:	f107 0308 	add.w	r3, r7, #8
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7ff fe6d 	bl	800bb88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800beae:	6a3a      	ldr	r2, [r7, #32]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800beba:	e01c      	b.n	800bef6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bebc:	f107 0308 	add.w	r3, r7, #8
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7ff fe61 	bl	800bb88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec8:	b29a      	uxth	r2, r3
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bed4:	e00f      	b.n	800bef6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bed6:	f107 0308 	add.w	r3, r7, #8
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff fe54 	bl	800bb88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	0a5a      	lsrs	r2, r3, #9
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800beee:	e002      	b.n	800bef6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bef0:	2304      	movs	r3, #4
 800bef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800befa:	4618      	mov	r0, r3
 800befc:	3730      	adds	r7, #48	; 0x30
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	20000009 	.word	0x20000009

0800bf08 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800bf0e:	2302      	movs	r3, #2
 800bf10:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800bf12:	4b05      	ldr	r3, [pc, #20]	; (800bf28 <BSP_SD_WriteCpltCallback+0x20>)
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	1db9      	adds	r1, r7, #6
 800bf18:	2300      	movs	r3, #0
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f001 fee4 	bl	800dce8 <osMessageQueuePut>
#endif
}
 800bf20:	bf00      	nop
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	200001dc 	.word	0x200001dc

0800bf2c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800bf32:	2301      	movs	r3, #1
 800bf34:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800bf36:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <BSP_SD_ReadCpltCallback+0x20>)
 800bf38:	6818      	ldr	r0, [r3, #0]
 800bf3a:	1db9      	adds	r1, r7, #6
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f001 fed2 	bl	800dce8 <osMessageQueuePut>
#endif
}
 800bf44:	bf00      	nop
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	200001dc 	.word	0x200001dc

0800bf50 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf5c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bf60:	f005 fa9e 	bl	80114a0 <USBD_static_malloc>
 800bf64:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d105      	bne.n	800bf78 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bf74:	2302      	movs	r3, #2
 800bf76:	e066      	b.n	800c046 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68fa      	ldr	r2, [r7, #12]
 800bf7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	7c1b      	ldrb	r3, [r3, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d119      	bne.n	800bfbc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	2181      	movs	r1, #129	; 0x81
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f005 f871 	bl	8011078 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfa0:	2202      	movs	r2, #2
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f005 f867 	bl	8011078 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2201      	movs	r2, #1
 800bfae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2210      	movs	r2, #16
 800bfb6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bfba:	e016      	b.n	800bfea <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bfbc:	2340      	movs	r3, #64	; 0x40
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	2181      	movs	r1, #129	; 0x81
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f005 f858 	bl	8011078 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bfce:	2340      	movs	r3, #64	; 0x40
 800bfd0:	2202      	movs	r2, #2
 800bfd2:	2101      	movs	r1, #1
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f005 f84f 	bl	8011078 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2210      	movs	r2, #16
 800bfe6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bfea:	2308      	movs	r3, #8
 800bfec:	2203      	movs	r2, #3
 800bfee:	2182      	movs	r1, #130	; 0x82
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f005 f841 	bl	8011078 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2201      	movs	r2, #1
 800bffa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2200      	movs	r2, #0
 800c014:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7c1b      	ldrb	r3, [r3, #16]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d109      	bne.n	800c034 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c02a:	2101      	movs	r1, #1
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f005 f99d 	bl	801136c <USBD_LL_PrepareReceive>
 800c032:	e007      	b.n	800c044 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c03a:	2340      	movs	r3, #64	; 0x40
 800c03c:	2101      	movs	r1, #1
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f005 f994 	bl	801136c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3710      	adds	r7, #16
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c05a:	2181      	movs	r1, #129	; 0x81
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f005 f849 	bl	80110f4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c068:	2101      	movs	r1, #1
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f005 f842 	bl	80110f4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c078:	2182      	movs	r1, #130	; 0x82
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f005 f83a 	bl	80110f4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00e      	beq.n	800c0b8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f005 fa06 	bl	80114bc <USBD_static_free>
    pdev->pClassData = NULL;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
	...

0800c0c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d101      	bne.n	800c0ec <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c0e8:	2303      	movs	r3, #3
 800c0ea:	e0af      	b.n	800c24c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d03f      	beq.n	800c178 <USBD_CDC_Setup+0xb4>
 800c0f8:	2b20      	cmp	r3, #32
 800c0fa:	f040 809f 	bne.w	800c23c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	88db      	ldrh	r3, [r3, #6]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d02e      	beq.n	800c164 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	b25b      	sxtb	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	da16      	bge.n	800c13e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	683a      	ldr	r2, [r7, #0]
 800c11a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c11c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	88d2      	ldrh	r2, [r2, #6]
 800c122:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	88db      	ldrh	r3, [r3, #6]
 800c128:	2b07      	cmp	r3, #7
 800c12a:	bf28      	it	cs
 800c12c:	2307      	movcs	r3, #7
 800c12e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	89fa      	ldrh	r2, [r7, #14]
 800c134:	4619      	mov	r1, r3
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f001 fb13 	bl	800d762 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c13c:	e085      	b.n	800c24a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	785a      	ldrb	r2, [r3, #1]
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	88db      	ldrh	r3, [r3, #6]
 800c14c:	b2da      	uxtb	r2, r3
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c154:	6939      	ldr	r1, [r7, #16]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	88db      	ldrh	r3, [r3, #6]
 800c15a:	461a      	mov	r2, r3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f001 fb2c 	bl	800d7ba <USBD_CtlPrepareRx>
      break;
 800c162:	e072      	b.n	800c24a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	683a      	ldr	r2, [r7, #0]
 800c16e:	7850      	ldrb	r0, [r2, #1]
 800c170:	2200      	movs	r2, #0
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	4798      	blx	r3
      break;
 800c176:	e068      	b.n	800c24a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	785b      	ldrb	r3, [r3, #1]
 800c17c:	2b0b      	cmp	r3, #11
 800c17e:	d852      	bhi.n	800c226 <USBD_CDC_Setup+0x162>
 800c180:	a201      	add	r2, pc, #4	; (adr r2, 800c188 <USBD_CDC_Setup+0xc4>)
 800c182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c186:	bf00      	nop
 800c188:	0800c1b9 	.word	0x0800c1b9
 800c18c:	0800c235 	.word	0x0800c235
 800c190:	0800c227 	.word	0x0800c227
 800c194:	0800c227 	.word	0x0800c227
 800c198:	0800c227 	.word	0x0800c227
 800c19c:	0800c227 	.word	0x0800c227
 800c1a0:	0800c227 	.word	0x0800c227
 800c1a4:	0800c227 	.word	0x0800c227
 800c1a8:	0800c227 	.word	0x0800c227
 800c1ac:	0800c227 	.word	0x0800c227
 800c1b0:	0800c1e3 	.word	0x0800c1e3
 800c1b4:	0800c20d 	.word	0x0800c20d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	2b03      	cmp	r3, #3
 800c1c2:	d107      	bne.n	800c1d4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c1c4:	f107 030a 	add.w	r3, r7, #10
 800c1c8:	2202      	movs	r2, #2
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f001 fac8 	bl	800d762 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1d2:	e032      	b.n	800c23a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c1d4:	6839      	ldr	r1, [r7, #0]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f001 fa52 	bl	800d680 <USBD_CtlError>
            ret = USBD_FAIL;
 800c1dc:	2303      	movs	r3, #3
 800c1de:	75fb      	strb	r3, [r7, #23]
          break;
 800c1e0:	e02b      	b.n	800c23a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d107      	bne.n	800c1fe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c1ee:	f107 030d 	add.w	r3, r7, #13
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f001 fab3 	bl	800d762 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1fc:	e01d      	b.n	800c23a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f001 fa3d 	bl	800d680 <USBD_CtlError>
            ret = USBD_FAIL;
 800c206:	2303      	movs	r3, #3
 800c208:	75fb      	strb	r3, [r7, #23]
          break;
 800c20a:	e016      	b.n	800c23a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c212:	b2db      	uxtb	r3, r3
 800c214:	2b03      	cmp	r3, #3
 800c216:	d00f      	beq.n	800c238 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c218:	6839      	ldr	r1, [r7, #0]
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f001 fa30 	bl	800d680 <USBD_CtlError>
            ret = USBD_FAIL;
 800c220:	2303      	movs	r3, #3
 800c222:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c224:	e008      	b.n	800c238 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f001 fa29 	bl	800d680 <USBD_CtlError>
          ret = USBD_FAIL;
 800c22e:	2303      	movs	r3, #3
 800c230:	75fb      	strb	r3, [r7, #23]
          break;
 800c232:	e002      	b.n	800c23a <USBD_CDC_Setup+0x176>
          break;
 800c234:	bf00      	nop
 800c236:	e008      	b.n	800c24a <USBD_CDC_Setup+0x186>
          break;
 800c238:	bf00      	nop
      }
      break;
 800c23a:	e006      	b.n	800c24a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f001 fa1e 	bl	800d680 <USBD_CtlError>
      ret = USBD_FAIL;
 800c244:	2303      	movs	r3, #3
 800c246:	75fb      	strb	r3, [r7, #23]
      break;
 800c248:	bf00      	nop
  }

  return (uint8_t)ret;
 800c24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3718      	adds	r7, #24
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c266:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d101      	bne.n	800c276 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c272:	2303      	movs	r3, #3
 800c274:	e04f      	b.n	800c316 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c27c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c27e:	78fa      	ldrb	r2, [r7, #3]
 800c280:	6879      	ldr	r1, [r7, #4]
 800c282:	4613      	mov	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4413      	add	r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	440b      	add	r3, r1
 800c28c:	3318      	adds	r3, #24
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d029      	beq.n	800c2e8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c294:	78fa      	ldrb	r2, [r7, #3]
 800c296:	6879      	ldr	r1, [r7, #4]
 800c298:	4613      	mov	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4413      	add	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	440b      	add	r3, r1
 800c2a2:	3318      	adds	r3, #24
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	78f9      	ldrb	r1, [r7, #3]
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	00db      	lsls	r3, r3, #3
 800c2ae:	1a5b      	subs	r3, r3, r1
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4403      	add	r3, r0
 800c2b4:	3344      	adds	r3, #68	; 0x44
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c2bc:	fb03 f301 	mul.w	r3, r3, r1
 800c2c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d110      	bne.n	800c2e8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c2c6:	78fa      	ldrb	r2, [r7, #3]
 800c2c8:	6879      	ldr	r1, [r7, #4]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	440b      	add	r3, r1
 800c2d4:	3318      	adds	r3, #24
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c2da:	78f9      	ldrb	r1, [r7, #3]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	2200      	movs	r2, #0
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f005 f80b 	bl	80112fc <USBD_LL_Transmit>
 800c2e6:	e015      	b.n	800c314 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00b      	beq.n	800c314 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c302:	691b      	ldr	r3, [r3, #16]
 800c304:	68ba      	ldr	r2, [r7, #8]
 800c306:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c310:	78fa      	ldrb	r2, [r7, #3]
 800c312:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b084      	sub	sp, #16
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	460b      	mov	r3, r1
 800c328:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c330:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c33c:	2303      	movs	r3, #3
 800c33e:	e015      	b.n	800c36c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c340:	78fb      	ldrb	r3, [r7, #3]
 800c342:	4619      	mov	r1, r3
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f005 f849 	bl	80113dc <USBD_LL_GetRxDataSize>
 800c34a:	4602      	mov	r2, r0
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c366:	4611      	mov	r1, r2
 800c368:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c382:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d101      	bne.n	800c38e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c38a:	2303      	movs	r3, #3
 800c38c:	e01b      	b.n	800c3c6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d015      	beq.n	800c3c4 <USBD_CDC_EP0_RxReady+0x50>
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c39e:	2bff      	cmp	r3, #255	; 0xff
 800c3a0:	d010      	beq.n	800c3c4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c3b0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c3b8:	b292      	uxth	r2, r2
 800c3ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	22ff      	movs	r2, #255	; 0xff
 800c3c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
	...

0800c3d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2243      	movs	r2, #67	; 0x43
 800c3dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c3de:	4b03      	ldr	r3, [pc, #12]	; (800c3ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	20000094 	.word	0x20000094

0800c3f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2243      	movs	r2, #67	; 0x43
 800c3fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c3fe:	4b03      	ldr	r3, [pc, #12]	; (800c40c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c400:	4618      	mov	r0, r3
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	20000050 	.word	0x20000050

0800c410 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2243      	movs	r2, #67	; 0x43
 800c41c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c41e:	4b03      	ldr	r3, [pc, #12]	; (800c42c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c420:	4618      	mov	r0, r3
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	200000d8 	.word	0x200000d8

0800c430 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	220a      	movs	r2, #10
 800c43c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c43e:	4b03      	ldr	r3, [pc, #12]	; (800c44c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c440:	4618      	mov	r0, r3
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr
 800c44c:	2000000c 	.word	0x2000000c

0800c450 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c460:	2303      	movs	r3, #3
 800c462:	e004      	b.n	800c46e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b087      	sub	sp, #28
 800c47e:	af00      	add	r7, sp, #0
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	60b9      	str	r1, [r7, #8]
 800c484:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c48c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d101      	bne.n	800c498 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c494:	2303      	movs	r3, #3
 800c496:	e008      	b.n	800c4aa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	371c      	adds	r7, #28
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b085      	sub	sp, #20
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c4ce:	2303      	movs	r3, #3
 800c4d0:	e004      	b.n	800c4dc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	683a      	ldr	r2, [r7, #0]
 800c4d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c4da:	2300      	movs	r3, #0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d101      	bne.n	800c506 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c502:	2303      	movs	r3, #3
 800c504:	e016      	b.n	800c534 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	7c1b      	ldrb	r3, [r3, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d109      	bne.n	800c522 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c514:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c518:	2101      	movs	r1, #1
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f004 ff26 	bl	801136c <USBD_LL_PrepareReceive>
 800c520:	e007      	b.n	800c532 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c528:	2340      	movs	r3, #64	; 0x40
 800c52a:	2101      	movs	r1, #1
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f004 ff1d 	bl	801136c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	4613      	mov	r3, r2
 800c548:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c550:	2303      	movs	r3, #3
 800c552:	e01f      	b.n	800c594 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d003      	beq.n	800c57a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2201      	movs	r2, #1
 800c57e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	79fa      	ldrb	r2, [r7, #7]
 800c586:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f004 fcf9 	bl	8010f80 <USBD_LL_Init>
 800c58e:	4603      	mov	r3, r0
 800c590:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c592:	7dfb      	ldrb	r3, [r7, #23]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	e016      	b.n	800c5e2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	683a      	ldr	r2, [r7, #0]
 800c5b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00b      	beq.n	800c5e0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d0:	f107 020e 	add.w	r2, r7, #14
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	4798      	blx	r3
 800c5d8:	4602      	mov	r2, r0
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b082      	sub	sp, #8
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f004 fd0e 	bl	8011014 <USBD_LL_Start>
 800c5f8:	4603      	mov	r3, r0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c602:	b480      	push	{r7}
 800c604:	b083      	sub	sp, #12
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	460b      	mov	r3, r1
 800c622:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c624:	2303      	movs	r3, #3
 800c626:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d009      	beq.n	800c646 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	78fa      	ldrb	r2, [r7, #3]
 800c63c:	4611      	mov	r1, r2
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	4798      	blx	r3
 800c642:	4603      	mov	r3, r0
 800c644:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c646:	7bfb      	ldrb	r3, [r7, #15]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3710      	adds	r7, #16
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c662:	2b00      	cmp	r3, #0
 800c664:	d007      	beq.n	800c676 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	78fa      	ldrb	r2, [r7, #3]
 800c670:	4611      	mov	r1, r2
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	4798      	blx	r3
  }

  return USBD_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	4618      	mov	r0, r3
 800c694:	f000 ffba 	bl	800d60c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c6b4:	f003 031f 	and.w	r3, r3, #31
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d01a      	beq.n	800c6f2 <USBD_LL_SetupStage+0x72>
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d822      	bhi.n	800c706 <USBD_LL_SetupStage+0x86>
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d002      	beq.n	800c6ca <USBD_LL_SetupStage+0x4a>
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d00a      	beq.n	800c6de <USBD_LL_SetupStage+0x5e>
 800c6c8:	e01d      	b.n	800c706 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 fa62 	bl	800cb9c <USBD_StdDevReq>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	73fb      	strb	r3, [r7, #15]
      break;
 800c6dc:	e020      	b.n	800c720 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fac6 	bl	800cc78 <USBD_StdItfReq>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c6f0:	e016      	b.n	800c720 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fb05 	bl	800cd0a <USBD_StdEPReq>
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]
      break;
 800c704:	e00c      	b.n	800c720 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c70c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c710:	b2db      	uxtb	r3, r3
 800c712:	4619      	mov	r1, r3
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f004 fd23 	bl	8011160 <USBD_LL_StallEP>
 800c71a:	4603      	mov	r3, r0
 800c71c:	73fb      	strb	r3, [r7, #15]
      break;
 800c71e:	bf00      	nop
  }

  return ret;
 800c720:	7bfb      	ldrb	r3, [r7, #15]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b086      	sub	sp, #24
 800c72e:	af00      	add	r7, sp, #0
 800c730:	60f8      	str	r0, [r7, #12]
 800c732:	460b      	mov	r3, r1
 800c734:	607a      	str	r2, [r7, #4]
 800c736:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c738:	7afb      	ldrb	r3, [r7, #11]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d138      	bne.n	800c7b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c744:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c74c:	2b03      	cmp	r3, #3
 800c74e:	d14a      	bne.n	800c7e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	689a      	ldr	r2, [r3, #8]
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d913      	bls.n	800c784 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	1ad2      	subs	r2, r2, r3
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	68da      	ldr	r2, [r3, #12]
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	4293      	cmp	r3, r2
 800c774:	bf28      	it	cs
 800c776:	4613      	movcs	r3, r2
 800c778:	461a      	mov	r2, r3
 800c77a:	6879      	ldr	r1, [r7, #4]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f001 f839 	bl	800d7f4 <USBD_CtlContinueRx>
 800c782:	e030      	b.n	800c7e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	2b03      	cmp	r3, #3
 800c78e:	d10b      	bne.n	800c7a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d005      	beq.n	800c7a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	f001 f834 	bl	800d816 <USBD_CtlSendStatus>
 800c7ae:	e01a      	b.n	800c7e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	2b03      	cmp	r3, #3
 800c7ba:	d114      	bne.n	800c7e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00e      	beq.n	800c7e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ce:	699b      	ldr	r3, [r3, #24]
 800c7d0:	7afa      	ldrb	r2, [r7, #11]
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	4798      	blx	r3
 800c7d8:	4603      	mov	r3, r0
 800c7da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c7dc:	7dfb      	ldrb	r3, [r7, #23]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d001      	beq.n	800c7e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c7e2:	7dfb      	ldrb	r3, [r7, #23]
 800c7e4:	e000      	b.n	800c7e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c7fe:	7afb      	ldrb	r3, [r7, #11]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d16b      	bne.n	800c8dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	3314      	adds	r3, #20
 800c808:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c810:	2b02      	cmp	r3, #2
 800c812:	d156      	bne.n	800c8c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	689a      	ldr	r2, [r3, #8]
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d914      	bls.n	800c84a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	689a      	ldr	r2, [r3, #8]
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	1ad2      	subs	r2, r2, r3
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	461a      	mov	r2, r3
 800c834:	6879      	ldr	r1, [r7, #4]
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f000 ffae 	bl	800d798 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c83c:	2300      	movs	r3, #0
 800c83e:	2200      	movs	r2, #0
 800c840:	2100      	movs	r1, #0
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f004 fd92 	bl	801136c <USBD_LL_PrepareReceive>
 800c848:	e03b      	b.n	800c8c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	68da      	ldr	r2, [r3, #12]
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	429a      	cmp	r2, r3
 800c854:	d11c      	bne.n	800c890 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c85e:	429a      	cmp	r2, r3
 800c860:	d316      	bcc.n	800c890 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d20f      	bcs.n	800c890 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c870:	2200      	movs	r2, #0
 800c872:	2100      	movs	r1, #0
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f000 ff8f 	bl	800d798 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c882:	2300      	movs	r3, #0
 800c884:	2200      	movs	r2, #0
 800c886:	2100      	movs	r1, #0
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f004 fd6f 	bl	801136c <USBD_LL_PrepareReceive>
 800c88e:	e018      	b.n	800c8c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b03      	cmp	r3, #3
 800c89a:	d10b      	bne.n	800c8b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d005      	beq.n	800c8b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8b4:	2180      	movs	r1, #128	; 0x80
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f004 fc52 	bl	8011160 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f000 ffbd 	bl	800d83c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d122      	bne.n	800c912 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f7ff fe98 	bl	800c602 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c8da:	e01a      	b.n	800c912 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d114      	bne.n	800c912 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ee:	695b      	ldr	r3, [r3, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d00e      	beq.n	800c912 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	7afa      	ldrb	r2, [r7, #11]
 800c8fe:	4611      	mov	r1, r2
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	4798      	blx	r3
 800c904:	4603      	mov	r3, r0
 800c906:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	e000      	b.n	800c914 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c912:	2300      	movs	r3, #0
}
 800c914:	4618      	mov	r0, r3
 800c916:	3718      	adds	r7, #24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2201      	movs	r2, #1
 800c928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d101      	bne.n	800c950 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c94c:	2303      	movs	r3, #3
 800c94e:	e02f      	b.n	800c9b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00f      	beq.n	800c97a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d009      	beq.n	800c97a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	6852      	ldr	r2, [r2, #4]
 800c972:	b2d2      	uxtb	r2, r2
 800c974:	4611      	mov	r1, r2
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c97a:	2340      	movs	r3, #64	; 0x40
 800c97c:	2200      	movs	r2, #0
 800c97e:	2100      	movs	r1, #0
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f004 fb79 	bl	8011078 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2201      	movs	r2, #1
 800c98a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2240      	movs	r2, #64	; 0x40
 800c992:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c996:	2340      	movs	r3, #64	; 0x40
 800c998:	2200      	movs	r2, #0
 800c99a:	2180      	movs	r1, #128	; 0x80
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f004 fb6b 	bl	8011078 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2240      	movs	r2, #64	; 0x40
 800c9ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	78fa      	ldrb	r2, [r7, #3]
 800c9c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c9ca:	2300      	movs	r3, #0
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2204      	movs	r2, #4
 800c9f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	2b04      	cmp	r3, #4
 800ca16:	d106      	bne.n	800ca26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ca46:	2303      	movs	r3, #3
 800ca48:	e012      	b.n	800ca70 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d10b      	bne.n	800ca6e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca5c:	69db      	ldr	r3, [r3, #28]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d005      	beq.n	800ca6e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca68:	69db      	ldr	r3, [r3, #28]
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e014      	b.n	800cabc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	d10d      	bne.n	800caba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d007      	beq.n	800caba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	78fa      	ldrb	r2, [r7, #3]
 800cab4:	4611      	mov	r1, r2
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	460b      	mov	r3, r1
 800cace:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800cada:	2303      	movs	r3, #3
 800cadc:	e014      	b.n	800cb08 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	2b03      	cmp	r3, #3
 800cae8:	d10d      	bne.n	800cb06 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d007      	beq.n	800cb06 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafe:	78fa      	ldrb	r2, [r7, #3]
 800cb00:	4611      	mov	r1, r2
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	370c      	adds	r7, #12
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b082      	sub	sp, #8
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2201      	movs	r2, #1
 800cb32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d009      	beq.n	800cb54 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	6852      	ldr	r2, [r2, #4]
 800cb4c:	b2d2      	uxtb	r2, r2
 800cb4e:	4611      	mov	r1, r2
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	4798      	blx	r3
  }

  return USBD_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b087      	sub	sp, #28
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	3301      	adds	r3, #1
 800cb74:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cb7c:	8a3b      	ldrh	r3, [r7, #16]
 800cb7e:	021b      	lsls	r3, r3, #8
 800cb80:	b21a      	sxth	r2, r3
 800cb82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	b21b      	sxth	r3, r3
 800cb8a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cb8c:	89fb      	ldrh	r3, [r7, #14]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	371c      	adds	r7, #28
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
	...

0800cb9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cba6:	2300      	movs	r3, #0
 800cba8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbb2:	2b40      	cmp	r3, #64	; 0x40
 800cbb4:	d005      	beq.n	800cbc2 <USBD_StdDevReq+0x26>
 800cbb6:	2b40      	cmp	r3, #64	; 0x40
 800cbb8:	d853      	bhi.n	800cc62 <USBD_StdDevReq+0xc6>
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00b      	beq.n	800cbd6 <USBD_StdDevReq+0x3a>
 800cbbe:	2b20      	cmp	r3, #32
 800cbc0:	d14f      	bne.n	800cc62 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	6839      	ldr	r1, [r7, #0]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	4798      	blx	r3
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73fb      	strb	r3, [r7, #15]
      break;
 800cbd4:	e04a      	b.n	800cc6c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	785b      	ldrb	r3, [r3, #1]
 800cbda:	2b09      	cmp	r3, #9
 800cbdc:	d83b      	bhi.n	800cc56 <USBD_StdDevReq+0xba>
 800cbde:	a201      	add	r2, pc, #4	; (adr r2, 800cbe4 <USBD_StdDevReq+0x48>)
 800cbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe4:	0800cc39 	.word	0x0800cc39
 800cbe8:	0800cc4d 	.word	0x0800cc4d
 800cbec:	0800cc57 	.word	0x0800cc57
 800cbf0:	0800cc43 	.word	0x0800cc43
 800cbf4:	0800cc57 	.word	0x0800cc57
 800cbf8:	0800cc17 	.word	0x0800cc17
 800cbfc:	0800cc0d 	.word	0x0800cc0d
 800cc00:	0800cc57 	.word	0x0800cc57
 800cc04:	0800cc2f 	.word	0x0800cc2f
 800cc08:	0800cc21 	.word	0x0800cc21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cc0c:	6839      	ldr	r1, [r7, #0]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f9de 	bl	800cfd0 <USBD_GetDescriptor>
          break;
 800cc14:	e024      	b.n	800cc60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 fb6d 	bl	800d2f8 <USBD_SetAddress>
          break;
 800cc1e:	e01f      	b.n	800cc60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fbac 	bl	800d380 <USBD_SetConfig>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	73fb      	strb	r3, [r7, #15]
          break;
 800cc2c:	e018      	b.n	800cc60 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 fc4b 	bl	800d4cc <USBD_GetConfig>
          break;
 800cc36:	e013      	b.n	800cc60 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc38:	6839      	ldr	r1, [r7, #0]
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fc7c 	bl	800d538 <USBD_GetStatus>
          break;
 800cc40:	e00e      	b.n	800cc60 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fcab 	bl	800d5a0 <USBD_SetFeature>
          break;
 800cc4a:	e009      	b.n	800cc60 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fcba 	bl	800d5c8 <USBD_ClrFeature>
          break;
 800cc54:	e004      	b.n	800cc60 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fd11 	bl	800d680 <USBD_CtlError>
          break;
 800cc5e:	bf00      	nop
      }
      break;
 800cc60:	e004      	b.n	800cc6c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fd0b 	bl	800d680 <USBD_CtlError>
      break;
 800cc6a:	bf00      	nop
  }

  return ret;
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop

0800cc78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc8e:	2b40      	cmp	r3, #64	; 0x40
 800cc90:	d005      	beq.n	800cc9e <USBD_StdItfReq+0x26>
 800cc92:	2b40      	cmp	r3, #64	; 0x40
 800cc94:	d82f      	bhi.n	800ccf6 <USBD_StdItfReq+0x7e>
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <USBD_StdItfReq+0x26>
 800cc9a:	2b20      	cmp	r3, #32
 800cc9c:	d12b      	bne.n	800ccf6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	3b01      	subs	r3, #1
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d81d      	bhi.n	800cce8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	889b      	ldrh	r3, [r3, #4]
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d813      	bhi.n	800ccde <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	4798      	blx	r3
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	88db      	ldrh	r3, [r3, #6]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d110      	bne.n	800ccf2 <USBD_StdItfReq+0x7a>
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10d      	bne.n	800ccf2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fd9d 	bl	800d816 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ccdc:	e009      	b.n	800ccf2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 fccd 	bl	800d680 <USBD_CtlError>
          break;
 800cce6:	e004      	b.n	800ccf2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cce8:	6839      	ldr	r1, [r7, #0]
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 fcc8 	bl	800d680 <USBD_CtlError>
          break;
 800ccf0:	e000      	b.n	800ccf4 <USBD_StdItfReq+0x7c>
          break;
 800ccf2:	bf00      	nop
      }
      break;
 800ccf4:	e004      	b.n	800cd00 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 fcc1 	bl	800d680 <USBD_CtlError>
      break;
 800ccfe:	bf00      	nop
  }

  return ret;
 800cd00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	889b      	ldrh	r3, [r3, #4]
 800cd1c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd26:	2b40      	cmp	r3, #64	; 0x40
 800cd28:	d007      	beq.n	800cd3a <USBD_StdEPReq+0x30>
 800cd2a:	2b40      	cmp	r3, #64	; 0x40
 800cd2c:	f200 8145 	bhi.w	800cfba <USBD_StdEPReq+0x2b0>
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00c      	beq.n	800cd4e <USBD_StdEPReq+0x44>
 800cd34:	2b20      	cmp	r3, #32
 800cd36:	f040 8140 	bne.w	800cfba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	6839      	ldr	r1, [r7, #0]
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	4798      	blx	r3
 800cd48:	4603      	mov	r3, r0
 800cd4a:	73fb      	strb	r3, [r7, #15]
      break;
 800cd4c:	e13a      	b.n	800cfc4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	785b      	ldrb	r3, [r3, #1]
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d007      	beq.n	800cd66 <USBD_StdEPReq+0x5c>
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	f300 8129 	bgt.w	800cfae <USBD_StdEPReq+0x2a4>
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d07f      	beq.n	800ce60 <USBD_StdEPReq+0x156>
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d03c      	beq.n	800cdde <USBD_StdEPReq+0xd4>
 800cd64:	e123      	b.n	800cfae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd6c:	b2db      	uxtb	r3, r3
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d002      	beq.n	800cd78 <USBD_StdEPReq+0x6e>
 800cd72:	2b03      	cmp	r3, #3
 800cd74:	d016      	beq.n	800cda4 <USBD_StdEPReq+0x9a>
 800cd76:	e02c      	b.n	800cdd2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd78:	7bbb      	ldrb	r3, [r7, #14]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00d      	beq.n	800cd9a <USBD_StdEPReq+0x90>
 800cd7e:	7bbb      	ldrb	r3, [r7, #14]
 800cd80:	2b80      	cmp	r3, #128	; 0x80
 800cd82:	d00a      	beq.n	800cd9a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd84:	7bbb      	ldrb	r3, [r7, #14]
 800cd86:	4619      	mov	r1, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f004 f9e9 	bl	8011160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd8e:	2180      	movs	r1, #128	; 0x80
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f004 f9e5 	bl	8011160 <USBD_LL_StallEP>
 800cd96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd98:	e020      	b.n	800cddc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cd9a:	6839      	ldr	r1, [r7, #0]
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fc6f 	bl	800d680 <USBD_CtlError>
              break;
 800cda2:	e01b      	b.n	800cddc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	885b      	ldrh	r3, [r3, #2]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10e      	bne.n	800cdca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cdac:	7bbb      	ldrb	r3, [r7, #14]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00b      	beq.n	800cdca <USBD_StdEPReq+0xc0>
 800cdb2:	7bbb      	ldrb	r3, [r7, #14]
 800cdb4:	2b80      	cmp	r3, #128	; 0x80
 800cdb6:	d008      	beq.n	800cdca <USBD_StdEPReq+0xc0>
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	88db      	ldrh	r3, [r3, #6]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d104      	bne.n	800cdca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdc0:	7bbb      	ldrb	r3, [r7, #14]
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f004 f9cb 	bl	8011160 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fd23 	bl	800d816 <USBD_CtlSendStatus>

              break;
 800cdd0:	e004      	b.n	800cddc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fc53 	bl	800d680 <USBD_CtlError>
              break;
 800cdda:	bf00      	nop
          }
          break;
 800cddc:	e0ec      	b.n	800cfb8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d002      	beq.n	800cdf0 <USBD_StdEPReq+0xe6>
 800cdea:	2b03      	cmp	r3, #3
 800cdec:	d016      	beq.n	800ce1c <USBD_StdEPReq+0x112>
 800cdee:	e030      	b.n	800ce52 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdf0:	7bbb      	ldrb	r3, [r7, #14]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00d      	beq.n	800ce12 <USBD_StdEPReq+0x108>
 800cdf6:	7bbb      	ldrb	r3, [r7, #14]
 800cdf8:	2b80      	cmp	r3, #128	; 0x80
 800cdfa:	d00a      	beq.n	800ce12 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdfc:	7bbb      	ldrb	r3, [r7, #14]
 800cdfe:	4619      	mov	r1, r3
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f004 f9ad 	bl	8011160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce06:	2180      	movs	r1, #128	; 0x80
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f004 f9a9 	bl	8011160 <USBD_LL_StallEP>
 800ce0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce10:	e025      	b.n	800ce5e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ce12:	6839      	ldr	r1, [r7, #0]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 fc33 	bl	800d680 <USBD_CtlError>
              break;
 800ce1a:	e020      	b.n	800ce5e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	885b      	ldrh	r3, [r3, #2]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d11b      	bne.n	800ce5c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ce24:	7bbb      	ldrb	r3, [r7, #14]
 800ce26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d004      	beq.n	800ce38 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce2e:	7bbb      	ldrb	r3, [r7, #14]
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f004 f9ca 	bl	80111cc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 fcec 	bl	800d816 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	4798      	blx	r3
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ce50:	e004      	b.n	800ce5c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ce52:	6839      	ldr	r1, [r7, #0]
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 fc13 	bl	800d680 <USBD_CtlError>
              break;
 800ce5a:	e000      	b.n	800ce5e <USBD_StdEPReq+0x154>
              break;
 800ce5c:	bf00      	nop
          }
          break;
 800ce5e:	e0ab      	b.n	800cfb8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce66:	b2db      	uxtb	r3, r3
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d002      	beq.n	800ce72 <USBD_StdEPReq+0x168>
 800ce6c:	2b03      	cmp	r3, #3
 800ce6e:	d032      	beq.n	800ced6 <USBD_StdEPReq+0x1cc>
 800ce70:	e097      	b.n	800cfa2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce72:	7bbb      	ldrb	r3, [r7, #14]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d007      	beq.n	800ce88 <USBD_StdEPReq+0x17e>
 800ce78:	7bbb      	ldrb	r3, [r7, #14]
 800ce7a:	2b80      	cmp	r3, #128	; 0x80
 800ce7c:	d004      	beq.n	800ce88 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 fbfd 	bl	800d680 <USBD_CtlError>
                break;
 800ce86:	e091      	b.n	800cfac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	da0b      	bge.n	800cea8 <USBD_StdEPReq+0x19e>
 800ce90:	7bbb      	ldrb	r3, [r7, #14]
 800ce92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce96:	4613      	mov	r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	4413      	add	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	3310      	adds	r3, #16
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	4413      	add	r3, r2
 800cea4:	3304      	adds	r3, #4
 800cea6:	e00b      	b.n	800cec0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cea8:	7bbb      	ldrb	r3, [r7, #14]
 800ceaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ceae:	4613      	mov	r3, r2
 800ceb0:	009b      	lsls	r3, r3, #2
 800ceb2:	4413      	add	r3, r2
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	4413      	add	r3, r2
 800cebe:	3304      	adds	r3, #4
 800cec0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	2200      	movs	r2, #0
 800cec6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	2202      	movs	r2, #2
 800cecc:	4619      	mov	r1, r3
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fc47 	bl	800d762 <USBD_CtlSendData>
              break;
 800ced4:	e06a      	b.n	800cfac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ced6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	da11      	bge.n	800cf02 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cede:	7bbb      	ldrb	r3, [r7, #14]
 800cee0:	f003 020f 	and.w	r2, r3, #15
 800cee4:	6879      	ldr	r1, [r7, #4]
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	440b      	add	r3, r1
 800cef0:	3324      	adds	r3, #36	; 0x24
 800cef2:	881b      	ldrh	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d117      	bne.n	800cf28 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fbc0 	bl	800d680 <USBD_CtlError>
                  break;
 800cf00:	e054      	b.n	800cfac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf02:	7bbb      	ldrb	r3, [r7, #14]
 800cf04:	f003 020f 	and.w	r2, r3, #15
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4413      	add	r3, r2
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	440b      	add	r3, r1
 800cf14:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf18:	881b      	ldrh	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d104      	bne.n	800cf28 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 fbad 	bl	800d680 <USBD_CtlError>
                  break;
 800cf26:	e041      	b.n	800cfac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	da0b      	bge.n	800cf48 <USBD_StdEPReq+0x23e>
 800cf30:	7bbb      	ldrb	r3, [r7, #14]
 800cf32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf36:	4613      	mov	r3, r2
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	4413      	add	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	3310      	adds	r3, #16
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	4413      	add	r3, r2
 800cf44:	3304      	adds	r3, #4
 800cf46:	e00b      	b.n	800cf60 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf48:	7bbb      	ldrb	r3, [r7, #14]
 800cf4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf4e:	4613      	mov	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	3304      	adds	r3, #4
 800cf60:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf62:	7bbb      	ldrb	r3, [r7, #14]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <USBD_StdEPReq+0x264>
 800cf68:	7bbb      	ldrb	r3, [r7, #14]
 800cf6a:	2b80      	cmp	r3, #128	; 0x80
 800cf6c:	d103      	bne.n	800cf76 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]
 800cf74:	e00e      	b.n	800cf94 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cf76:	7bbb      	ldrb	r3, [r7, #14]
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f004 f95c 	bl	8011238 <USBD_LL_IsStallEP>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d003      	beq.n	800cf8e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	e002      	b.n	800cf94 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	2200      	movs	r2, #0
 800cf92:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	2202      	movs	r2, #2
 800cf98:	4619      	mov	r1, r3
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fbe1 	bl	800d762 <USBD_CtlSendData>
              break;
 800cfa0:	e004      	b.n	800cfac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cfa2:	6839      	ldr	r1, [r7, #0]
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fb6b 	bl	800d680 <USBD_CtlError>
              break;
 800cfaa:	bf00      	nop
          }
          break;
 800cfac:	e004      	b.n	800cfb8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fb65 	bl	800d680 <USBD_CtlError>
          break;
 800cfb6:	bf00      	nop
      }
      break;
 800cfb8:	e004      	b.n	800cfc4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fb5f 	bl	800d680 <USBD_CtlError>
      break;
 800cfc2:	bf00      	nop
  }

  return ret;
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
	...

0800cfd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	885b      	ldrh	r3, [r3, #2]
 800cfea:	0a1b      	lsrs	r3, r3, #8
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	3b01      	subs	r3, #1
 800cff0:	2b0e      	cmp	r3, #14
 800cff2:	f200 8152 	bhi.w	800d29a <USBD_GetDescriptor+0x2ca>
 800cff6:	a201      	add	r2, pc, #4	; (adr r2, 800cffc <USBD_GetDescriptor+0x2c>)
 800cff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffc:	0800d06d 	.word	0x0800d06d
 800d000:	0800d085 	.word	0x0800d085
 800d004:	0800d0c5 	.word	0x0800d0c5
 800d008:	0800d29b 	.word	0x0800d29b
 800d00c:	0800d29b 	.word	0x0800d29b
 800d010:	0800d23b 	.word	0x0800d23b
 800d014:	0800d267 	.word	0x0800d267
 800d018:	0800d29b 	.word	0x0800d29b
 800d01c:	0800d29b 	.word	0x0800d29b
 800d020:	0800d29b 	.word	0x0800d29b
 800d024:	0800d29b 	.word	0x0800d29b
 800d028:	0800d29b 	.word	0x0800d29b
 800d02c:	0800d29b 	.word	0x0800d29b
 800d030:	0800d29b 	.word	0x0800d29b
 800d034:	0800d039 	.word	0x0800d039
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d03e:	69db      	ldr	r3, [r3, #28]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00b      	beq.n	800d05c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d04a:	69db      	ldr	r3, [r3, #28]
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	7c12      	ldrb	r2, [r2, #16]
 800d050:	f107 0108 	add.w	r1, r7, #8
 800d054:	4610      	mov	r0, r2
 800d056:	4798      	blx	r3
 800d058:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d05a:	e126      	b.n	800d2aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fb0e 	bl	800d680 <USBD_CtlError>
        err++;
 800d064:	7afb      	ldrb	r3, [r7, #11]
 800d066:	3301      	adds	r3, #1
 800d068:	72fb      	strb	r3, [r7, #11]
      break;
 800d06a:	e11e      	b.n	800d2aa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	7c12      	ldrb	r2, [r2, #16]
 800d078:	f107 0108 	add.w	r1, r7, #8
 800d07c:	4610      	mov	r0, r2
 800d07e:	4798      	blx	r3
 800d080:	60f8      	str	r0, [r7, #12]
      break;
 800d082:	e112      	b.n	800d2aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	7c1b      	ldrb	r3, [r3, #16]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d10d      	bne.n	800d0a8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d094:	f107 0208 	add.w	r2, r7, #8
 800d098:	4610      	mov	r0, r2
 800d09a:	4798      	blx	r3
 800d09c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d0a6:	e100      	b.n	800d2aa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b0:	f107 0208 	add.w	r2, r7, #8
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	4798      	blx	r3
 800d0b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	2202      	movs	r2, #2
 800d0c0:	701a      	strb	r2, [r3, #0]
      break;
 800d0c2:	e0f2      	b.n	800d2aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	885b      	ldrh	r3, [r3, #2]
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b05      	cmp	r3, #5
 800d0cc:	f200 80ac 	bhi.w	800d228 <USBD_GetDescriptor+0x258>
 800d0d0:	a201      	add	r2, pc, #4	; (adr r2, 800d0d8 <USBD_GetDescriptor+0x108>)
 800d0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d6:	bf00      	nop
 800d0d8:	0800d0f1 	.word	0x0800d0f1
 800d0dc:	0800d125 	.word	0x0800d125
 800d0e0:	0800d159 	.word	0x0800d159
 800d0e4:	0800d18d 	.word	0x0800d18d
 800d0e8:	0800d1c1 	.word	0x0800d1c1
 800d0ec:	0800d1f5 	.word	0x0800d1f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00b      	beq.n	800d114 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	7c12      	ldrb	r2, [r2, #16]
 800d108:	f107 0108 	add.w	r1, r7, #8
 800d10c:	4610      	mov	r0, r2
 800d10e:	4798      	blx	r3
 800d110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d112:	e091      	b.n	800d238 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fab2 	bl	800d680 <USBD_CtlError>
            err++;
 800d11c:	7afb      	ldrb	r3, [r7, #11]
 800d11e:	3301      	adds	r3, #1
 800d120:	72fb      	strb	r3, [r7, #11]
          break;
 800d122:	e089      	b.n	800d238 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00b      	beq.n	800d148 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	7c12      	ldrb	r2, [r2, #16]
 800d13c:	f107 0108 	add.w	r1, r7, #8
 800d140:	4610      	mov	r0, r2
 800d142:	4798      	blx	r3
 800d144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d146:	e077      	b.n	800d238 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d148:	6839      	ldr	r1, [r7, #0]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fa98 	bl	800d680 <USBD_CtlError>
            err++;
 800d150:	7afb      	ldrb	r3, [r7, #11]
 800d152:	3301      	adds	r3, #1
 800d154:	72fb      	strb	r3, [r7, #11]
          break;
 800d156:	e06f      	b.n	800d238 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00b      	beq.n	800d17c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	7c12      	ldrb	r2, [r2, #16]
 800d170:	f107 0108 	add.w	r1, r7, #8
 800d174:	4610      	mov	r0, r2
 800d176:	4798      	blx	r3
 800d178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d17a:	e05d      	b.n	800d238 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d17c:	6839      	ldr	r1, [r7, #0]
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 fa7e 	bl	800d680 <USBD_CtlError>
            err++;
 800d184:	7afb      	ldrb	r3, [r7, #11]
 800d186:	3301      	adds	r3, #1
 800d188:	72fb      	strb	r3, [r7, #11]
          break;
 800d18a:	e055      	b.n	800d238 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00b      	beq.n	800d1b0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	7c12      	ldrb	r2, [r2, #16]
 800d1a4:	f107 0108 	add.w	r1, r7, #8
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	4798      	blx	r3
 800d1ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1ae:	e043      	b.n	800d238 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fa64 	bl	800d680 <USBD_CtlError>
            err++;
 800d1b8:	7afb      	ldrb	r3, [r7, #11]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d1be:	e03b      	b.n	800d238 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00b      	beq.n	800d1e4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1d2:	695b      	ldr	r3, [r3, #20]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	7c12      	ldrb	r2, [r2, #16]
 800d1d8:	f107 0108 	add.w	r1, r7, #8
 800d1dc:	4610      	mov	r0, r2
 800d1de:	4798      	blx	r3
 800d1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1e2:	e029      	b.n	800d238 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fa4a 	bl	800d680 <USBD_CtlError>
            err++;
 800d1ec:	7afb      	ldrb	r3, [r7, #11]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1f2:	e021      	b.n	800d238 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00b      	beq.n	800d218 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	7c12      	ldrb	r2, [r2, #16]
 800d20c:	f107 0108 	add.w	r1, r7, #8
 800d210:	4610      	mov	r0, r2
 800d212:	4798      	blx	r3
 800d214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d216:	e00f      	b.n	800d238 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fa30 	bl	800d680 <USBD_CtlError>
            err++;
 800d220:	7afb      	ldrb	r3, [r7, #11]
 800d222:	3301      	adds	r3, #1
 800d224:	72fb      	strb	r3, [r7, #11]
          break;
 800d226:	e007      	b.n	800d238 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d228:	6839      	ldr	r1, [r7, #0]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fa28 	bl	800d680 <USBD_CtlError>
          err++;
 800d230:	7afb      	ldrb	r3, [r7, #11]
 800d232:	3301      	adds	r3, #1
 800d234:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d236:	bf00      	nop
      }
      break;
 800d238:	e037      	b.n	800d2aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	7c1b      	ldrb	r3, [r3, #16]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d109      	bne.n	800d256 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d24a:	f107 0208 	add.w	r2, r7, #8
 800d24e:	4610      	mov	r0, r2
 800d250:	4798      	blx	r3
 800d252:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d254:	e029      	b.n	800d2aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 fa11 	bl	800d680 <USBD_CtlError>
        err++;
 800d25e:	7afb      	ldrb	r3, [r7, #11]
 800d260:	3301      	adds	r3, #1
 800d262:	72fb      	strb	r3, [r7, #11]
      break;
 800d264:	e021      	b.n	800d2aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	7c1b      	ldrb	r3, [r3, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10d      	bne.n	800d28a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d276:	f107 0208 	add.w	r2, r7, #8
 800d27a:	4610      	mov	r0, r2
 800d27c:	4798      	blx	r3
 800d27e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	3301      	adds	r3, #1
 800d284:	2207      	movs	r2, #7
 800d286:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d288:	e00f      	b.n	800d2aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d28a:	6839      	ldr	r1, [r7, #0]
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f9f7 	bl	800d680 <USBD_CtlError>
        err++;
 800d292:	7afb      	ldrb	r3, [r7, #11]
 800d294:	3301      	adds	r3, #1
 800d296:	72fb      	strb	r3, [r7, #11]
      break;
 800d298:	e007      	b.n	800d2aa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f9ef 	bl	800d680 <USBD_CtlError>
      err++;
 800d2a2:	7afb      	ldrb	r3, [r7, #11]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	72fb      	strb	r3, [r7, #11]
      break;
 800d2a8:	bf00      	nop
  }

  if (err != 0U)
 800d2aa:	7afb      	ldrb	r3, [r7, #11]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d11e      	bne.n	800d2ee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	88db      	ldrh	r3, [r3, #6]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d016      	beq.n	800d2e6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d2b8:	893b      	ldrh	r3, [r7, #8]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00e      	beq.n	800d2dc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	88da      	ldrh	r2, [r3, #6]
 800d2c2:	893b      	ldrh	r3, [r7, #8]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	bf28      	it	cs
 800d2c8:	4613      	movcs	r3, r2
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d2ce:	893b      	ldrh	r3, [r7, #8]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	68f9      	ldr	r1, [r7, #12]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fa44 	bl	800d762 <USBD_CtlSendData>
 800d2da:	e009      	b.n	800d2f0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 f9ce 	bl	800d680 <USBD_CtlError>
 800d2e4:	e004      	b.n	800d2f0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 fa95 	bl	800d816 <USBD_CtlSendStatus>
 800d2ec:	e000      	b.n	800d2f0 <USBD_GetDescriptor+0x320>
    return;
 800d2ee:	bf00      	nop
  }
}
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop

0800d2f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	889b      	ldrh	r3, [r3, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d131      	bne.n	800d36e <USBD_SetAddress+0x76>
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	88db      	ldrh	r3, [r3, #6]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d12d      	bne.n	800d36e <USBD_SetAddress+0x76>
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	885b      	ldrh	r3, [r3, #2]
 800d316:	2b7f      	cmp	r3, #127	; 0x7f
 800d318:	d829      	bhi.n	800d36e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	885b      	ldrh	r3, [r3, #2]
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d324:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	2b03      	cmp	r3, #3
 800d330:	d104      	bne.n	800d33c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d332:	6839      	ldr	r1, [r7, #0]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 f9a3 	bl	800d680 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d33a:	e01d      	b.n	800d378 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	7bfa      	ldrb	r2, [r7, #15]
 800d340:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d344:	7bfb      	ldrb	r3, [r7, #15]
 800d346:	4619      	mov	r1, r3
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f003 ffa1 	bl	8011290 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 fa61 	bl	800d816 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d354:	7bfb      	ldrb	r3, [r7, #15]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d004      	beq.n	800d364 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2202      	movs	r2, #2
 800d35e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d362:	e009      	b.n	800d378 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d36c:	e004      	b.n	800d378 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d36e:	6839      	ldr	r1, [r7, #0]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 f985 	bl	800d680 <USBD_CtlError>
  }
}
 800d376:	bf00      	nop
 800d378:	bf00      	nop
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	885b      	ldrh	r3, [r3, #2]
 800d392:	b2da      	uxtb	r2, r3
 800d394:	4b4c      	ldr	r3, [pc, #304]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d396:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d398:	4b4b      	ldr	r3, [pc, #300]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d905      	bls.n	800d3ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d3a0:	6839      	ldr	r1, [r7, #0]
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 f96c 	bl	800d680 <USBD_CtlError>
    return USBD_FAIL;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e088      	b.n	800d4be <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d002      	beq.n	800d3be <USBD_SetConfig+0x3e>
 800d3b8:	2b03      	cmp	r3, #3
 800d3ba:	d025      	beq.n	800d408 <USBD_SetConfig+0x88>
 800d3bc:	e071      	b.n	800d4a2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d3be:	4b42      	ldr	r3, [pc, #264]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d01c      	beq.n	800d400 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d3c6:	4b40      	ldr	r3, [pc, #256]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3d0:	4b3d      	ldr	r3, [pc, #244]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7ff f91e 	bl	800c618 <USBD_SetClassConfig>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d3e0:	7bfb      	ldrb	r3, [r7, #15]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d004      	beq.n	800d3f0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d3e6:	6839      	ldr	r1, [r7, #0]
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 f949 	bl	800d680 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d3ee:	e065      	b.n	800d4bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fa10 	bl	800d816 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2203      	movs	r2, #3
 800d3fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3fe:	e05d      	b.n	800d4bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fa08 	bl	800d816 <USBD_CtlSendStatus>
      break;
 800d406:	e059      	b.n	800d4bc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d408:	4b2f      	ldr	r3, [pc, #188]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d112      	bne.n	800d436 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2202      	movs	r2, #2
 800d414:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d418:	4b2b      	ldr	r3, [pc, #172]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	461a      	mov	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d422:	4b29      	ldr	r3, [pc, #164]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	4619      	mov	r1, r3
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7ff f911 	bl	800c650 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 f9f1 	bl	800d816 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d434:	e042      	b.n	800d4bc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d436:	4b24      	ldr	r3, [pc, #144]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	461a      	mov	r2, r3
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	429a      	cmp	r2, r3
 800d442:	d02a      	beq.n	800d49a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	4619      	mov	r1, r3
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7ff f8ff 	bl	800c650 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d452:	4b1d      	ldr	r3, [pc, #116]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	461a      	mov	r2, r3
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d45c:	4b1a      	ldr	r3, [pc, #104]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	4619      	mov	r1, r3
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f7ff f8d8 	bl	800c618 <USBD_SetClassConfig>
 800d468:	4603      	mov	r3, r0
 800d46a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d46c:	7bfb      	ldrb	r3, [r7, #15]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00f      	beq.n	800d492 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 f903 	bl	800d680 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	4619      	mov	r1, r3
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7ff f8e4 	bl	800c650 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d490:	e014      	b.n	800d4bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 f9bf 	bl	800d816 <USBD_CtlSendStatus>
      break;
 800d498:	e010      	b.n	800d4bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f9bb 	bl	800d816 <USBD_CtlSendStatus>
      break;
 800d4a0:	e00c      	b.n	800d4bc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d4a2:	6839      	ldr	r1, [r7, #0]
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 f8eb 	bl	800d680 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d4aa:	4b07      	ldr	r3, [pc, #28]	; (800d4c8 <USBD_SetConfig+0x148>)
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff f8cd 	bl	800c650 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d4b6:	2303      	movs	r3, #3
 800d4b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d4ba:	bf00      	nop
  }

  return ret;
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	200001e0 	.word	0x200001e0

0800d4cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	88db      	ldrh	r3, [r3, #6]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d004      	beq.n	800d4e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d4de:	6839      	ldr	r1, [r7, #0]
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 f8cd 	bl	800d680 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d4e6:	e023      	b.n	800d530 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	dc02      	bgt.n	800d4fa <USBD_GetConfig+0x2e>
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	dc03      	bgt.n	800d500 <USBD_GetConfig+0x34>
 800d4f8:	e015      	b.n	800d526 <USBD_GetConfig+0x5a>
 800d4fa:	2b03      	cmp	r3, #3
 800d4fc:	d00b      	beq.n	800d516 <USBD_GetConfig+0x4a>
 800d4fe:	e012      	b.n	800d526 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	3308      	adds	r3, #8
 800d50a:	2201      	movs	r2, #1
 800d50c:	4619      	mov	r1, r3
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f927 	bl	800d762 <USBD_CtlSendData>
        break;
 800d514:	e00c      	b.n	800d530 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	3304      	adds	r3, #4
 800d51a:	2201      	movs	r2, #1
 800d51c:	4619      	mov	r1, r3
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f91f 	bl	800d762 <USBD_CtlSendData>
        break;
 800d524:	e004      	b.n	800d530 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 f8a9 	bl	800d680 <USBD_CtlError>
        break;
 800d52e:	bf00      	nop
}
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	3b01      	subs	r3, #1
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d81e      	bhi.n	800d58e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	88db      	ldrh	r3, [r3, #6]
 800d554:	2b02      	cmp	r3, #2
 800d556:	d004      	beq.n	800d562 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d558:	6839      	ldr	r1, [r7, #0]
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 f890 	bl	800d680 <USBD_CtlError>
        break;
 800d560:	e01a      	b.n	800d598 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d005      	beq.n	800d57e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	f043 0202 	orr.w	r2, r3, #2
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	330c      	adds	r3, #12
 800d582:	2202      	movs	r2, #2
 800d584:	4619      	mov	r1, r3
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 f8eb 	bl	800d762 <USBD_CtlSendData>
      break;
 800d58c:	e004      	b.n	800d598 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d58e:	6839      	ldr	r1, [r7, #0]
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 f875 	bl	800d680 <USBD_CtlError>
      break;
 800d596:	bf00      	nop
  }
}
 800d598:	bf00      	nop
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	885b      	ldrh	r3, [r3, #2]
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d106      	bne.n	800d5c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 f92b 	bl	800d816 <USBD_CtlSendStatus>
  }
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d80b      	bhi.n	800d5f8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	885b      	ldrh	r3, [r3, #2]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d10c      	bne.n	800d602 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 f910 	bl	800d816 <USBD_CtlSendStatus>
      }
      break;
 800d5f6:	e004      	b.n	800d602 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d5f8:	6839      	ldr	r1, [r7, #0]
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f840 	bl	800d680 <USBD_CtlError>
      break;
 800d600:	e000      	b.n	800d604 <USBD_ClrFeature+0x3c>
      break;
 800d602:	bf00      	nop
  }
}
 800d604:	bf00      	nop
 800d606:	3708      	adds	r7, #8
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	781a      	ldrb	r2, [r3, #0]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	3301      	adds	r3, #1
 800d626:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	781a      	ldrb	r2, [r3, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	3301      	adds	r3, #1
 800d634:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f7ff fa91 	bl	800cb5e <SWAPBYTE>
 800d63c:	4603      	mov	r3, r0
 800d63e:	461a      	mov	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	3301      	adds	r3, #1
 800d648:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3301      	adds	r3, #1
 800d64e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7ff fa84 	bl	800cb5e <SWAPBYTE>
 800d656:	4603      	mov	r3, r0
 800d658:	461a      	mov	r2, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	3301      	adds	r3, #1
 800d662:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3301      	adds	r3, #1
 800d668:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d66a:	68f8      	ldr	r0, [r7, #12]
 800d66c:	f7ff fa77 	bl	800cb5e <SWAPBYTE>
 800d670:	4603      	mov	r3, r0
 800d672:	461a      	mov	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	80da      	strh	r2, [r3, #6]
}
 800d678:	bf00      	nop
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d68a:	2180      	movs	r1, #128	; 0x80
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f003 fd67 	bl	8011160 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d692:	2100      	movs	r1, #0
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f003 fd63 	bl	8011160 <USBD_LL_StallEP>
}
 800d69a:	bf00      	nop
 800d69c:	3708      	adds	r7, #8
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b086      	sub	sp, #24
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	60f8      	str	r0, [r7, #12]
 800d6aa:	60b9      	str	r1, [r7, #8]
 800d6ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d036      	beq.n	800d726 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d6bc:	6938      	ldr	r0, [r7, #16]
 800d6be:	f000 f836 	bl	800d72e <USBD_GetLen>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	7812      	ldrb	r2, [r2, #0]
 800d6da:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6dc:	7dfb      	ldrb	r3, [r7, #23]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d6e2:	7dfb      	ldrb	r3, [r7, #23]
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	2203      	movs	r2, #3
 800d6ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6ec:	7dfb      	ldrb	r3, [r7, #23]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d6f2:	e013      	b.n	800d71c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d6f4:	7dfb      	ldrb	r3, [r7, #23]
 800d6f6:	68ba      	ldr	r2, [r7, #8]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	7812      	ldrb	r2, [r2, #0]
 800d6fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	3301      	adds	r3, #1
 800d704:	613b      	str	r3, [r7, #16]
    idx++;
 800d706:	7dfb      	ldrb	r3, [r7, #23]
 800d708:	3301      	adds	r3, #1
 800d70a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d70c:	7dfb      	ldrb	r3, [r7, #23]
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	4413      	add	r3, r2
 800d712:	2200      	movs	r2, #0
 800d714:	701a      	strb	r2, [r3, #0]
    idx++;
 800d716:	7dfb      	ldrb	r3, [r7, #23]
 800d718:	3301      	adds	r3, #1
 800d71a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1e7      	bne.n	800d6f4 <USBD_GetString+0x52>
 800d724:	e000      	b.n	800d728 <USBD_GetString+0x86>
    return;
 800d726:	bf00      	nop
  }
}
 800d728:	3718      	adds	r7, #24
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d72e:	b480      	push	{r7}
 800d730:	b085      	sub	sp, #20
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d736:	2300      	movs	r3, #0
 800d738:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d73e:	e005      	b.n	800d74c <USBD_GetLen+0x1e>
  {
    len++;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
 800d742:	3301      	adds	r3, #1
 800d744:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	3301      	adds	r3, #1
 800d74a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1f5      	bne.n	800d740 <USBD_GetLen+0x12>
  }

  return len;
 800d754:	7bfb      	ldrb	r3, [r7, #15]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3714      	adds	r7, #20
 800d75a:	46bd      	mov	sp, r7
 800d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d760:	4770      	bx	lr

0800d762 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b084      	sub	sp, #16
 800d766:	af00      	add	r7, sp, #0
 800d768:	60f8      	str	r0, [r7, #12]
 800d76a:	60b9      	str	r1, [r7, #8]
 800d76c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2202      	movs	r2, #2
 800d772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	2100      	movs	r1, #0
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f003 fdb7 	bl	80112fc <USBD_LL_Transmit>

  return USBD_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	68ba      	ldr	r2, [r7, #8]
 800d7a8:	2100      	movs	r1, #0
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f003 fda6 	bl	80112fc <USBD_LL_Transmit>

  return USBD_OK;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b084      	sub	sp, #16
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2203      	movs	r2, #3
 800d7ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	68ba      	ldr	r2, [r7, #8]
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f003 fdc1 	bl	801136c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7ea:	2300      	movs	r3, #0
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	2100      	movs	r1, #0
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f003 fdb0 	bl	801136c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b082      	sub	sp, #8
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2204      	movs	r2, #4
 800d822:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d826:	2300      	movs	r3, #0
 800d828:	2200      	movs	r2, #0
 800d82a:	2100      	movs	r1, #0
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f003 fd65 	bl	80112fc <USBD_LL_Transmit>

  return USBD_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2205      	movs	r2, #5
 800d848:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d84c:	2300      	movs	r3, #0
 800d84e:	2200      	movs	r2, #0
 800d850:	2100      	movs	r1, #0
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f003 fd8a 	bl	801136c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}
	...

0800d864 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d864:	b480      	push	{r7}
 800d866:	b087      	sub	sp, #28
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	4613      	mov	r3, r2
 800d870:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d872:	2301      	movs	r3, #1
 800d874:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d876:	2300      	movs	r3, #0
 800d878:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d87a:	4b1f      	ldr	r3, [pc, #124]	; (800d8f8 <FATFS_LinkDriverEx+0x94>)
 800d87c:	7a5b      	ldrb	r3, [r3, #9]
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	2b00      	cmp	r3, #0
 800d882:	d131      	bne.n	800d8e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d884:	4b1c      	ldr	r3, [pc, #112]	; (800d8f8 <FATFS_LinkDriverEx+0x94>)
 800d886:	7a5b      	ldrb	r3, [r3, #9]
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	461a      	mov	r2, r3
 800d88c:	4b1a      	ldr	r3, [pc, #104]	; (800d8f8 <FATFS_LinkDriverEx+0x94>)
 800d88e:	2100      	movs	r1, #0
 800d890:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d892:	4b19      	ldr	r3, [pc, #100]	; (800d8f8 <FATFS_LinkDriverEx+0x94>)
 800d894:	7a5b      	ldrb	r3, [r3, #9]
 800d896:	b2db      	uxtb	r3, r3
 800d898:	4a17      	ldr	r2, [pc, #92]	; (800d8f8 <FATFS_LinkDriverEx+0x94>)
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	4413      	add	r3, r2
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d8a2:	4b15      	ldr	r3, [pc, #84]	; (800d8f8 <FATFS_LinkDriverEx+0x94>)
 800d8a4:	7a5b      	ldrb	r3, [r3, #9]
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	4b13      	ldr	r3, [pc, #76]	; (800d8f8 <FATFS_LinkDriverEx+0x94>)
 800d8ac:	4413      	add	r3, r2
 800d8ae:	79fa      	ldrb	r2, [r7, #7]
 800d8b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d8b2:	4b11      	ldr	r3, [pc, #68]	; (800d8f8 <FATFS_LinkDriverEx+0x94>)
 800d8b4:	7a5b      	ldrb	r3, [r3, #9]
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	1c5a      	adds	r2, r3, #1
 800d8ba:	b2d1      	uxtb	r1, r2
 800d8bc:	4a0e      	ldr	r2, [pc, #56]	; (800d8f8 <FATFS_LinkDriverEx+0x94>)
 800d8be:	7251      	strb	r1, [r2, #9]
 800d8c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d8c2:	7dbb      	ldrb	r3, [r7, #22]
 800d8c4:	3330      	adds	r3, #48	; 0x30
 800d8c6:	b2da      	uxtb	r2, r3
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	223a      	movs	r2, #58	; 0x3a
 800d8d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	3302      	adds	r3, #2
 800d8d8:	222f      	movs	r2, #47	; 0x2f
 800d8da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	3303      	adds	r3, #3
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	371c      	adds	r7, #28
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop
 800d8f8:	200001e4 	.word	0x200001e4

0800d8fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d906:	2200      	movs	r2, #0
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f7ff ffaa 	bl	800d864 <FATFS_LinkDriverEx>
 800d910:	4603      	mov	r3, r0
}
 800d912:	4618      	mov	r0, r3
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
	...

0800d91c <__NVIC_SetPriority>:
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	4603      	mov	r3, r0
 800d924:	6039      	str	r1, [r7, #0]
 800d926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	db0a      	blt.n	800d946 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	b2da      	uxtb	r2, r3
 800d934:	490c      	ldr	r1, [pc, #48]	; (800d968 <__NVIC_SetPriority+0x4c>)
 800d936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d93a:	0112      	lsls	r2, r2, #4
 800d93c:	b2d2      	uxtb	r2, r2
 800d93e:	440b      	add	r3, r1
 800d940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d944:	e00a      	b.n	800d95c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	4908      	ldr	r1, [pc, #32]	; (800d96c <__NVIC_SetPriority+0x50>)
 800d94c:	79fb      	ldrb	r3, [r7, #7]
 800d94e:	f003 030f 	and.w	r3, r3, #15
 800d952:	3b04      	subs	r3, #4
 800d954:	0112      	lsls	r2, r2, #4
 800d956:	b2d2      	uxtb	r2, r2
 800d958:	440b      	add	r3, r1
 800d95a:	761a      	strb	r2, [r3, #24]
}
 800d95c:	bf00      	nop
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr
 800d968:	e000e100 	.word	0xe000e100
 800d96c:	e000ed00 	.word	0xe000ed00

0800d970 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d970:	b580      	push	{r7, lr}
 800d972:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d974:	4b05      	ldr	r3, [pc, #20]	; (800d98c <SysTick_Handler+0x1c>)
 800d976:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d978:	f001 ff32 	bl	800f7e0 <xTaskGetSchedulerState>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d001      	beq.n	800d986 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d982:	f002 fd19 	bl	80103b8 <xPortSysTickHandler>
  }
}
 800d986:	bf00      	nop
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	e000e010 	.word	0xe000e010

0800d990 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d994:	2100      	movs	r1, #0
 800d996:	f06f 0004 	mvn.w	r0, #4
 800d99a:	f7ff ffbf 	bl	800d91c <__NVIC_SetPriority>
#endif
}
 800d99e:	bf00      	nop
 800d9a0:	bd80      	pop	{r7, pc}
	...

0800d9a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9aa:	f3ef 8305 	mrs	r3, IPSR
 800d9ae:	603b      	str	r3, [r7, #0]
  return(result);
 800d9b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d003      	beq.n	800d9be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d9b6:	f06f 0305 	mvn.w	r3, #5
 800d9ba:	607b      	str	r3, [r7, #4]
 800d9bc:	e00c      	b.n	800d9d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d9be:	4b0a      	ldr	r3, [pc, #40]	; (800d9e8 <osKernelInitialize+0x44>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d105      	bne.n	800d9d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d9c6:	4b08      	ldr	r3, [pc, #32]	; (800d9e8 <osKernelInitialize+0x44>)
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	607b      	str	r3, [r7, #4]
 800d9d0:	e002      	b.n	800d9d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d9d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d9d8:	687b      	ldr	r3, [r7, #4]
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	200001f0 	.word	0x200001f0

0800d9ec <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800d9f2:	f001 fef5 	bl	800f7e0 <xTaskGetSchedulerState>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d004      	beq.n	800da06 <osKernelGetState+0x1a>
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d105      	bne.n	800da0c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800da00:	2302      	movs	r3, #2
 800da02:	607b      	str	r3, [r7, #4]
      break;
 800da04:	e00c      	b.n	800da20 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800da06:	2303      	movs	r3, #3
 800da08:	607b      	str	r3, [r7, #4]
      break;
 800da0a:	e009      	b.n	800da20 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800da0c:	4b07      	ldr	r3, [pc, #28]	; (800da2c <osKernelGetState+0x40>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d102      	bne.n	800da1a <osKernelGetState+0x2e>
        state = osKernelReady;
 800da14:	2301      	movs	r3, #1
 800da16:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800da18:	e001      	b.n	800da1e <osKernelGetState+0x32>
        state = osKernelInactive;
 800da1a:	2300      	movs	r3, #0
 800da1c:	607b      	str	r3, [r7, #4]
      break;
 800da1e:	bf00      	nop
  }

  return (state);
 800da20:	687b      	ldr	r3, [r7, #4]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	200001f0 	.word	0x200001f0

0800da30 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da36:	f3ef 8305 	mrs	r3, IPSR
 800da3a:	603b      	str	r3, [r7, #0]
  return(result);
 800da3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d003      	beq.n	800da4a <osKernelStart+0x1a>
    stat = osErrorISR;
 800da42:	f06f 0305 	mvn.w	r3, #5
 800da46:	607b      	str	r3, [r7, #4]
 800da48:	e010      	b.n	800da6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da4a:	4b0b      	ldr	r3, [pc, #44]	; (800da78 <osKernelStart+0x48>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d109      	bne.n	800da66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800da52:	f7ff ff9d 	bl	800d990 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800da56:	4b08      	ldr	r3, [pc, #32]	; (800da78 <osKernelStart+0x48>)
 800da58:	2202      	movs	r2, #2
 800da5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800da5c:	f001 fa66 	bl	800ef2c <vTaskStartScheduler>
      stat = osOK;
 800da60:	2300      	movs	r3, #0
 800da62:	607b      	str	r3, [r7, #4]
 800da64:	e002      	b.n	800da6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800da66:	f04f 33ff 	mov.w	r3, #4294967295
 800da6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da6c:	687b      	ldr	r3, [r7, #4]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	200001f0 	.word	0x200001f0

0800da7c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da82:	f3ef 8305 	mrs	r3, IPSR
 800da86:	603b      	str	r3, [r7, #0]
  return(result);
 800da88:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d003      	beq.n	800da96 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800da8e:	f001 fb6f 	bl	800f170 <xTaskGetTickCountFromISR>
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	e002      	b.n	800da9c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800da96:	f001 fb5b 	bl	800f150 <xTaskGetTickCount>
 800da9a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800da9c:	687b      	ldr	r3, [r7, #4]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b08e      	sub	sp, #56	; 0x38
 800daaa:	af04      	add	r7, sp, #16
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dab2:	2300      	movs	r3, #0
 800dab4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dab6:	f3ef 8305 	mrs	r3, IPSR
 800daba:	617b      	str	r3, [r7, #20]
  return(result);
 800dabc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d17e      	bne.n	800dbc0 <osThreadNew+0x11a>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d07b      	beq.n	800dbc0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dac8:	2380      	movs	r3, #128	; 0x80
 800daca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dacc:	2318      	movs	r3, #24
 800dace:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dad0:	2300      	movs	r3, #0
 800dad2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dad4:	f04f 33ff 	mov.w	r3, #4294967295
 800dad8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d045      	beq.n	800db6c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d002      	beq.n	800daee <osThreadNew+0x48>
        name = attr->name;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	699b      	ldr	r3, [r3, #24]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d002      	beq.n	800dafc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d008      	beq.n	800db14 <osThreadNew+0x6e>
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	2b38      	cmp	r3, #56	; 0x38
 800db06:	d805      	bhi.n	800db14 <osThreadNew+0x6e>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	f003 0301 	and.w	r3, r3, #1
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <osThreadNew+0x72>
        return (NULL);
 800db14:	2300      	movs	r3, #0
 800db16:	e054      	b.n	800dbc2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	695b      	ldr	r3, [r3, #20]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d003      	beq.n	800db28 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	089b      	lsrs	r3, r3, #2
 800db26:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00e      	beq.n	800db4e <osThreadNew+0xa8>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	2b5b      	cmp	r3, #91	; 0x5b
 800db36:	d90a      	bls.n	800db4e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d006      	beq.n	800db4e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	695b      	ldr	r3, [r3, #20]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <osThreadNew+0xa8>
        mem = 1;
 800db48:	2301      	movs	r3, #1
 800db4a:	61bb      	str	r3, [r7, #24]
 800db4c:	e010      	b.n	800db70 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10c      	bne.n	800db70 <osThreadNew+0xca>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d108      	bne.n	800db70 <osThreadNew+0xca>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d104      	bne.n	800db70 <osThreadNew+0xca>
          mem = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	61bb      	str	r3, [r7, #24]
 800db6a:	e001      	b.n	800db70 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800db6c:	2300      	movs	r3, #0
 800db6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	2b01      	cmp	r3, #1
 800db74:	d110      	bne.n	800db98 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db7e:	9202      	str	r2, [sp, #8]
 800db80:	9301      	str	r3, [sp, #4]
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	6a3a      	ldr	r2, [r7, #32]
 800db8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f000 fff7 	bl	800eb80 <xTaskCreateStatic>
 800db92:	4603      	mov	r3, r0
 800db94:	613b      	str	r3, [r7, #16]
 800db96:	e013      	b.n	800dbc0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800db98:	69bb      	ldr	r3, [r7, #24]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d110      	bne.n	800dbc0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800db9e:	6a3b      	ldr	r3, [r7, #32]
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	f107 0310 	add.w	r3, r7, #16
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	f001 f842 	bl	800ec3a <xTaskCreate>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d001      	beq.n	800dbc0 <osThreadNew+0x11a>
            hTask = NULL;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dbc0:	693b      	ldr	r3, [r7, #16]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3728      	adds	r7, #40	; 0x28
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b084      	sub	sp, #16
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbd2:	f3ef 8305 	mrs	r3, IPSR
 800dbd6:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d003      	beq.n	800dbe6 <osDelay+0x1c>
    stat = osErrorISR;
 800dbde:	f06f 0305 	mvn.w	r3, #5
 800dbe2:	60fb      	str	r3, [r7, #12]
 800dbe4:	e007      	b.n	800dbf6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d002      	beq.n	800dbf6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f001 f967 	bl	800eec4 <vTaskDelay>
    }
  }

  return (stat);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b08a      	sub	sp, #40	; 0x28
 800dc04:	af02      	add	r7, sp, #8
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc10:	f3ef 8305 	mrs	r3, IPSR
 800dc14:	613b      	str	r3, [r7, #16]
  return(result);
 800dc16:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d15f      	bne.n	800dcdc <osMessageQueueNew+0xdc>
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d05c      	beq.n	800dcdc <osMessageQueueNew+0xdc>
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d059      	beq.n	800dcdc <osMessageQueueNew+0xdc>
    mem = -1;
 800dc28:	f04f 33ff 	mov.w	r3, #4294967295
 800dc2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d029      	beq.n	800dc88 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d012      	beq.n	800dc62 <osMessageQueueNew+0x62>
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	2b4f      	cmp	r3, #79	; 0x4f
 800dc42:	d90e      	bls.n	800dc62 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00a      	beq.n	800dc62 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	695a      	ldr	r2, [r3, #20]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	68b9      	ldr	r1, [r7, #8]
 800dc54:	fb01 f303 	mul.w	r3, r1, r3
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d302      	bcc.n	800dc62 <osMessageQueueNew+0x62>
        mem = 1;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	61bb      	str	r3, [r7, #24]
 800dc60:	e014      	b.n	800dc8c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d110      	bne.n	800dc8c <osMessageQueueNew+0x8c>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68db      	ldr	r3, [r3, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d10c      	bne.n	800dc8c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d108      	bne.n	800dc8c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	695b      	ldr	r3, [r3, #20]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d104      	bne.n	800dc8c <osMessageQueueNew+0x8c>
          mem = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	61bb      	str	r3, [r7, #24]
 800dc86:	e001      	b.n	800dc8c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dc8c:	69bb      	ldr	r3, [r7, #24]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d10b      	bne.n	800dcaa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	691a      	ldr	r2, [r3, #16]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	9100      	str	r1, [sp, #0]
 800dc9e:	68b9      	ldr	r1, [r7, #8]
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f000 fa2f 	bl	800e104 <xQueueGenericCreateStatic>
 800dca6:	61f8      	str	r0, [r7, #28]
 800dca8:	e008      	b.n	800dcbc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d105      	bne.n	800dcbc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	68b9      	ldr	r1, [r7, #8]
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f000 fa9d 	bl	800e1f4 <xQueueGenericCreate>
 800dcba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00c      	beq.n	800dcdc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d003      	beq.n	800dcd0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	617b      	str	r3, [r7, #20]
 800dcce:	e001      	b.n	800dcd4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dcd4:	6979      	ldr	r1, [r7, #20]
 800dcd6:	69f8      	ldr	r0, [r7, #28]
 800dcd8:	f000 fef4 	bl	800eac4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dcdc:	69fb      	ldr	r3, [r7, #28]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3720      	adds	r7, #32
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
	...

0800dce8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b088      	sub	sp, #32
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	603b      	str	r3, [r7, #0]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd00:	f3ef 8305 	mrs	r3, IPSR
 800dd04:	617b      	str	r3, [r7, #20]
  return(result);
 800dd06:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d028      	beq.n	800dd5e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d005      	beq.n	800dd1e <osMessageQueuePut+0x36>
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d002      	beq.n	800dd1e <osMessageQueuePut+0x36>
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dd1e:	f06f 0303 	mvn.w	r3, #3
 800dd22:	61fb      	str	r3, [r7, #28]
 800dd24:	e038      	b.n	800dd98 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dd26:	2300      	movs	r3, #0
 800dd28:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dd2a:	f107 0210 	add.w	r2, r7, #16
 800dd2e:	2300      	movs	r3, #0
 800dd30:	68b9      	ldr	r1, [r7, #8]
 800dd32:	69b8      	ldr	r0, [r7, #24]
 800dd34:	f000 fbba 	bl	800e4ac <xQueueGenericSendFromISR>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d003      	beq.n	800dd46 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dd3e:	f06f 0302 	mvn.w	r3, #2
 800dd42:	61fb      	str	r3, [r7, #28]
 800dd44:	e028      	b.n	800dd98 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d025      	beq.n	800dd98 <osMessageQueuePut+0xb0>
 800dd4c:	4b15      	ldr	r3, [pc, #84]	; (800dda4 <osMessageQueuePut+0xbc>)
 800dd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd52:	601a      	str	r2, [r3, #0]
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	e01c      	b.n	800dd98 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d002      	beq.n	800dd6a <osMessageQueuePut+0x82>
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d103      	bne.n	800dd72 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dd6a:	f06f 0303 	mvn.w	r3, #3
 800dd6e:	61fb      	str	r3, [r7, #28]
 800dd70:	e012      	b.n	800dd98 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dd72:	2300      	movs	r3, #0
 800dd74:	683a      	ldr	r2, [r7, #0]
 800dd76:	68b9      	ldr	r1, [r7, #8]
 800dd78:	69b8      	ldr	r0, [r7, #24]
 800dd7a:	f000 fa99 	bl	800e2b0 <xQueueGenericSend>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d009      	beq.n	800dd98 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dd8a:	f06f 0301 	mvn.w	r3, #1
 800dd8e:	61fb      	str	r3, [r7, #28]
 800dd90:	e002      	b.n	800dd98 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dd92:	f06f 0302 	mvn.w	r3, #2
 800dd96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd98:	69fb      	ldr	r3, [r7, #28]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3720      	adds	r7, #32
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	e000ed04 	.word	0xe000ed04

0800dda8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b088      	sub	sp, #32
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
 800ddb4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddbe:	f3ef 8305 	mrs	r3, IPSR
 800ddc2:	617b      	str	r3, [r7, #20]
  return(result);
 800ddc4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d028      	beq.n	800de1c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d005      	beq.n	800dddc <osMessageQueueGet+0x34>
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d002      	beq.n	800dddc <osMessageQueueGet+0x34>
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d003      	beq.n	800dde4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dddc:	f06f 0303 	mvn.w	r3, #3
 800dde0:	61fb      	str	r3, [r7, #28]
 800dde2:	e037      	b.n	800de54 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dde4:	2300      	movs	r3, #0
 800dde6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dde8:	f107 0310 	add.w	r3, r7, #16
 800ddec:	461a      	mov	r2, r3
 800ddee:	68b9      	ldr	r1, [r7, #8]
 800ddf0:	69b8      	ldr	r0, [r7, #24]
 800ddf2:	f000 fcd7 	bl	800e7a4 <xQueueReceiveFromISR>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d003      	beq.n	800de04 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ddfc:	f06f 0302 	mvn.w	r3, #2
 800de00:	61fb      	str	r3, [r7, #28]
 800de02:	e027      	b.n	800de54 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d024      	beq.n	800de54 <osMessageQueueGet+0xac>
 800de0a:	4b15      	ldr	r3, [pc, #84]	; (800de60 <osMessageQueueGet+0xb8>)
 800de0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de10:	601a      	str	r2, [r3, #0]
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	e01b      	b.n	800de54 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800de1c:	69bb      	ldr	r3, [r7, #24]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d002      	beq.n	800de28 <osMessageQueueGet+0x80>
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d103      	bne.n	800de30 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800de28:	f06f 0303 	mvn.w	r3, #3
 800de2c:	61fb      	str	r3, [r7, #28]
 800de2e:	e011      	b.n	800de54 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	68b9      	ldr	r1, [r7, #8]
 800de34:	69b8      	ldr	r0, [r7, #24]
 800de36:	f000 fbd5 	bl	800e5e4 <xQueueReceive>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d009      	beq.n	800de54 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d003      	beq.n	800de4e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800de46:	f06f 0301 	mvn.w	r3, #1
 800de4a:	61fb      	str	r3, [r7, #28]
 800de4c:	e002      	b.n	800de54 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800de4e:	f06f 0302 	mvn.w	r3, #2
 800de52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800de54:	69fb      	ldr	r3, [r7, #28]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3720      	adds	r7, #32
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	e000ed04 	.word	0xe000ed04

0800de64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de64:	b480      	push	{r7}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4a07      	ldr	r2, [pc, #28]	; (800de90 <vApplicationGetIdleTaskMemory+0x2c>)
 800de74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	4a06      	ldr	r2, [pc, #24]	; (800de94 <vApplicationGetIdleTaskMemory+0x30>)
 800de7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2280      	movs	r2, #128	; 0x80
 800de80:	601a      	str	r2, [r3, #0]
}
 800de82:	bf00      	nop
 800de84:	3714      	adds	r7, #20
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	200001f4 	.word	0x200001f4
 800de94:	20000250 	.word	0x20000250

0800de98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	4a07      	ldr	r2, [pc, #28]	; (800dec4 <vApplicationGetTimerTaskMemory+0x2c>)
 800dea8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	4a06      	ldr	r2, [pc, #24]	; (800dec8 <vApplicationGetTimerTaskMemory+0x30>)
 800deae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800deb6:	601a      	str	r2, [r3, #0]
}
 800deb8:	bf00      	nop
 800deba:	3714      	adds	r7, #20
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr
 800dec4:	20000450 	.word	0x20000450
 800dec8:	200004ac 	.word	0x200004ac

0800decc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f103 0208 	add.w	r2, r3, #8
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f04f 32ff 	mov.w	r2, #4294967295
 800dee4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f103 0208 	add.w	r2, r3, #8
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f103 0208 	add.w	r2, r3, #8
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df00:	bf00      	nop
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2200      	movs	r2, #0
 800df18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df1a:	bf00      	nop
 800df1c:	370c      	adds	r7, #12
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df26:	b480      	push	{r7}
 800df28:	b085      	sub	sp, #20
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
 800df2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	689a      	ldr	r2, [r3, #8]
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	689b      	ldr	r3, [r3, #8]
 800df48:	683a      	ldr	r2, [r7, #0]
 800df4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	683a      	ldr	r2, [r7, #0]
 800df50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	1c5a      	adds	r2, r3, #1
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	601a      	str	r2, [r3, #0]
}
 800df62:	bf00      	nop
 800df64:	3714      	adds	r7, #20
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr

0800df6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df6e:	b480      	push	{r7}
 800df70:	b085      	sub	sp, #20
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
 800df76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df84:	d103      	bne.n	800df8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	60fb      	str	r3, [r7, #12]
 800df8c:	e00c      	b.n	800dfa8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	3308      	adds	r3, #8
 800df92:	60fb      	str	r3, [r7, #12]
 800df94:	e002      	b.n	800df9c <vListInsert+0x2e>
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	60fb      	str	r3, [r7, #12]
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d2f6      	bcs.n	800df96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	685a      	ldr	r2, [r3, #4]
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	683a      	ldr	r2, [r7, #0]
 800dfc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	1c5a      	adds	r2, r3, #1
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	601a      	str	r2, [r3, #0]
}
 800dfd4:	bf00      	nop
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	6892      	ldr	r2, [r2, #8]
 800dff6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	689b      	ldr	r3, [r3, #8]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	6852      	ldr	r2, [r2, #4]
 800e000:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d103      	bne.n	800e014 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	689a      	ldr	r2, [r3, #8]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	1e5a      	subs	r2, r3, #1
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d10a      	bne.n	800e05e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04c:	f383 8811 	msr	BASEPRI, r3
 800e050:	f3bf 8f6f 	isb	sy
 800e054:	f3bf 8f4f 	dsb	sy
 800e058:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e05a:	bf00      	nop
 800e05c:	e7fe      	b.n	800e05c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e05e:	f002 f919 	bl	8010294 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e06a:	68f9      	ldr	r1, [r7, #12]
 800e06c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e06e:	fb01 f303 	mul.w	r3, r1, r3
 800e072:	441a      	add	r2, r3
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e08e:	3b01      	subs	r3, #1
 800e090:	68f9      	ldr	r1, [r7, #12]
 800e092:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e094:	fb01 f303 	mul.w	r3, r1, r3
 800e098:	441a      	add	r2, r3
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	22ff      	movs	r2, #255	; 0xff
 800e0a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	22ff      	movs	r2, #255	; 0xff
 800e0aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d114      	bne.n	800e0de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d01a      	beq.n	800e0f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	3310      	adds	r3, #16
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f001 f9cf 	bl	800f464 <xTaskRemoveFromEventList>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d012      	beq.n	800e0f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e0cc:	4b0c      	ldr	r3, [pc, #48]	; (800e100 <xQueueGenericReset+0xcc>)
 800e0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d2:	601a      	str	r2, [r3, #0]
 800e0d4:	f3bf 8f4f 	dsb	sy
 800e0d8:	f3bf 8f6f 	isb	sy
 800e0dc:	e009      	b.n	800e0f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	3310      	adds	r3, #16
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7ff fef2 	bl	800decc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	3324      	adds	r3, #36	; 0x24
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7ff feed 	bl	800decc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e0f2:	f002 f8ff 	bl	80102f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e0f6:	2301      	movs	r3, #1
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	e000ed04 	.word	0xe000ed04

0800e104 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e104:	b580      	push	{r7, lr}
 800e106:	b08e      	sub	sp, #56	; 0x38
 800e108:	af02      	add	r7, sp, #8
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
 800e110:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10a      	bne.n	800e12e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11c:	f383 8811 	msr	BASEPRI, r3
 800e120:	f3bf 8f6f 	isb	sy
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e12a:	bf00      	nop
 800e12c:	e7fe      	b.n	800e12c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d10a      	bne.n	800e14a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e138:	f383 8811 	msr	BASEPRI, r3
 800e13c:	f3bf 8f6f 	isb	sy
 800e140:	f3bf 8f4f 	dsb	sy
 800e144:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e146:	bf00      	nop
 800e148:	e7fe      	b.n	800e148 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d002      	beq.n	800e156 <xQueueGenericCreateStatic+0x52>
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d001      	beq.n	800e15a <xQueueGenericCreateStatic+0x56>
 800e156:	2301      	movs	r3, #1
 800e158:	e000      	b.n	800e15c <xQueueGenericCreateStatic+0x58>
 800e15a:	2300      	movs	r3, #0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d10a      	bne.n	800e176 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e164:	f383 8811 	msr	BASEPRI, r3
 800e168:	f3bf 8f6f 	isb	sy
 800e16c:	f3bf 8f4f 	dsb	sy
 800e170:	623b      	str	r3, [r7, #32]
}
 800e172:	bf00      	nop
 800e174:	e7fe      	b.n	800e174 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d102      	bne.n	800e182 <xQueueGenericCreateStatic+0x7e>
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d101      	bne.n	800e186 <xQueueGenericCreateStatic+0x82>
 800e182:	2301      	movs	r3, #1
 800e184:	e000      	b.n	800e188 <xQueueGenericCreateStatic+0x84>
 800e186:	2300      	movs	r3, #0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10a      	bne.n	800e1a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e190:	f383 8811 	msr	BASEPRI, r3
 800e194:	f3bf 8f6f 	isb	sy
 800e198:	f3bf 8f4f 	dsb	sy
 800e19c:	61fb      	str	r3, [r7, #28]
}
 800e19e:	bf00      	nop
 800e1a0:	e7fe      	b.n	800e1a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e1a2:	2350      	movs	r3, #80	; 0x50
 800e1a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	2b50      	cmp	r3, #80	; 0x50
 800e1aa:	d00a      	beq.n	800e1c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	f383 8811 	msr	BASEPRI, r3
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	f3bf 8f4f 	dsb	sy
 800e1bc:	61bb      	str	r3, [r7, #24]
}
 800e1be:	bf00      	nop
 800e1c0:	e7fe      	b.n	800e1c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e1c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00d      	beq.n	800e1ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	68b9      	ldr	r1, [r7, #8]
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f000 f83f 	bl	800e268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3730      	adds	r7, #48	; 0x30
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b08a      	sub	sp, #40	; 0x28
 800e1f8:	af02      	add	r7, sp, #8
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	4613      	mov	r3, r2
 800e200:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10a      	bne.n	800e21e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20c:	f383 8811 	msr	BASEPRI, r3
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	f3bf 8f4f 	dsb	sy
 800e218:	613b      	str	r3, [r7, #16]
}
 800e21a:	bf00      	nop
 800e21c:	e7fe      	b.n	800e21c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	fb02 f303 	mul.w	r3, r2, r3
 800e226:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	3350      	adds	r3, #80	; 0x50
 800e22c:	4618      	mov	r0, r3
 800e22e:	f002 f953 	bl	80104d8 <pvPortMalloc>
 800e232:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d011      	beq.n	800e25e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	3350      	adds	r3, #80	; 0x50
 800e242:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	2200      	movs	r2, #0
 800e248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e24c:	79fa      	ldrb	r2, [r7, #7]
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	4613      	mov	r3, r2
 800e254:	697a      	ldr	r2, [r7, #20]
 800e256:	68b9      	ldr	r1, [r7, #8]
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f000 f805 	bl	800e268 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e25e:	69bb      	ldr	r3, [r7, #24]
	}
 800e260:	4618      	mov	r0, r3
 800e262:	3720      	adds	r7, #32
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
 800e274:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d103      	bne.n	800e284 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	69ba      	ldr	r2, [r7, #24]
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	e002      	b.n	800e28a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e290:	69bb      	ldr	r3, [r7, #24]
 800e292:	68ba      	ldr	r2, [r7, #8]
 800e294:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e296:	2101      	movs	r1, #1
 800e298:	69b8      	ldr	r0, [r7, #24]
 800e29a:	f7ff fecb 	bl	800e034 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	78fa      	ldrb	r2, [r7, #3]
 800e2a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e2a6:	bf00      	nop
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b08e      	sub	sp, #56	; 0x38
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d10a      	bne.n	800e2e2 <xQueueGenericSend+0x32>
	__asm volatile
 800e2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d0:	f383 8811 	msr	BASEPRI, r3
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e2de:	bf00      	nop
 800e2e0:	e7fe      	b.n	800e2e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d103      	bne.n	800e2f0 <xQueueGenericSend+0x40>
 800e2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d101      	bne.n	800e2f4 <xQueueGenericSend+0x44>
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e000      	b.n	800e2f6 <xQueueGenericSend+0x46>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d10a      	bne.n	800e310 <xQueueGenericSend+0x60>
	__asm volatile
 800e2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e30c:	bf00      	nop
 800e30e:	e7fe      	b.n	800e30e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	2b02      	cmp	r3, #2
 800e314:	d103      	bne.n	800e31e <xQueueGenericSend+0x6e>
 800e316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e31a:	2b01      	cmp	r3, #1
 800e31c:	d101      	bne.n	800e322 <xQueueGenericSend+0x72>
 800e31e:	2301      	movs	r3, #1
 800e320:	e000      	b.n	800e324 <xQueueGenericSend+0x74>
 800e322:	2300      	movs	r3, #0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <xQueueGenericSend+0x8e>
	__asm volatile
 800e328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32c:	f383 8811 	msr	BASEPRI, r3
 800e330:	f3bf 8f6f 	isb	sy
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	623b      	str	r3, [r7, #32]
}
 800e33a:	bf00      	nop
 800e33c:	e7fe      	b.n	800e33c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e33e:	f001 fa4f 	bl	800f7e0 <xTaskGetSchedulerState>
 800e342:	4603      	mov	r3, r0
 800e344:	2b00      	cmp	r3, #0
 800e346:	d102      	bne.n	800e34e <xQueueGenericSend+0x9e>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d101      	bne.n	800e352 <xQueueGenericSend+0xa2>
 800e34e:	2301      	movs	r3, #1
 800e350:	e000      	b.n	800e354 <xQueueGenericSend+0xa4>
 800e352:	2300      	movs	r3, #0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d10a      	bne.n	800e36e <xQueueGenericSend+0xbe>
	__asm volatile
 800e358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35c:	f383 8811 	msr	BASEPRI, r3
 800e360:	f3bf 8f6f 	isb	sy
 800e364:	f3bf 8f4f 	dsb	sy
 800e368:	61fb      	str	r3, [r7, #28]
}
 800e36a:	bf00      	nop
 800e36c:	e7fe      	b.n	800e36c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e36e:	f001 ff91 	bl	8010294 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d302      	bcc.n	800e384 <xQueueGenericSend+0xd4>
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	2b02      	cmp	r3, #2
 800e382:	d129      	bne.n	800e3d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	68b9      	ldr	r1, [r7, #8]
 800e388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e38a:	f000 fa8b 	bl	800e8a4 <prvCopyDataToQueue>
 800e38e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e394:	2b00      	cmp	r3, #0
 800e396:	d010      	beq.n	800e3ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39a:	3324      	adds	r3, #36	; 0x24
 800e39c:	4618      	mov	r0, r3
 800e39e:	f001 f861 	bl	800f464 <xTaskRemoveFromEventList>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d013      	beq.n	800e3d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e3a8:	4b3f      	ldr	r3, [pc, #252]	; (800e4a8 <xQueueGenericSend+0x1f8>)
 800e3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ae:	601a      	str	r2, [r3, #0]
 800e3b0:	f3bf 8f4f 	dsb	sy
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	e00a      	b.n	800e3d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d007      	beq.n	800e3d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e3c0:	4b39      	ldr	r3, [pc, #228]	; (800e4a8 <xQueueGenericSend+0x1f8>)
 800e3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	f3bf 8f4f 	dsb	sy
 800e3cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e3d0:	f001 ff90 	bl	80102f4 <vPortExitCritical>
				return pdPASS;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e063      	b.n	800e4a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d103      	bne.n	800e3e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3de:	f001 ff89 	bl	80102f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	e05c      	b.n	800e4a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d106      	bne.n	800e3fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3ec:	f107 0314 	add.w	r3, r7, #20
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f001 f89b 	bl	800f52c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3fa:	f001 ff7b 	bl	80102f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3fe:	f000 fdfb 	bl	800eff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e402:	f001 ff47 	bl	8010294 <vPortEnterCritical>
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e40c:	b25b      	sxtb	r3, r3
 800e40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e412:	d103      	bne.n	800e41c <xQueueGenericSend+0x16c>
 800e414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e416:	2200      	movs	r2, #0
 800e418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e41e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e422:	b25b      	sxtb	r3, r3
 800e424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e428:	d103      	bne.n	800e432 <xQueueGenericSend+0x182>
 800e42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42c:	2200      	movs	r2, #0
 800e42e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e432:	f001 ff5f 	bl	80102f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e436:	1d3a      	adds	r2, r7, #4
 800e438:	f107 0314 	add.w	r3, r7, #20
 800e43c:	4611      	mov	r1, r2
 800e43e:	4618      	mov	r0, r3
 800e440:	f001 f88a 	bl	800f558 <xTaskCheckForTimeOut>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d124      	bne.n	800e494 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e44a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e44c:	f000 fb22 	bl	800ea94 <prvIsQueueFull>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d018      	beq.n	800e488 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e458:	3310      	adds	r3, #16
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	4611      	mov	r1, r2
 800e45e:	4618      	mov	r0, r3
 800e460:	f000 ffb0 	bl	800f3c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e466:	f000 faad 	bl	800e9c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e46a:	f000 fdd3 	bl	800f014 <xTaskResumeAll>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	f47f af7c 	bne.w	800e36e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e476:	4b0c      	ldr	r3, [pc, #48]	; (800e4a8 <xQueueGenericSend+0x1f8>)
 800e478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e47c:	601a      	str	r2, [r3, #0]
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	e772      	b.n	800e36e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e48a:	f000 fa9b 	bl	800e9c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e48e:	f000 fdc1 	bl	800f014 <xTaskResumeAll>
 800e492:	e76c      	b.n	800e36e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e496:	f000 fa95 	bl	800e9c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e49a:	f000 fdbb 	bl	800f014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e49e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3738      	adds	r7, #56	; 0x38
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	e000ed04 	.word	0xe000ed04

0800e4ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b090      	sub	sp, #64	; 0x40
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
 800e4b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d10a      	bne.n	800e4da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c8:	f383 8811 	msr	BASEPRI, r3
 800e4cc:	f3bf 8f6f 	isb	sy
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e4d6:	bf00      	nop
 800e4d8:	e7fe      	b.n	800e4d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d103      	bne.n	800e4e8 <xQueueGenericSendFromISR+0x3c>
 800e4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d101      	bne.n	800e4ec <xQueueGenericSendFromISR+0x40>
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	e000      	b.n	800e4ee <xQueueGenericSendFromISR+0x42>
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10a      	bne.n	800e508 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f6:	f383 8811 	msr	BASEPRI, r3
 800e4fa:	f3bf 8f6f 	isb	sy
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e504:	bf00      	nop
 800e506:	e7fe      	b.n	800e506 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	d103      	bne.n	800e516 <xQueueGenericSendFromISR+0x6a>
 800e50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e512:	2b01      	cmp	r3, #1
 800e514:	d101      	bne.n	800e51a <xQueueGenericSendFromISR+0x6e>
 800e516:	2301      	movs	r3, #1
 800e518:	e000      	b.n	800e51c <xQueueGenericSendFromISR+0x70>
 800e51a:	2300      	movs	r3, #0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d10a      	bne.n	800e536 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e524:	f383 8811 	msr	BASEPRI, r3
 800e528:	f3bf 8f6f 	isb	sy
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	623b      	str	r3, [r7, #32]
}
 800e532:	bf00      	nop
 800e534:	e7fe      	b.n	800e534 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e536:	f001 ff8f 	bl	8010458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e53a:	f3ef 8211 	mrs	r2, BASEPRI
 800e53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e542:	f383 8811 	msr	BASEPRI, r3
 800e546:	f3bf 8f6f 	isb	sy
 800e54a:	f3bf 8f4f 	dsb	sy
 800e54e:	61fa      	str	r2, [r7, #28]
 800e550:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e552:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e554:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e55e:	429a      	cmp	r2, r3
 800e560:	d302      	bcc.n	800e568 <xQueueGenericSendFromISR+0xbc>
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	2b02      	cmp	r3, #2
 800e566:	d12f      	bne.n	800e5c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e576:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e578:	683a      	ldr	r2, [r7, #0]
 800e57a:	68b9      	ldr	r1, [r7, #8]
 800e57c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e57e:	f000 f991 	bl	800e8a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e582:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e58a:	d112      	bne.n	800e5b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e590:	2b00      	cmp	r3, #0
 800e592:	d016      	beq.n	800e5c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e596:	3324      	adds	r3, #36	; 0x24
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 ff63 	bl	800f464 <xTaskRemoveFromEventList>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00e      	beq.n	800e5c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00b      	beq.n	800e5c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	601a      	str	r2, [r3, #0]
 800e5b0:	e007      	b.n	800e5c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e5b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	b25a      	sxtb	r2, r3
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e5c6:	e001      	b.n	800e5cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e5d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3740      	adds	r7, #64	; 0x40
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
	...

0800e5e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b08c      	sub	sp, #48	; 0x30
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d10a      	bne.n	800e614 <xQueueReceive+0x30>
	__asm volatile
 800e5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e602:	f383 8811 	msr	BASEPRI, r3
 800e606:	f3bf 8f6f 	isb	sy
 800e60a:	f3bf 8f4f 	dsb	sy
 800e60e:	623b      	str	r3, [r7, #32]
}
 800e610:	bf00      	nop
 800e612:	e7fe      	b.n	800e612 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d103      	bne.n	800e622 <xQueueReceive+0x3e>
 800e61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d101      	bne.n	800e626 <xQueueReceive+0x42>
 800e622:	2301      	movs	r3, #1
 800e624:	e000      	b.n	800e628 <xQueueReceive+0x44>
 800e626:	2300      	movs	r3, #0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d10a      	bne.n	800e642 <xQueueReceive+0x5e>
	__asm volatile
 800e62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e630:	f383 8811 	msr	BASEPRI, r3
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	61fb      	str	r3, [r7, #28]
}
 800e63e:	bf00      	nop
 800e640:	e7fe      	b.n	800e640 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e642:	f001 f8cd 	bl	800f7e0 <xTaskGetSchedulerState>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d102      	bne.n	800e652 <xQueueReceive+0x6e>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d101      	bne.n	800e656 <xQueueReceive+0x72>
 800e652:	2301      	movs	r3, #1
 800e654:	e000      	b.n	800e658 <xQueueReceive+0x74>
 800e656:	2300      	movs	r3, #0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10a      	bne.n	800e672 <xQueueReceive+0x8e>
	__asm volatile
 800e65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e660:	f383 8811 	msr	BASEPRI, r3
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	61bb      	str	r3, [r7, #24]
}
 800e66e:	bf00      	nop
 800e670:	e7fe      	b.n	800e670 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e672:	f001 fe0f 	bl	8010294 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e67a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d01f      	beq.n	800e6c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e682:	68b9      	ldr	r1, [r7, #8]
 800e684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e686:	f000 f977 	bl	800e978 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68c:	1e5a      	subs	r2, r3, #1
 800e68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e690:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e694:	691b      	ldr	r3, [r3, #16]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d00f      	beq.n	800e6ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69c:	3310      	adds	r3, #16
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f000 fee0 	bl	800f464 <xTaskRemoveFromEventList>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d007      	beq.n	800e6ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e6aa:	4b3d      	ldr	r3, [pc, #244]	; (800e7a0 <xQueueReceive+0x1bc>)
 800e6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e6ba:	f001 fe1b 	bl	80102f4 <vPortExitCritical>
				return pdPASS;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e069      	b.n	800e796 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d103      	bne.n	800e6d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6c8:	f001 fe14 	bl	80102f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	e062      	b.n	800e796 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d106      	bne.n	800e6e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6d6:	f107 0310 	add.w	r3, r7, #16
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f000 ff26 	bl	800f52c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6e4:	f001 fe06 	bl	80102f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6e8:	f000 fc86 	bl	800eff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6ec:	f001 fdd2 	bl	8010294 <vPortEnterCritical>
 800e6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6f6:	b25b      	sxtb	r3, r3
 800e6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6fc:	d103      	bne.n	800e706 <xQueueReceive+0x122>
 800e6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e700:	2200      	movs	r2, #0
 800e702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e70c:	b25b      	sxtb	r3, r3
 800e70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e712:	d103      	bne.n	800e71c <xQueueReceive+0x138>
 800e714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e716:	2200      	movs	r2, #0
 800e718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e71c:	f001 fdea 	bl	80102f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e720:	1d3a      	adds	r2, r7, #4
 800e722:	f107 0310 	add.w	r3, r7, #16
 800e726:	4611      	mov	r1, r2
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 ff15 	bl	800f558 <xTaskCheckForTimeOut>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d123      	bne.n	800e77c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e736:	f000 f997 	bl	800ea68 <prvIsQueueEmpty>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d017      	beq.n	800e770 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e742:	3324      	adds	r3, #36	; 0x24
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	4611      	mov	r1, r2
 800e748:	4618      	mov	r0, r3
 800e74a:	f000 fe3b 	bl	800f3c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e750:	f000 f938 	bl	800e9c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e754:	f000 fc5e 	bl	800f014 <xTaskResumeAll>
 800e758:	4603      	mov	r3, r0
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d189      	bne.n	800e672 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e75e:	4b10      	ldr	r3, [pc, #64]	; (800e7a0 <xQueueReceive+0x1bc>)
 800e760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e764:	601a      	str	r2, [r3, #0]
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	e780      	b.n	800e672 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e772:	f000 f927 	bl	800e9c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e776:	f000 fc4d 	bl	800f014 <xTaskResumeAll>
 800e77a:	e77a      	b.n	800e672 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e77c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e77e:	f000 f921 	bl	800e9c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e782:	f000 fc47 	bl	800f014 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e788:	f000 f96e 	bl	800ea68 <prvIsQueueEmpty>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	f43f af6f 	beq.w	800e672 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e794:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e796:	4618      	mov	r0, r3
 800e798:	3730      	adds	r7, #48	; 0x30
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	e000ed04 	.word	0xe000ed04

0800e7a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08e      	sub	sp, #56	; 0x38
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10a      	bne.n	800e7d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	623b      	str	r3, [r7, #32]
}
 800e7cc:	bf00      	nop
 800e7ce:	e7fe      	b.n	800e7ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d103      	bne.n	800e7de <xQueueReceiveFromISR+0x3a>
 800e7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d101      	bne.n	800e7e2 <xQueueReceiveFromISR+0x3e>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e000      	b.n	800e7e4 <xQueueReceiveFromISR+0x40>
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10a      	bne.n	800e7fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ec:	f383 8811 	msr	BASEPRI, r3
 800e7f0:	f3bf 8f6f 	isb	sy
 800e7f4:	f3bf 8f4f 	dsb	sy
 800e7f8:	61fb      	str	r3, [r7, #28]
}
 800e7fa:	bf00      	nop
 800e7fc:	e7fe      	b.n	800e7fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7fe:	f001 fe2b 	bl	8010458 <vPortValidateInterruptPriority>
	__asm volatile
 800e802:	f3ef 8211 	mrs	r2, BASEPRI
 800e806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	61ba      	str	r2, [r7, #24]
 800e818:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e81a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e81c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e822:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e826:	2b00      	cmp	r3, #0
 800e828:	d02f      	beq.n	800e88a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e834:	68b9      	ldr	r1, [r7, #8]
 800e836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e838:	f000 f89e 	bl	800e978 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83e:	1e5a      	subs	r2, r3, #1
 800e840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e842:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e844:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e84c:	d112      	bne.n	800e874 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d016      	beq.n	800e884 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e858:	3310      	adds	r3, #16
 800e85a:	4618      	mov	r0, r3
 800e85c:	f000 fe02 	bl	800f464 <xTaskRemoveFromEventList>
 800e860:	4603      	mov	r3, r0
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00e      	beq.n	800e884 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00b      	beq.n	800e884 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	601a      	str	r2, [r3, #0]
 800e872:	e007      	b.n	800e884 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e878:	3301      	adds	r3, #1
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	b25a      	sxtb	r2, r3
 800e87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e884:	2301      	movs	r3, #1
 800e886:	637b      	str	r3, [r7, #52]	; 0x34
 800e888:	e001      	b.n	800e88e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e88a:	2300      	movs	r3, #0
 800e88c:	637b      	str	r3, [r7, #52]	; 0x34
 800e88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e890:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	f383 8811 	msr	BASEPRI, r3
}
 800e898:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3738      	adds	r7, #56	; 0x38
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b086      	sub	sp, #24
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	60b9      	str	r1, [r7, #8]
 800e8ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d10d      	bne.n	800e8de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d14d      	bne.n	800e966 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	689b      	ldr	r3, [r3, #8]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f000 ffa4 	bl	800f81c <xTaskPriorityDisinherit>
 800e8d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	609a      	str	r2, [r3, #8]
 800e8dc:	e043      	b.n	800e966 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d119      	bne.n	800e918 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6858      	ldr	r0, [r3, #4]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	68b9      	ldr	r1, [r7, #8]
 800e8f0:	f002 fe18 	bl	8011524 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	685a      	ldr	r2, [r3, #4]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8fc:	441a      	add	r2, r3
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d32b      	bcc.n	800e966 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	605a      	str	r2, [r3, #4]
 800e916:	e026      	b.n	800e966 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	68d8      	ldr	r0, [r3, #12]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e920:	461a      	mov	r2, r3
 800e922:	68b9      	ldr	r1, [r7, #8]
 800e924:	f002 fdfe 	bl	8011524 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	68da      	ldr	r2, [r3, #12]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e930:	425b      	negs	r3, r3
 800e932:	441a      	add	r2, r3
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	68da      	ldr	r2, [r3, #12]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d207      	bcs.n	800e954 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	689a      	ldr	r2, [r3, #8]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e94c:	425b      	negs	r3, r3
 800e94e:	441a      	add	r2, r3
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2b02      	cmp	r3, #2
 800e958:	d105      	bne.n	800e966 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d002      	beq.n	800e966 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	3b01      	subs	r3, #1
 800e964:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	1c5a      	adds	r2, r3, #1
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e96e:	697b      	ldr	r3, [r7, #20]
}
 800e970:	4618      	mov	r0, r3
 800e972:	3718      	adds	r7, #24
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e986:	2b00      	cmp	r3, #0
 800e988:	d018      	beq.n	800e9bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	68da      	ldr	r2, [r3, #12]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e992:	441a      	add	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	68da      	ldr	r2, [r3, #12]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d303      	bcc.n	800e9ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	68d9      	ldr	r1, [r3, #12]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	6838      	ldr	r0, [r7, #0]
 800e9b8:	f002 fdb4 	bl	8011524 <memcpy>
	}
}
 800e9bc:	bf00      	nop
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e9cc:	f001 fc62 	bl	8010294 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9d8:	e011      	b.n	800e9fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d012      	beq.n	800ea08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	3324      	adds	r3, #36	; 0x24
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f000 fd3c 	bl	800f464 <xTaskRemoveFromEventList>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d001      	beq.n	800e9f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e9f2:	f000 fe13 	bl	800f61c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e9f6:	7bfb      	ldrb	r3, [r7, #15]
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	dce9      	bgt.n	800e9da <prvUnlockQueue+0x16>
 800ea06:	e000      	b.n	800ea0a <prvUnlockQueue+0x46>
					break;
 800ea08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	22ff      	movs	r2, #255	; 0xff
 800ea0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ea12:	f001 fc6f 	bl	80102f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ea16:	f001 fc3d 	bl	8010294 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea22:	e011      	b.n	800ea48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d012      	beq.n	800ea52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	3310      	adds	r3, #16
 800ea30:	4618      	mov	r0, r3
 800ea32:	f000 fd17 	bl	800f464 <xTaskRemoveFromEventList>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d001      	beq.n	800ea40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea3c:	f000 fdee 	bl	800f61c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea40:	7bbb      	ldrb	r3, [r7, #14]
 800ea42:	3b01      	subs	r3, #1
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	dce9      	bgt.n	800ea24 <prvUnlockQueue+0x60>
 800ea50:	e000      	b.n	800ea54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	22ff      	movs	r2, #255	; 0xff
 800ea58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ea5c:	f001 fc4a 	bl	80102f4 <vPortExitCritical>
}
 800ea60:	bf00      	nop
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea70:	f001 fc10 	bl	8010294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d102      	bne.n	800ea82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	60fb      	str	r3, [r7, #12]
 800ea80:	e001      	b.n	800ea86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea82:	2300      	movs	r3, #0
 800ea84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea86:	f001 fc35 	bl	80102f4 <vPortExitCritical>

	return xReturn;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3710      	adds	r7, #16
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea9c:	f001 fbfa 	bl	8010294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d102      	bne.n	800eab2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eaac:	2301      	movs	r3, #1
 800eaae:	60fb      	str	r3, [r7, #12]
 800eab0:	e001      	b.n	800eab6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eab2:	2300      	movs	r3, #0
 800eab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eab6:	f001 fc1d 	bl	80102f4 <vPortExitCritical>

	return xReturn;
 800eaba:	68fb      	ldr	r3, [r7, #12]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3710      	adds	r7, #16
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eac4:	b480      	push	{r7}
 800eac6:	b085      	sub	sp, #20
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eace:	2300      	movs	r3, #0
 800ead0:	60fb      	str	r3, [r7, #12]
 800ead2:	e014      	b.n	800eafe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ead4:	4a0f      	ldr	r2, [pc, #60]	; (800eb14 <vQueueAddToRegistry+0x50>)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d10b      	bne.n	800eaf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eae0:	490c      	ldr	r1, [pc, #48]	; (800eb14 <vQueueAddToRegistry+0x50>)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	683a      	ldr	r2, [r7, #0]
 800eae6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eaea:	4a0a      	ldr	r2, [pc, #40]	; (800eb14 <vQueueAddToRegistry+0x50>)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	00db      	lsls	r3, r3, #3
 800eaf0:	4413      	add	r3, r2
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eaf6:	e006      	b.n	800eb06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	3301      	adds	r3, #1
 800eafc:	60fb      	str	r3, [r7, #12]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	2b07      	cmp	r3, #7
 800eb02:	d9e7      	bls.n	800ead4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb04:	bf00      	nop
 800eb06:	bf00      	nop
 800eb08:	3714      	adds	r7, #20
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	2000289c 	.word	0x2000289c

0800eb18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b086      	sub	sp, #24
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb28:	f001 fbb4 	bl	8010294 <vPortEnterCritical>
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb32:	b25b      	sxtb	r3, r3
 800eb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb38:	d103      	bne.n	800eb42 <vQueueWaitForMessageRestricted+0x2a>
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb48:	b25b      	sxtb	r3, r3
 800eb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb4e:	d103      	bne.n	800eb58 <vQueueWaitForMessageRestricted+0x40>
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	2200      	movs	r2, #0
 800eb54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb58:	f001 fbcc 	bl	80102f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d106      	bne.n	800eb72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	3324      	adds	r3, #36	; 0x24
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	68b9      	ldr	r1, [r7, #8]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f000 fc4d 	bl	800f40c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb72:	6978      	ldr	r0, [r7, #20]
 800eb74:	f7ff ff26 	bl	800e9c4 <prvUnlockQueue>
	}
 800eb78:	bf00      	nop
 800eb7a:	3718      	adds	r7, #24
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b08e      	sub	sp, #56	; 0x38
 800eb84:	af04      	add	r7, sp, #16
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	607a      	str	r2, [r7, #4]
 800eb8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10a      	bne.n	800ebaa <xTaskCreateStatic+0x2a>
	__asm volatile
 800eb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	623b      	str	r3, [r7, #32]
}
 800eba6:	bf00      	nop
 800eba8:	e7fe      	b.n	800eba8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10a      	bne.n	800ebc6 <xTaskCreateStatic+0x46>
	__asm volatile
 800ebb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb4:	f383 8811 	msr	BASEPRI, r3
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	f3bf 8f4f 	dsb	sy
 800ebc0:	61fb      	str	r3, [r7, #28]
}
 800ebc2:	bf00      	nop
 800ebc4:	e7fe      	b.n	800ebc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ebc6:	235c      	movs	r3, #92	; 0x5c
 800ebc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	2b5c      	cmp	r3, #92	; 0x5c
 800ebce:	d00a      	beq.n	800ebe6 <xTaskCreateStatic+0x66>
	__asm volatile
 800ebd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	61bb      	str	r3, [r7, #24]
}
 800ebe2:	bf00      	nop
 800ebe4:	e7fe      	b.n	800ebe4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ebe6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ebe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d01e      	beq.n	800ec2c <xTaskCreateStatic+0xac>
 800ebee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d01b      	beq.n	800ec2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ebf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebfc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ebfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec00:	2202      	movs	r2, #2
 800ec02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ec06:	2300      	movs	r3, #0
 800ec08:	9303      	str	r3, [sp, #12]
 800ec0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0c:	9302      	str	r3, [sp, #8]
 800ec0e:	f107 0314 	add.w	r3, r7, #20
 800ec12:	9301      	str	r3, [sp, #4]
 800ec14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec16:	9300      	str	r3, [sp, #0]
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	68b9      	ldr	r1, [r7, #8]
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	f000 f850 	bl	800ecc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec26:	f000 f8dd 	bl	800ede4 <prvAddNewTaskToReadyList>
 800ec2a:	e001      	b.n	800ec30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec30:	697b      	ldr	r3, [r7, #20]
	}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3728      	adds	r7, #40	; 0x28
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}

0800ec3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec3a:	b580      	push	{r7, lr}
 800ec3c:	b08c      	sub	sp, #48	; 0x30
 800ec3e:	af04      	add	r7, sp, #16
 800ec40:	60f8      	str	r0, [r7, #12]
 800ec42:	60b9      	str	r1, [r7, #8]
 800ec44:	603b      	str	r3, [r7, #0]
 800ec46:	4613      	mov	r3, r2
 800ec48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec4a:	88fb      	ldrh	r3, [r7, #6]
 800ec4c:	009b      	lsls	r3, r3, #2
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f001 fc42 	bl	80104d8 <pvPortMalloc>
 800ec54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d00e      	beq.n	800ec7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec5c:	205c      	movs	r0, #92	; 0x5c
 800ec5e:	f001 fc3b 	bl	80104d8 <pvPortMalloc>
 800ec62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d003      	beq.n	800ec72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	697a      	ldr	r2, [r7, #20]
 800ec6e:	631a      	str	r2, [r3, #48]	; 0x30
 800ec70:	e005      	b.n	800ec7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec72:	6978      	ldr	r0, [r7, #20]
 800ec74:	f001 fcfc 	bl	8010670 <vPortFree>
 800ec78:	e001      	b.n	800ec7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d017      	beq.n	800ecb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec8c:	88fa      	ldrh	r2, [r7, #6]
 800ec8e:	2300      	movs	r3, #0
 800ec90:	9303      	str	r3, [sp, #12]
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	9302      	str	r3, [sp, #8]
 800ec96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec98:	9301      	str	r3, [sp, #4]
 800ec9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9c:	9300      	str	r3, [sp, #0]
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	68b9      	ldr	r1, [r7, #8]
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f000 f80e 	bl	800ecc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eca8:	69f8      	ldr	r0, [r7, #28]
 800ecaa:	f000 f89b 	bl	800ede4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ecae:	2301      	movs	r3, #1
 800ecb0:	61bb      	str	r3, [r7, #24]
 800ecb2:	e002      	b.n	800ecba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ecb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ecb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ecba:	69bb      	ldr	r3, [r7, #24]
	}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3720      	adds	r7, #32
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b088      	sub	sp, #32
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
 800ecd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	461a      	mov	r2, r3
 800ecdc:	21a5      	movs	r1, #165	; 0xa5
 800ecde:	f002 fc2f 	bl	8011540 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ece2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ecec:	3b01      	subs	r3, #1
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	4413      	add	r3, r2
 800ecf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	f023 0307 	bic.w	r3, r3, #7
 800ecfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	f003 0307 	and.w	r3, r3, #7
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00a      	beq.n	800ed1c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ed06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0a:	f383 8811 	msr	BASEPRI, r3
 800ed0e:	f3bf 8f6f 	isb	sy
 800ed12:	f3bf 8f4f 	dsb	sy
 800ed16:	617b      	str	r3, [r7, #20]
}
 800ed18:	bf00      	nop
 800ed1a:	e7fe      	b.n	800ed1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d01f      	beq.n	800ed62 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed22:	2300      	movs	r3, #0
 800ed24:	61fb      	str	r3, [r7, #28]
 800ed26:	e012      	b.n	800ed4e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed28:	68ba      	ldr	r2, [r7, #8]
 800ed2a:	69fb      	ldr	r3, [r7, #28]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	7819      	ldrb	r1, [r3, #0]
 800ed30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	4413      	add	r3, r2
 800ed36:	3334      	adds	r3, #52	; 0x34
 800ed38:	460a      	mov	r2, r1
 800ed3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed3c:	68ba      	ldr	r2, [r7, #8]
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	4413      	add	r3, r2
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d006      	beq.n	800ed56 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	61fb      	str	r3, [r7, #28]
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	2b0f      	cmp	r3, #15
 800ed52:	d9e9      	bls.n	800ed28 <prvInitialiseNewTask+0x64>
 800ed54:	e000      	b.n	800ed58 <prvInitialiseNewTask+0x94>
			{
				break;
 800ed56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed60:	e003      	b.n	800ed6a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed64:	2200      	movs	r2, #0
 800ed66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6c:	2b37      	cmp	r3, #55	; 0x37
 800ed6e:	d901      	bls.n	800ed74 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed70:	2337      	movs	r3, #55	; 0x37
 800ed72:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed78:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed7e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ed80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed82:	2200      	movs	r2, #0
 800ed84:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	3304      	adds	r3, #4
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7ff f8be 	bl	800df0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed92:	3318      	adds	r3, #24
 800ed94:	4618      	mov	r0, r3
 800ed96:	f7ff f8b9 	bl	800df0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ed9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800edb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb2:	2200      	movs	r2, #0
 800edb4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800edb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb8:	2200      	movs	r2, #0
 800edba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800edbe:	683a      	ldr	r2, [r7, #0]
 800edc0:	68f9      	ldr	r1, [r7, #12]
 800edc2:	69b8      	ldr	r0, [r7, #24]
 800edc4:	f001 f93a 	bl	801003c <pxPortInitialiseStack>
 800edc8:	4602      	mov	r2, r0
 800edca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edcc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800edce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d002      	beq.n	800edda <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800edd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edda:	bf00      	nop
 800eddc:	3720      	adds	r7, #32
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
	...

0800ede4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800edec:	f001 fa52 	bl	8010294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800edf0:	4b2d      	ldr	r3, [pc, #180]	; (800eea8 <prvAddNewTaskToReadyList+0xc4>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	3301      	adds	r3, #1
 800edf6:	4a2c      	ldr	r2, [pc, #176]	; (800eea8 <prvAddNewTaskToReadyList+0xc4>)
 800edf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800edfa:	4b2c      	ldr	r3, [pc, #176]	; (800eeac <prvAddNewTaskToReadyList+0xc8>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d109      	bne.n	800ee16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee02:	4a2a      	ldr	r2, [pc, #168]	; (800eeac <prvAddNewTaskToReadyList+0xc8>)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee08:	4b27      	ldr	r3, [pc, #156]	; (800eea8 <prvAddNewTaskToReadyList+0xc4>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d110      	bne.n	800ee32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee10:	f000 fc28 	bl	800f664 <prvInitialiseTaskLists>
 800ee14:	e00d      	b.n	800ee32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee16:	4b26      	ldr	r3, [pc, #152]	; (800eeb0 <prvAddNewTaskToReadyList+0xcc>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d109      	bne.n	800ee32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee1e:	4b23      	ldr	r3, [pc, #140]	; (800eeac <prvAddNewTaskToReadyList+0xc8>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d802      	bhi.n	800ee32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee2c:	4a1f      	ldr	r2, [pc, #124]	; (800eeac <prvAddNewTaskToReadyList+0xc8>)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee32:	4b20      	ldr	r3, [pc, #128]	; (800eeb4 <prvAddNewTaskToReadyList+0xd0>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	3301      	adds	r3, #1
 800ee38:	4a1e      	ldr	r2, [pc, #120]	; (800eeb4 <prvAddNewTaskToReadyList+0xd0>)
 800ee3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee3c:	4b1d      	ldr	r3, [pc, #116]	; (800eeb4 <prvAddNewTaskToReadyList+0xd0>)
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee48:	4b1b      	ldr	r3, [pc, #108]	; (800eeb8 <prvAddNewTaskToReadyList+0xd4>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d903      	bls.n	800ee58 <prvAddNewTaskToReadyList+0x74>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee54:	4a18      	ldr	r2, [pc, #96]	; (800eeb8 <prvAddNewTaskToReadyList+0xd4>)
 800ee56:	6013      	str	r3, [r2, #0]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	4a15      	ldr	r2, [pc, #84]	; (800eebc <prvAddNewTaskToReadyList+0xd8>)
 800ee66:	441a      	add	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	4610      	mov	r0, r2
 800ee70:	f7ff f859 	bl	800df26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee74:	f001 fa3e 	bl	80102f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee78:	4b0d      	ldr	r3, [pc, #52]	; (800eeb0 <prvAddNewTaskToReadyList+0xcc>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00e      	beq.n	800ee9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee80:	4b0a      	ldr	r3, [pc, #40]	; (800eeac <prvAddNewTaskToReadyList+0xc8>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d207      	bcs.n	800ee9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ee8e:	4b0c      	ldr	r3, [pc, #48]	; (800eec0 <prvAddNewTaskToReadyList+0xdc>)
 800ee90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee9e:	bf00      	nop
 800eea0:	3708      	adds	r7, #8
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	20000d80 	.word	0x20000d80
 800eeac:	200008ac 	.word	0x200008ac
 800eeb0:	20000d8c 	.word	0x20000d8c
 800eeb4:	20000d9c 	.word	0x20000d9c
 800eeb8:	20000d88 	.word	0x20000d88
 800eebc:	200008b0 	.word	0x200008b0
 800eec0:	e000ed04 	.word	0xe000ed04

0800eec4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eecc:	2300      	movs	r3, #0
 800eece:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d017      	beq.n	800ef06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eed6:	4b13      	ldr	r3, [pc, #76]	; (800ef24 <vTaskDelay+0x60>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00a      	beq.n	800eef4 <vTaskDelay+0x30>
	__asm volatile
 800eede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee2:	f383 8811 	msr	BASEPRI, r3
 800eee6:	f3bf 8f6f 	isb	sy
 800eeea:	f3bf 8f4f 	dsb	sy
 800eeee:	60bb      	str	r3, [r7, #8]
}
 800eef0:	bf00      	nop
 800eef2:	e7fe      	b.n	800eef2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eef4:	f000 f880 	bl	800eff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eef8:	2100      	movs	r1, #0
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 fcfc 	bl	800f8f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ef00:	f000 f888 	bl	800f014 <xTaskResumeAll>
 800ef04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d107      	bne.n	800ef1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ef0c:	4b06      	ldr	r3, [pc, #24]	; (800ef28 <vTaskDelay+0x64>)
 800ef0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef12:	601a      	str	r2, [r3, #0]
 800ef14:	f3bf 8f4f 	dsb	sy
 800ef18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef1c:	bf00      	nop
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	20000da8 	.word	0x20000da8
 800ef28:	e000ed04 	.word	0xe000ed04

0800ef2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b08a      	sub	sp, #40	; 0x28
 800ef30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ef32:	2300      	movs	r3, #0
 800ef34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ef36:	2300      	movs	r3, #0
 800ef38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ef3a:	463a      	mov	r2, r7
 800ef3c:	1d39      	adds	r1, r7, #4
 800ef3e:	f107 0308 	add.w	r3, r7, #8
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fe ff8e 	bl	800de64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ef48:	6839      	ldr	r1, [r7, #0]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	68ba      	ldr	r2, [r7, #8]
 800ef4e:	9202      	str	r2, [sp, #8]
 800ef50:	9301      	str	r3, [sp, #4]
 800ef52:	2300      	movs	r3, #0
 800ef54:	9300      	str	r3, [sp, #0]
 800ef56:	2300      	movs	r3, #0
 800ef58:	460a      	mov	r2, r1
 800ef5a:	4921      	ldr	r1, [pc, #132]	; (800efe0 <vTaskStartScheduler+0xb4>)
 800ef5c:	4821      	ldr	r0, [pc, #132]	; (800efe4 <vTaskStartScheduler+0xb8>)
 800ef5e:	f7ff fe0f 	bl	800eb80 <xTaskCreateStatic>
 800ef62:	4603      	mov	r3, r0
 800ef64:	4a20      	ldr	r2, [pc, #128]	; (800efe8 <vTaskStartScheduler+0xbc>)
 800ef66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef68:	4b1f      	ldr	r3, [pc, #124]	; (800efe8 <vTaskStartScheduler+0xbc>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d002      	beq.n	800ef76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef70:	2301      	movs	r3, #1
 800ef72:	617b      	str	r3, [r7, #20]
 800ef74:	e001      	b.n	800ef7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef76:	2300      	movs	r3, #0
 800ef78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d102      	bne.n	800ef86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef80:	f000 fd0e 	bl	800f9a0 <xTimerCreateTimerTask>
 800ef84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d116      	bne.n	800efba <vTaskStartScheduler+0x8e>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	f383 8811 	msr	BASEPRI, r3
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	f3bf 8f4f 	dsb	sy
 800ef9c:	613b      	str	r3, [r7, #16]
}
 800ef9e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800efa0:	4b12      	ldr	r3, [pc, #72]	; (800efec <vTaskStartScheduler+0xc0>)
 800efa2:	f04f 32ff 	mov.w	r2, #4294967295
 800efa6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800efa8:	4b11      	ldr	r3, [pc, #68]	; (800eff0 <vTaskStartScheduler+0xc4>)
 800efaa:	2201      	movs	r2, #1
 800efac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800efae:	4b11      	ldr	r3, [pc, #68]	; (800eff4 <vTaskStartScheduler+0xc8>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800efb4:	f001 f8cc 	bl	8010150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800efb8:	e00e      	b.n	800efd8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efc0:	d10a      	bne.n	800efd8 <vTaskStartScheduler+0xac>
	__asm volatile
 800efc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc6:	f383 8811 	msr	BASEPRI, r3
 800efca:	f3bf 8f6f 	isb	sy
 800efce:	f3bf 8f4f 	dsb	sy
 800efd2:	60fb      	str	r3, [r7, #12]
}
 800efd4:	bf00      	nop
 800efd6:	e7fe      	b.n	800efd6 <vTaskStartScheduler+0xaa>
}
 800efd8:	bf00      	nop
 800efda:	3718      	adds	r7, #24
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	08011580 	.word	0x08011580
 800efe4:	0800f635 	.word	0x0800f635
 800efe8:	20000da4 	.word	0x20000da4
 800efec:	20000da0 	.word	0x20000da0
 800eff0:	20000d8c 	.word	0x20000d8c
 800eff4:	20000d84 	.word	0x20000d84

0800eff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eff8:	b480      	push	{r7}
 800effa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800effc:	4b04      	ldr	r3, [pc, #16]	; (800f010 <vTaskSuspendAll+0x18>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	3301      	adds	r3, #1
 800f002:	4a03      	ldr	r2, [pc, #12]	; (800f010 <vTaskSuspendAll+0x18>)
 800f004:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f006:	bf00      	nop
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr
 800f010:	20000da8 	.word	0x20000da8

0800f014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f01a:	2300      	movs	r3, #0
 800f01c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f01e:	2300      	movs	r3, #0
 800f020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f022:	4b42      	ldr	r3, [pc, #264]	; (800f12c <xTaskResumeAll+0x118>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10a      	bne.n	800f040 <xTaskResumeAll+0x2c>
	__asm volatile
 800f02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f02e:	f383 8811 	msr	BASEPRI, r3
 800f032:	f3bf 8f6f 	isb	sy
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	603b      	str	r3, [r7, #0]
}
 800f03c:	bf00      	nop
 800f03e:	e7fe      	b.n	800f03e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f040:	f001 f928 	bl	8010294 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f044:	4b39      	ldr	r3, [pc, #228]	; (800f12c <xTaskResumeAll+0x118>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	3b01      	subs	r3, #1
 800f04a:	4a38      	ldr	r2, [pc, #224]	; (800f12c <xTaskResumeAll+0x118>)
 800f04c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f04e:	4b37      	ldr	r3, [pc, #220]	; (800f12c <xTaskResumeAll+0x118>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d162      	bne.n	800f11c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f056:	4b36      	ldr	r3, [pc, #216]	; (800f130 <xTaskResumeAll+0x11c>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d05e      	beq.n	800f11c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f05e:	e02f      	b.n	800f0c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f060:	4b34      	ldr	r3, [pc, #208]	; (800f134 <xTaskResumeAll+0x120>)
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	3318      	adds	r3, #24
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fe ffb7 	bl	800dfe0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	3304      	adds	r3, #4
 800f076:	4618      	mov	r0, r3
 800f078:	f7fe ffb2 	bl	800dfe0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f080:	4b2d      	ldr	r3, [pc, #180]	; (800f138 <xTaskResumeAll+0x124>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	429a      	cmp	r2, r3
 800f086:	d903      	bls.n	800f090 <xTaskResumeAll+0x7c>
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f08c:	4a2a      	ldr	r2, [pc, #168]	; (800f138 <xTaskResumeAll+0x124>)
 800f08e:	6013      	str	r3, [r2, #0]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f094:	4613      	mov	r3, r2
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4413      	add	r3, r2
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	4a27      	ldr	r2, [pc, #156]	; (800f13c <xTaskResumeAll+0x128>)
 800f09e:	441a      	add	r2, r3
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	3304      	adds	r3, #4
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4610      	mov	r0, r2
 800f0a8:	f7fe ff3d 	bl	800df26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0b0:	4b23      	ldr	r3, [pc, #140]	; (800f140 <xTaskResumeAll+0x12c>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d302      	bcc.n	800f0c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f0ba:	4b22      	ldr	r3, [pc, #136]	; (800f144 <xTaskResumeAll+0x130>)
 800f0bc:	2201      	movs	r2, #1
 800f0be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0c0:	4b1c      	ldr	r3, [pc, #112]	; (800f134 <xTaskResumeAll+0x120>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1cb      	bne.n	800f060 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f0ce:	f000 fb67 	bl	800f7a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f0d2:	4b1d      	ldr	r3, [pc, #116]	; (800f148 <xTaskResumeAll+0x134>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d010      	beq.n	800f100 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f0de:	f000 f859 	bl	800f194 <xTaskIncrementTick>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f0e8:	4b16      	ldr	r3, [pc, #88]	; (800f144 <xTaskResumeAll+0x130>)
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	3b01      	subs	r3, #1
 800f0f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d1f1      	bne.n	800f0de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f0fa:	4b13      	ldr	r3, [pc, #76]	; (800f148 <xTaskResumeAll+0x134>)
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f100:	4b10      	ldr	r3, [pc, #64]	; (800f144 <xTaskResumeAll+0x130>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d009      	beq.n	800f11c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f108:	2301      	movs	r3, #1
 800f10a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f10c:	4b0f      	ldr	r3, [pc, #60]	; (800f14c <xTaskResumeAll+0x138>)
 800f10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	f3bf 8f4f 	dsb	sy
 800f118:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f11c:	f001 f8ea 	bl	80102f4 <vPortExitCritical>

	return xAlreadyYielded;
 800f120:	68bb      	ldr	r3, [r7, #8]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	20000da8 	.word	0x20000da8
 800f130:	20000d80 	.word	0x20000d80
 800f134:	20000d40 	.word	0x20000d40
 800f138:	20000d88 	.word	0x20000d88
 800f13c:	200008b0 	.word	0x200008b0
 800f140:	200008ac 	.word	0x200008ac
 800f144:	20000d94 	.word	0x20000d94
 800f148:	20000d90 	.word	0x20000d90
 800f14c:	e000ed04 	.word	0xe000ed04

0800f150 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f156:	4b05      	ldr	r3, [pc, #20]	; (800f16c <xTaskGetTickCount+0x1c>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f15c:	687b      	ldr	r3, [r7, #4]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	370c      	adds	r7, #12
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	20000d84 	.word	0x20000d84

0800f170 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f176:	f001 f96f 	bl	8010458 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f17a:	2300      	movs	r3, #0
 800f17c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f17e:	4b04      	ldr	r3, [pc, #16]	; (800f190 <xTaskGetTickCountFromISR+0x20>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f184:	683b      	ldr	r3, [r7, #0]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3708      	adds	r7, #8
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	20000d84 	.word	0x20000d84

0800f194 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b086      	sub	sp, #24
 800f198:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f19a:	2300      	movs	r3, #0
 800f19c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f19e:	4b4f      	ldr	r3, [pc, #316]	; (800f2dc <xTaskIncrementTick+0x148>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f040 808f 	bne.w	800f2c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f1a8:	4b4d      	ldr	r3, [pc, #308]	; (800f2e0 <xTaskIncrementTick+0x14c>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f1b0:	4a4b      	ldr	r2, [pc, #300]	; (800f2e0 <xTaskIncrementTick+0x14c>)
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f1b6:	693b      	ldr	r3, [r7, #16]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d120      	bne.n	800f1fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f1bc:	4b49      	ldr	r3, [pc, #292]	; (800f2e4 <xTaskIncrementTick+0x150>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00a      	beq.n	800f1dc <xTaskIncrementTick+0x48>
	__asm volatile
 800f1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ca:	f383 8811 	msr	BASEPRI, r3
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	f3bf 8f4f 	dsb	sy
 800f1d6:	603b      	str	r3, [r7, #0]
}
 800f1d8:	bf00      	nop
 800f1da:	e7fe      	b.n	800f1da <xTaskIncrementTick+0x46>
 800f1dc:	4b41      	ldr	r3, [pc, #260]	; (800f2e4 <xTaskIncrementTick+0x150>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	60fb      	str	r3, [r7, #12]
 800f1e2:	4b41      	ldr	r3, [pc, #260]	; (800f2e8 <xTaskIncrementTick+0x154>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	4a3f      	ldr	r2, [pc, #252]	; (800f2e4 <xTaskIncrementTick+0x150>)
 800f1e8:	6013      	str	r3, [r2, #0]
 800f1ea:	4a3f      	ldr	r2, [pc, #252]	; (800f2e8 <xTaskIncrementTick+0x154>)
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	6013      	str	r3, [r2, #0]
 800f1f0:	4b3e      	ldr	r3, [pc, #248]	; (800f2ec <xTaskIncrementTick+0x158>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	4a3d      	ldr	r2, [pc, #244]	; (800f2ec <xTaskIncrementTick+0x158>)
 800f1f8:	6013      	str	r3, [r2, #0]
 800f1fa:	f000 fad1 	bl	800f7a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f1fe:	4b3c      	ldr	r3, [pc, #240]	; (800f2f0 <xTaskIncrementTick+0x15c>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	693a      	ldr	r2, [r7, #16]
 800f204:	429a      	cmp	r2, r3
 800f206:	d349      	bcc.n	800f29c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f208:	4b36      	ldr	r3, [pc, #216]	; (800f2e4 <xTaskIncrementTick+0x150>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d104      	bne.n	800f21c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f212:	4b37      	ldr	r3, [pc, #220]	; (800f2f0 <xTaskIncrementTick+0x15c>)
 800f214:	f04f 32ff 	mov.w	r2, #4294967295
 800f218:	601a      	str	r2, [r3, #0]
					break;
 800f21a:	e03f      	b.n	800f29c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f21c:	4b31      	ldr	r3, [pc, #196]	; (800f2e4 <xTaskIncrementTick+0x150>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f22c:	693a      	ldr	r2, [r7, #16]
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	429a      	cmp	r2, r3
 800f232:	d203      	bcs.n	800f23c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f234:	4a2e      	ldr	r2, [pc, #184]	; (800f2f0 <xTaskIncrementTick+0x15c>)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f23a:	e02f      	b.n	800f29c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	3304      	adds	r3, #4
 800f240:	4618      	mov	r0, r3
 800f242:	f7fe fecd 	bl	800dfe0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d004      	beq.n	800f258 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	3318      	adds	r3, #24
 800f252:	4618      	mov	r0, r3
 800f254:	f7fe fec4 	bl	800dfe0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f25c:	4b25      	ldr	r3, [pc, #148]	; (800f2f4 <xTaskIncrementTick+0x160>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	429a      	cmp	r2, r3
 800f262:	d903      	bls.n	800f26c <xTaskIncrementTick+0xd8>
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f268:	4a22      	ldr	r2, [pc, #136]	; (800f2f4 <xTaskIncrementTick+0x160>)
 800f26a:	6013      	str	r3, [r2, #0]
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f270:	4613      	mov	r3, r2
 800f272:	009b      	lsls	r3, r3, #2
 800f274:	4413      	add	r3, r2
 800f276:	009b      	lsls	r3, r3, #2
 800f278:	4a1f      	ldr	r2, [pc, #124]	; (800f2f8 <xTaskIncrementTick+0x164>)
 800f27a:	441a      	add	r2, r3
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	3304      	adds	r3, #4
 800f280:	4619      	mov	r1, r3
 800f282:	4610      	mov	r0, r2
 800f284:	f7fe fe4f 	bl	800df26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f28c:	4b1b      	ldr	r3, [pc, #108]	; (800f2fc <xTaskIncrementTick+0x168>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f292:	429a      	cmp	r2, r3
 800f294:	d3b8      	bcc.n	800f208 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f296:	2301      	movs	r3, #1
 800f298:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f29a:	e7b5      	b.n	800f208 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f29c:	4b17      	ldr	r3, [pc, #92]	; (800f2fc <xTaskIncrementTick+0x168>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2a2:	4915      	ldr	r1, [pc, #84]	; (800f2f8 <xTaskIncrementTick+0x164>)
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	4413      	add	r3, r2
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	440b      	add	r3, r1
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d901      	bls.n	800f2b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f2b8:	4b11      	ldr	r3, [pc, #68]	; (800f300 <xTaskIncrementTick+0x16c>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d007      	beq.n	800f2d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	617b      	str	r3, [r7, #20]
 800f2c4:	e004      	b.n	800f2d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f2c6:	4b0f      	ldr	r3, [pc, #60]	; (800f304 <xTaskIncrementTick+0x170>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	4a0d      	ldr	r2, [pc, #52]	; (800f304 <xTaskIncrementTick+0x170>)
 800f2ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f2d0:	697b      	ldr	r3, [r7, #20]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3718      	adds	r7, #24
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	20000da8 	.word	0x20000da8
 800f2e0:	20000d84 	.word	0x20000d84
 800f2e4:	20000d38 	.word	0x20000d38
 800f2e8:	20000d3c 	.word	0x20000d3c
 800f2ec:	20000d98 	.word	0x20000d98
 800f2f0:	20000da0 	.word	0x20000da0
 800f2f4:	20000d88 	.word	0x20000d88
 800f2f8:	200008b0 	.word	0x200008b0
 800f2fc:	200008ac 	.word	0x200008ac
 800f300:	20000d94 	.word	0x20000d94
 800f304:	20000d90 	.word	0x20000d90

0800f308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f30e:	4b28      	ldr	r3, [pc, #160]	; (800f3b0 <vTaskSwitchContext+0xa8>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d003      	beq.n	800f31e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f316:	4b27      	ldr	r3, [pc, #156]	; (800f3b4 <vTaskSwitchContext+0xac>)
 800f318:	2201      	movs	r2, #1
 800f31a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f31c:	e041      	b.n	800f3a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f31e:	4b25      	ldr	r3, [pc, #148]	; (800f3b4 <vTaskSwitchContext+0xac>)
 800f320:	2200      	movs	r2, #0
 800f322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f324:	4b24      	ldr	r3, [pc, #144]	; (800f3b8 <vTaskSwitchContext+0xb0>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	60fb      	str	r3, [r7, #12]
 800f32a:	e010      	b.n	800f34e <vTaskSwitchContext+0x46>
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d10a      	bne.n	800f348 <vTaskSwitchContext+0x40>
	__asm volatile
 800f332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f336:	f383 8811 	msr	BASEPRI, r3
 800f33a:	f3bf 8f6f 	isb	sy
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	607b      	str	r3, [r7, #4]
}
 800f344:	bf00      	nop
 800f346:	e7fe      	b.n	800f346 <vTaskSwitchContext+0x3e>
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	3b01      	subs	r3, #1
 800f34c:	60fb      	str	r3, [r7, #12]
 800f34e:	491b      	ldr	r1, [pc, #108]	; (800f3bc <vTaskSwitchContext+0xb4>)
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	4613      	mov	r3, r2
 800f354:	009b      	lsls	r3, r3, #2
 800f356:	4413      	add	r3, r2
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	440b      	add	r3, r1
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d0e4      	beq.n	800f32c <vTaskSwitchContext+0x24>
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	4613      	mov	r3, r2
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	4413      	add	r3, r2
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	4a13      	ldr	r2, [pc, #76]	; (800f3bc <vTaskSwitchContext+0xb4>)
 800f36e:	4413      	add	r3, r2
 800f370:	60bb      	str	r3, [r7, #8]
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	685a      	ldr	r2, [r3, #4]
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	605a      	str	r2, [r3, #4]
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	685a      	ldr	r2, [r3, #4]
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	3308      	adds	r3, #8
 800f384:	429a      	cmp	r2, r3
 800f386:	d104      	bne.n	800f392 <vTaskSwitchContext+0x8a>
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	685a      	ldr	r2, [r3, #4]
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	605a      	str	r2, [r3, #4]
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	68db      	ldr	r3, [r3, #12]
 800f398:	4a09      	ldr	r2, [pc, #36]	; (800f3c0 <vTaskSwitchContext+0xb8>)
 800f39a:	6013      	str	r3, [r2, #0]
 800f39c:	4a06      	ldr	r2, [pc, #24]	; (800f3b8 <vTaskSwitchContext+0xb0>)
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6013      	str	r3, [r2, #0]
}
 800f3a2:	bf00      	nop
 800f3a4:	3714      	adds	r7, #20
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	20000da8 	.word	0x20000da8
 800f3b4:	20000d94 	.word	0x20000d94
 800f3b8:	20000d88 	.word	0x20000d88
 800f3bc:	200008b0 	.word	0x200008b0
 800f3c0:	200008ac 	.word	0x200008ac

0800f3c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d10a      	bne.n	800f3ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d8:	f383 8811 	msr	BASEPRI, r3
 800f3dc:	f3bf 8f6f 	isb	sy
 800f3e0:	f3bf 8f4f 	dsb	sy
 800f3e4:	60fb      	str	r3, [r7, #12]
}
 800f3e6:	bf00      	nop
 800f3e8:	e7fe      	b.n	800f3e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3ea:	4b07      	ldr	r3, [pc, #28]	; (800f408 <vTaskPlaceOnEventList+0x44>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	3318      	adds	r3, #24
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7fe fdbb 	bl	800df6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3f8:	2101      	movs	r1, #1
 800f3fa:	6838      	ldr	r0, [r7, #0]
 800f3fc:	f000 fa7c 	bl	800f8f8 <prvAddCurrentTaskToDelayedList>
}
 800f400:	bf00      	nop
 800f402:	3710      	adds	r7, #16
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	200008ac 	.word	0x200008ac

0800f40c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b086      	sub	sp, #24
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d10a      	bne.n	800f434 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f422:	f383 8811 	msr	BASEPRI, r3
 800f426:	f3bf 8f6f 	isb	sy
 800f42a:	f3bf 8f4f 	dsb	sy
 800f42e:	617b      	str	r3, [r7, #20]
}
 800f430:	bf00      	nop
 800f432:	e7fe      	b.n	800f432 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f434:	4b0a      	ldr	r3, [pc, #40]	; (800f460 <vTaskPlaceOnEventListRestricted+0x54>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	3318      	adds	r3, #24
 800f43a:	4619      	mov	r1, r3
 800f43c:	68f8      	ldr	r0, [r7, #12]
 800f43e:	f7fe fd72 	bl	800df26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d002      	beq.n	800f44e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f448:	f04f 33ff 	mov.w	r3, #4294967295
 800f44c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f44e:	6879      	ldr	r1, [r7, #4]
 800f450:	68b8      	ldr	r0, [r7, #8]
 800f452:	f000 fa51 	bl	800f8f8 <prvAddCurrentTaskToDelayedList>
	}
 800f456:	bf00      	nop
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	200008ac 	.word	0x200008ac

0800f464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b086      	sub	sp, #24
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	68db      	ldr	r3, [r3, #12]
 800f472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d10a      	bne.n	800f490 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f47e:	f383 8811 	msr	BASEPRI, r3
 800f482:	f3bf 8f6f 	isb	sy
 800f486:	f3bf 8f4f 	dsb	sy
 800f48a:	60fb      	str	r3, [r7, #12]
}
 800f48c:	bf00      	nop
 800f48e:	e7fe      	b.n	800f48e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	3318      	adds	r3, #24
 800f494:	4618      	mov	r0, r3
 800f496:	f7fe fda3 	bl	800dfe0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f49a:	4b1e      	ldr	r3, [pc, #120]	; (800f514 <xTaskRemoveFromEventList+0xb0>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d11d      	bne.n	800f4de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	3304      	adds	r3, #4
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fe fd9a 	bl	800dfe0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4b0:	4b19      	ldr	r3, [pc, #100]	; (800f518 <xTaskRemoveFromEventList+0xb4>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d903      	bls.n	800f4c0 <xTaskRemoveFromEventList+0x5c>
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4bc:	4a16      	ldr	r2, [pc, #88]	; (800f518 <xTaskRemoveFromEventList+0xb4>)
 800f4be:	6013      	str	r3, [r2, #0]
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	4413      	add	r3, r2
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	4a13      	ldr	r2, [pc, #76]	; (800f51c <xTaskRemoveFromEventList+0xb8>)
 800f4ce:	441a      	add	r2, r3
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	3304      	adds	r3, #4
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	4610      	mov	r0, r2
 800f4d8:	f7fe fd25 	bl	800df26 <vListInsertEnd>
 800f4dc:	e005      	b.n	800f4ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	3318      	adds	r3, #24
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	480e      	ldr	r0, [pc, #56]	; (800f520 <xTaskRemoveFromEventList+0xbc>)
 800f4e6:	f7fe fd1e 	bl	800df26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ee:	4b0d      	ldr	r3, [pc, #52]	; (800f524 <xTaskRemoveFromEventList+0xc0>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d905      	bls.n	800f504 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4fc:	4b0a      	ldr	r3, [pc, #40]	; (800f528 <xTaskRemoveFromEventList+0xc4>)
 800f4fe:	2201      	movs	r2, #1
 800f500:	601a      	str	r2, [r3, #0]
 800f502:	e001      	b.n	800f508 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f504:	2300      	movs	r3, #0
 800f506:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f508:	697b      	ldr	r3, [r7, #20]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3718      	adds	r7, #24
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop
 800f514:	20000da8 	.word	0x20000da8
 800f518:	20000d88 	.word	0x20000d88
 800f51c:	200008b0 	.word	0x200008b0
 800f520:	20000d40 	.word	0x20000d40
 800f524:	200008ac 	.word	0x200008ac
 800f528:	20000d94 	.word	0x20000d94

0800f52c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f534:	4b06      	ldr	r3, [pc, #24]	; (800f550 <vTaskInternalSetTimeOutState+0x24>)
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f53c:	4b05      	ldr	r3, [pc, #20]	; (800f554 <vTaskInternalSetTimeOutState+0x28>)
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	605a      	str	r2, [r3, #4]
}
 800f544:	bf00      	nop
 800f546:	370c      	adds	r7, #12
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr
 800f550:	20000d98 	.word	0x20000d98
 800f554:	20000d84 	.word	0x20000d84

0800f558 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b088      	sub	sp, #32
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d10a      	bne.n	800f57e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56c:	f383 8811 	msr	BASEPRI, r3
 800f570:	f3bf 8f6f 	isb	sy
 800f574:	f3bf 8f4f 	dsb	sy
 800f578:	613b      	str	r3, [r7, #16]
}
 800f57a:	bf00      	nop
 800f57c:	e7fe      	b.n	800f57c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d10a      	bne.n	800f59a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f588:	f383 8811 	msr	BASEPRI, r3
 800f58c:	f3bf 8f6f 	isb	sy
 800f590:	f3bf 8f4f 	dsb	sy
 800f594:	60fb      	str	r3, [r7, #12]
}
 800f596:	bf00      	nop
 800f598:	e7fe      	b.n	800f598 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f59a:	f000 fe7b 	bl	8010294 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f59e:	4b1d      	ldr	r3, [pc, #116]	; (800f614 <xTaskCheckForTimeOut+0xbc>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	69ba      	ldr	r2, [r7, #24]
 800f5aa:	1ad3      	subs	r3, r2, r3
 800f5ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5b6:	d102      	bne.n	800f5be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	61fb      	str	r3, [r7, #28]
 800f5bc:	e023      	b.n	800f606 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	4b15      	ldr	r3, [pc, #84]	; (800f618 <xTaskCheckForTimeOut+0xc0>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d007      	beq.n	800f5da <xTaskCheckForTimeOut+0x82>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	69ba      	ldr	r2, [r7, #24]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d302      	bcc.n	800f5da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	61fb      	str	r3, [r7, #28]
 800f5d8:	e015      	b.n	800f606 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	697a      	ldr	r2, [r7, #20]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d20b      	bcs.n	800f5fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	1ad2      	subs	r2, r2, r3
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7ff ff9b 	bl	800f52c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	61fb      	str	r3, [r7, #28]
 800f5fa:	e004      	b.n	800f606 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	2200      	movs	r2, #0
 800f600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f602:	2301      	movs	r3, #1
 800f604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f606:	f000 fe75 	bl	80102f4 <vPortExitCritical>

	return xReturn;
 800f60a:	69fb      	ldr	r3, [r7, #28]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3720      	adds	r7, #32
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	20000d84 	.word	0x20000d84
 800f618:	20000d98 	.word	0x20000d98

0800f61c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f61c:	b480      	push	{r7}
 800f61e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f620:	4b03      	ldr	r3, [pc, #12]	; (800f630 <vTaskMissedYield+0x14>)
 800f622:	2201      	movs	r2, #1
 800f624:	601a      	str	r2, [r3, #0]
}
 800f626:	bf00      	nop
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr
 800f630:	20000d94 	.word	0x20000d94

0800f634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f63c:	f000 f852 	bl	800f6e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f640:	4b06      	ldr	r3, [pc, #24]	; (800f65c <prvIdleTask+0x28>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	2b01      	cmp	r3, #1
 800f646:	d9f9      	bls.n	800f63c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f648:	4b05      	ldr	r3, [pc, #20]	; (800f660 <prvIdleTask+0x2c>)
 800f64a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f64e:	601a      	str	r2, [r3, #0]
 800f650:	f3bf 8f4f 	dsb	sy
 800f654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f658:	e7f0      	b.n	800f63c <prvIdleTask+0x8>
 800f65a:	bf00      	nop
 800f65c:	200008b0 	.word	0x200008b0
 800f660:	e000ed04 	.word	0xe000ed04

0800f664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f66a:	2300      	movs	r3, #0
 800f66c:	607b      	str	r3, [r7, #4]
 800f66e:	e00c      	b.n	800f68a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f670:	687a      	ldr	r2, [r7, #4]
 800f672:	4613      	mov	r3, r2
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	4413      	add	r3, r2
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4a12      	ldr	r2, [pc, #72]	; (800f6c4 <prvInitialiseTaskLists+0x60>)
 800f67c:	4413      	add	r3, r2
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fe fc24 	bl	800decc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	3301      	adds	r3, #1
 800f688:	607b      	str	r3, [r7, #4]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2b37      	cmp	r3, #55	; 0x37
 800f68e:	d9ef      	bls.n	800f670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f690:	480d      	ldr	r0, [pc, #52]	; (800f6c8 <prvInitialiseTaskLists+0x64>)
 800f692:	f7fe fc1b 	bl	800decc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f696:	480d      	ldr	r0, [pc, #52]	; (800f6cc <prvInitialiseTaskLists+0x68>)
 800f698:	f7fe fc18 	bl	800decc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f69c:	480c      	ldr	r0, [pc, #48]	; (800f6d0 <prvInitialiseTaskLists+0x6c>)
 800f69e:	f7fe fc15 	bl	800decc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f6a2:	480c      	ldr	r0, [pc, #48]	; (800f6d4 <prvInitialiseTaskLists+0x70>)
 800f6a4:	f7fe fc12 	bl	800decc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f6a8:	480b      	ldr	r0, [pc, #44]	; (800f6d8 <prvInitialiseTaskLists+0x74>)
 800f6aa:	f7fe fc0f 	bl	800decc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6ae:	4b0b      	ldr	r3, [pc, #44]	; (800f6dc <prvInitialiseTaskLists+0x78>)
 800f6b0:	4a05      	ldr	r2, [pc, #20]	; (800f6c8 <prvInitialiseTaskLists+0x64>)
 800f6b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6b4:	4b0a      	ldr	r3, [pc, #40]	; (800f6e0 <prvInitialiseTaskLists+0x7c>)
 800f6b6:	4a05      	ldr	r2, [pc, #20]	; (800f6cc <prvInitialiseTaskLists+0x68>)
 800f6b8:	601a      	str	r2, [r3, #0]
}
 800f6ba:	bf00      	nop
 800f6bc:	3708      	adds	r7, #8
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	200008b0 	.word	0x200008b0
 800f6c8:	20000d10 	.word	0x20000d10
 800f6cc:	20000d24 	.word	0x20000d24
 800f6d0:	20000d40 	.word	0x20000d40
 800f6d4:	20000d54 	.word	0x20000d54
 800f6d8:	20000d6c 	.word	0x20000d6c
 800f6dc:	20000d38 	.word	0x20000d38
 800f6e0:	20000d3c 	.word	0x20000d3c

0800f6e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6ea:	e019      	b.n	800f720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f6ec:	f000 fdd2 	bl	8010294 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6f0:	4b10      	ldr	r3, [pc, #64]	; (800f734 <prvCheckTasksWaitingTermination+0x50>)
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	3304      	adds	r3, #4
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fe fc6f 	bl	800dfe0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f702:	4b0d      	ldr	r3, [pc, #52]	; (800f738 <prvCheckTasksWaitingTermination+0x54>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	3b01      	subs	r3, #1
 800f708:	4a0b      	ldr	r2, [pc, #44]	; (800f738 <prvCheckTasksWaitingTermination+0x54>)
 800f70a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f70c:	4b0b      	ldr	r3, [pc, #44]	; (800f73c <prvCheckTasksWaitingTermination+0x58>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	3b01      	subs	r3, #1
 800f712:	4a0a      	ldr	r2, [pc, #40]	; (800f73c <prvCheckTasksWaitingTermination+0x58>)
 800f714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f716:	f000 fded 	bl	80102f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 f810 	bl	800f740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f720:	4b06      	ldr	r3, [pc, #24]	; (800f73c <prvCheckTasksWaitingTermination+0x58>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d1e1      	bne.n	800f6ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f728:	bf00      	nop
 800f72a:	bf00      	nop
 800f72c:	3708      	adds	r7, #8
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	20000d54 	.word	0x20000d54
 800f738:	20000d80 	.word	0x20000d80
 800f73c:	20000d68 	.word	0x20000d68

0800f740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d108      	bne.n	800f764 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f756:	4618      	mov	r0, r3
 800f758:	f000 ff8a 	bl	8010670 <vPortFree>
				vPortFree( pxTCB );
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f000 ff87 	bl	8010670 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f762:	e018      	b.n	800f796 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d103      	bne.n	800f776 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f000 ff7e 	bl	8010670 <vPortFree>
	}
 800f774:	e00f      	b.n	800f796 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	d00a      	beq.n	800f796 <prvDeleteTCB+0x56>
	__asm volatile
 800f780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f784:	f383 8811 	msr	BASEPRI, r3
 800f788:	f3bf 8f6f 	isb	sy
 800f78c:	f3bf 8f4f 	dsb	sy
 800f790:	60fb      	str	r3, [r7, #12]
}
 800f792:	bf00      	nop
 800f794:	e7fe      	b.n	800f794 <prvDeleteTCB+0x54>
	}
 800f796:	bf00      	nop
 800f798:	3710      	adds	r7, #16
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
	...

0800f7a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7a6:	4b0c      	ldr	r3, [pc, #48]	; (800f7d8 <prvResetNextTaskUnblockTime+0x38>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d104      	bne.n	800f7ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f7b0:	4b0a      	ldr	r3, [pc, #40]	; (800f7dc <prvResetNextTaskUnblockTime+0x3c>)
 800f7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f7b8:	e008      	b.n	800f7cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7ba:	4b07      	ldr	r3, [pc, #28]	; (800f7d8 <prvResetNextTaskUnblockTime+0x38>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	685b      	ldr	r3, [r3, #4]
 800f7c8:	4a04      	ldr	r2, [pc, #16]	; (800f7dc <prvResetNextTaskUnblockTime+0x3c>)
 800f7ca:	6013      	str	r3, [r2, #0]
}
 800f7cc:	bf00      	nop
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr
 800f7d8:	20000d38 	.word	0x20000d38
 800f7dc:	20000da0 	.word	0x20000da0

0800f7e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7e6:	4b0b      	ldr	r3, [pc, #44]	; (800f814 <xTaskGetSchedulerState+0x34>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d102      	bne.n	800f7f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	607b      	str	r3, [r7, #4]
 800f7f2:	e008      	b.n	800f806 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7f4:	4b08      	ldr	r3, [pc, #32]	; (800f818 <xTaskGetSchedulerState+0x38>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d102      	bne.n	800f802 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f7fc:	2302      	movs	r3, #2
 800f7fe:	607b      	str	r3, [r7, #4]
 800f800:	e001      	b.n	800f806 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f802:	2300      	movs	r3, #0
 800f804:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f806:	687b      	ldr	r3, [r7, #4]
	}
 800f808:	4618      	mov	r0, r3
 800f80a:	370c      	adds	r7, #12
 800f80c:	46bd      	mov	sp, r7
 800f80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f812:	4770      	bx	lr
 800f814:	20000d8c 	.word	0x20000d8c
 800f818:	20000da8 	.word	0x20000da8

0800f81c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b086      	sub	sp, #24
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f828:	2300      	movs	r3, #0
 800f82a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d056      	beq.n	800f8e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f832:	4b2e      	ldr	r3, [pc, #184]	; (800f8ec <xTaskPriorityDisinherit+0xd0>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	693a      	ldr	r2, [r7, #16]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d00a      	beq.n	800f852 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f840:	f383 8811 	msr	BASEPRI, r3
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	f3bf 8f4f 	dsb	sy
 800f84c:	60fb      	str	r3, [r7, #12]
}
 800f84e:	bf00      	nop
 800f850:	e7fe      	b.n	800f850 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f856:	2b00      	cmp	r3, #0
 800f858:	d10a      	bne.n	800f870 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f85e:	f383 8811 	msr	BASEPRI, r3
 800f862:	f3bf 8f6f 	isb	sy
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	60bb      	str	r3, [r7, #8]
}
 800f86c:	bf00      	nop
 800f86e:	e7fe      	b.n	800f86e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f874:	1e5a      	subs	r2, r3, #1
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f882:	429a      	cmp	r2, r3
 800f884:	d02c      	beq.n	800f8e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d128      	bne.n	800f8e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	3304      	adds	r3, #4
 800f892:	4618      	mov	r0, r3
 800f894:	f7fe fba4 	bl	800dfe0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b0:	4b0f      	ldr	r3, [pc, #60]	; (800f8f0 <xTaskPriorityDisinherit+0xd4>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d903      	bls.n	800f8c0 <xTaskPriorityDisinherit+0xa4>
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8bc:	4a0c      	ldr	r2, [pc, #48]	; (800f8f0 <xTaskPriorityDisinherit+0xd4>)
 800f8be:	6013      	str	r3, [r2, #0]
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	4413      	add	r3, r2
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	4a09      	ldr	r2, [pc, #36]	; (800f8f4 <xTaskPriorityDisinherit+0xd8>)
 800f8ce:	441a      	add	r2, r3
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	3304      	adds	r3, #4
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	4610      	mov	r0, r2
 800f8d8:	f7fe fb25 	bl	800df26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8e0:	697b      	ldr	r3, [r7, #20]
	}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3718      	adds	r7, #24
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	200008ac 	.word	0x200008ac
 800f8f0:	20000d88 	.word	0x20000d88
 800f8f4:	200008b0 	.word	0x200008b0

0800f8f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f902:	4b21      	ldr	r3, [pc, #132]	; (800f988 <prvAddCurrentTaskToDelayedList+0x90>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f908:	4b20      	ldr	r3, [pc, #128]	; (800f98c <prvAddCurrentTaskToDelayedList+0x94>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3304      	adds	r3, #4
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fe fb66 	bl	800dfe0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f91a:	d10a      	bne.n	800f932 <prvAddCurrentTaskToDelayedList+0x3a>
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d007      	beq.n	800f932 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f922:	4b1a      	ldr	r3, [pc, #104]	; (800f98c <prvAddCurrentTaskToDelayedList+0x94>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	3304      	adds	r3, #4
 800f928:	4619      	mov	r1, r3
 800f92a:	4819      	ldr	r0, [pc, #100]	; (800f990 <prvAddCurrentTaskToDelayedList+0x98>)
 800f92c:	f7fe fafb 	bl	800df26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f930:	e026      	b.n	800f980 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4413      	add	r3, r2
 800f938:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f93a:	4b14      	ldr	r3, [pc, #80]	; (800f98c <prvAddCurrentTaskToDelayedList+0x94>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	68ba      	ldr	r2, [r7, #8]
 800f940:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f942:	68ba      	ldr	r2, [r7, #8]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	429a      	cmp	r2, r3
 800f948:	d209      	bcs.n	800f95e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f94a:	4b12      	ldr	r3, [pc, #72]	; (800f994 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	4b0f      	ldr	r3, [pc, #60]	; (800f98c <prvAddCurrentTaskToDelayedList+0x94>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3304      	adds	r3, #4
 800f954:	4619      	mov	r1, r3
 800f956:	4610      	mov	r0, r2
 800f958:	f7fe fb09 	bl	800df6e <vListInsert>
}
 800f95c:	e010      	b.n	800f980 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f95e:	4b0e      	ldr	r3, [pc, #56]	; (800f998 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	4b0a      	ldr	r3, [pc, #40]	; (800f98c <prvAddCurrentTaskToDelayedList+0x94>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	3304      	adds	r3, #4
 800f968:	4619      	mov	r1, r3
 800f96a:	4610      	mov	r0, r2
 800f96c:	f7fe faff 	bl	800df6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f970:	4b0a      	ldr	r3, [pc, #40]	; (800f99c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	68ba      	ldr	r2, [r7, #8]
 800f976:	429a      	cmp	r2, r3
 800f978:	d202      	bcs.n	800f980 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f97a:	4a08      	ldr	r2, [pc, #32]	; (800f99c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	6013      	str	r3, [r2, #0]
}
 800f980:	bf00      	nop
 800f982:	3710      	adds	r7, #16
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	20000d84 	.word	0x20000d84
 800f98c:	200008ac 	.word	0x200008ac
 800f990:	20000d6c 	.word	0x20000d6c
 800f994:	20000d3c 	.word	0x20000d3c
 800f998:	20000d38 	.word	0x20000d38
 800f99c:	20000da0 	.word	0x20000da0

0800f9a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b08a      	sub	sp, #40	; 0x28
 800f9a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f9aa:	f000 fb07 	bl	800ffbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f9ae:	4b1c      	ldr	r3, [pc, #112]	; (800fa20 <xTimerCreateTimerTask+0x80>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d021      	beq.n	800f9fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f9be:	1d3a      	adds	r2, r7, #4
 800f9c0:	f107 0108 	add.w	r1, r7, #8
 800f9c4:	f107 030c 	add.w	r3, r7, #12
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fe fa65 	bl	800de98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f9ce:	6879      	ldr	r1, [r7, #4]
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	68fa      	ldr	r2, [r7, #12]
 800f9d4:	9202      	str	r2, [sp, #8]
 800f9d6:	9301      	str	r3, [sp, #4]
 800f9d8:	2302      	movs	r3, #2
 800f9da:	9300      	str	r3, [sp, #0]
 800f9dc:	2300      	movs	r3, #0
 800f9de:	460a      	mov	r2, r1
 800f9e0:	4910      	ldr	r1, [pc, #64]	; (800fa24 <xTimerCreateTimerTask+0x84>)
 800f9e2:	4811      	ldr	r0, [pc, #68]	; (800fa28 <xTimerCreateTimerTask+0x88>)
 800f9e4:	f7ff f8cc 	bl	800eb80 <xTaskCreateStatic>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	4a10      	ldr	r2, [pc, #64]	; (800fa2c <xTimerCreateTimerTask+0x8c>)
 800f9ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f9ee:	4b0f      	ldr	r3, [pc, #60]	; (800fa2c <xTimerCreateTimerTask+0x8c>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d10a      	bne.n	800fa16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800fa00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa04:	f383 8811 	msr	BASEPRI, r3
 800fa08:	f3bf 8f6f 	isb	sy
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	613b      	str	r3, [r7, #16]
}
 800fa12:	bf00      	nop
 800fa14:	e7fe      	b.n	800fa14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fa16:	697b      	ldr	r3, [r7, #20]
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3718      	adds	r7, #24
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	20000ddc 	.word	0x20000ddc
 800fa24:	08011588 	.word	0x08011588
 800fa28:	0800fb65 	.word	0x0800fb65
 800fa2c:	20000de0 	.word	0x20000de0

0800fa30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b08a      	sub	sp, #40	; 0x28
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	607a      	str	r2, [r7, #4]
 800fa3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d10a      	bne.n	800fa5e <xTimerGenericCommand+0x2e>
	__asm volatile
 800fa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4c:	f383 8811 	msr	BASEPRI, r3
 800fa50:	f3bf 8f6f 	isb	sy
 800fa54:	f3bf 8f4f 	dsb	sy
 800fa58:	623b      	str	r3, [r7, #32]
}
 800fa5a:	bf00      	nop
 800fa5c:	e7fe      	b.n	800fa5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fa5e:	4b1a      	ldr	r3, [pc, #104]	; (800fac8 <xTimerGenericCommand+0x98>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d02a      	beq.n	800fabc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	2b05      	cmp	r3, #5
 800fa76:	dc18      	bgt.n	800faaa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fa78:	f7ff feb2 	bl	800f7e0 <xTaskGetSchedulerState>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b02      	cmp	r3, #2
 800fa80:	d109      	bne.n	800fa96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fa82:	4b11      	ldr	r3, [pc, #68]	; (800fac8 <xTimerGenericCommand+0x98>)
 800fa84:	6818      	ldr	r0, [r3, #0]
 800fa86:	f107 0110 	add.w	r1, r7, #16
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa8e:	f7fe fc0f 	bl	800e2b0 <xQueueGenericSend>
 800fa92:	6278      	str	r0, [r7, #36]	; 0x24
 800fa94:	e012      	b.n	800fabc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa96:	4b0c      	ldr	r3, [pc, #48]	; (800fac8 <xTimerGenericCommand+0x98>)
 800fa98:	6818      	ldr	r0, [r3, #0]
 800fa9a:	f107 0110 	add.w	r1, r7, #16
 800fa9e:	2300      	movs	r3, #0
 800faa0:	2200      	movs	r2, #0
 800faa2:	f7fe fc05 	bl	800e2b0 <xQueueGenericSend>
 800faa6:	6278      	str	r0, [r7, #36]	; 0x24
 800faa8:	e008      	b.n	800fabc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800faaa:	4b07      	ldr	r3, [pc, #28]	; (800fac8 <xTimerGenericCommand+0x98>)
 800faac:	6818      	ldr	r0, [r3, #0]
 800faae:	f107 0110 	add.w	r1, r7, #16
 800fab2:	2300      	movs	r3, #0
 800fab4:	683a      	ldr	r2, [r7, #0]
 800fab6:	f7fe fcf9 	bl	800e4ac <xQueueGenericSendFromISR>
 800faba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3728      	adds	r7, #40	; 0x28
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	20000ddc 	.word	0x20000ddc

0800facc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b088      	sub	sp, #32
 800fad0:	af02      	add	r7, sp, #8
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fad6:	4b22      	ldr	r3, [pc, #136]	; (800fb60 <prvProcessExpiredTimer+0x94>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	68db      	ldr	r3, [r3, #12]
 800fadc:	68db      	ldr	r3, [r3, #12]
 800fade:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	3304      	adds	r3, #4
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fe fa7b 	bl	800dfe0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faf0:	f003 0304 	and.w	r3, r3, #4
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d022      	beq.n	800fb3e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	699a      	ldr	r2, [r3, #24]
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	18d1      	adds	r1, r2, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	683a      	ldr	r2, [r7, #0]
 800fb04:	6978      	ldr	r0, [r7, #20]
 800fb06:	f000 f8d1 	bl	800fcac <prvInsertTimerInActiveList>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d01f      	beq.n	800fb50 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb10:	2300      	movs	r3, #0
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	2300      	movs	r3, #0
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	2100      	movs	r1, #0
 800fb1a:	6978      	ldr	r0, [r7, #20]
 800fb1c:	f7ff ff88 	bl	800fa30 <xTimerGenericCommand>
 800fb20:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d113      	bne.n	800fb50 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2c:	f383 8811 	msr	BASEPRI, r3
 800fb30:	f3bf 8f6f 	isb	sy
 800fb34:	f3bf 8f4f 	dsb	sy
 800fb38:	60fb      	str	r3, [r7, #12]
}
 800fb3a:	bf00      	nop
 800fb3c:	e7fe      	b.n	800fb3c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb44:	f023 0301 	bic.w	r3, r3, #1
 800fb48:	b2da      	uxtb	r2, r3
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	6a1b      	ldr	r3, [r3, #32]
 800fb54:	6978      	ldr	r0, [r7, #20]
 800fb56:	4798      	blx	r3
}
 800fb58:	bf00      	nop
 800fb5a:	3718      	adds	r7, #24
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	20000dd4 	.word	0x20000dd4

0800fb64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb6c:	f107 0308 	add.w	r3, r7, #8
 800fb70:	4618      	mov	r0, r3
 800fb72:	f000 f857 	bl	800fc24 <prvGetNextExpireTime>
 800fb76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f000 f803 	bl	800fb88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fb82:	f000 f8d5 	bl	800fd30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb86:	e7f1      	b.n	800fb6c <prvTimerTask+0x8>

0800fb88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b084      	sub	sp, #16
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fb92:	f7ff fa31 	bl	800eff8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb96:	f107 0308 	add.w	r3, r7, #8
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 f866 	bl	800fc6c <prvSampleTimeNow>
 800fba0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d130      	bne.n	800fc0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d10a      	bne.n	800fbc4 <prvProcessTimerOrBlockTask+0x3c>
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d806      	bhi.n	800fbc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fbb6:	f7ff fa2d 	bl	800f014 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fbba:	68f9      	ldr	r1, [r7, #12]
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f7ff ff85 	bl	800facc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fbc2:	e024      	b.n	800fc0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d008      	beq.n	800fbdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fbca:	4b13      	ldr	r3, [pc, #76]	; (800fc18 <prvProcessTimerOrBlockTask+0x90>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d101      	bne.n	800fbd8 <prvProcessTimerOrBlockTask+0x50>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	e000      	b.n	800fbda <prvProcessTimerOrBlockTask+0x52>
 800fbd8:	2300      	movs	r3, #0
 800fbda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fbdc:	4b0f      	ldr	r3, [pc, #60]	; (800fc1c <prvProcessTimerOrBlockTask+0x94>)
 800fbde:	6818      	ldr	r0, [r3, #0]
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	1ad3      	subs	r3, r2, r3
 800fbe6:	683a      	ldr	r2, [r7, #0]
 800fbe8:	4619      	mov	r1, r3
 800fbea:	f7fe ff95 	bl	800eb18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fbee:	f7ff fa11 	bl	800f014 <xTaskResumeAll>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d10a      	bne.n	800fc0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fbf8:	4b09      	ldr	r3, [pc, #36]	; (800fc20 <prvProcessTimerOrBlockTask+0x98>)
 800fbfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbfe:	601a      	str	r2, [r3, #0]
 800fc00:	f3bf 8f4f 	dsb	sy
 800fc04:	f3bf 8f6f 	isb	sy
}
 800fc08:	e001      	b.n	800fc0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fc0a:	f7ff fa03 	bl	800f014 <xTaskResumeAll>
}
 800fc0e:	bf00      	nop
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	20000dd8 	.word	0x20000dd8
 800fc1c:	20000ddc 	.word	0x20000ddc
 800fc20:	e000ed04 	.word	0xe000ed04

0800fc24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fc2c:	4b0e      	ldr	r3, [pc, #56]	; (800fc68 <prvGetNextExpireTime+0x44>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d101      	bne.n	800fc3a <prvGetNextExpireTime+0x16>
 800fc36:	2201      	movs	r2, #1
 800fc38:	e000      	b.n	800fc3c <prvGetNextExpireTime+0x18>
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d105      	bne.n	800fc54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc48:	4b07      	ldr	r3, [pc, #28]	; (800fc68 <prvGetNextExpireTime+0x44>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	60fb      	str	r3, [r7, #12]
 800fc52:	e001      	b.n	800fc58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fc54:	2300      	movs	r3, #0
 800fc56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fc58:	68fb      	ldr	r3, [r7, #12]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3714      	adds	r7, #20
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc64:	4770      	bx	lr
 800fc66:	bf00      	nop
 800fc68:	20000dd4 	.word	0x20000dd4

0800fc6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fc74:	f7ff fa6c 	bl	800f150 <xTaskGetTickCount>
 800fc78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fc7a:	4b0b      	ldr	r3, [pc, #44]	; (800fca8 <prvSampleTimeNow+0x3c>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d205      	bcs.n	800fc90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fc84:	f000 f936 	bl	800fef4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	e002      	b.n	800fc96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fc96:	4a04      	ldr	r2, [pc, #16]	; (800fca8 <prvSampleTimeNow+0x3c>)
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3710      	adds	r7, #16
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	20000de4 	.word	0x20000de4

0800fcac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b086      	sub	sp, #24
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	607a      	str	r2, [r7, #4]
 800fcb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	68ba      	ldr	r2, [r7, #8]
 800fcc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	68fa      	ldr	r2, [r7, #12]
 800fcc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fcca:	68ba      	ldr	r2, [r7, #8]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d812      	bhi.n	800fcf8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	1ad2      	subs	r2, r2, r3
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	699b      	ldr	r3, [r3, #24]
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d302      	bcc.n	800fce6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fce0:	2301      	movs	r3, #1
 800fce2:	617b      	str	r3, [r7, #20]
 800fce4:	e01b      	b.n	800fd1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fce6:	4b10      	ldr	r3, [pc, #64]	; (800fd28 <prvInsertTimerInActiveList+0x7c>)
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	3304      	adds	r3, #4
 800fcee:	4619      	mov	r1, r3
 800fcf0:	4610      	mov	r0, r2
 800fcf2:	f7fe f93c 	bl	800df6e <vListInsert>
 800fcf6:	e012      	b.n	800fd1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d206      	bcs.n	800fd0e <prvInsertTimerInActiveList+0x62>
 800fd00:	68ba      	ldr	r2, [r7, #8]
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d302      	bcc.n	800fd0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fd08:	2301      	movs	r3, #1
 800fd0a:	617b      	str	r3, [r7, #20]
 800fd0c:	e007      	b.n	800fd1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd0e:	4b07      	ldr	r3, [pc, #28]	; (800fd2c <prvInsertTimerInActiveList+0x80>)
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	3304      	adds	r3, #4
 800fd16:	4619      	mov	r1, r3
 800fd18:	4610      	mov	r0, r2
 800fd1a:	f7fe f928 	bl	800df6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fd1e:	697b      	ldr	r3, [r7, #20]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3718      	adds	r7, #24
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	20000dd8 	.word	0x20000dd8
 800fd2c:	20000dd4 	.word	0x20000dd4

0800fd30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b08e      	sub	sp, #56	; 0x38
 800fd34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd36:	e0ca      	b.n	800fece <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	da18      	bge.n	800fd70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fd3e:	1d3b      	adds	r3, r7, #4
 800fd40:	3304      	adds	r3, #4
 800fd42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d10a      	bne.n	800fd60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd4e:	f383 8811 	msr	BASEPRI, r3
 800fd52:	f3bf 8f6f 	isb	sy
 800fd56:	f3bf 8f4f 	dsb	sy
 800fd5a:	61fb      	str	r3, [r7, #28]
}
 800fd5c:	bf00      	nop
 800fd5e:	e7fe      	b.n	800fd5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd66:	6850      	ldr	r0, [r2, #4]
 800fd68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd6a:	6892      	ldr	r2, [r2, #8]
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	f2c0 80aa 	blt.w	800fecc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd7e:	695b      	ldr	r3, [r3, #20]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d004      	beq.n	800fd8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd86:	3304      	adds	r3, #4
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7fe f929 	bl	800dfe0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd8e:	463b      	mov	r3, r7
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7ff ff6b 	bl	800fc6c <prvSampleTimeNow>
 800fd96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2b09      	cmp	r3, #9
 800fd9c:	f200 8097 	bhi.w	800fece <prvProcessReceivedCommands+0x19e>
 800fda0:	a201      	add	r2, pc, #4	; (adr r2, 800fda8 <prvProcessReceivedCommands+0x78>)
 800fda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fda6:	bf00      	nop
 800fda8:	0800fdd1 	.word	0x0800fdd1
 800fdac:	0800fdd1 	.word	0x0800fdd1
 800fdb0:	0800fdd1 	.word	0x0800fdd1
 800fdb4:	0800fe45 	.word	0x0800fe45
 800fdb8:	0800fe59 	.word	0x0800fe59
 800fdbc:	0800fea3 	.word	0x0800fea3
 800fdc0:	0800fdd1 	.word	0x0800fdd1
 800fdc4:	0800fdd1 	.word	0x0800fdd1
 800fdc8:	0800fe45 	.word	0x0800fe45
 800fdcc:	0800fe59 	.word	0x0800fe59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdd6:	f043 0301 	orr.w	r3, r3, #1
 800fdda:	b2da      	uxtb	r2, r3
 800fddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fde2:	68ba      	ldr	r2, [r7, #8]
 800fde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde6:	699b      	ldr	r3, [r3, #24]
 800fde8:	18d1      	adds	r1, r2, r3
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdf0:	f7ff ff5c 	bl	800fcac <prvInsertTimerInActiveList>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d069      	beq.n	800fece <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfc:	6a1b      	ldr	r3, [r3, #32]
 800fdfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe08:	f003 0304 	and.w	r3, r3, #4
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d05e      	beq.n	800fece <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fe10:	68ba      	ldr	r2, [r7, #8]
 800fe12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe14:	699b      	ldr	r3, [r3, #24]
 800fe16:	441a      	add	r2, r3
 800fe18:	2300      	movs	r3, #0
 800fe1a:	9300      	str	r3, [sp, #0]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	2100      	movs	r1, #0
 800fe20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe22:	f7ff fe05 	bl	800fa30 <xTimerGenericCommand>
 800fe26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fe28:	6a3b      	ldr	r3, [r7, #32]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d14f      	bne.n	800fece <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fe2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe32:	f383 8811 	msr	BASEPRI, r3
 800fe36:	f3bf 8f6f 	isb	sy
 800fe3a:	f3bf 8f4f 	dsb	sy
 800fe3e:	61bb      	str	r3, [r7, #24]
}
 800fe40:	bf00      	nop
 800fe42:	e7fe      	b.n	800fe42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe4a:	f023 0301 	bic.w	r3, r3, #1
 800fe4e:	b2da      	uxtb	r2, r3
 800fe50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fe56:	e03a      	b.n	800fece <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe5e:	f043 0301 	orr.w	r3, r3, #1
 800fe62:	b2da      	uxtb	r2, r3
 800fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe6a:	68ba      	ldr	r2, [r7, #8]
 800fe6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe72:	699b      	ldr	r3, [r3, #24]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d10a      	bne.n	800fe8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fe78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7c:	f383 8811 	msr	BASEPRI, r3
 800fe80:	f3bf 8f6f 	isb	sy
 800fe84:	f3bf 8f4f 	dsb	sy
 800fe88:	617b      	str	r3, [r7, #20]
}
 800fe8a:	bf00      	nop
 800fe8c:	e7fe      	b.n	800fe8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	699a      	ldr	r2, [r3, #24]
 800fe92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe94:	18d1      	adds	r1, r2, r3
 800fe96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe9c:	f7ff ff06 	bl	800fcac <prvInsertTimerInActiveList>
					break;
 800fea0:	e015      	b.n	800fece <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fea8:	f003 0302 	and.w	r3, r3, #2
 800feac:	2b00      	cmp	r3, #0
 800feae:	d103      	bne.n	800feb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800feb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feb2:	f000 fbdd 	bl	8010670 <vPortFree>
 800feb6:	e00a      	b.n	800fece <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800feb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800febe:	f023 0301 	bic.w	r3, r3, #1
 800fec2:	b2da      	uxtb	r2, r3
 800fec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800feca:	e000      	b.n	800fece <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fecc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fece:	4b08      	ldr	r3, [pc, #32]	; (800fef0 <prvProcessReceivedCommands+0x1c0>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	1d39      	adds	r1, r7, #4
 800fed4:	2200      	movs	r2, #0
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fe fb84 	bl	800e5e4 <xQueueReceive>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	f47f af2a 	bne.w	800fd38 <prvProcessReceivedCommands+0x8>
	}
}
 800fee4:	bf00      	nop
 800fee6:	bf00      	nop
 800fee8:	3730      	adds	r7, #48	; 0x30
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	20000ddc 	.word	0x20000ddc

0800fef4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b088      	sub	sp, #32
 800fef8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fefa:	e048      	b.n	800ff8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fefc:	4b2d      	ldr	r3, [pc, #180]	; (800ffb4 <prvSwitchTimerLists+0xc0>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	68db      	ldr	r3, [r3, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff06:	4b2b      	ldr	r3, [pc, #172]	; (800ffb4 <prvSwitchTimerLists+0xc0>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	3304      	adds	r3, #4
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7fe f863 	bl	800dfe0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	6a1b      	ldr	r3, [r3, #32]
 800ff1e:	68f8      	ldr	r0, [r7, #12]
 800ff20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff28:	f003 0304 	and.w	r3, r3, #4
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d02e      	beq.n	800ff8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	699b      	ldr	r3, [r3, #24]
 800ff34:	693a      	ldr	r2, [r7, #16]
 800ff36:	4413      	add	r3, r2
 800ff38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ff3a:	68ba      	ldr	r2, [r7, #8]
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d90e      	bls.n	800ff60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	68ba      	ldr	r2, [r7, #8]
 800ff46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	68fa      	ldr	r2, [r7, #12]
 800ff4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff4e:	4b19      	ldr	r3, [pc, #100]	; (800ffb4 <prvSwitchTimerLists+0xc0>)
 800ff50:	681a      	ldr	r2, [r3, #0]
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	3304      	adds	r3, #4
 800ff56:	4619      	mov	r1, r3
 800ff58:	4610      	mov	r0, r2
 800ff5a:	f7fe f808 	bl	800df6e <vListInsert>
 800ff5e:	e016      	b.n	800ff8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff60:	2300      	movs	r3, #0
 800ff62:	9300      	str	r3, [sp, #0]
 800ff64:	2300      	movs	r3, #0
 800ff66:	693a      	ldr	r2, [r7, #16]
 800ff68:	2100      	movs	r1, #0
 800ff6a:	68f8      	ldr	r0, [r7, #12]
 800ff6c:	f7ff fd60 	bl	800fa30 <xTimerGenericCommand>
 800ff70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d10a      	bne.n	800ff8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ff78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff7c:	f383 8811 	msr	BASEPRI, r3
 800ff80:	f3bf 8f6f 	isb	sy
 800ff84:	f3bf 8f4f 	dsb	sy
 800ff88:	603b      	str	r3, [r7, #0]
}
 800ff8a:	bf00      	nop
 800ff8c:	e7fe      	b.n	800ff8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff8e:	4b09      	ldr	r3, [pc, #36]	; (800ffb4 <prvSwitchTimerLists+0xc0>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d1b1      	bne.n	800fefc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ff98:	4b06      	ldr	r3, [pc, #24]	; (800ffb4 <prvSwitchTimerLists+0xc0>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ff9e:	4b06      	ldr	r3, [pc, #24]	; (800ffb8 <prvSwitchTimerLists+0xc4>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	4a04      	ldr	r2, [pc, #16]	; (800ffb4 <prvSwitchTimerLists+0xc0>)
 800ffa4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ffa6:	4a04      	ldr	r2, [pc, #16]	; (800ffb8 <prvSwitchTimerLists+0xc4>)
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	6013      	str	r3, [r2, #0]
}
 800ffac:	bf00      	nop
 800ffae:	3718      	adds	r7, #24
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}
 800ffb4:	20000dd4 	.word	0x20000dd4
 800ffb8:	20000dd8 	.word	0x20000dd8

0800ffbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ffc2:	f000 f967 	bl	8010294 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ffc6:	4b15      	ldr	r3, [pc, #84]	; (801001c <prvCheckForValidListAndQueue+0x60>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d120      	bne.n	8010010 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ffce:	4814      	ldr	r0, [pc, #80]	; (8010020 <prvCheckForValidListAndQueue+0x64>)
 800ffd0:	f7fd ff7c 	bl	800decc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ffd4:	4813      	ldr	r0, [pc, #76]	; (8010024 <prvCheckForValidListAndQueue+0x68>)
 800ffd6:	f7fd ff79 	bl	800decc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ffda:	4b13      	ldr	r3, [pc, #76]	; (8010028 <prvCheckForValidListAndQueue+0x6c>)
 800ffdc:	4a10      	ldr	r2, [pc, #64]	; (8010020 <prvCheckForValidListAndQueue+0x64>)
 800ffde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ffe0:	4b12      	ldr	r3, [pc, #72]	; (801002c <prvCheckForValidListAndQueue+0x70>)
 800ffe2:	4a10      	ldr	r2, [pc, #64]	; (8010024 <prvCheckForValidListAndQueue+0x68>)
 800ffe4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	9300      	str	r3, [sp, #0]
 800ffea:	4b11      	ldr	r3, [pc, #68]	; (8010030 <prvCheckForValidListAndQueue+0x74>)
 800ffec:	4a11      	ldr	r2, [pc, #68]	; (8010034 <prvCheckForValidListAndQueue+0x78>)
 800ffee:	2110      	movs	r1, #16
 800fff0:	200a      	movs	r0, #10
 800fff2:	f7fe f887 	bl	800e104 <xQueueGenericCreateStatic>
 800fff6:	4603      	mov	r3, r0
 800fff8:	4a08      	ldr	r2, [pc, #32]	; (801001c <prvCheckForValidListAndQueue+0x60>)
 800fffa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fffc:	4b07      	ldr	r3, [pc, #28]	; (801001c <prvCheckForValidListAndQueue+0x60>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d005      	beq.n	8010010 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010004:	4b05      	ldr	r3, [pc, #20]	; (801001c <prvCheckForValidListAndQueue+0x60>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	490b      	ldr	r1, [pc, #44]	; (8010038 <prvCheckForValidListAndQueue+0x7c>)
 801000a:	4618      	mov	r0, r3
 801000c:	f7fe fd5a 	bl	800eac4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010010:	f000 f970 	bl	80102f4 <vPortExitCritical>
}
 8010014:	bf00      	nop
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	20000ddc 	.word	0x20000ddc
 8010020:	20000dac 	.word	0x20000dac
 8010024:	20000dc0 	.word	0x20000dc0
 8010028:	20000dd4 	.word	0x20000dd4
 801002c:	20000dd8 	.word	0x20000dd8
 8010030:	20000e88 	.word	0x20000e88
 8010034:	20000de8 	.word	0x20000de8
 8010038:	08011590 	.word	0x08011590

0801003c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801003c:	b480      	push	{r7}
 801003e:	b085      	sub	sp, #20
 8010040:	af00      	add	r7, sp, #0
 8010042:	60f8      	str	r0, [r7, #12]
 8010044:	60b9      	str	r1, [r7, #8]
 8010046:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	3b04      	subs	r3, #4
 801004c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	3b04      	subs	r3, #4
 801005a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	f023 0201 	bic.w	r2, r3, #1
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	3b04      	subs	r3, #4
 801006a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801006c:	4a0c      	ldr	r2, [pc, #48]	; (80100a0 <pxPortInitialiseStack+0x64>)
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	3b14      	subs	r3, #20
 8010076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010078:	687a      	ldr	r2, [r7, #4]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	3b04      	subs	r3, #4
 8010082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f06f 0202 	mvn.w	r2, #2
 801008a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	3b20      	subs	r3, #32
 8010090:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010092:	68fb      	ldr	r3, [r7, #12]
}
 8010094:	4618      	mov	r0, r3
 8010096:	3714      	adds	r7, #20
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr
 80100a0:	080100a5 	.word	0x080100a5

080100a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80100a4:	b480      	push	{r7}
 80100a6:	b085      	sub	sp, #20
 80100a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80100aa:	2300      	movs	r3, #0
 80100ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80100ae:	4b12      	ldr	r3, [pc, #72]	; (80100f8 <prvTaskExitError+0x54>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100b6:	d00a      	beq.n	80100ce <prvTaskExitError+0x2a>
	__asm volatile
 80100b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100bc:	f383 8811 	msr	BASEPRI, r3
 80100c0:	f3bf 8f6f 	isb	sy
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	60fb      	str	r3, [r7, #12]
}
 80100ca:	bf00      	nop
 80100cc:	e7fe      	b.n	80100cc <prvTaskExitError+0x28>
	__asm volatile
 80100ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d2:	f383 8811 	msr	BASEPRI, r3
 80100d6:	f3bf 8f6f 	isb	sy
 80100da:	f3bf 8f4f 	dsb	sy
 80100de:	60bb      	str	r3, [r7, #8]
}
 80100e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100e2:	bf00      	nop
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d0fc      	beq.n	80100e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100ea:	bf00      	nop
 80100ec:	bf00      	nop
 80100ee:	3714      	adds	r7, #20
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr
 80100f8:	2000011c 	.word	0x2000011c
 80100fc:	00000000 	.word	0x00000000

08010100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010100:	4b07      	ldr	r3, [pc, #28]	; (8010120 <pxCurrentTCBConst2>)
 8010102:	6819      	ldr	r1, [r3, #0]
 8010104:	6808      	ldr	r0, [r1, #0]
 8010106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801010a:	f380 8809 	msr	PSP, r0
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f04f 0000 	mov.w	r0, #0
 8010116:	f380 8811 	msr	BASEPRI, r0
 801011a:	4770      	bx	lr
 801011c:	f3af 8000 	nop.w

08010120 <pxCurrentTCBConst2>:
 8010120:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010124:	bf00      	nop
 8010126:	bf00      	nop

08010128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010128:	4808      	ldr	r0, [pc, #32]	; (801014c <prvPortStartFirstTask+0x24>)
 801012a:	6800      	ldr	r0, [r0, #0]
 801012c:	6800      	ldr	r0, [r0, #0]
 801012e:	f380 8808 	msr	MSP, r0
 8010132:	f04f 0000 	mov.w	r0, #0
 8010136:	f380 8814 	msr	CONTROL, r0
 801013a:	b662      	cpsie	i
 801013c:	b661      	cpsie	f
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	df00      	svc	0
 8010148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801014a:	bf00      	nop
 801014c:	e000ed08 	.word	0xe000ed08

08010150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010156:	4b46      	ldr	r3, [pc, #280]	; (8010270 <xPortStartScheduler+0x120>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4a46      	ldr	r2, [pc, #280]	; (8010274 <xPortStartScheduler+0x124>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d10a      	bne.n	8010176 <xPortStartScheduler+0x26>
	__asm volatile
 8010160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	613b      	str	r3, [r7, #16]
}
 8010172:	bf00      	nop
 8010174:	e7fe      	b.n	8010174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010176:	4b3e      	ldr	r3, [pc, #248]	; (8010270 <xPortStartScheduler+0x120>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	4a3f      	ldr	r2, [pc, #252]	; (8010278 <xPortStartScheduler+0x128>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d10a      	bne.n	8010196 <xPortStartScheduler+0x46>
	__asm volatile
 8010180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010184:	f383 8811 	msr	BASEPRI, r3
 8010188:	f3bf 8f6f 	isb	sy
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	60fb      	str	r3, [r7, #12]
}
 8010192:	bf00      	nop
 8010194:	e7fe      	b.n	8010194 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010196:	4b39      	ldr	r3, [pc, #228]	; (801027c <xPortStartScheduler+0x12c>)
 8010198:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	22ff      	movs	r2, #255	; 0xff
 80101a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80101b0:	78fb      	ldrb	r3, [r7, #3]
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80101b8:	b2da      	uxtb	r2, r3
 80101ba:	4b31      	ldr	r3, [pc, #196]	; (8010280 <xPortStartScheduler+0x130>)
 80101bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80101be:	4b31      	ldr	r3, [pc, #196]	; (8010284 <xPortStartScheduler+0x134>)
 80101c0:	2207      	movs	r2, #7
 80101c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101c4:	e009      	b.n	80101da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80101c6:	4b2f      	ldr	r3, [pc, #188]	; (8010284 <xPortStartScheduler+0x134>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	3b01      	subs	r3, #1
 80101cc:	4a2d      	ldr	r2, [pc, #180]	; (8010284 <xPortStartScheduler+0x134>)
 80101ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80101d0:	78fb      	ldrb	r3, [r7, #3]
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	005b      	lsls	r3, r3, #1
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101da:	78fb      	ldrb	r3, [r7, #3]
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101e2:	2b80      	cmp	r3, #128	; 0x80
 80101e4:	d0ef      	beq.n	80101c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101e6:	4b27      	ldr	r3, [pc, #156]	; (8010284 <xPortStartScheduler+0x134>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f1c3 0307 	rsb	r3, r3, #7
 80101ee:	2b04      	cmp	r3, #4
 80101f0:	d00a      	beq.n	8010208 <xPortStartScheduler+0xb8>
	__asm volatile
 80101f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f6:	f383 8811 	msr	BASEPRI, r3
 80101fa:	f3bf 8f6f 	isb	sy
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	60bb      	str	r3, [r7, #8]
}
 8010204:	bf00      	nop
 8010206:	e7fe      	b.n	8010206 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010208:	4b1e      	ldr	r3, [pc, #120]	; (8010284 <xPortStartScheduler+0x134>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	021b      	lsls	r3, r3, #8
 801020e:	4a1d      	ldr	r2, [pc, #116]	; (8010284 <xPortStartScheduler+0x134>)
 8010210:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010212:	4b1c      	ldr	r3, [pc, #112]	; (8010284 <xPortStartScheduler+0x134>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801021a:	4a1a      	ldr	r2, [pc, #104]	; (8010284 <xPortStartScheduler+0x134>)
 801021c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	b2da      	uxtb	r2, r3
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010226:	4b18      	ldr	r3, [pc, #96]	; (8010288 <xPortStartScheduler+0x138>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	4a17      	ldr	r2, [pc, #92]	; (8010288 <xPortStartScheduler+0x138>)
 801022c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010232:	4b15      	ldr	r3, [pc, #84]	; (8010288 <xPortStartScheduler+0x138>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4a14      	ldr	r2, [pc, #80]	; (8010288 <xPortStartScheduler+0x138>)
 8010238:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801023c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801023e:	f000 f8dd 	bl	80103fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010242:	4b12      	ldr	r3, [pc, #72]	; (801028c <xPortStartScheduler+0x13c>)
 8010244:	2200      	movs	r2, #0
 8010246:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010248:	f000 f8fc 	bl	8010444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801024c:	4b10      	ldr	r3, [pc, #64]	; (8010290 <xPortStartScheduler+0x140>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4a0f      	ldr	r2, [pc, #60]	; (8010290 <xPortStartScheduler+0x140>)
 8010252:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010256:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010258:	f7ff ff66 	bl	8010128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801025c:	f7ff f854 	bl	800f308 <vTaskSwitchContext>
	prvTaskExitError();
 8010260:	f7ff ff20 	bl	80100a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3718      	adds	r7, #24
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	e000ed00 	.word	0xe000ed00
 8010274:	410fc271 	.word	0x410fc271
 8010278:	410fc270 	.word	0x410fc270
 801027c:	e000e400 	.word	0xe000e400
 8010280:	20000ed8 	.word	0x20000ed8
 8010284:	20000edc 	.word	0x20000edc
 8010288:	e000ed20 	.word	0xe000ed20
 801028c:	2000011c 	.word	0x2000011c
 8010290:	e000ef34 	.word	0xe000ef34

08010294 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010294:	b480      	push	{r7}
 8010296:	b083      	sub	sp, #12
 8010298:	af00      	add	r7, sp, #0
	__asm volatile
 801029a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801029e:	f383 8811 	msr	BASEPRI, r3
 80102a2:	f3bf 8f6f 	isb	sy
 80102a6:	f3bf 8f4f 	dsb	sy
 80102aa:	607b      	str	r3, [r7, #4]
}
 80102ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80102ae:	4b0f      	ldr	r3, [pc, #60]	; (80102ec <vPortEnterCritical+0x58>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	3301      	adds	r3, #1
 80102b4:	4a0d      	ldr	r2, [pc, #52]	; (80102ec <vPortEnterCritical+0x58>)
 80102b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80102b8:	4b0c      	ldr	r3, [pc, #48]	; (80102ec <vPortEnterCritical+0x58>)
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2b01      	cmp	r3, #1
 80102be:	d10f      	bne.n	80102e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80102c0:	4b0b      	ldr	r3, [pc, #44]	; (80102f0 <vPortEnterCritical+0x5c>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d00a      	beq.n	80102e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80102ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ce:	f383 8811 	msr	BASEPRI, r3
 80102d2:	f3bf 8f6f 	isb	sy
 80102d6:	f3bf 8f4f 	dsb	sy
 80102da:	603b      	str	r3, [r7, #0]
}
 80102dc:	bf00      	nop
 80102de:	e7fe      	b.n	80102de <vPortEnterCritical+0x4a>
	}
}
 80102e0:	bf00      	nop
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr
 80102ec:	2000011c 	.word	0x2000011c
 80102f0:	e000ed04 	.word	0xe000ed04

080102f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102fa:	4b12      	ldr	r3, [pc, #72]	; (8010344 <vPortExitCritical+0x50>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d10a      	bne.n	8010318 <vPortExitCritical+0x24>
	__asm volatile
 8010302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010306:	f383 8811 	msr	BASEPRI, r3
 801030a:	f3bf 8f6f 	isb	sy
 801030e:	f3bf 8f4f 	dsb	sy
 8010312:	607b      	str	r3, [r7, #4]
}
 8010314:	bf00      	nop
 8010316:	e7fe      	b.n	8010316 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010318:	4b0a      	ldr	r3, [pc, #40]	; (8010344 <vPortExitCritical+0x50>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	3b01      	subs	r3, #1
 801031e:	4a09      	ldr	r2, [pc, #36]	; (8010344 <vPortExitCritical+0x50>)
 8010320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010322:	4b08      	ldr	r3, [pc, #32]	; (8010344 <vPortExitCritical+0x50>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d105      	bne.n	8010336 <vPortExitCritical+0x42>
 801032a:	2300      	movs	r3, #0
 801032c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	f383 8811 	msr	BASEPRI, r3
}
 8010334:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010336:	bf00      	nop
 8010338:	370c      	adds	r7, #12
 801033a:	46bd      	mov	sp, r7
 801033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010340:	4770      	bx	lr
 8010342:	bf00      	nop
 8010344:	2000011c 	.word	0x2000011c
	...

08010350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010350:	f3ef 8009 	mrs	r0, PSP
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	4b15      	ldr	r3, [pc, #84]	; (80103b0 <pxCurrentTCBConst>)
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	f01e 0f10 	tst.w	lr, #16
 8010360:	bf08      	it	eq
 8010362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801036a:	6010      	str	r0, [r2, #0]
 801036c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010374:	f380 8811 	msr	BASEPRI, r0
 8010378:	f3bf 8f4f 	dsb	sy
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f7fe ffc2 	bl	800f308 <vTaskSwitchContext>
 8010384:	f04f 0000 	mov.w	r0, #0
 8010388:	f380 8811 	msr	BASEPRI, r0
 801038c:	bc09      	pop	{r0, r3}
 801038e:	6819      	ldr	r1, [r3, #0]
 8010390:	6808      	ldr	r0, [r1, #0]
 8010392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010396:	f01e 0f10 	tst.w	lr, #16
 801039a:	bf08      	it	eq
 801039c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80103a0:	f380 8809 	msr	PSP, r0
 80103a4:	f3bf 8f6f 	isb	sy
 80103a8:	4770      	bx	lr
 80103aa:	bf00      	nop
 80103ac:	f3af 8000 	nop.w

080103b0 <pxCurrentTCBConst>:
 80103b0:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80103b4:	bf00      	nop
 80103b6:	bf00      	nop

080103b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
	__asm volatile
 80103be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c2:	f383 8811 	msr	BASEPRI, r3
 80103c6:	f3bf 8f6f 	isb	sy
 80103ca:	f3bf 8f4f 	dsb	sy
 80103ce:	607b      	str	r3, [r7, #4]
}
 80103d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103d2:	f7fe fedf 	bl	800f194 <xTaskIncrementTick>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d003      	beq.n	80103e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103dc:	4b06      	ldr	r3, [pc, #24]	; (80103f8 <xPortSysTickHandler+0x40>)
 80103de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103e2:	601a      	str	r2, [r3, #0]
 80103e4:	2300      	movs	r3, #0
 80103e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	f383 8811 	msr	BASEPRI, r3
}
 80103ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80103f0:	bf00      	nop
 80103f2:	3708      	adds	r7, #8
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	e000ed04 	.word	0xe000ed04

080103fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103fc:	b480      	push	{r7}
 80103fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010400:	4b0b      	ldr	r3, [pc, #44]	; (8010430 <vPortSetupTimerInterrupt+0x34>)
 8010402:	2200      	movs	r2, #0
 8010404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010406:	4b0b      	ldr	r3, [pc, #44]	; (8010434 <vPortSetupTimerInterrupt+0x38>)
 8010408:	2200      	movs	r2, #0
 801040a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801040c:	4b0a      	ldr	r3, [pc, #40]	; (8010438 <vPortSetupTimerInterrupt+0x3c>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a0a      	ldr	r2, [pc, #40]	; (801043c <vPortSetupTimerInterrupt+0x40>)
 8010412:	fba2 2303 	umull	r2, r3, r2, r3
 8010416:	099b      	lsrs	r3, r3, #6
 8010418:	4a09      	ldr	r2, [pc, #36]	; (8010440 <vPortSetupTimerInterrupt+0x44>)
 801041a:	3b01      	subs	r3, #1
 801041c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801041e:	4b04      	ldr	r3, [pc, #16]	; (8010430 <vPortSetupTimerInterrupt+0x34>)
 8010420:	2207      	movs	r2, #7
 8010422:	601a      	str	r2, [r3, #0]
}
 8010424:	bf00      	nop
 8010426:	46bd      	mov	sp, r7
 8010428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042c:	4770      	bx	lr
 801042e:	bf00      	nop
 8010430:	e000e010 	.word	0xe000e010
 8010434:	e000e018 	.word	0xe000e018
 8010438:	20000000 	.word	0x20000000
 801043c:	10624dd3 	.word	0x10624dd3
 8010440:	e000e014 	.word	0xe000e014

08010444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010454 <vPortEnableVFP+0x10>
 8010448:	6801      	ldr	r1, [r0, #0]
 801044a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801044e:	6001      	str	r1, [r0, #0]
 8010450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010452:	bf00      	nop
 8010454:	e000ed88 	.word	0xe000ed88

08010458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010458:	b480      	push	{r7}
 801045a:	b085      	sub	sp, #20
 801045c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801045e:	f3ef 8305 	mrs	r3, IPSR
 8010462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	2b0f      	cmp	r3, #15
 8010468:	d914      	bls.n	8010494 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801046a:	4a17      	ldr	r2, [pc, #92]	; (80104c8 <vPortValidateInterruptPriority+0x70>)
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	4413      	add	r3, r2
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010474:	4b15      	ldr	r3, [pc, #84]	; (80104cc <vPortValidateInterruptPriority+0x74>)
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	7afa      	ldrb	r2, [r7, #11]
 801047a:	429a      	cmp	r2, r3
 801047c:	d20a      	bcs.n	8010494 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801047e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010482:	f383 8811 	msr	BASEPRI, r3
 8010486:	f3bf 8f6f 	isb	sy
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	607b      	str	r3, [r7, #4]
}
 8010490:	bf00      	nop
 8010492:	e7fe      	b.n	8010492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010494:	4b0e      	ldr	r3, [pc, #56]	; (80104d0 <vPortValidateInterruptPriority+0x78>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801049c:	4b0d      	ldr	r3, [pc, #52]	; (80104d4 <vPortValidateInterruptPriority+0x7c>)
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d90a      	bls.n	80104ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80104a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a8:	f383 8811 	msr	BASEPRI, r3
 80104ac:	f3bf 8f6f 	isb	sy
 80104b0:	f3bf 8f4f 	dsb	sy
 80104b4:	603b      	str	r3, [r7, #0]
}
 80104b6:	bf00      	nop
 80104b8:	e7fe      	b.n	80104b8 <vPortValidateInterruptPriority+0x60>
	}
 80104ba:	bf00      	nop
 80104bc:	3714      	adds	r7, #20
 80104be:	46bd      	mov	sp, r7
 80104c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c4:	4770      	bx	lr
 80104c6:	bf00      	nop
 80104c8:	e000e3f0 	.word	0xe000e3f0
 80104cc:	20000ed8 	.word	0x20000ed8
 80104d0:	e000ed0c 	.word	0xe000ed0c
 80104d4:	20000edc 	.word	0x20000edc

080104d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b08a      	sub	sp, #40	; 0x28
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80104e0:	2300      	movs	r3, #0
 80104e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80104e4:	f7fe fd88 	bl	800eff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80104e8:	4b5b      	ldr	r3, [pc, #364]	; (8010658 <pvPortMalloc+0x180>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d101      	bne.n	80104f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80104f0:	f000 f920 	bl	8010734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80104f4:	4b59      	ldr	r3, [pc, #356]	; (801065c <pvPortMalloc+0x184>)
 80104f6:	681a      	ldr	r2, [r3, #0]
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4013      	ands	r3, r2
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f040 8093 	bne.w	8010628 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d01d      	beq.n	8010544 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010508:	2208      	movs	r2, #8
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4413      	add	r3, r2
 801050e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f003 0307 	and.w	r3, r3, #7
 8010516:	2b00      	cmp	r3, #0
 8010518:	d014      	beq.n	8010544 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f023 0307 	bic.w	r3, r3, #7
 8010520:	3308      	adds	r3, #8
 8010522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f003 0307 	and.w	r3, r3, #7
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00a      	beq.n	8010544 <pvPortMalloc+0x6c>
	__asm volatile
 801052e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010532:	f383 8811 	msr	BASEPRI, r3
 8010536:	f3bf 8f6f 	isb	sy
 801053a:	f3bf 8f4f 	dsb	sy
 801053e:	617b      	str	r3, [r7, #20]
}
 8010540:	bf00      	nop
 8010542:	e7fe      	b.n	8010542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d06e      	beq.n	8010628 <pvPortMalloc+0x150>
 801054a:	4b45      	ldr	r3, [pc, #276]	; (8010660 <pvPortMalloc+0x188>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	429a      	cmp	r2, r3
 8010552:	d869      	bhi.n	8010628 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010554:	4b43      	ldr	r3, [pc, #268]	; (8010664 <pvPortMalloc+0x18c>)
 8010556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010558:	4b42      	ldr	r3, [pc, #264]	; (8010664 <pvPortMalloc+0x18c>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801055e:	e004      	b.n	801056a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056c:	685b      	ldr	r3, [r3, #4]
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	429a      	cmp	r2, r3
 8010572:	d903      	bls.n	801057c <pvPortMalloc+0xa4>
 8010574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1f1      	bne.n	8010560 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801057c:	4b36      	ldr	r3, [pc, #216]	; (8010658 <pvPortMalloc+0x180>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010582:	429a      	cmp	r2, r3
 8010584:	d050      	beq.n	8010628 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010586:	6a3b      	ldr	r3, [r7, #32]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2208      	movs	r2, #8
 801058c:	4413      	add	r3, r2
 801058e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	6a3b      	ldr	r3, [r7, #32]
 8010596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059a:	685a      	ldr	r2, [r3, #4]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	1ad2      	subs	r2, r2, r3
 80105a0:	2308      	movs	r3, #8
 80105a2:	005b      	lsls	r3, r3, #1
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d91f      	bls.n	80105e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80105a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	4413      	add	r3, r2
 80105ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	f003 0307 	and.w	r3, r3, #7
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d00a      	beq.n	80105d0 <pvPortMalloc+0xf8>
	__asm volatile
 80105ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105be:	f383 8811 	msr	BASEPRI, r3
 80105c2:	f3bf 8f6f 	isb	sy
 80105c6:	f3bf 8f4f 	dsb	sy
 80105ca:	613b      	str	r3, [r7, #16]
}
 80105cc:	bf00      	nop
 80105ce:	e7fe      	b.n	80105ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d2:	685a      	ldr	r2, [r3, #4]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	1ad2      	subs	r2, r2, r3
 80105d8:	69bb      	ldr	r3, [r7, #24]
 80105da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80105e2:	69b8      	ldr	r0, [r7, #24]
 80105e4:	f000 f908 	bl	80107f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80105e8:	4b1d      	ldr	r3, [pc, #116]	; (8010660 <pvPortMalloc+0x188>)
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	4a1b      	ldr	r2, [pc, #108]	; (8010660 <pvPortMalloc+0x188>)
 80105f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80105f6:	4b1a      	ldr	r3, [pc, #104]	; (8010660 <pvPortMalloc+0x188>)
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	4b1b      	ldr	r3, [pc, #108]	; (8010668 <pvPortMalloc+0x190>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d203      	bcs.n	801060a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010602:	4b17      	ldr	r3, [pc, #92]	; (8010660 <pvPortMalloc+0x188>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4a18      	ldr	r2, [pc, #96]	; (8010668 <pvPortMalloc+0x190>)
 8010608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060c:	685a      	ldr	r2, [r3, #4]
 801060e:	4b13      	ldr	r3, [pc, #76]	; (801065c <pvPortMalloc+0x184>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	431a      	orrs	r2, r3
 8010614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061a:	2200      	movs	r2, #0
 801061c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801061e:	4b13      	ldr	r3, [pc, #76]	; (801066c <pvPortMalloc+0x194>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	3301      	adds	r3, #1
 8010624:	4a11      	ldr	r2, [pc, #68]	; (801066c <pvPortMalloc+0x194>)
 8010626:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010628:	f7fe fcf4 	bl	800f014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	f003 0307 	and.w	r3, r3, #7
 8010632:	2b00      	cmp	r3, #0
 8010634:	d00a      	beq.n	801064c <pvPortMalloc+0x174>
	__asm volatile
 8010636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063a:	f383 8811 	msr	BASEPRI, r3
 801063e:	f3bf 8f6f 	isb	sy
 8010642:	f3bf 8f4f 	dsb	sy
 8010646:	60fb      	str	r3, [r7, #12]
}
 8010648:	bf00      	nop
 801064a:	e7fe      	b.n	801064a <pvPortMalloc+0x172>
	return pvReturn;
 801064c:	69fb      	ldr	r3, [r7, #28]
}
 801064e:	4618      	mov	r0, r3
 8010650:	3728      	adds	r7, #40	; 0x28
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	20001aa0 	.word	0x20001aa0
 801065c:	20001ab4 	.word	0x20001ab4
 8010660:	20001aa4 	.word	0x20001aa4
 8010664:	20001a98 	.word	0x20001a98
 8010668:	20001aa8 	.word	0x20001aa8
 801066c:	20001aac 	.word	0x20001aac

08010670 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b086      	sub	sp, #24
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d04d      	beq.n	801071e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010682:	2308      	movs	r3, #8
 8010684:	425b      	negs	r3, r3
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	4413      	add	r3, r2
 801068a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	685a      	ldr	r2, [r3, #4]
 8010694:	4b24      	ldr	r3, [pc, #144]	; (8010728 <vPortFree+0xb8>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	4013      	ands	r3, r2
 801069a:	2b00      	cmp	r3, #0
 801069c:	d10a      	bne.n	80106b4 <vPortFree+0x44>
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a2:	f383 8811 	msr	BASEPRI, r3
 80106a6:	f3bf 8f6f 	isb	sy
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	60fb      	str	r3, [r7, #12]
}
 80106b0:	bf00      	nop
 80106b2:	e7fe      	b.n	80106b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00a      	beq.n	80106d2 <vPortFree+0x62>
	__asm volatile
 80106bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c0:	f383 8811 	msr	BASEPRI, r3
 80106c4:	f3bf 8f6f 	isb	sy
 80106c8:	f3bf 8f4f 	dsb	sy
 80106cc:	60bb      	str	r3, [r7, #8]
}
 80106ce:	bf00      	nop
 80106d0:	e7fe      	b.n	80106d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	685a      	ldr	r2, [r3, #4]
 80106d6:	4b14      	ldr	r3, [pc, #80]	; (8010728 <vPortFree+0xb8>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4013      	ands	r3, r2
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d01e      	beq.n	801071e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80106e0:	693b      	ldr	r3, [r7, #16]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d11a      	bne.n	801071e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	685a      	ldr	r2, [r3, #4]
 80106ec:	4b0e      	ldr	r3, [pc, #56]	; (8010728 <vPortFree+0xb8>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	43db      	mvns	r3, r3
 80106f2:	401a      	ands	r2, r3
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80106f8:	f7fe fc7e 	bl	800eff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	4b0a      	ldr	r3, [pc, #40]	; (801072c <vPortFree+0xbc>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4413      	add	r3, r2
 8010706:	4a09      	ldr	r2, [pc, #36]	; (801072c <vPortFree+0xbc>)
 8010708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801070a:	6938      	ldr	r0, [r7, #16]
 801070c:	f000 f874 	bl	80107f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010710:	4b07      	ldr	r3, [pc, #28]	; (8010730 <vPortFree+0xc0>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	3301      	adds	r3, #1
 8010716:	4a06      	ldr	r2, [pc, #24]	; (8010730 <vPortFree+0xc0>)
 8010718:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801071a:	f7fe fc7b 	bl	800f014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801071e:	bf00      	nop
 8010720:	3718      	adds	r7, #24
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
 8010726:	bf00      	nop
 8010728:	20001ab4 	.word	0x20001ab4
 801072c:	20001aa4 	.word	0x20001aa4
 8010730:	20001ab0 	.word	0x20001ab0

08010734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010734:	b480      	push	{r7}
 8010736:	b085      	sub	sp, #20
 8010738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801073a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801073e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010740:	4b27      	ldr	r3, [pc, #156]	; (80107e0 <prvHeapInit+0xac>)
 8010742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f003 0307 	and.w	r3, r3, #7
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00c      	beq.n	8010768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	3307      	adds	r3, #7
 8010752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f023 0307 	bic.w	r3, r3, #7
 801075a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801075c:	68ba      	ldr	r2, [r7, #8]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	1ad3      	subs	r3, r2, r3
 8010762:	4a1f      	ldr	r2, [pc, #124]	; (80107e0 <prvHeapInit+0xac>)
 8010764:	4413      	add	r3, r2
 8010766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801076c:	4a1d      	ldr	r2, [pc, #116]	; (80107e4 <prvHeapInit+0xb0>)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010772:	4b1c      	ldr	r3, [pc, #112]	; (80107e4 <prvHeapInit+0xb0>)
 8010774:	2200      	movs	r2, #0
 8010776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	68ba      	ldr	r2, [r7, #8]
 801077c:	4413      	add	r3, r2
 801077e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010780:	2208      	movs	r2, #8
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	1a9b      	subs	r3, r3, r2
 8010786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f023 0307 	bic.w	r3, r3, #7
 801078e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	4a15      	ldr	r2, [pc, #84]	; (80107e8 <prvHeapInit+0xb4>)
 8010794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010796:	4b14      	ldr	r3, [pc, #80]	; (80107e8 <prvHeapInit+0xb4>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	2200      	movs	r2, #0
 801079c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801079e:	4b12      	ldr	r3, [pc, #72]	; (80107e8 <prvHeapInit+0xb4>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2200      	movs	r2, #0
 80107a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	1ad2      	subs	r2, r2, r3
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80107b4:	4b0c      	ldr	r3, [pc, #48]	; (80107e8 <prvHeapInit+0xb4>)
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	4a0a      	ldr	r2, [pc, #40]	; (80107ec <prvHeapInit+0xb8>)
 80107c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	4a09      	ldr	r2, [pc, #36]	; (80107f0 <prvHeapInit+0xbc>)
 80107ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80107cc:	4b09      	ldr	r3, [pc, #36]	; (80107f4 <prvHeapInit+0xc0>)
 80107ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80107d2:	601a      	str	r2, [r3, #0]
}
 80107d4:	bf00      	nop
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	20000ee0 	.word	0x20000ee0
 80107e4:	20001a98 	.word	0x20001a98
 80107e8:	20001aa0 	.word	0x20001aa0
 80107ec:	20001aa8 	.word	0x20001aa8
 80107f0:	20001aa4 	.word	0x20001aa4
 80107f4:	20001ab4 	.word	0x20001ab4

080107f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80107f8:	b480      	push	{r7}
 80107fa:	b085      	sub	sp, #20
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010800:	4b28      	ldr	r3, [pc, #160]	; (80108a4 <prvInsertBlockIntoFreeList+0xac>)
 8010802:	60fb      	str	r3, [r7, #12]
 8010804:	e002      	b.n	801080c <prvInsertBlockIntoFreeList+0x14>
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	60fb      	str	r3, [r7, #12]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	429a      	cmp	r2, r3
 8010814:	d8f7      	bhi.n	8010806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	68ba      	ldr	r2, [r7, #8]
 8010820:	4413      	add	r3, r2
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	429a      	cmp	r2, r3
 8010826:	d108      	bne.n	801083a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	685a      	ldr	r2, [r3, #4]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	441a      	add	r2, r3
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	68ba      	ldr	r2, [r7, #8]
 8010844:	441a      	add	r2, r3
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	429a      	cmp	r2, r3
 801084c:	d118      	bne.n	8010880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	4b15      	ldr	r3, [pc, #84]	; (80108a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	429a      	cmp	r2, r3
 8010858:	d00d      	beq.n	8010876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	685a      	ldr	r2, [r3, #4]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	441a      	add	r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	601a      	str	r2, [r3, #0]
 8010874:	e008      	b.n	8010888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010876:	4b0c      	ldr	r3, [pc, #48]	; (80108a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010878:	681a      	ldr	r2, [r3, #0]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	601a      	str	r2, [r3, #0]
 801087e:	e003      	b.n	8010888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010888:	68fa      	ldr	r2, [r7, #12]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	429a      	cmp	r2, r3
 801088e:	d002      	beq.n	8010896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010896:	bf00      	nop
 8010898:	3714      	adds	r7, #20
 801089a:	46bd      	mov	sp, r7
 801089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a0:	4770      	bx	lr
 80108a2:	bf00      	nop
 80108a4:	20001a98 	.word	0x20001a98
 80108a8:	20001aa0 	.word	0x20001aa0

080108ac <StartFastTask>:
#include "main.h"
#include "cmsis_os.h"
//#include "../fastTask.h"

void StartFastTask(void *argument)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
	  /* Infinite loop */
	  for(;;)
	  {
	    osDelay(1000);
 80108b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80108b8:	f7fd f987 	bl	800dbca <osDelay>
		HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
 80108bc:	2104      	movs	r1, #4
 80108be:	4802      	ldr	r0, [pc, #8]	; (80108c8 <StartFastTask+0x1c>)
 80108c0:	f7f2 fcbe 	bl	8003240 <HAL_GPIO_TogglePin>
	    osDelay(1000);
 80108c4:	e7f6      	b.n	80108b4 <StartFastTask+0x8>
 80108c6:	bf00      	nop
 80108c8:	48001400 	.word	0x48001400

080108cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80108d0:	2200      	movs	r2, #0
 80108d2:	4912      	ldr	r1, [pc, #72]	; (801091c <MX_USB_DEVICE_Init+0x50>)
 80108d4:	4812      	ldr	r0, [pc, #72]	; (8010920 <MX_USB_DEVICE_Init+0x54>)
 80108d6:	f7fb fe31 	bl	800c53c <USBD_Init>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d001      	beq.n	80108e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80108e0:	f7f0 fa66 	bl	8000db0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80108e4:	490f      	ldr	r1, [pc, #60]	; (8010924 <MX_USB_DEVICE_Init+0x58>)
 80108e6:	480e      	ldr	r0, [pc, #56]	; (8010920 <MX_USB_DEVICE_Init+0x54>)
 80108e8:	f7fb fe58 	bl	800c59c <USBD_RegisterClass>
 80108ec:	4603      	mov	r3, r0
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d001      	beq.n	80108f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80108f2:	f7f0 fa5d 	bl	8000db0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80108f6:	490c      	ldr	r1, [pc, #48]	; (8010928 <MX_USB_DEVICE_Init+0x5c>)
 80108f8:	4809      	ldr	r0, [pc, #36]	; (8010920 <MX_USB_DEVICE_Init+0x54>)
 80108fa:	f7fb fda9 	bl	800c450 <USBD_CDC_RegisterInterface>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d001      	beq.n	8010908 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010904:	f7f0 fa54 	bl	8000db0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010908:	4805      	ldr	r0, [pc, #20]	; (8010920 <MX_USB_DEVICE_Init+0x54>)
 801090a:	f7fb fe6e 	bl	800c5ea <USBD_Start>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d001      	beq.n	8010918 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010914:	f7f0 fa4c 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010918:	bf00      	nop
 801091a:	bd80      	pop	{r7, pc}
 801091c:	20000134 	.word	0x20000134
 8010920:	200028dc 	.word	0x200028dc
 8010924:	20000018 	.word	0x20000018
 8010928:	20000120 	.word	0x20000120

0801092c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010930:	2200      	movs	r2, #0
 8010932:	4905      	ldr	r1, [pc, #20]	; (8010948 <CDC_Init_FS+0x1c>)
 8010934:	4805      	ldr	r0, [pc, #20]	; (801094c <CDC_Init_FS+0x20>)
 8010936:	f7fb fda0 	bl	800c47a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801093a:	4905      	ldr	r1, [pc, #20]	; (8010950 <CDC_Init_FS+0x24>)
 801093c:	4803      	ldr	r0, [pc, #12]	; (801094c <CDC_Init_FS+0x20>)
 801093e:	f7fb fdba 	bl	800c4b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010942:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010944:	4618      	mov	r0, r3
 8010946:	bd80      	pop	{r7, pc}
 8010948:	200033ac 	.word	0x200033ac
 801094c:	200028dc 	.word	0x200028dc
 8010950:	20002bac 	.word	0x20002bac

08010954 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010954:	b480      	push	{r7}
 8010956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010958:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801095a:	4618      	mov	r0, r3
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010964:	b480      	push	{r7}
 8010966:	b083      	sub	sp, #12
 8010968:	af00      	add	r7, sp, #0
 801096a:	4603      	mov	r3, r0
 801096c:	6039      	str	r1, [r7, #0]
 801096e:	71fb      	strb	r3, [r7, #7]
 8010970:	4613      	mov	r3, r2
 8010972:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010974:	79fb      	ldrb	r3, [r7, #7]
 8010976:	2b23      	cmp	r3, #35	; 0x23
 8010978:	d84a      	bhi.n	8010a10 <CDC_Control_FS+0xac>
 801097a:	a201      	add	r2, pc, #4	; (adr r2, 8010980 <CDC_Control_FS+0x1c>)
 801097c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010980:	08010a11 	.word	0x08010a11
 8010984:	08010a11 	.word	0x08010a11
 8010988:	08010a11 	.word	0x08010a11
 801098c:	08010a11 	.word	0x08010a11
 8010990:	08010a11 	.word	0x08010a11
 8010994:	08010a11 	.word	0x08010a11
 8010998:	08010a11 	.word	0x08010a11
 801099c:	08010a11 	.word	0x08010a11
 80109a0:	08010a11 	.word	0x08010a11
 80109a4:	08010a11 	.word	0x08010a11
 80109a8:	08010a11 	.word	0x08010a11
 80109ac:	08010a11 	.word	0x08010a11
 80109b0:	08010a11 	.word	0x08010a11
 80109b4:	08010a11 	.word	0x08010a11
 80109b8:	08010a11 	.word	0x08010a11
 80109bc:	08010a11 	.word	0x08010a11
 80109c0:	08010a11 	.word	0x08010a11
 80109c4:	08010a11 	.word	0x08010a11
 80109c8:	08010a11 	.word	0x08010a11
 80109cc:	08010a11 	.word	0x08010a11
 80109d0:	08010a11 	.word	0x08010a11
 80109d4:	08010a11 	.word	0x08010a11
 80109d8:	08010a11 	.word	0x08010a11
 80109dc:	08010a11 	.word	0x08010a11
 80109e0:	08010a11 	.word	0x08010a11
 80109e4:	08010a11 	.word	0x08010a11
 80109e8:	08010a11 	.word	0x08010a11
 80109ec:	08010a11 	.word	0x08010a11
 80109f0:	08010a11 	.word	0x08010a11
 80109f4:	08010a11 	.word	0x08010a11
 80109f8:	08010a11 	.word	0x08010a11
 80109fc:	08010a11 	.word	0x08010a11
 8010a00:	08010a11 	.word	0x08010a11
 8010a04:	08010a11 	.word	0x08010a11
 8010a08:	08010a11 	.word	0x08010a11
 8010a0c:	08010a11 	.word	0x08010a11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010a10:	bf00      	nop
  }

  return (USBD_OK);
 8010a12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010a2a:	6879      	ldr	r1, [r7, #4]
 8010a2c:	4805      	ldr	r0, [pc, #20]	; (8010a44 <CDC_Receive_FS+0x24>)
 8010a2e:	f7fb fd42 	bl	800c4b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010a32:	4804      	ldr	r0, [pc, #16]	; (8010a44 <CDC_Receive_FS+0x24>)
 8010a34:	f7fb fd58 	bl	800c4e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010a38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3708      	adds	r7, #8
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	200028dc 	.word	0x200028dc

08010a48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b087      	sub	sp, #28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	4613      	mov	r3, r2
 8010a54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010a56:	2300      	movs	r3, #0
 8010a58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	371c      	adds	r7, #28
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr
	...

08010a6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b083      	sub	sp, #12
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	4603      	mov	r3, r0
 8010a74:	6039      	str	r1, [r7, #0]
 8010a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	2212      	movs	r2, #18
 8010a7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a7e:	4b03      	ldr	r3, [pc, #12]	; (8010a8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr
 8010a8c:	20000154 	.word	0x20000154

08010a90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b083      	sub	sp, #12
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	4603      	mov	r3, r0
 8010a98:	6039      	str	r1, [r7, #0]
 8010a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	2204      	movs	r2, #4
 8010aa0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010aa2:	4b03      	ldr	r3, [pc, #12]	; (8010ab0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	370c      	adds	r7, #12
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr
 8010ab0:	20000174 	.word	0x20000174

08010ab4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	4603      	mov	r3, r0
 8010abc:	6039      	str	r1, [r7, #0]
 8010abe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ac0:	79fb      	ldrb	r3, [r7, #7]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d105      	bne.n	8010ad2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010ac6:	683a      	ldr	r2, [r7, #0]
 8010ac8:	4907      	ldr	r1, [pc, #28]	; (8010ae8 <USBD_FS_ProductStrDescriptor+0x34>)
 8010aca:	4808      	ldr	r0, [pc, #32]	; (8010aec <USBD_FS_ProductStrDescriptor+0x38>)
 8010acc:	f7fc fde9 	bl	800d6a2 <USBD_GetString>
 8010ad0:	e004      	b.n	8010adc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010ad2:	683a      	ldr	r2, [r7, #0]
 8010ad4:	4904      	ldr	r1, [pc, #16]	; (8010ae8 <USBD_FS_ProductStrDescriptor+0x34>)
 8010ad6:	4805      	ldr	r0, [pc, #20]	; (8010aec <USBD_FS_ProductStrDescriptor+0x38>)
 8010ad8:	f7fc fde3 	bl	800d6a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010adc:	4b02      	ldr	r3, [pc, #8]	; (8010ae8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3708      	adds	r7, #8
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	20003bac 	.word	0x20003bac
 8010aec:	08011598 	.word	0x08011598

08010af0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	4603      	mov	r3, r0
 8010af8:	6039      	str	r1, [r7, #0]
 8010afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010afc:	683a      	ldr	r2, [r7, #0]
 8010afe:	4904      	ldr	r1, [pc, #16]	; (8010b10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010b00:	4804      	ldr	r0, [pc, #16]	; (8010b14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010b02:	f7fc fdce 	bl	800d6a2 <USBD_GetString>
  return USBD_StrDesc;
 8010b06:	4b02      	ldr	r3, [pc, #8]	; (8010b10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	20003bac 	.word	0x20003bac
 8010b14:	080115b0 	.word	0x080115b0

08010b18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b082      	sub	sp, #8
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	4603      	mov	r3, r0
 8010b20:	6039      	str	r1, [r7, #0]
 8010b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	221a      	movs	r2, #26
 8010b28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010b2a:	f000 f855 	bl	8010bd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010b2e:	4b02      	ldr	r3, [pc, #8]	; (8010b38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3708      	adds	r7, #8
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	20000178 	.word	0x20000178

08010b3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b082      	sub	sp, #8
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	4603      	mov	r3, r0
 8010b44:	6039      	str	r1, [r7, #0]
 8010b46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010b48:	79fb      	ldrb	r3, [r7, #7]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d105      	bne.n	8010b5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b4e:	683a      	ldr	r2, [r7, #0]
 8010b50:	4907      	ldr	r1, [pc, #28]	; (8010b70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b52:	4808      	ldr	r0, [pc, #32]	; (8010b74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b54:	f7fc fda5 	bl	800d6a2 <USBD_GetString>
 8010b58:	e004      	b.n	8010b64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b5a:	683a      	ldr	r2, [r7, #0]
 8010b5c:	4904      	ldr	r1, [pc, #16]	; (8010b70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b5e:	4805      	ldr	r0, [pc, #20]	; (8010b74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b60:	f7fc fd9f 	bl	800d6a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b64:	4b02      	ldr	r3, [pc, #8]	; (8010b70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3708      	adds	r7, #8
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	20003bac 	.word	0x20003bac
 8010b74:	080115c4 	.word	0x080115c4

08010b78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	4603      	mov	r3, r0
 8010b80:	6039      	str	r1, [r7, #0]
 8010b82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b84:	79fb      	ldrb	r3, [r7, #7]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d105      	bne.n	8010b96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b8a:	683a      	ldr	r2, [r7, #0]
 8010b8c:	4907      	ldr	r1, [pc, #28]	; (8010bac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b8e:	4808      	ldr	r0, [pc, #32]	; (8010bb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b90:	f7fc fd87 	bl	800d6a2 <USBD_GetString>
 8010b94:	e004      	b.n	8010ba0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b96:	683a      	ldr	r2, [r7, #0]
 8010b98:	4904      	ldr	r1, [pc, #16]	; (8010bac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b9a:	4805      	ldr	r0, [pc, #20]	; (8010bb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b9c:	f7fc fd81 	bl	800d6a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ba0:	4b02      	ldr	r3, [pc, #8]	; (8010bac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	20003bac 	.word	0x20003bac
 8010bb0:	080115d0 	.word	0x080115d0

08010bb4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	4603      	mov	r3, r0
 8010bbc:	6039      	str	r1, [r7, #0]
 8010bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	220c      	movs	r2, #12
 8010bc4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010bc6:	4b03      	ldr	r3, [pc, #12]	; (8010bd4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	370c      	adds	r7, #12
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr
 8010bd4:	20000168 	.word	0x20000168

08010bd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010bde:	4b0f      	ldr	r3, [pc, #60]	; (8010c1c <Get_SerialNum+0x44>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010be4:	4b0e      	ldr	r3, [pc, #56]	; (8010c20 <Get_SerialNum+0x48>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010bea:	4b0e      	ldr	r3, [pc, #56]	; (8010c24 <Get_SerialNum+0x4c>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010bf0:	68fa      	ldr	r2, [r7, #12]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d009      	beq.n	8010c12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010bfe:	2208      	movs	r2, #8
 8010c00:	4909      	ldr	r1, [pc, #36]	; (8010c28 <Get_SerialNum+0x50>)
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f000 f814 	bl	8010c30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010c08:	2204      	movs	r2, #4
 8010c0a:	4908      	ldr	r1, [pc, #32]	; (8010c2c <Get_SerialNum+0x54>)
 8010c0c:	68b8      	ldr	r0, [r7, #8]
 8010c0e:	f000 f80f 	bl	8010c30 <IntToUnicode>
  }
}
 8010c12:	bf00      	nop
 8010c14:	3710      	adds	r7, #16
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bd80      	pop	{r7, pc}
 8010c1a:	bf00      	nop
 8010c1c:	1fff7590 	.word	0x1fff7590
 8010c20:	1fff7594 	.word	0x1fff7594
 8010c24:	1fff7598 	.word	0x1fff7598
 8010c28:	2000017a 	.word	0x2000017a
 8010c2c:	2000018a 	.word	0x2000018a

08010c30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b087      	sub	sp, #28
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010c42:	2300      	movs	r3, #0
 8010c44:	75fb      	strb	r3, [r7, #23]
 8010c46:	e027      	b.n	8010c98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	0f1b      	lsrs	r3, r3, #28
 8010c4c:	2b09      	cmp	r3, #9
 8010c4e:	d80b      	bhi.n	8010c68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	0f1b      	lsrs	r3, r3, #28
 8010c54:	b2da      	uxtb	r2, r3
 8010c56:	7dfb      	ldrb	r3, [r7, #23]
 8010c58:	005b      	lsls	r3, r3, #1
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	440b      	add	r3, r1
 8010c60:	3230      	adds	r2, #48	; 0x30
 8010c62:	b2d2      	uxtb	r2, r2
 8010c64:	701a      	strb	r2, [r3, #0]
 8010c66:	e00a      	b.n	8010c7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	0f1b      	lsrs	r3, r3, #28
 8010c6c:	b2da      	uxtb	r2, r3
 8010c6e:	7dfb      	ldrb	r3, [r7, #23]
 8010c70:	005b      	lsls	r3, r3, #1
 8010c72:	4619      	mov	r1, r3
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	440b      	add	r3, r1
 8010c78:	3237      	adds	r2, #55	; 0x37
 8010c7a:	b2d2      	uxtb	r2, r2
 8010c7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	011b      	lsls	r3, r3, #4
 8010c82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010c84:	7dfb      	ldrb	r3, [r7, #23]
 8010c86:	005b      	lsls	r3, r3, #1
 8010c88:	3301      	adds	r3, #1
 8010c8a:	68ba      	ldr	r2, [r7, #8]
 8010c8c:	4413      	add	r3, r2
 8010c8e:	2200      	movs	r2, #0
 8010c90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c92:	7dfb      	ldrb	r3, [r7, #23]
 8010c94:	3301      	adds	r3, #1
 8010c96:	75fb      	strb	r3, [r7, #23]
 8010c98:	7dfa      	ldrb	r2, [r7, #23]
 8010c9a:	79fb      	ldrb	r3, [r7, #7]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d3d3      	bcc.n	8010c48 <IntToUnicode+0x18>
  }
}
 8010ca0:	bf00      	nop
 8010ca2:	bf00      	nop
 8010ca4:	371c      	adds	r7, #28
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cac:	4770      	bx	lr
	...

08010cb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b08a      	sub	sp, #40	; 0x28
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010cb8:	f107 0314 	add.w	r3, r7, #20
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	601a      	str	r2, [r3, #0]
 8010cc0:	605a      	str	r2, [r3, #4]
 8010cc2:	609a      	str	r2, [r3, #8]
 8010cc4:	60da      	str	r2, [r3, #12]
 8010cc6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010cd0:	d14e      	bne.n	8010d70 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010cd2:	4b29      	ldr	r3, [pc, #164]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cd6:	4a28      	ldr	r2, [pc, #160]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010cd8:	f043 0301 	orr.w	r3, r3, #1
 8010cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010cde:	4b26      	ldr	r3, [pc, #152]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ce2:	f003 0301 	and.w	r3, r3, #1
 8010ce6:	613b      	str	r3, [r7, #16]
 8010ce8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 8010cea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010cf0:	2302      	movs	r3, #2
 8010cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010cf8:	2303      	movs	r3, #3
 8010cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010cfc:	230a      	movs	r3, #10
 8010cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d00:	f107 0314 	add.w	r3, r7, #20
 8010d04:	4619      	mov	r1, r3
 8010d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010d0a:	f7f2 f8d7 	bl	8002ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010d0e:	4b1a      	ldr	r3, [pc, #104]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d12:	4a19      	ldr	r2, [pc, #100]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010d14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010d1a:	4b17      	ldr	r3, [pc, #92]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010d22:	60fb      	str	r3, [r7, #12]
 8010d24:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010d26:	4b14      	ldr	r3, [pc, #80]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d114      	bne.n	8010d5c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010d32:	4b11      	ldr	r3, [pc, #68]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d36:	4a10      	ldr	r2, [pc, #64]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8010d3e:	4b0e      	ldr	r3, [pc, #56]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d46:	60bb      	str	r3, [r7, #8]
 8010d48:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8010d4a:	f7f3 fd2d 	bl	80047a8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010d4e:	4b0a      	ldr	r3, [pc, #40]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d52:	4a09      	ldr	r2, [pc, #36]	; (8010d78 <HAL_PCD_MspInit+0xc8>)
 8010d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010d58:	6593      	str	r3, [r2, #88]	; 0x58
 8010d5a:	e001      	b.n	8010d60 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8010d5c:	f7f3 fd24 	bl	80047a8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010d60:	2200      	movs	r2, #0
 8010d62:	2105      	movs	r1, #5
 8010d64:	2043      	movs	r0, #67	; 0x43
 8010d66:	f7f1 fc99 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010d6a:	2043      	movs	r0, #67	; 0x43
 8010d6c:	f7f1 fcb2 	bl	80026d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010d70:	bf00      	nop
 8010d72:	3728      	adds	r7, #40	; 0x28
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	40021000 	.word	0x40021000

08010d7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b082      	sub	sp, #8
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010d90:	4619      	mov	r1, r3
 8010d92:	4610      	mov	r0, r2
 8010d94:	f7fb fc74 	bl	800c680 <USBD_LL_SetupStage>
}
 8010d98:	bf00      	nop
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	460b      	mov	r3, r1
 8010daa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010db2:	78fa      	ldrb	r2, [r7, #3]
 8010db4:	6879      	ldr	r1, [r7, #4]
 8010db6:	4613      	mov	r3, r2
 8010db8:	00db      	lsls	r3, r3, #3
 8010dba:	1a9b      	subs	r3, r3, r2
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	440b      	add	r3, r1
 8010dc0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	78fb      	ldrb	r3, [r7, #3]
 8010dc8:	4619      	mov	r1, r3
 8010dca:	f7fb fcae 	bl	800c72a <USBD_LL_DataOutStage>
}
 8010dce:	bf00      	nop
 8010dd0:	3708      	adds	r7, #8
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}

08010dd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dd6:	b580      	push	{r7, lr}
 8010dd8:	b082      	sub	sp, #8
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]
 8010dde:	460b      	mov	r3, r1
 8010de0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010de8:	78fa      	ldrb	r2, [r7, #3]
 8010dea:	6879      	ldr	r1, [r7, #4]
 8010dec:	4613      	mov	r3, r2
 8010dee:	00db      	lsls	r3, r3, #3
 8010df0:	1a9b      	subs	r3, r3, r2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	440b      	add	r3, r1
 8010df6:	3348      	adds	r3, #72	; 0x48
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	78fb      	ldrb	r3, [r7, #3]
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	f7fb fcf7 	bl	800c7f0 <USBD_LL_DataInStage>
}
 8010e02:	bf00      	nop
 8010e04:	3708      	adds	r7, #8
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b082      	sub	sp, #8
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fb fe0b 	bl	800ca34 <USBD_LL_SOF>
}
 8010e1e:	bf00      	nop
 8010e20:	3708      	adds	r7, #8
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd80      	pop	{r7, pc}

08010e26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e26:	b580      	push	{r7, lr}
 8010e28:	b084      	sub	sp, #16
 8010e2a:	af00      	add	r7, sp, #0
 8010e2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	68db      	ldr	r3, [r3, #12]
 8010e36:	2b02      	cmp	r3, #2
 8010e38:	d001      	beq.n	8010e3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010e3a:	f7ef ffb9 	bl	8000db0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e44:	7bfa      	ldrb	r2, [r7, #15]
 8010e46:	4611      	mov	r1, r2
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7fb fdb5 	bl	800c9b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7fb fd61 	bl	800c91c <USBD_LL_Reset>
}
 8010e5a:	bf00      	nop
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
	...

08010e64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	6812      	ldr	r2, [r2, #0]
 8010e7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e7e:	f043 0301 	orr.w	r3, r3, #1
 8010e82:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fb fda4 	bl	800c9d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6a1b      	ldr	r3, [r3, #32]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d005      	beq.n	8010ea4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010e98:	4b04      	ldr	r3, [pc, #16]	; (8010eac <HAL_PCD_SuspendCallback+0x48>)
 8010e9a:	691b      	ldr	r3, [r3, #16]
 8010e9c:	4a03      	ldr	r2, [pc, #12]	; (8010eac <HAL_PCD_SuspendCallback+0x48>)
 8010e9e:	f043 0306 	orr.w	r3, r3, #6
 8010ea2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010ea4:	bf00      	nop
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	e000ed00 	.word	0xe000ed00

08010eb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	6812      	ldr	r2, [r2, #0]
 8010ec6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010eca:	f023 0301 	bic.w	r3, r3, #1
 8010ece:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6a1b      	ldr	r3, [r3, #32]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d007      	beq.n	8010ee8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ed8:	4b08      	ldr	r3, [pc, #32]	; (8010efc <HAL_PCD_ResumeCallback+0x4c>)
 8010eda:	691b      	ldr	r3, [r3, #16]
 8010edc:	4a07      	ldr	r2, [pc, #28]	; (8010efc <HAL_PCD_ResumeCallback+0x4c>)
 8010ede:	f023 0306 	bic.w	r3, r3, #6
 8010ee2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010ee4:	f000 faf4 	bl	80114d0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fb fd88 	bl	800ca04 <USBD_LL_Resume>
}
 8010ef4:	bf00      	nop
 8010ef6:	3708      	adds	r7, #8
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	e000ed00 	.word	0xe000ed00

08010f00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	460b      	mov	r3, r1
 8010f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f12:	78fa      	ldrb	r2, [r7, #3]
 8010f14:	4611      	mov	r1, r2
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fb fdd4 	bl	800cac4 <USBD_LL_IsoOUTIncomplete>
}
 8010f1c:	bf00      	nop
 8010f1e:	3708      	adds	r7, #8
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	460b      	mov	r3, r1
 8010f2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f36:	78fa      	ldrb	r2, [r7, #3]
 8010f38:	4611      	mov	r1, r2
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7fb fd9c 	bl	800ca78 <USBD_LL_IsoINIncomplete>
}
 8010f40:	bf00      	nop
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b082      	sub	sp, #8
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7fb fdda 	bl	800cb10 <USBD_LL_DevConnected>
}
 8010f5c:	bf00      	nop
 8010f5e:	3708      	adds	r7, #8
 8010f60:	46bd      	mov	sp, r7
 8010f62:	bd80      	pop	{r7, pc}

08010f64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7fb fdd7 	bl	800cb26 <USBD_LL_DevDisconnected>
}
 8010f78:	bf00      	nop
 8010f7a:	3708      	adds	r7, #8
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d139      	bne.n	8011004 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010f90:	4a1f      	ldr	r2, [pc, #124]	; (8011010 <USBD_LL_Init+0x90>)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	4a1d      	ldr	r2, [pc, #116]	; (8011010 <USBD_LL_Init+0x90>)
 8010f9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010fa0:	4b1b      	ldr	r3, [pc, #108]	; (8011010 <USBD_LL_Init+0x90>)
 8010fa2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010fa6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010fa8:	4b19      	ldr	r3, [pc, #100]	; (8011010 <USBD_LL_Init+0x90>)
 8010faa:	2206      	movs	r2, #6
 8010fac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010fae:	4b18      	ldr	r3, [pc, #96]	; (8011010 <USBD_LL_Init+0x90>)
 8010fb0:	2202      	movs	r2, #2
 8010fb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010fb4:	4b16      	ldr	r3, [pc, #88]	; (8011010 <USBD_LL_Init+0x90>)
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010fba:	4b15      	ldr	r3, [pc, #84]	; (8011010 <USBD_LL_Init+0x90>)
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010fc0:	4b13      	ldr	r3, [pc, #76]	; (8011010 <USBD_LL_Init+0x90>)
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8010fc6:	4b12      	ldr	r3, [pc, #72]	; (8011010 <USBD_LL_Init+0x90>)
 8010fc8:	2201      	movs	r2, #1
 8010fca:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010fcc:	4b10      	ldr	r3, [pc, #64]	; (8011010 <USBD_LL_Init+0x90>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010fd2:	4b0f      	ldr	r3, [pc, #60]	; (8011010 <USBD_LL_Init+0x90>)
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010fd8:	480d      	ldr	r0, [pc, #52]	; (8011010 <USBD_LL_Init+0x90>)
 8010fda:	f7f2 fa71 	bl	80034c0 <HAL_PCD_Init>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8010fe4:	f7ef fee4 	bl	8000db0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010fe8:	2180      	movs	r1, #128	; 0x80
 8010fea:	4809      	ldr	r0, [pc, #36]	; (8011010 <USBD_LL_Init+0x90>)
 8010fec:	f7f3 fad3 	bl	8004596 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010ff0:	2240      	movs	r2, #64	; 0x40
 8010ff2:	2100      	movs	r1, #0
 8010ff4:	4806      	ldr	r0, [pc, #24]	; (8011010 <USBD_LL_Init+0x90>)
 8010ff6:	f7f3 fa87 	bl	8004508 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010ffa:	2280      	movs	r2, #128	; 0x80
 8010ffc:	2101      	movs	r1, #1
 8010ffe:	4804      	ldr	r0, [pc, #16]	; (8011010 <USBD_LL_Init+0x90>)
 8011000:	f7f3 fa82 	bl	8004508 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011004:	2300      	movs	r3, #0
}
 8011006:	4618      	mov	r0, r3
 8011008:	3708      	adds	r7, #8
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	20003dac 	.word	0x20003dac

08011014 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011020:	2300      	movs	r3, #0
 8011022:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801102a:	4618      	mov	r0, r3
 801102c:	f7f2 fb6c 	bl	8003708 <HAL_PCD_Start>
 8011030:	4603      	mov	r3, r0
 8011032:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011034:	7bbb      	ldrb	r3, [r7, #14]
 8011036:	2b03      	cmp	r3, #3
 8011038:	d816      	bhi.n	8011068 <USBD_LL_Start+0x54>
 801103a:	a201      	add	r2, pc, #4	; (adr r2, 8011040 <USBD_LL_Start+0x2c>)
 801103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011040:	08011051 	.word	0x08011051
 8011044:	08011057 	.word	0x08011057
 8011048:	0801105d 	.word	0x0801105d
 801104c:	08011063 	.word	0x08011063
    case HAL_OK :
      usb_status = USBD_OK;
 8011050:	2300      	movs	r3, #0
 8011052:	73fb      	strb	r3, [r7, #15]
    break;
 8011054:	e00b      	b.n	801106e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011056:	2303      	movs	r3, #3
 8011058:	73fb      	strb	r3, [r7, #15]
    break;
 801105a:	e008      	b.n	801106e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801105c:	2301      	movs	r3, #1
 801105e:	73fb      	strb	r3, [r7, #15]
    break;
 8011060:	e005      	b.n	801106e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011062:	2303      	movs	r3, #3
 8011064:	73fb      	strb	r3, [r7, #15]
    break;
 8011066:	e002      	b.n	801106e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8011068:	2303      	movs	r3, #3
 801106a:	73fb      	strb	r3, [r7, #15]
    break;
 801106c:	bf00      	nop
  }
  return usb_status;
 801106e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011070:	4618      	mov	r0, r3
 8011072:	3710      	adds	r7, #16
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b084      	sub	sp, #16
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	4608      	mov	r0, r1
 8011082:	4611      	mov	r1, r2
 8011084:	461a      	mov	r2, r3
 8011086:	4603      	mov	r3, r0
 8011088:	70fb      	strb	r3, [r7, #3]
 801108a:	460b      	mov	r3, r1
 801108c:	70bb      	strb	r3, [r7, #2]
 801108e:	4613      	mov	r3, r2
 8011090:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011092:	2300      	movs	r3, #0
 8011094:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80110a0:	78bb      	ldrb	r3, [r7, #2]
 80110a2:	883a      	ldrh	r2, [r7, #0]
 80110a4:	78f9      	ldrb	r1, [r7, #3]
 80110a6:	f7f2 ff27 	bl	8003ef8 <HAL_PCD_EP_Open>
 80110aa:	4603      	mov	r3, r0
 80110ac:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80110ae:	7bbb      	ldrb	r3, [r7, #14]
 80110b0:	2b03      	cmp	r3, #3
 80110b2:	d817      	bhi.n	80110e4 <USBD_LL_OpenEP+0x6c>
 80110b4:	a201      	add	r2, pc, #4	; (adr r2, 80110bc <USBD_LL_OpenEP+0x44>)
 80110b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ba:	bf00      	nop
 80110bc:	080110cd 	.word	0x080110cd
 80110c0:	080110d3 	.word	0x080110d3
 80110c4:	080110d9 	.word	0x080110d9
 80110c8:	080110df 	.word	0x080110df
    case HAL_OK :
      usb_status = USBD_OK;
 80110cc:	2300      	movs	r3, #0
 80110ce:	73fb      	strb	r3, [r7, #15]
    break;
 80110d0:	e00b      	b.n	80110ea <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80110d2:	2303      	movs	r3, #3
 80110d4:	73fb      	strb	r3, [r7, #15]
    break;
 80110d6:	e008      	b.n	80110ea <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80110d8:	2301      	movs	r3, #1
 80110da:	73fb      	strb	r3, [r7, #15]
    break;
 80110dc:	e005      	b.n	80110ea <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80110de:	2303      	movs	r3, #3
 80110e0:	73fb      	strb	r3, [r7, #15]
    break;
 80110e2:	e002      	b.n	80110ea <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80110e4:	2303      	movs	r3, #3
 80110e6:	73fb      	strb	r3, [r7, #15]
    break;
 80110e8:	bf00      	nop
  }
  return usb_status;
 80110ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3710      	adds	r7, #16
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b084      	sub	sp, #16
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	460b      	mov	r3, r1
 80110fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011100:	2300      	movs	r3, #0
 8011102:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011104:	2300      	movs	r3, #0
 8011106:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801110e:	78fa      	ldrb	r2, [r7, #3]
 8011110:	4611      	mov	r1, r2
 8011112:	4618      	mov	r0, r3
 8011114:	f7f2 ff58 	bl	8003fc8 <HAL_PCD_EP_Close>
 8011118:	4603      	mov	r3, r0
 801111a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801111c:	7bbb      	ldrb	r3, [r7, #14]
 801111e:	2b03      	cmp	r3, #3
 8011120:	d816      	bhi.n	8011150 <USBD_LL_CloseEP+0x5c>
 8011122:	a201      	add	r2, pc, #4	; (adr r2, 8011128 <USBD_LL_CloseEP+0x34>)
 8011124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011128:	08011139 	.word	0x08011139
 801112c:	0801113f 	.word	0x0801113f
 8011130:	08011145 	.word	0x08011145
 8011134:	0801114b 	.word	0x0801114b
    case HAL_OK :
      usb_status = USBD_OK;
 8011138:	2300      	movs	r3, #0
 801113a:	73fb      	strb	r3, [r7, #15]
    break;
 801113c:	e00b      	b.n	8011156 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801113e:	2303      	movs	r3, #3
 8011140:	73fb      	strb	r3, [r7, #15]
    break;
 8011142:	e008      	b.n	8011156 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011144:	2301      	movs	r3, #1
 8011146:	73fb      	strb	r3, [r7, #15]
    break;
 8011148:	e005      	b.n	8011156 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801114a:	2303      	movs	r3, #3
 801114c:	73fb      	strb	r3, [r7, #15]
    break;
 801114e:	e002      	b.n	8011156 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011150:	2303      	movs	r3, #3
 8011152:	73fb      	strb	r3, [r7, #15]
    break;
 8011154:	bf00      	nop
  }
  return usb_status;
 8011156:	7bfb      	ldrb	r3, [r7, #15]
}
 8011158:	4618      	mov	r0, r3
 801115a:	3710      	adds	r7, #16
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	460b      	mov	r3, r1
 801116a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801116c:	2300      	movs	r3, #0
 801116e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011170:	2300      	movs	r3, #0
 8011172:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801117a:	78fa      	ldrb	r2, [r7, #3]
 801117c:	4611      	mov	r1, r2
 801117e:	4618      	mov	r0, r3
 8011180:	f7f2 ffff 	bl	8004182 <HAL_PCD_EP_SetStall>
 8011184:	4603      	mov	r3, r0
 8011186:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011188:	7bbb      	ldrb	r3, [r7, #14]
 801118a:	2b03      	cmp	r3, #3
 801118c:	d816      	bhi.n	80111bc <USBD_LL_StallEP+0x5c>
 801118e:	a201      	add	r2, pc, #4	; (adr r2, 8011194 <USBD_LL_StallEP+0x34>)
 8011190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011194:	080111a5 	.word	0x080111a5
 8011198:	080111ab 	.word	0x080111ab
 801119c:	080111b1 	.word	0x080111b1
 80111a0:	080111b7 	.word	0x080111b7
    case HAL_OK :
      usb_status = USBD_OK;
 80111a4:	2300      	movs	r3, #0
 80111a6:	73fb      	strb	r3, [r7, #15]
    break;
 80111a8:	e00b      	b.n	80111c2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80111aa:	2303      	movs	r3, #3
 80111ac:	73fb      	strb	r3, [r7, #15]
    break;
 80111ae:	e008      	b.n	80111c2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80111b0:	2301      	movs	r3, #1
 80111b2:	73fb      	strb	r3, [r7, #15]
    break;
 80111b4:	e005      	b.n	80111c2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80111b6:	2303      	movs	r3, #3
 80111b8:	73fb      	strb	r3, [r7, #15]
    break;
 80111ba:	e002      	b.n	80111c2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80111bc:	2303      	movs	r3, #3
 80111be:	73fb      	strb	r3, [r7, #15]
    break;
 80111c0:	bf00      	nop
  }
  return usb_status;
 80111c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3710      	adds	r7, #16
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}

080111cc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b084      	sub	sp, #16
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	460b      	mov	r3, r1
 80111d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111d8:	2300      	movs	r3, #0
 80111da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111dc:	2300      	movs	r3, #0
 80111de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80111e6:	78fa      	ldrb	r2, [r7, #3]
 80111e8:	4611      	mov	r1, r2
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7f3 f82b 	bl	8004246 <HAL_PCD_EP_ClrStall>
 80111f0:	4603      	mov	r3, r0
 80111f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80111f4:	7bbb      	ldrb	r3, [r7, #14]
 80111f6:	2b03      	cmp	r3, #3
 80111f8:	d816      	bhi.n	8011228 <USBD_LL_ClearStallEP+0x5c>
 80111fa:	a201      	add	r2, pc, #4	; (adr r2, 8011200 <USBD_LL_ClearStallEP+0x34>)
 80111fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011200:	08011211 	.word	0x08011211
 8011204:	08011217 	.word	0x08011217
 8011208:	0801121d 	.word	0x0801121d
 801120c:	08011223 	.word	0x08011223
    case HAL_OK :
      usb_status = USBD_OK;
 8011210:	2300      	movs	r3, #0
 8011212:	73fb      	strb	r3, [r7, #15]
    break;
 8011214:	e00b      	b.n	801122e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011216:	2303      	movs	r3, #3
 8011218:	73fb      	strb	r3, [r7, #15]
    break;
 801121a:	e008      	b.n	801122e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801121c:	2301      	movs	r3, #1
 801121e:	73fb      	strb	r3, [r7, #15]
    break;
 8011220:	e005      	b.n	801122e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011222:	2303      	movs	r3, #3
 8011224:	73fb      	strb	r3, [r7, #15]
    break;
 8011226:	e002      	b.n	801122e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011228:	2303      	movs	r3, #3
 801122a:	73fb      	strb	r3, [r7, #15]
    break;
 801122c:	bf00      	nop
  }
  return usb_status;
 801122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011230:	4618      	mov	r0, r3
 8011232:	3710      	adds	r7, #16
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011238:	b480      	push	{r7}
 801123a:	b085      	sub	sp, #20
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	460b      	mov	r3, r1
 8011242:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801124a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801124c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011250:	2b00      	cmp	r3, #0
 8011252:	da0b      	bge.n	801126c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011254:	78fb      	ldrb	r3, [r7, #3]
 8011256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801125a:	68f9      	ldr	r1, [r7, #12]
 801125c:	4613      	mov	r3, r2
 801125e:	00db      	lsls	r3, r3, #3
 8011260:	1a9b      	subs	r3, r3, r2
 8011262:	009b      	lsls	r3, r3, #2
 8011264:	440b      	add	r3, r1
 8011266:	333e      	adds	r3, #62	; 0x3e
 8011268:	781b      	ldrb	r3, [r3, #0]
 801126a:	e00b      	b.n	8011284 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801126c:	78fb      	ldrb	r3, [r7, #3]
 801126e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011272:	68f9      	ldr	r1, [r7, #12]
 8011274:	4613      	mov	r3, r2
 8011276:	00db      	lsls	r3, r3, #3
 8011278:	1a9b      	subs	r3, r3, r2
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	440b      	add	r3, r1
 801127e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011282:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011284:	4618      	mov	r0, r3
 8011286:	3714      	adds	r7, #20
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b084      	sub	sp, #16
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	460b      	mov	r3, r1
 801129a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801129c:	2300      	movs	r3, #0
 801129e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112a0:	2300      	movs	r3, #0
 80112a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80112aa:	78fa      	ldrb	r2, [r7, #3]
 80112ac:	4611      	mov	r1, r2
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7f2 fdfd 	bl	8003eae <HAL_PCD_SetAddress>
 80112b4:	4603      	mov	r3, r0
 80112b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80112b8:	7bbb      	ldrb	r3, [r7, #14]
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	d816      	bhi.n	80112ec <USBD_LL_SetUSBAddress+0x5c>
 80112be:	a201      	add	r2, pc, #4	; (adr r2, 80112c4 <USBD_LL_SetUSBAddress+0x34>)
 80112c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c4:	080112d5 	.word	0x080112d5
 80112c8:	080112db 	.word	0x080112db
 80112cc:	080112e1 	.word	0x080112e1
 80112d0:	080112e7 	.word	0x080112e7
    case HAL_OK :
      usb_status = USBD_OK;
 80112d4:	2300      	movs	r3, #0
 80112d6:	73fb      	strb	r3, [r7, #15]
    break;
 80112d8:	e00b      	b.n	80112f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80112da:	2303      	movs	r3, #3
 80112dc:	73fb      	strb	r3, [r7, #15]
    break;
 80112de:	e008      	b.n	80112f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80112e0:	2301      	movs	r3, #1
 80112e2:	73fb      	strb	r3, [r7, #15]
    break;
 80112e4:	e005      	b.n	80112f2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80112e6:	2303      	movs	r3, #3
 80112e8:	73fb      	strb	r3, [r7, #15]
    break;
 80112ea:	e002      	b.n	80112f2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80112ec:	2303      	movs	r3, #3
 80112ee:	73fb      	strb	r3, [r7, #15]
    break;
 80112f0:	bf00      	nop
  }
  return usb_status;
 80112f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3710      	adds	r7, #16
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b086      	sub	sp, #24
 8011300:	af00      	add	r7, sp, #0
 8011302:	60f8      	str	r0, [r7, #12]
 8011304:	607a      	str	r2, [r7, #4]
 8011306:	603b      	str	r3, [r7, #0]
 8011308:	460b      	mov	r3, r1
 801130a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011310:	2300      	movs	r3, #0
 8011312:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801131a:	7af9      	ldrb	r1, [r7, #11]
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	687a      	ldr	r2, [r7, #4]
 8011320:	f7f2 fef2 	bl	8004108 <HAL_PCD_EP_Transmit>
 8011324:	4603      	mov	r3, r0
 8011326:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011328:	7dbb      	ldrb	r3, [r7, #22]
 801132a:	2b03      	cmp	r3, #3
 801132c:	d816      	bhi.n	801135c <USBD_LL_Transmit+0x60>
 801132e:	a201      	add	r2, pc, #4	; (adr r2, 8011334 <USBD_LL_Transmit+0x38>)
 8011330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011334:	08011345 	.word	0x08011345
 8011338:	0801134b 	.word	0x0801134b
 801133c:	08011351 	.word	0x08011351
 8011340:	08011357 	.word	0x08011357
    case HAL_OK :
      usb_status = USBD_OK;
 8011344:	2300      	movs	r3, #0
 8011346:	75fb      	strb	r3, [r7, #23]
    break;
 8011348:	e00b      	b.n	8011362 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801134a:	2303      	movs	r3, #3
 801134c:	75fb      	strb	r3, [r7, #23]
    break;
 801134e:	e008      	b.n	8011362 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011350:	2301      	movs	r3, #1
 8011352:	75fb      	strb	r3, [r7, #23]
    break;
 8011354:	e005      	b.n	8011362 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011356:	2303      	movs	r3, #3
 8011358:	75fb      	strb	r3, [r7, #23]
    break;
 801135a:	e002      	b.n	8011362 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801135c:	2303      	movs	r3, #3
 801135e:	75fb      	strb	r3, [r7, #23]
    break;
 8011360:	bf00      	nop
  }
  return usb_status;
 8011362:	7dfb      	ldrb	r3, [r7, #23]
}
 8011364:	4618      	mov	r0, r3
 8011366:	3718      	adds	r7, #24
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b086      	sub	sp, #24
 8011370:	af00      	add	r7, sp, #0
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	607a      	str	r2, [r7, #4]
 8011376:	603b      	str	r3, [r7, #0]
 8011378:	460b      	mov	r3, r1
 801137a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801137c:	2300      	movs	r3, #0
 801137e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011380:	2300      	movs	r3, #0
 8011382:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801138a:	7af9      	ldrb	r1, [r7, #11]
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	687a      	ldr	r2, [r7, #4]
 8011390:	f7f2 fe64 	bl	800405c <HAL_PCD_EP_Receive>
 8011394:	4603      	mov	r3, r0
 8011396:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011398:	7dbb      	ldrb	r3, [r7, #22]
 801139a:	2b03      	cmp	r3, #3
 801139c:	d816      	bhi.n	80113cc <USBD_LL_PrepareReceive+0x60>
 801139e:	a201      	add	r2, pc, #4	; (adr r2, 80113a4 <USBD_LL_PrepareReceive+0x38>)
 80113a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113a4:	080113b5 	.word	0x080113b5
 80113a8:	080113bb 	.word	0x080113bb
 80113ac:	080113c1 	.word	0x080113c1
 80113b0:	080113c7 	.word	0x080113c7
    case HAL_OK :
      usb_status = USBD_OK;
 80113b4:	2300      	movs	r3, #0
 80113b6:	75fb      	strb	r3, [r7, #23]
    break;
 80113b8:	e00b      	b.n	80113d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80113ba:	2303      	movs	r3, #3
 80113bc:	75fb      	strb	r3, [r7, #23]
    break;
 80113be:	e008      	b.n	80113d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80113c0:	2301      	movs	r3, #1
 80113c2:	75fb      	strb	r3, [r7, #23]
    break;
 80113c4:	e005      	b.n	80113d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80113c6:	2303      	movs	r3, #3
 80113c8:	75fb      	strb	r3, [r7, #23]
    break;
 80113ca:	e002      	b.n	80113d2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80113cc:	2303      	movs	r3, #3
 80113ce:	75fb      	strb	r3, [r7, #23]
    break;
 80113d0:	bf00      	nop
  }
  return usb_status;
 80113d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3718      	adds	r7, #24
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	460b      	mov	r3, r1
 80113e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113ee:	78fa      	ldrb	r2, [r7, #3]
 80113f0:	4611      	mov	r1, r2
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7f2 fe70 	bl	80040d8 <HAL_PCD_EP_GetRxCount>
 80113f8:	4603      	mov	r3, r0
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
	...

08011404 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	460b      	mov	r3, r1
 801140e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011410:	78fb      	ldrb	r3, [r7, #3]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d002      	beq.n	801141c <HAL_PCDEx_LPM_Callback+0x18>
 8011416:	2b01      	cmp	r3, #1
 8011418:	d01f      	beq.n	801145a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801141a:	e03b      	b.n	8011494 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6a1b      	ldr	r3, [r3, #32]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d007      	beq.n	8011434 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011424:	f000 f854 	bl	80114d0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011428:	4b1c      	ldr	r3, [pc, #112]	; (801149c <HAL_PCDEx_LPM_Callback+0x98>)
 801142a:	691b      	ldr	r3, [r3, #16]
 801142c:	4a1b      	ldr	r2, [pc, #108]	; (801149c <HAL_PCDEx_LPM_Callback+0x98>)
 801142e:	f023 0306 	bic.w	r3, r3, #6
 8011432:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	687a      	ldr	r2, [r7, #4]
 8011440:	6812      	ldr	r2, [r2, #0]
 8011442:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011446:	f023 0301 	bic.w	r3, r3, #1
 801144a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011452:	4618      	mov	r0, r3
 8011454:	f7fb fad6 	bl	800ca04 <USBD_LL_Resume>
    break;
 8011458:	e01c      	b.n	8011494 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	687a      	ldr	r2, [r7, #4]
 8011466:	6812      	ldr	r2, [r2, #0]
 8011468:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801146c:	f043 0301 	orr.w	r3, r3, #1
 8011470:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011478:	4618      	mov	r0, r3
 801147a:	f7fb faad 	bl	800c9d8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a1b      	ldr	r3, [r3, #32]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d005      	beq.n	8011492 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011486:	4b05      	ldr	r3, [pc, #20]	; (801149c <HAL_PCDEx_LPM_Callback+0x98>)
 8011488:	691b      	ldr	r3, [r3, #16]
 801148a:	4a04      	ldr	r2, [pc, #16]	; (801149c <HAL_PCDEx_LPM_Callback+0x98>)
 801148c:	f043 0306 	orr.w	r3, r3, #6
 8011490:	6113      	str	r3, [r2, #16]
    break;
 8011492:	bf00      	nop
}
 8011494:	bf00      	nop
 8011496:	3708      	adds	r7, #8
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}
 801149c:	e000ed00 	.word	0xe000ed00

080114a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80114a0:	b480      	push	{r7}
 80114a2:	b083      	sub	sp, #12
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80114a8:	4b03      	ldr	r3, [pc, #12]	; (80114b8 <USBD_static_malloc+0x18>)
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	370c      	adds	r7, #12
 80114ae:	46bd      	mov	sp, r7
 80114b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b4:	4770      	bx	lr
 80114b6:	bf00      	nop
 80114b8:	20001ab8 	.word	0x20001ab8

080114bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80114bc:	b480      	push	{r7}
 80114be:	b083      	sub	sp, #12
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]

}
 80114c4:	bf00      	nop
 80114c6:	370c      	adds	r7, #12
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr

080114d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80114d4:	f7ee feda 	bl	800028c <SystemClock_Config>
}
 80114d8:	bf00      	nop
 80114da:	bd80      	pop	{r7, pc}

080114dc <__libc_init_array>:
 80114dc:	b570      	push	{r4, r5, r6, lr}
 80114de:	4d0d      	ldr	r5, [pc, #52]	; (8011514 <__libc_init_array+0x38>)
 80114e0:	4c0d      	ldr	r4, [pc, #52]	; (8011518 <__libc_init_array+0x3c>)
 80114e2:	1b64      	subs	r4, r4, r5
 80114e4:	10a4      	asrs	r4, r4, #2
 80114e6:	2600      	movs	r6, #0
 80114e8:	42a6      	cmp	r6, r4
 80114ea:	d109      	bne.n	8011500 <__libc_init_array+0x24>
 80114ec:	4d0b      	ldr	r5, [pc, #44]	; (801151c <__libc_init_array+0x40>)
 80114ee:	4c0c      	ldr	r4, [pc, #48]	; (8011520 <__libc_init_array+0x44>)
 80114f0:	f000 f82e 	bl	8011550 <_init>
 80114f4:	1b64      	subs	r4, r4, r5
 80114f6:	10a4      	asrs	r4, r4, #2
 80114f8:	2600      	movs	r6, #0
 80114fa:	42a6      	cmp	r6, r4
 80114fc:	d105      	bne.n	801150a <__libc_init_array+0x2e>
 80114fe:	bd70      	pop	{r4, r5, r6, pc}
 8011500:	f855 3b04 	ldr.w	r3, [r5], #4
 8011504:	4798      	blx	r3
 8011506:	3601      	adds	r6, #1
 8011508:	e7ee      	b.n	80114e8 <__libc_init_array+0xc>
 801150a:	f855 3b04 	ldr.w	r3, [r5], #4
 801150e:	4798      	blx	r3
 8011510:	3601      	adds	r6, #1
 8011512:	e7f2      	b.n	80114fa <__libc_init_array+0x1e>
 8011514:	08011684 	.word	0x08011684
 8011518:	08011684 	.word	0x08011684
 801151c:	08011684 	.word	0x08011684
 8011520:	08011688 	.word	0x08011688

08011524 <memcpy>:
 8011524:	440a      	add	r2, r1
 8011526:	4291      	cmp	r1, r2
 8011528:	f100 33ff 	add.w	r3, r0, #4294967295
 801152c:	d100      	bne.n	8011530 <memcpy+0xc>
 801152e:	4770      	bx	lr
 8011530:	b510      	push	{r4, lr}
 8011532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011536:	f803 4f01 	strb.w	r4, [r3, #1]!
 801153a:	4291      	cmp	r1, r2
 801153c:	d1f9      	bne.n	8011532 <memcpy+0xe>
 801153e:	bd10      	pop	{r4, pc}

08011540 <memset>:
 8011540:	4402      	add	r2, r0
 8011542:	4603      	mov	r3, r0
 8011544:	4293      	cmp	r3, r2
 8011546:	d100      	bne.n	801154a <memset+0xa>
 8011548:	4770      	bx	lr
 801154a:	f803 1b01 	strb.w	r1, [r3], #1
 801154e:	e7f9      	b.n	8011544 <memset+0x4>

08011550 <_init>:
 8011550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011552:	bf00      	nop
 8011554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011556:	bc08      	pop	{r3}
 8011558:	469e      	mov	lr, r3
 801155a:	4770      	bx	lr

0801155c <_fini>:
 801155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155e:	bf00      	nop
 8011560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011562:	bc08      	pop	{r3}
 8011564:	469e      	mov	lr, r3
 8011566:	4770      	bx	lr
