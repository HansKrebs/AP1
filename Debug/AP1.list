
AP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e208  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800e3c4  0800e3c4  0001e3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e468  0800e468  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800e468  0800e468  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e468  0800e468  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e468  0800e468  0001e468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e46c  0800e46c  0001e46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002468  20000190  0800e600  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025f8  0800e600  000225f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000334b7  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b37  00000000  00000000  00053677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002460  00000000  00000000  000591b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021e8  00000000  00000000  0005b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a476  00000000  00000000  0005d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d03c  00000000  00000000  00097c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b790  00000000  00000000  000c4caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0021043a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a30  00000000  00000000  00210490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000190 	.word	0x20000190
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800e3ac 	.word	0x0800e3ac

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000194 	.word	0x20000194
 80001f8:	0800e3ac 	.word	0x0800e3ac

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f001 f9c3 	bl	800158a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f822 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 fc2a 	bl	8000a60 <MX_GPIO_Init>
  MX_DMA_Init();
 800020c:	f000 fbfe 	bl	8000a0c <MX_DMA_Init>
  MX_ADC1_Init();
 8000210:	f000 f8c2 	bl	8000398 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000214:	f000 f924 	bl	8000460 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000218:	f000 f986 	bl	8000528 <MX_I2C1_Init>
  MX_I2C3_Init();
 800021c:	f000 f9c4 	bl	80005a8 <MX_I2C3_Init>
  MX_RTC_Init();
 8000220:	f000 fa02 	bl	8000628 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000224:	f000 fa5c 	bl	80006e0 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000228:	f000 fa7c 	bl	8000724 <MX_SPI1_Init>
  MX_SPI2_Init();
 800022c:	f000 fab8 	bl	80007a0 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000230:	f000 faf4 	bl	800081c <MX_SPI3_Init>
  MX_TIM2_Init();
 8000234:	f000 fb30 	bl	8000898 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000238:	f000 fb7c 	bl	8000934 <MX_TIM6_Init>
  MX_TIM7_Init();
 800023c:	f000 fbb0 	bl	80009a0 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000240:	f00b fb52 	bl	800b8e8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000244:	f00d fa7e 	bl	800d744 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000248:	e7fe      	b.n	8000248 <main+0x4c>
	...

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b0be      	sub	sp, #248	; 0xf8
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000256:	2244      	movs	r2, #68	; 0x44
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f00e f89e 	bl	800e39c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	229c      	movs	r2, #156	; 0x9c
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f00e f890 	bl	800e39c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800027c:	2000      	movs	r0, #0
 800027e:	f004 f9b5 	bl	80045ec <HAL_PWREx_ControlVoltageScaling>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000288:	f000 fd56 	bl	8000d38 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800028c:	f004 f97e 	bl	800458c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000290:	4b3f      	ldr	r3, [pc, #252]	; (8000390 <SystemClock_Config+0x144>)
 8000292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000296:	4a3e      	ldr	r2, [pc, #248]	; (8000390 <SystemClock_Config+0x144>)
 8000298:	f023 0318 	bic.w	r3, r3, #24
 800029c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80002a0:	2325      	movs	r3, #37	; 0x25
 80002a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c0:	2303      	movs	r3, #3
 80002c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 4;
 80002c6:	2304      	movs	r3, #4
 80002c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 80002cc:	233c      	movs	r3, #60	; 0x3c
 80002ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80002d2:	2305      	movs	r3, #5
 80002d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d8:	2302      	movs	r3, #2
 80002da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002de:	2302      	movs	r3, #2
 80002e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f004 fa43 	bl	8004774 <HAL_RCC_OscConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002f4:	f000 fd20 	bl	8000d38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	230f      	movs	r3, #15
 80002fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fe:	2303      	movs	r3, #3
 8000300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000316:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800031a:	2105      	movs	r1, #5
 800031c:	4618      	mov	r0, r3
 800031e:	f004 fe4f 	bl	8004fc0 <HAL_RCC_ClockConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000328:	f000 fd06 	bl	8000d38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
 800032c:	4b19      	ldr	r3, [pc, #100]	; (8000394 <SystemClock_Config+0x148>)
 800032e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000330:	2300      	movs	r3, #0
 8000332:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000334:	2300      	movs	r3, #0
 8000336:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000338:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800033c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000340:	2300      	movs	r3, #0
 8000342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800034a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800034e:	2300      	movs	r3, #0
 8000350:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000352:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000356:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000358:	2303      	movs	r3, #3
 800035a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800035c:	2305      	movs	r3, #5
 800035e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8000360:	2360      	movs	r3, #96	; 0x60
 8000362:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000364:	2302      	movs	r3, #2
 8000366:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000368:	2304      	movs	r3, #4
 800036a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 800036c:	2304      	movs	r3, #4
 800036e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000374:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f005 f8cf 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000384:	f000 fcd8 	bl	8000d38 <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	37f8      	adds	r7, #248	; 0xf8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000
 8000394:	000b6140 	.word	0x000b6140

08000398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800039e:	463b      	mov	r3, r7
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
 80003ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003ae:	4b29      	ldr	r3, [pc, #164]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003b0:	4a29      	ldr	r2, [pc, #164]	; (8000458 <MX_ADC1_Init+0xc0>)
 80003b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003b4:	4b27      	ldr	r3, [pc, #156]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003ba:	4b26      	ldr	r3, [pc, #152]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c0:	4b24      	ldr	r3, [pc, #144]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c6:	4b23      	ldr	r3, [pc, #140]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003cc:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003ce:	2204      	movs	r2, #4
 80003d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003d2:	4b20      	ldr	r3, [pc, #128]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003d8:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003da:	2201      	movs	r2, #1
 80003dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80003de:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003f8:	4b16      	ldr	r3, [pc, #88]	; (8000454 <MX_ADC1_Init+0xbc>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_ADC1_Init+0xbc>)
 8000402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000406:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_ADC1_Init+0xbc>)
 800040a:	2200      	movs	r2, #0
 800040c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000410:	4810      	ldr	r0, [pc, #64]	; (8000454 <MX_ADC1_Init+0xbc>)
 8000412:	f001 faf3 	bl	80019fc <HAL_ADC_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800041c:	f000 fc8c 	bl	8000d38 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000420:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_ADC1_Init+0xc4>)
 8000422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000424:	2306      	movs	r3, #6
 8000426:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000428:	2302      	movs	r3, #2
 800042a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800042c:	237f      	movs	r3, #127	; 0x7f
 800042e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000430:	2304      	movs	r3, #4
 8000432:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000438:	463b      	mov	r3, r7
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_ADC1_Init+0xbc>)
 800043e:	f001 fc29 	bl	8001c94 <HAL_ADC_ConfigChannel>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000448:	f000 fc76 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000644 	.word	0x20000644
 8000458:	50040000 	.word	0x50040000
 800045c:	21800100 	.word	0x21800100

08000460 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000464:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <MX_DFSDM1_Init+0xb8>)
 8000466:	4a2d      	ldr	r2, [pc, #180]	; (800051c <MX_DFSDM1_Init+0xbc>)
 8000468:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <MX_DFSDM1_Init+0xb8>)
 800046c:	2200      	movs	r2, #0
 800046e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000470:	4b29      	ldr	r3, [pc, #164]	; (8000518 <MX_DFSDM1_Init+0xb8>)
 8000472:	2201      	movs	r2, #1
 8000474:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000476:	4b28      	ldr	r3, [pc, #160]	; (8000518 <MX_DFSDM1_Init+0xb8>)
 8000478:	2201      	movs	r2, #1
 800047a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 800047c:	4b26      	ldr	r3, [pc, #152]	; (8000518 <MX_DFSDM1_Init+0xb8>)
 800047e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000482:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 8000484:	4b24      	ldr	r3, [pc, #144]	; (8000518 <MX_DFSDM1_Init+0xb8>)
 8000486:	22c0      	movs	r2, #192	; 0xc0
 8000488:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800048a:	4b23      	ldr	r3, [pc, #140]	; (8000518 <MX_DFSDM1_Init+0xb8>)
 800048c:	2201      	movs	r2, #1
 800048e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000490:	4821      	ldr	r0, [pc, #132]	; (8000518 <MX_DFSDM1_Init+0xb8>)
 8000492:	f002 f9cd 	bl	8002830 <HAL_DFSDM_FilterInit>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800049c:	f000 fc4c 	bl	8000d38 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004a2:	4a20      	ldr	r2, [pc, #128]	; (8000524 <MX_DFSDM1_Init+0xc4>)
 80004a4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80004a6:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80004b2:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004b4:	2202      	movs	r2, #2
 80004b6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 80004b8:	4b19      	ldr	r3, [pc, #100]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004be:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80004c6:	4b16      	ldr	r3, [pc, #88]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004ec:	2207      	movs	r2, #7
 80004ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <MX_DFSDM1_Init+0xc0>)
 80004f2:	f002 f8dd 	bl	80026b0 <HAL_DFSDM_ChannelInit>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80004fc:	f000 fc1c 	bl	8000d38 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000500:	2201      	movs	r2, #1
 8000502:	2101      	movs	r1, #1
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <MX_DFSDM1_Init+0xb8>)
 8000506:	f002 fa6d 	bl	80029e4 <HAL_DFSDM_FilterConfigRegChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8000510:	f000 fc12 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	2000050c 	.word	0x2000050c
 800051c:	40016100 	.word	0x40016100
 8000520:	2000077c 	.word	0x2000077c
 8000524:	40016000 	.word	0x40016000

08000528 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_I2C1_Init+0x74>)
 800052e:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <MX_I2C1_Init+0x78>)
 8000530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <MX_I2C1_Init+0x74>)
 8000534:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <MX_I2C1_Init+0x7c>)
 8000536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_I2C1_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <MX_I2C1_Init+0x74>)
 8000540:	2201      	movs	r2, #1
 8000542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_I2C1_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_I2C1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_I2C1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_I2C1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_I2C1_Init+0x74>)
 800055e:	2200      	movs	r2, #0
 8000560:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000562:	480e      	ldr	r0, [pc, #56]	; (800059c <MX_I2C1_Init+0x74>)
 8000564:	f002 fe4c 	bl	8003200 <HAL_I2C_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800056e:	f000 fbe3 	bl	8000d38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000572:	2100      	movs	r1, #0
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <MX_I2C1_Init+0x74>)
 8000576:	f002 fed2 	bl	800331e <HAL_I2CEx_ConfigAnalogFilter>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000580:	f000 fbda 	bl	8000d38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000584:	2100      	movs	r1, #0
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_I2C1_Init+0x74>)
 8000588:	f002 ff14 	bl	80033b4 <HAL_I2CEx_ConfigDigitalFilter>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000592:	f000 fbd1 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200004c0 	.word	0x200004c0
 80005a0:	40005400 	.word	0x40005400
 80005a4:	00b03fdb 	.word	0x00b03fdb

080005a8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_I2C3_Init+0x74>)
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <MX_I2C3_Init+0x78>)
 80005b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_I2C3_Init+0x74>)
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <MX_I2C3_Init+0x7c>)
 80005b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_I2C3_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_I2C3_Init+0x74>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_I2C3_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <MX_I2C3_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_I2C3_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_I2C3_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_I2C3_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <MX_I2C3_Init+0x74>)
 80005e4:	f002 fe0c 	bl	8003200 <HAL_I2C_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80005ee:	f000 fba3 	bl	8000d38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f2:	2100      	movs	r1, #0
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <MX_I2C3_Init+0x74>)
 80005f6:	f002 fe92 	bl	800331e <HAL_I2CEx_ConfigAnalogFilter>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000600:	f000 fb9a 	bl	8000d38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000604:	2100      	movs	r1, #0
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_I2C3_Init+0x74>)
 8000608:	f002 fed4 	bl	80033b4 <HAL_I2CEx_ConfigDigitalFilter>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000612:	f000 fb91 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000410 	.word	0x20000410
 8000620:	40005c00 	.word	0x40005c00
 8000624:	00b03fdb 	.word	0x00b03fdb

08000628 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800063c:	2300      	movs	r3, #0
 800063e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_RTC_Init+0xb0>)
 8000642:	4a26      	ldr	r2, [pc, #152]	; (80006dc <MX_RTC_Init+0xb4>)
 8000644:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000646:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_RTC_Init+0xb0>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <MX_RTC_Init+0xb0>)
 800064e:	227f      	movs	r2, #127	; 0x7f
 8000650:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_RTC_Init+0xb0>)
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_RTC_Init+0xb0>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_RTC_Init+0xb0>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_RTC_Init+0xb0>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_RTC_Init+0xb0>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000670:	4819      	ldr	r0, [pc, #100]	; (80006d8 <MX_RTC_Init+0xb0>)
 8000672:	f006 fcf9 	bl	8007068 <HAL_RTC_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800067c:	f000 fb5c 	bl	8000d38 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	4619      	mov	r1, r3
 800069a:	480f      	ldr	r0, [pc, #60]	; (80006d8 <MX_RTC_Init+0xb0>)
 800069c:	f006 fd5f 	bl	800715e <HAL_RTC_SetTime>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80006a6:	f000 fb47 	bl	8000d38 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80006aa:	2302      	movs	r3, #2
 80006ac:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80006ae:	2304      	movs	r3, #4
 80006b0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 80006b2:	2303      	movs	r3, #3
 80006b4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 80006b6:	2314      	movs	r3, #20
 80006b8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_RTC_Init+0xb0>)
 80006c2:	f006 fde9 	bl	8007298 <HAL_RTC_SetDate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80006cc:	f000 fb34 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000070c 	.word	0x2000070c
 80006dc:	40002800 	.word	0x40002800

080006e0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_SDMMC1_SD_Init+0x3c>)
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <MX_SDMMC1_SD_Init+0x40>)
 80006e8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SDMMC1_SD_Init+0x3c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_SDMMC1_SD_Init+0x3c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SDMMC1_SD_Init+0x3c>)
 80006f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fc:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_SDMMC1_SD_Init+0x3c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <MX_SDMMC1_SD_Init+0x3c>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <MX_SDMMC1_SD_Init+0x3c>)
 800070c:	2201      	movs	r2, #1
 800070e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000560 	.word	0x20000560
 8000720:	50062400 	.word	0x50062400

08000724 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_SPI1_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_SPI1_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_SPI1_Init+0x74>)
 8000730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000734:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_SPI1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_SPI1_Init+0x74>)
 800073e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000742:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_SPI1_Init+0x74>)
 8000746:	2202      	movs	r2, #2
 8000748:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_SPI1_Init+0x74>)
 800074c:	2201      	movs	r2, #1
 800074e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_SPI1_Init+0x74>)
 8000752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000756:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_SPI1_Init+0x74>)
 800075a:	2218      	movs	r2, #24
 800075c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_SPI1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_SPI1_Init+0x74>)
 8000772:	2207      	movs	r2, #7
 8000774:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_SPI1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_SPI1_Init+0x74>)
 8000784:	f008 fbcb 	bl	8008f1e <HAL_SPI_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 fad3 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200007b4 	.word	0x200007b4
 800079c:	40013000 	.word	0x40013000

080007a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_SPI2_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <MX_SPI2_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_SPI2_Init+0x74>)
 80007ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_SPI2_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_SPI2_Init+0x74>)
 80007ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_SPI2_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_SPI2_Init+0x74>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_SPI2_Init+0x74>)
 80007ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI2_Init+0x74>)
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_SPI2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SPI2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_SPI2_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SPI2_Init+0x74>)
 80007ee:	2207      	movs	r2, #7
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_SPI2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SPI2_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_SPI2_Init+0x74>)
 8000800:	f008 fb8d 	bl	8008f1e <HAL_SPI_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800080a:	f000 fa95 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000045c 	.word	0x2000045c
 8000818:	40003800 	.word	0x40003800

0800081c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_SPI3_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_SPI3_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_SPI3_Init+0x74>)
 8000828:	f44f 7282 	mov.w	r2, #260	; 0x104
 800082c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_SPI3_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_SPI3_Init+0x74>)
 8000836:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800083a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_SPI3_Init+0x74>)
 800083e:	2202      	movs	r2, #2
 8000840:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_SPI3_Init+0x74>)
 8000844:	2201      	movs	r2, #1
 8000846:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_SPI3_Init+0x74>)
 800084a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_SPI3_Init+0x74>)
 8000852:	2218      	movs	r2, #24
 8000854:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_SPI3_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_SPI3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_SPI3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_SPI3_Init+0x74>)
 800086a:	2207      	movs	r2, #7
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_SPI3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_SPI3_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_SPI3_Init+0x74>)
 800087c:	f008 fb4f 	bl	8008f1e <HAL_SPI_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 fa57 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200005e0 	.word	0x200005e0
 8000894:	40003c00 	.word	0x40003c00

08000898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_TIM2_Init+0x98>)
 80008b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM2_Init+0x98>)
 80008c0:	2277      	movs	r2, #119	; 0x77
 80008c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM2_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_TIM2_Init+0x98>)
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295
 80008d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_TIM2_Init+0x98>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_TIM2_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008de:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_TIM2_Init+0x98>)
 80008e0:	f008 fbc0 	bl	8009064 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008ea:	f000 fa25 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_TIM2_Init+0x98>)
 80008fc:	f008 fd28 	bl	8009350 <HAL_TIM_ConfigClockSource>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000906:	f000 fa17 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_TIM2_Init+0x98>)
 8000918:	f008 ff46 	bl	80097a8 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000922:	f000 fa09 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3720      	adds	r7, #32
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000818 	.word	0x20000818

08000934 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_TIM6_Init+0x64>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_TIM6_Init+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_TIM6_Init+0x64>)
 800094c:	2277      	movs	r2, #119	; 0x77
 800094e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_TIM6_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_TIM6_Init+0x64>)
 8000958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800095c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_TIM6_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_TIM6_Init+0x64>)
 8000966:	f008 fb7d 	bl	8009064 <HAL_TIM_Base_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000970:	f000 f9e2 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_TIM6_Init+0x64>)
 8000982:	f008 ff11 	bl	80097a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800098c:	f000 f9d4 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000730 	.word	0x20000730
 800099c:	40001000 	.word	0x40001000

080009a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_TIM7_Init+0x64>)
 80009b2:	4a15      	ldr	r2, [pc, #84]	; (8000a08 <MX_TIM7_Init+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_TIM7_Init+0x64>)
 80009b8:	2277      	movs	r2, #119	; 0x77
 80009ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_TIM7_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_TIM7_Init+0x64>)
 80009c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_TIM7_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_TIM7_Init+0x64>)
 80009d2:	f008 fb47 	bl	8009064 <HAL_TIM_Base_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80009dc:	f000 f9ac 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_TIM7_Init+0x64>)
 80009ee:	f008 fedb 	bl	80097a8 <HAL_TIMEx_MasterConfigSynchronization>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80009f8:	f000 f99e 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000864 	.word	0x20000864
 8000a08:	40001400 	.word	0x40001400

08000a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a12:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <MX_DMA_Init+0x50>)
 8000a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <MX_DMA_Init+0x50>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_DMA_Init+0x50>)
 8000a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_DMA_Init+0x50>)
 8000a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <MX_DMA_Init+0x50>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6493      	str	r3, [r2, #72]	; 0x48
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_DMA_Init+0x50>)
 8000a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	200e      	movs	r0, #14
 8000a48:	f001 fdfb 	bl	8002642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000a4c:	200e      	movs	r0, #14
 8000a4e:	f001 fe14 	bl	800267a <HAL_NVIC_EnableIRQ>

}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	; 0x38
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4ba7      	ldr	r3, [pc, #668]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4aa6      	ldr	r2, [pc, #664]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4ba4      	ldr	r3, [pc, #656]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
 8000a8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	4ba1      	ldr	r3, [pc, #644]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4aa0      	ldr	r2, [pc, #640]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b9e      	ldr	r3, [pc, #632]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	61fb      	str	r3, [r7, #28]
 8000aa4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b9b      	ldr	r3, [pc, #620]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a9a      	ldr	r2, [pc, #616]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b98      	ldr	r3, [pc, #608]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000abe:	4b95      	ldr	r3, [pc, #596]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a94      	ldr	r2, [pc, #592]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000ac4:	f043 0310 	orr.w	r3, r3, #16
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b92      	ldr	r3, [pc, #584]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0310 	and.w	r3, r3, #16
 8000ad2:	617b      	str	r3, [r7, #20]
 8000ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b8f      	ldr	r3, [pc, #572]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a8e      	ldr	r2, [pc, #568]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b8c      	ldr	r3, [pc, #560]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aee:	4b89      	ldr	r3, [pc, #548]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a88      	ldr	r2, [pc, #544]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b86      	ldr	r3, [pc, #536]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b06:	4b83      	ldr	r3, [pc, #524]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a82      	ldr	r2, [pc, #520]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b80      	ldr	r3, [pc, #512]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b1e:	f003 fe19 	bl	8004754 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	4b7c      	ldr	r3, [pc, #496]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a7b      	ldr	r2, [pc, #492]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b79      	ldr	r3, [pc, #484]	; (8000d14 <MX_GPIO_Init+0x2b4>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b44:	f002 fb44 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f641 4130 	movw	r1, #7216	; 0x1c30
 8000b4e:	4872      	ldr	r0, [pc, #456]	; (8000d18 <MX_GPIO_Init+0x2b8>)
 8000b50:	f002 fb3e 	bl	80031d0 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2105      	movs	r1, #5
 8000b58:	4870      	ldr	r0, [pc, #448]	; (8000d1c <MX_GPIO_Init+0x2bc>)
 8000b5a:	f002 fb39 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b64:	486e      	ldr	r0, [pc, #440]	; (8000d20 <MX_GPIO_Init+0x2c0>)
 8000b66:	f002 fb33 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	486b      	ldr	r0, [pc, #428]	; (8000d1c <MX_GPIO_Init+0x2bc>)
 8000b70:	f002 fb2e 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2110      	movs	r1, #16
 8000b78:	4869      	ldr	r0, [pc, #420]	; (8000d20 <MX_GPIO_Init+0x2c0>)
 8000b7a:	f002 fb29 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b84:	4867      	ldr	r0, [pc, #412]	; (8000d24 <MX_GPIO_Init+0x2c4>)
 8000b86:	f002 fb23 	bl	80031d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 8000b8a:	2348      	movs	r3, #72	; 0x48
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8e:	4b66      	ldr	r3, [pc, #408]	; (8000d28 <MX_GPIO_Init+0x2c8>)
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	485e      	ldr	r0, [pc, #376]	; (8000d18 <MX_GPIO_Init+0x2b8>)
 8000b9e:	f002 f96d 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8000ba2:	2360      	movs	r3, #96	; 0x60
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	485b      	ldr	r0, [pc, #364]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000bbe:	f002 f95d 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 8000bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bc8:	2311      	movs	r3, #17
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f002 f94d 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 8000be2:	2330      	movs	r3, #48	; 0x30
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4847      	ldr	r0, [pc, #284]	; (8000d18 <MX_GPIO_Init+0x2b8>)
 8000bfa:	f002 f93f 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 8000bfe:	2385      	movs	r3, #133	; 0x85
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4841      	ldr	r0, [pc, #260]	; (8000d1c <MX_GPIO_Init+0x2bc>)
 8000c16:	f002 f931 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 8000c1a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	483b      	ldr	r0, [pc, #236]	; (8000d20 <MX_GPIO_Init+0x2c0>)
 8000c34:	f002 f922 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4835      	ldr	r0, [pc, #212]	; (8000d20 <MX_GPIO_Init+0x2c0>)
 8000c4c:	f002 f916 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8000c50:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <MX_GPIO_Init+0x2c8>)
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4831      	ldr	r0, [pc, #196]	; (8000d2c <MX_GPIO_Init+0x2cc>)
 8000c66:	f002 f909 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8000c6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c70:	2311      	movs	r3, #17
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4619      	mov	r1, r3
 8000c82:	4825      	ldr	r0, [pc, #148]	; (8000d18 <MX_GPIO_Init+0x2b8>)
 8000c84:	f002 f8fa 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8000c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4820      	ldr	r0, [pc, #128]	; (8000d24 <MX_GPIO_Init+0x2c4>)
 8000ca2:	f002 f8eb 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_GPIO_Init+0x2c8>)
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	481d      	ldr	r0, [pc, #116]	; (8000d30 <MX_GPIO_Init+0x2d0>)
 8000cba:	f002 f8df 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_GPIO_Init+0x2c8>)
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd4:	f002 f8d2 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <MX_GPIO_Init+0x2c4>)
 8000cee:	f002 f8c5 	bl	8002e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <MX_GPIO_Init+0x2d4>)
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4619      	mov	r1, r3
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_GPIO_Init+0x2c0>)
 8000d06:	f002 f8b9 	bl	8002e7c <HAL_GPIO_Init>

}
 8000d0a:	bf00      	nop
 8000d0c:	3738      	adds	r7, #56	; 0x38
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48001000 	.word	0x48001000
 8000d1c:	48001400 	.word	0x48001400
 8000d20:	48001800 	.word	0x48001800
 8000d24:	48000400 	.word	0x48000400
 8000d28:	10110000 	.word	0x10110000
 8000d2c:	48000c00 	.word	0x48000c00
 8000d30:	48000800 	.word	0x48000800
 8000d34:	10210000 	.word	0x10210000

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <Error_Handler+0x8>
	...

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x44>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x44>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x44>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x44>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x44>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x44>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <HAL_ADC_MspInit+0xa4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d13c      	bne.n	8000e28 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_ADC_MspInit+0xa8>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <HAL_ADC_MspInit+0xa8>)
 8000db4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <HAL_ADC_MspInit+0xa8>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_ADC_MspInit+0xa8>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	4a1a      	ldr	r2, [pc, #104]	; (8000e34 <HAL_ADC_MspInit+0xa8>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_ADC_MspInit+0xa8>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_ADC_MspInit+0xa8>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <HAL_ADC_MspInit+0xa8>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_ADC_MspInit+0xa8>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8000df6:	2310      	movs	r3, #16
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <HAL_ADC_MspInit+0xac>)
 8000e0a:	f002 f837 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8000e0e:	2308      	movs	r3, #8
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e12:	230b      	movs	r3, #11
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f002 f82a 	bl	8002e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	; 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	50040000 	.word	0x50040000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	48000800 	.word	0x48000800

08000e3c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8000e44:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <HAL_DFSDM_FilterMspInit+0xbc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d119      	bne.n	8000e80 <HAL_DFSDM_FilterMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <HAL_DFSDM_FilterMspInit+0xc0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a2a      	ldr	r2, [pc, #168]	; (8000efc <HAL_DFSDM_FilterMspInit+0xc0>)
 8000e54:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000e56:	4b29      	ldr	r3, [pc, #164]	; (8000efc <HAL_DFSDM_FilterMspInit+0xc0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d10b      	bne.n	8000e76 <HAL_DFSDM_FilterMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e62:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e68:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <HAL_DFSDM_FilterMspInit+0xbc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <HAL_DFSDM_FilterMspInit+0xbc>)
 8000e7e:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <HAL_DFSDM_FilterMspInit+0xc8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d131      	bne.n	8000eee <HAL_DFSDM_FilterMspInit+0xb2>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000e8c:	4a1f      	ldr	r2, [pc, #124]	; (8000f0c <HAL_DFSDM_FilterMspInit+0xd0>)
 8000e8e:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000e92:	2256      	movs	r2, #86	; 0x56
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eae:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000eb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eb6:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000eba:	2220      	movs	r2, #32
 8000ebc:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ec0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ec8:	f001 fe1e 	bl	8002b08 <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_DFSDM_FilterMspInit+0x9a>
    {
      Error_Handler();
 8000ed2:	f7ff ff31 	bl	8000d38 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_DFSDM_FilterMspInit+0xcc>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200001b0 	.word	0x200001b0
 8000efc:	200001ac 	.word	0x200001ac
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40016100 	.word	0x40016100
 8000f08:	200006ac 	.word	0x200006ac
 8000f0c:	40020044 	.word	0x40020044

08000f10 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d119      	bne.n	8000f54 <HAL_DFSDM_ChannelMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000f28:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d10b      	bne.n	8000f4a <HAL_DFSDM_ChannelMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <HAL_DFSDM_ChannelMspInit+0x58>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <HAL_DFSDM_ChannelMspInit+0x58>)
 8000f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_DFSDM_ChannelMspInit+0x58>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	4a03      	ldr	r2, [pc, #12]	; (8000f60 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000f52:	6013      	str	r3, [r2, #0]
  }

}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	200001b0 	.word	0x200001b0
 8000f64:	200001ac 	.word	0x200001ac
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	; 0x30
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a2f      	ldr	r2, [pc, #188]	; (8001048 <HAL_I2C_MspInit+0xdc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d128      	bne.n	8000fe0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <HAL_I2C_MspInit+0xe0>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a2e      	ldr	r2, [pc, #184]	; (800104c <HAL_I2C_MspInit+0xe0>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <HAL_I2C_MspInit+0xe0>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8000fa6:	23c0      	movs	r3, #192	; 0xc0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000faa:	2312      	movs	r3, #18
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4823      	ldr	r0, [pc, #140]	; (8001050 <HAL_I2C_MspInit+0xe4>)
 8000fc2:	f001 ff5b 	bl	8002e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc6:	4b21      	ldr	r3, [pc, #132]	; (800104c <HAL_I2C_MspInit+0xe0>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	4a20      	ldr	r2, [pc, #128]	; (800104c <HAL_I2C_MspInit+0xe0>)
 8000fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	; (800104c <HAL_I2C_MspInit+0xe0>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000fde:	e02f      	b.n	8001040 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <HAL_I2C_MspInit+0xe8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d12a      	bne.n	8001040 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_I2C_MspInit+0xe0>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_I2C_MspInit+0xe0>)
 8000ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_I2C_MspInit+0xe0>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001002:	f003 fba7 	bl	8004754 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 8001006:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001010:	2301      	movs	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001018:	2304      	movs	r3, #4
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <HAL_I2C_MspInit+0xec>)
 8001024:	f001 ff2a 	bl	8002e7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_I2C_MspInit+0xe0>)
 800102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_I2C_MspInit+0xe0>)
 800102e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001032:	6593      	str	r3, [r2, #88]	; 0x58
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_I2C_MspInit+0xe0>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	bf00      	nop
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40005400 	.word	0x40005400
 800104c:	40021000 	.word	0x40021000
 8001050:	48000400 	.word	0x48000400
 8001054:	40005c00 	.word	0x40005c00
 8001058:	48001800 	.word	0x48001800

0800105c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a08      	ldr	r2, [pc, #32]	; (800108c <HAL_RTC_MspInit+0x30>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d107      	bne.n	800107e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_RTC_MspInit+0x34>)
 8001070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <HAL_RTC_MspInit+0x34>)
 8001076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800107a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40002800 	.word	0x40002800
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <HAL_SD_MspInit+0x120>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d179      	bne.n	80011aa <HAL_SD_MspInit+0x116>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010b6:	4b40      	ldr	r3, [pc, #256]	; (80011b8 <HAL_SD_MspInit+0x124>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a3f      	ldr	r2, [pc, #252]	; (80011b8 <HAL_SD_MspInit+0x124>)
 80010bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <HAL_SD_MspInit+0x124>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_SD_MspInit+0x124>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a39      	ldr	r2, [pc, #228]	; (80011b8 <HAL_SD_MspInit+0x124>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b37      	ldr	r3, [pc, #220]	; (80011b8 <HAL_SD_MspInit+0x124>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_SD_MspInit+0x124>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a33      	ldr	r2, [pc, #204]	; (80011b8 <HAL_SD_MspInit+0x124>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <HAL_SD_MspInit+0x124>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_SD_MspInit+0x124>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a2d      	ldr	r2, [pc, #180]	; (80011b8 <HAL_SD_MspInit+0x124>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <HAL_SD_MspInit+0x124>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 8001116:	f44f 7340 	mov.w	r3, #768	; 0x300
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 8001128:	2308      	movs	r3, #8
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	4822      	ldr	r0, [pc, #136]	; (80011bc <HAL_SD_MspInit+0x128>)
 8001134:	f001 fea2 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 8001138:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800113c:	61fb      	str	r3, [r7, #28]
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800114a:	230c      	movs	r3, #12
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	481a      	ldr	r0, [pc, #104]	; (80011c0 <HAL_SD_MspInit+0x12c>)
 8001156:	f001 fe91 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 800115a:	2304      	movs	r3, #4
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800116a:	230c      	movs	r3, #12
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4813      	ldr	r0, [pc, #76]	; (80011c4 <HAL_SD_MspInit+0x130>)
 8001176:	f001 fe81 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 800117a:	23c0      	movs	r3, #192	; 0xc0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 800118a:	2308      	movs	r3, #8
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <HAL_SD_MspInit+0x12c>)
 8001196:	f001 fe71 	bl	8002e7c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2031      	movs	r0, #49	; 0x31
 80011a0:	f001 fa4f 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011a4:	2031      	movs	r0, #49	; 0x31
 80011a6:	f001 fa68 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3730      	adds	r7, #48	; 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	50062400 	.word	0x50062400
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000400 	.word	0x48000400
 80011c0:	48000800 	.word	0x48000800
 80011c4:	48000c00 	.word	0x48000c00

080011c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a64      	ldr	r2, [pc, #400]	; (8001378 <HAL_SPI_MspInit+0x1b0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d13a      	bne.n	8001260 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ea:	4b64      	ldr	r3, [pc, #400]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	4a63      	ldr	r2, [pc, #396]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 80011f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f4:	6613      	str	r3, [r2, #96]	; 0x60
 80011f6:	4b61      	ldr	r3, [pc, #388]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	4b5e      	ldr	r3, [pc, #376]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a5d      	ldr	r2, [pc, #372]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b5b      	ldr	r3, [pc, #364]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 800121a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001224:	2301      	movs	r3, #1
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800122c:	2305      	movs	r3, #5
 800122e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	4852      	ldr	r0, [pc, #328]	; (8001380 <HAL_SPI_MspInit+0x1b8>)
 8001238:	f001 fe20 	bl	8002e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 800123c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800124e:	2305      	movs	r3, #5
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	4849      	ldr	r0, [pc, #292]	; (8001380 <HAL_SPI_MspInit+0x1b8>)
 800125a:	f001 fe0f 	bl	8002e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800125e:	e086      	b.n	800136e <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a47      	ldr	r2, [pc, #284]	; (8001384 <HAL_SPI_MspInit+0x1bc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d144      	bne.n	80012f4 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800126a:	4b44      	ldr	r3, [pc, #272]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	4a43      	ldr	r2, [pc, #268]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6593      	str	r3, [r2, #88]	; 0x58
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	4b3e      	ldr	r3, [pc, #248]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a3d      	ldr	r2, [pc, #244]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4b38      	ldr	r3, [pc, #224]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a37      	ldr	r2, [pc, #220]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b35      	ldr	r3, [pc, #212]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 80012b2:	230a      	movs	r3, #10
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c2:	2305      	movs	r3, #5
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	482e      	ldr	r0, [pc, #184]	; (8001388 <HAL_SPI_MspInit+0x1c0>)
 80012ce:	f001 fdd5 	bl	8002e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80012d2:	2308      	movs	r3, #8
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e2:	2305      	movs	r3, #5
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4827      	ldr	r0, [pc, #156]	; (800138c <HAL_SPI_MspInit+0x1c4>)
 80012ee:	f001 fdc5 	bl	8002e7c <HAL_GPIO_Init>
}
 80012f2:	e03c      	b.n	800136e <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <HAL_SPI_MspInit+0x1c8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d137      	bne.n	800136e <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	4a1e      	ldr	r2, [pc, #120]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001308:	6593      	str	r3, [r2, #88]	; 0x58
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_SPI_MspInit+0x1b4>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 800132e:	2330      	movs	r3, #48	; 0x30
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800133e:	2306      	movs	r3, #6
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	4812      	ldr	r0, [pc, #72]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 800134a:	f001 fd97 	bl	8002e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 800134e:	2308      	movs	r3, #8
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001356:	2301      	movs	r3, #1
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800135e:	2306      	movs	r3, #6
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	480a      	ldr	r0, [pc, #40]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 800136a:	f001 fd87 	bl	8002e7c <HAL_GPIO_Init>
}
 800136e:	bf00      	nop
 8001370:	3738      	adds	r7, #56	; 0x38
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40013000 	.word	0x40013000
 800137c:	40021000 	.word	0x40021000
 8001380:	48001000 	.word	0x48001000
 8001384:	40003800 	.word	0x40003800
 8001388:	48000c00 	.word	0x48000c00
 800138c:	48000800 	.word	0x48000800
 8001390:	40003c00 	.word	0x40003c00
 8001394:	48000400 	.word	0x48000400

08001398 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a8:	d10c      	bne.n	80013c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_TIM_Base_MspInit+0x8c>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_TIM_Base_MspInit+0x8c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_TIM_Base_MspInit+0x8c>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80013c2:	e02a      	b.n	800141a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_TIM_Base_MspInit+0x90>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d114      	bne.n	80013f8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_TIM_Base_MspInit+0x8c>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_TIM_Base_MspInit+0x8c>)
 80013d4:	f043 0310 	orr.w	r3, r3, #16
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_TIM_Base_MspInit+0x8c>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2036      	movs	r0, #54	; 0x36
 80013ec:	f001 f929 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f0:	2036      	movs	r0, #54	; 0x36
 80013f2:	f001 f942 	bl	800267a <HAL_NVIC_EnableIRQ>
}
 80013f6:	e010      	b.n	800141a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_TIM_Base_MspInit+0x94>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d10b      	bne.n	800141a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_TIM_Base_MspInit+0x8c>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <HAL_TIM_Base_MspInit+0x8c>)
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	6593      	str	r3, [r2, #88]	; 0x58
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_TIM_Base_MspInit+0x8c>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f003 0320 	and.w	r3, r3, #32
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	40001000 	.word	0x40001000
 800142c:	40001400 	.word	0x40001400

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler+0x4>

08001436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler+0x4>

0800144e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147c:	f000 f8da 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <DMA1_Channel4_IRQHandler+0x10>)
 800148a:	f001 fbe5 	bl	8002c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200006ac 	.word	0x200006ac

08001498 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <SDMMC1_IRQHandler+0x10>)
 800149e:	f006 fac3 	bl	8007a28 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000560 	.word	0x20000560

080014ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <TIM6_DAC_IRQHandler+0x10>)
 80014b2:	f007 fe2e 	bl	8009112 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000730 	.word	0x20000730

080014c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <OTG_FS_IRQHandler+0x10>)
 80014c6:	f002 f914 	bl	80036f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200021f0 	.word	0x200021f0

080014d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <SystemInit+0x5c>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <SystemInit+0x5c>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <SystemInit+0x60>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a11      	ldr	r2, [pc, #68]	; (8001534 <SystemInit+0x60>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <SystemInit+0x60>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <SystemInit+0x60>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <SystemInit+0x60>)
 8001500:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001504:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001508:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <SystemInit+0x60>)
 800150c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001510:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <SystemInit+0x60>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a07      	ldr	r2, [pc, #28]	; (8001534 <SystemInit+0x60>)
 8001518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SystemInit+0x60>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00
 8001534:	40021000 	.word	0x40021000

08001538 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001570 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800153c:	f7ff ffca 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001540:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001542:	e003      	b.n	800154c <LoopCopyDataInit>

08001544 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001546:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001548:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800154a:	3104      	adds	r1, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800154c:	480a      	ldr	r0, [pc, #40]	; (8001578 <LoopForever+0xa>)
	ldr	r3, =_edata
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001550:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001552:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001554:	d3f6      	bcc.n	8001544 <CopyDataInit>
	ldr	r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001558:	e002      	b.n	8001560 <LoopFillZerobss>

0800155a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800155a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800155c:	f842 3b04 	str.w	r3, [r2], #4

08001560 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <LoopForever+0x16>)
	cmp	r2, r3
 8001562:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001564:	d3f9      	bcc.n	800155a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f00c fef5 	bl	800e354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800156a:	f7fe fe47 	bl	80001fc <main>

0800156e <LoopForever>:

LoopForever:
    b LoopForever
 800156e:	e7fe      	b.n	800156e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001570:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001574:	0800e470 	.word	0x0800e470
	ldr	r0, =_sdata
 8001578:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800157c:	20000190 	.word	0x20000190
	ldr	r2, =_sbss
 8001580:	20000190 	.word	0x20000190
	ldr	r3, = _ebss
 8001584:	200025f8 	.word	0x200025f8

08001588 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC1_IRQHandler>

0800158a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f001 f849 	bl	800262c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800159a:	2000      	movs	r0, #0
 800159c:	f000 f80e 	bl	80015bc <HAL_InitTick>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	71fb      	strb	r3, [r7, #7]
 80015aa:	e001      	b.n	80015b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ac:	f7ff fbca 	bl	8000d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015b0:	79fb      	ldrb	r3, [r7, #7]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <HAL_InitTick+0x6c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d023      	beq.n	8001618 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_InitTick+0x70>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <HAL_InitTick+0x6c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 f855 	bl	8002696 <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10f      	bne.n	8001612 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d809      	bhi.n	800160c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f001 f81f 	bl	8002642 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_InitTick+0x74>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e007      	b.n	800161c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	e004      	b.n	800161c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
 8001616:	e001      	b.n	800161c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000008 	.word	0x20000008
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x20>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x24>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_IncTick+0x24>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000008 	.word	0x20000008
 8001658:	200008b0 	.word	0x200008b0

0800165c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_GetTick+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	200008b0 	.word	0x200008b0

08001674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff ffee 	bl	800165c <HAL_GetTick>
 8001680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168c:	d005      	beq.n	800169a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_Delay+0x44>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169a:	bf00      	nop
 800169c:	f7ff ffde 	bl	800165c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d8f7      	bhi.n	800169c <HAL_Delay+0x28>
  {
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000008 	.word	0x20000008

080016bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	609a      	str	r2, [r3, #8]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3360      	adds	r3, #96	; 0x60
 8001736:	461a      	mov	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <LL_ADC_SetOffset+0x44>)
 8001746:	4013      	ands	r3, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	4313      	orrs	r3, r2
 8001754:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800175c:	bf00      	nop
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	03fff000 	.word	0x03fff000

0800176c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3360      	adds	r3, #96	; 0x60
 800177a:	461a      	mov	r2, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001798:	b480      	push	{r7}
 800179a:	b087      	sub	sp, #28
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3360      	adds	r3, #96	; 0x60
 80017a8:	461a      	mov	r2, r3
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	431a      	orrs	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	615a      	str	r2, [r3, #20]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3330      	adds	r3, #48	; 0x30
 8001804:	461a      	mov	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	4413      	add	r3, r2
 8001812:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	211f      	movs	r1, #31
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	401a      	ands	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0e9b      	lsrs	r3, r3, #26
 800182c:	f003 011f 	and.w	r1, r3, #31
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	431a      	orrs	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001840:	bf00      	nop
 8001842:	371c      	adds	r7, #28
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800184c:	b480      	push	{r7}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3314      	adds	r3, #20
 800185c:	461a      	mov	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	0e5b      	lsrs	r3, r3, #25
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	4413      	add	r3, r2
 800186a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	0d1b      	lsrs	r3, r3, #20
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	2107      	movs	r1, #7
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	401a      	ands	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	0d1b      	lsrs	r3, r3, #20
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	431a      	orrs	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0318 	and.w	r3, r3, #24
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018c8:	40d9      	lsrs	r1, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	400b      	ands	r3, r1
 80018ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d2:	431a      	orrs	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	0007ffff 	.word	0x0007ffff

080018ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6093      	str	r3, [r2, #8]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001924:	d101      	bne.n	800192a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001948:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800194c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001974:	d101      	bne.n	800197a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <LL_ADC_IsEnabled+0x18>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <LL_ADC_IsEnabled+0x1a>
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d101      	bne.n	80019c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d101      	bne.n	80019ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e12f      	b.n	8001c76 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d109      	bne.n	8001a38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff f9b1 	bl	8000d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff67 	bl	8001910 <LL_ADC_IsDeepPowerDownEnabled>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d004      	beq.n	8001a52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff4d 	bl	80018ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff82 	bl	8001960 <LL_ADC_IsInternalRegulatorEnabled>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d115      	bne.n	8001a8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff66 	bl	8001938 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a6c:	4b84      	ldr	r3, [pc, #528]	; (8001c80 <HAL_ADC_Init+0x284>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	4a84      	ldr	r2, [pc, #528]	; (8001c84 <HAL_ADC_Init+0x288>)
 8001a74:	fba2 2303 	umull	r2, r3, r2, r3
 8001a78:	099b      	lsrs	r3, r3, #6
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a80:	e002      	b.n	8001a88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f9      	bne.n	8001a82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff64 	bl	8001960 <LL_ADC_IsInternalRegulatorEnabled>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10d      	bne.n	8001aba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	f043 0210 	orr.w	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff75 	bl	80019ae <LL_ADC_REG_IsConversionOngoing>
 8001ac4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 80c8 	bne.w	8001c64 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 80c4 	bne.w	8001c64 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ae4:	f043 0202 	orr.w	r2, r3, #2
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff49 	bl	8001988 <LL_ADC_IsEnabled>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10b      	bne.n	8001b14 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001afc:	4862      	ldr	r0, [pc, #392]	; (8001c88 <HAL_ADC_Init+0x28c>)
 8001afe:	f7ff ff43 	bl	8001988 <LL_ADC_IsEnabled>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	485f      	ldr	r0, [pc, #380]	; (8001c8c <HAL_ADC_Init+0x290>)
 8001b10:	f7ff fdd4 	bl	80016bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e5b      	ldrb	r3, [r3, #25]
 8001b18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b1e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b24:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b2a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b32:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d106      	bne.n	8001b50 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	3b01      	subs	r3, #1
 8001b48:	045b      	lsls	r3, r3, #17
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <HAL_ADC_Init+0x294>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff12 	bl	80019ae <LL_ADC_REG_IsConversionOngoing>
 8001b8a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff1f 	bl	80019d4 <LL_ADC_INJ_IsConversionOngoing>
 8001b96:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d140      	bne.n	8001c20 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d13d      	bne.n	8001c20 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7e1b      	ldrb	r3, [r3, #24]
 8001bac:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bae:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bb6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bc6:	f023 0306 	bic.w	r3, r3, #6
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d118      	bne.n	8001c10 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c00:	430a      	orrs	r2, r1
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0201 	orr.w	r2, r2, #1
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	e007      	b.n	8001c20 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691a      	ldr	r2, [r3, #16]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10c      	bne.n	8001c42 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f023 010f 	bic.w	r1, r3, #15
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c40:	e007      	b.n	8001c52 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 020f 	bic.w	r2, r2, #15
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	659a      	str	r2, [r3, #88]	; 0x58
 8001c62:	e007      	b.n	8001c74 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f043 0210 	orr.w	r2, r3, #16
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c74:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000
 8001c84:	053e2d63 	.word	0x053e2d63
 8001c88:	50040000 	.word	0x50040000
 8001c8c:	50040300 	.word	0x50040300
 8001c90:	fff0c007 	.word	0xfff0c007

08001c94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0b6      	sub	sp, #216	; 0xd8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x22>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e3d5      	b.n	8002462 <HAL_ADC_ConfigChannel+0x7ce>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fe73 	bl	80019ae <LL_ADC_REG_IsConversionOngoing>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 83ba 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d824      	bhi.n	8001d22 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	3b02      	subs	r3, #2
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d81b      	bhi.n	8001d1a <HAL_ADC_ConfigChannel+0x86>
 8001ce2:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <HAL_ADC_ConfigChannel+0x54>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001cf9 	.word	0x08001cf9
 8001cec:	08001d01 	.word	0x08001d01
 8001cf0:	08001d09 	.word	0x08001d09
 8001cf4:	08001d11 	.word	0x08001d11
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	605a      	str	r2, [r3, #4]
          break;
 8001cfe:	e011      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	2212      	movs	r2, #18
 8001d04:	605a      	str	r2, [r3, #4]
          break;
 8001d06:	e00d      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2218      	movs	r2, #24
 8001d0c:	605a      	str	r2, [r3, #4]
          break;
 8001d0e:	e009      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d16:	605a      	str	r2, [r3, #4]
          break;
 8001d18:	e004      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2206      	movs	r2, #6
 8001d1e:	605a      	str	r2, [r3, #4]
          break;
 8001d20:	e000      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d22:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	f7ff fd5f 	bl	80017f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fe37 	bl	80019ae <LL_ADC_REG_IsConversionOngoing>
 8001d40:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fe43 	bl	80019d4 <LL_ADC_INJ_IsConversionOngoing>
 8001d4e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 81c1 	bne.w	80020de <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f040 81bc 	bne.w	80020de <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d6e:	d10f      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7ff fd66 	bl	800184c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fd20 	bl	80017ce <LL_ADC_SetSamplingTimeCommonConfig>
 8001d8e:	e00e      	b.n	8001dae <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f7ff fd55 	bl	800184c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fd10 	bl	80017ce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d00a      	beq.n	8001de6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6919      	ldr	r1, [r3, #16]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001de0:	f7ff fca0 	bl	8001724 <LL_ADC_SetOffset>
 8001de4:	e17b      	b.n	80020de <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fcbd 	bl	800176c <LL_ADC_GetOffsetChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10a      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x17e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fcb2 	bl	800176c <LL_ADC_GetOffsetChannel>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	0e9b      	lsrs	r3, r3, #26
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	e01e      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x1bc>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fca7 	bl	800176c <LL_ADC_GetOffsetChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e28:	fa93 f3a3 	rbit	r3, r3
 8001e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e004      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001e44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x1d4>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0e9b      	lsrs	r3, r3, #26
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	e018      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x206>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e004      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001e90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d106      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fc76 	bl	8001798 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fc5a 	bl	800176c <LL_ADC_GetOffsetChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10a      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x244>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fc4f 	bl	800176c <LL_ADC_GetOffsetChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 021f 	and.w	r2, r3, #31
 8001ed6:	e01e      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x282>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fc44 	bl	800176c <LL_ADC_GetOffsetChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001efa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001f06:	2320      	movs	r3, #32
 8001f08:	e004      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001f0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x29a>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	0e9b      	lsrs	r3, r3, #26
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	e018      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x2cc>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001f52:	2320      	movs	r3, #32
 8001f54:	e004      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d106      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fc13 	bl	8001798 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2102      	movs	r1, #2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fbf7 	bl	800176c <LL_ADC_GetOffsetChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10a      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x30a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fbec 	bl	800176c <LL_ADC_GetOffsetChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	0e9b      	lsrs	r3, r3, #26
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	e01e      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x348>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fbe1 	bl	800176c <LL_ADC_GetOffsetChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	e004      	b.n	8001fda <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x360>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0e9b      	lsrs	r3, r3, #26
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	e016      	b.n	8002022 <HAL_ADC_ConfigChannel+0x38e>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800200c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002014:	2320      	movs	r3, #32
 8002016:	e004      	b.n	8002022 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800201c:	fab3 f383 	clz	r3, r3
 8002020:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002022:	429a      	cmp	r2, r3
 8002024:	d106      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	2102      	movs	r1, #2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fbb2 	bl	8001798 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2103      	movs	r1, #3
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fb96 	bl	800176c <LL_ADC_GetOffsetChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10a      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x3cc>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2103      	movs	r1, #3
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fb8b 	bl	800176c <LL_ADC_GetOffsetChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	0e9b      	lsrs	r3, r3, #26
 800205a:	f003 021f 	and.w	r2, r3, #31
 800205e:	e017      	b.n	8002090 <HAL_ADC_ConfigChannel+0x3fc>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2103      	movs	r1, #3
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fb80 	bl	800176c <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800207a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800207c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e003      	b.n	800208e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x414>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	e011      	b.n	80020cc <HAL_ADC_ConfigChannel+0x438>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80020c0:	2320      	movs	r3, #32
 80020c2:	e003      	b.n	80020cc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80020c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d106      	bne.n	80020de <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	2103      	movs	r1, #3
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fb5d 	bl	8001798 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fc50 	bl	8001988 <LL_ADC_IsEnabled>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f040 8140 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f7ff fbd1 	bl	80018a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4a8f      	ldr	r2, [pc, #572]	; (8002344 <HAL_ADC_ConfigChannel+0x6b0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	f040 8131 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10b      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x4a2>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	0e9b      	lsrs	r3, r3, #26
 8002124:	3301      	adds	r3, #1
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	2b09      	cmp	r3, #9
 800212c:	bf94      	ite	ls
 800212e:	2301      	movls	r3, #1
 8002130:	2300      	movhi	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	e019      	b.n	800216a <HAL_ADC_ConfigChannel+0x4d6>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002146:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002148:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e003      	b.n	800215a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	2b09      	cmp	r3, #9
 8002162:	bf94      	ite	ls
 8002164:	2301      	movls	r3, #1
 8002166:	2300      	movhi	r3, #0
 8002168:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800216a:	2b00      	cmp	r3, #0
 800216c:	d079      	beq.n	8002262 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_ADC_ConfigChannel+0x4f6>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0e9b      	lsrs	r3, r3, #26
 8002180:	3301      	adds	r3, #1
 8002182:	069b      	lsls	r3, r3, #26
 8002184:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002188:	e015      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x522>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800219c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e003      	b.n	80021ae <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80021a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	069b      	lsls	r3, r3, #26
 80021b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x542>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0e9b      	lsrs	r3, r3, #26
 80021c8:	3301      	adds	r3, #1
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	2101      	movs	r1, #1
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	e017      	b.n	8002206 <HAL_ADC_ConfigChannel+0x572>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e003      	b.n	80021fa <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80021f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f003 031f 	and.w	r3, r3, #31
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	ea42 0103 	orr.w	r1, r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10a      	bne.n	800222c <HAL_ADC_ConfigChannel+0x598>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	f003 021f 	and.w	r2, r3, #31
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	051b      	lsls	r3, r3, #20
 800222a:	e018      	b.n	800225e <HAL_ADC_ConfigChannel+0x5ca>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800223a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800223e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	e003      	b.n	8002250 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f003 021f 	and.w	r2, r3, #31
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800225e:	430b      	orrs	r3, r1
 8002260:	e081      	b.n	8002366 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	2b00      	cmp	r3, #0
 800226c:	d107      	bne.n	800227e <HAL_ADC_ConfigChannel+0x5ea>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	3301      	adds	r3, #1
 8002276:	069b      	lsls	r3, r3, #26
 8002278:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800227c:	e015      	b.n	80022aa <HAL_ADC_ConfigChannel+0x616>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e003      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	069b      	lsls	r3, r3, #26
 80022a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x636>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	0e9b      	lsrs	r3, r3, #26
 80022bc:	3301      	adds	r3, #1
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	e017      	b.n	80022fa <HAL_ADC_ConfigChannel+0x666>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	61fb      	str	r3, [r7, #28]
  return result;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e003      	b.n	80022ee <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	ea42 0103 	orr.w	r1, r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10d      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x692>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	3301      	adds	r3, #1
 8002312:	f003 021f 	and.w	r2, r3, #31
 8002316:	4613      	mov	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	3b1e      	subs	r3, #30
 800231e:	051b      	lsls	r3, r3, #20
 8002320:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002324:	e01e      	b.n	8002364 <HAL_ADC_ConfigChannel+0x6d0>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	613b      	str	r3, [r7, #16]
  return result;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800233e:	2320      	movs	r3, #32
 8002340:	e006      	b.n	8002350 <HAL_ADC_ConfigChannel+0x6bc>
 8002342:	bf00      	nop
 8002344:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	3b1e      	subs	r3, #30
 800235e:	051b      	lsls	r3, r3, #20
 8002360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002364:	430b      	orrs	r3, r1
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	6892      	ldr	r2, [r2, #8]
 800236a:	4619      	mov	r1, r3
 800236c:	f7ff fa6e 	bl	800184c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_ADC_ConfigChannel+0x7d8>)
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d06c      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800237c:	483c      	ldr	r0, [pc, #240]	; (8002470 <HAL_ADC_ConfigChannel+0x7dc>)
 800237e:	f7ff f9c3 	bl	8001708 <LL_ADC_GetCommonPathInternalCh>
 8002382:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3a      	ldr	r2, [pc, #232]	; (8002474 <HAL_ADC_ConfigChannel+0x7e0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d127      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d121      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a35      	ldr	r2, [pc, #212]	; (8002478 <HAL_ADC_ConfigChannel+0x7e4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d157      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ae:	4619      	mov	r1, r3
 80023b0:	482f      	ldr	r0, [pc, #188]	; (8002470 <HAL_ADC_ConfigChannel+0x7dc>)
 80023b2:	f7ff f996 	bl	80016e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_ADC_ConfigChannel+0x7e8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	4a30      	ldr	r2, [pc, #192]	; (8002480 <HAL_ADC_ConfigChannel+0x7ec>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	099b      	lsrs	r3, r3, #6
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023de:	e03a      	b.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a27      	ldr	r2, [pc, #156]	; (8002484 <HAL_ADC_ConfigChannel+0x7f0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d113      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x77e>
 80023ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <HAL_ADC_ConfigChannel+0x7e4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d12a      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002408:	4619      	mov	r1, r3
 800240a:	4819      	ldr	r0, [pc, #100]	; (8002470 <HAL_ADC_ConfigChannel+0x7dc>)
 800240c:	f7ff f969 	bl	80016e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002410:	e021      	b.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_ADC_ConfigChannel+0x7f4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d11c      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800241c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a12      	ldr	r2, [pc, #72]	; (8002478 <HAL_ADC_ConfigChannel+0x7e4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d111      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800243a:	4619      	mov	r1, r3
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <HAL_ADC_ConfigChannel+0x7dc>)
 800243e:	f7ff f950 	bl	80016e2 <LL_ADC_SetCommonPathInternalCh>
 8002442:	e008      	b.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800245e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002462:	4618      	mov	r0, r3
 8002464:	37d8      	adds	r7, #216	; 0xd8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	80080000 	.word	0x80080000
 8002470:	50040300 	.word	0x50040300
 8002474:	c7520000 	.word	0xc7520000
 8002478:	50040000 	.word	0x50040000
 800247c:	20000000 	.word	0x20000000
 8002480:	053e2d63 	.word	0x053e2d63
 8002484:	cb840000 	.word	0xcb840000
 8002488:	80000001 	.word	0x80000001

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <__NVIC_EnableIRQ+0x38>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	; (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	; (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f8:	d301      	bcc.n	80025fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00f      	b.n	800261e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <SysTick_Config+0x40>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002606:	210f      	movs	r1, #15
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f7ff ff8e 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <SysTick_Config+0x40>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002616:	4b04      	ldr	r3, [pc, #16]	; (8002628 <SysTick_Config+0x40>)
 8002618:	2207      	movs	r2, #7
 800261a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	e000e010 	.word	0xe000e010

0800262c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff29 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002654:	f7ff ff3e 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	6978      	ldr	r0, [r7, #20]
 8002660:	f7ff ff8e 	bl	8002580 <NVIC_EncodePriority>
 8002664:	4602      	mov	r2, r0
 8002666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff5d 	bl	800252c <__NVIC_SetPriority>
}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff31 	bl	80024f0 <__NVIC_EnableIRQ>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ffa2 	bl	80025e8 <SysTick_Config>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e0ac      	b.n	800281c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f9d2 	bl	8002a70 <DFSDM_GetChannelFromInstance>
 80026cc:	4603      	mov	r3, r0
 80026ce:	4a55      	ldr	r2, [pc, #340]	; (8002824 <HAL_DFSDM_ChannelInit+0x174>)
 80026d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e09f      	b.n	800281c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7fe fc17 	bl	8000f10 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80026e2:	4b51      	ldr	r3, [pc, #324]	; (8002828 <HAL_DFSDM_ChannelInit+0x178>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a4f      	ldr	r2, [pc, #316]	; (8002828 <HAL_DFSDM_ChannelInit+0x178>)
 80026ea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80026ec:	4b4e      	ldr	r3, [pc, #312]	; (8002828 <HAL_DFSDM_ChannelInit+0x178>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d125      	bne.n	8002740 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80026f4:	4b4d      	ldr	r3, [pc, #308]	; (800282c <HAL_DFSDM_ChannelInit+0x17c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a4c      	ldr	r2, [pc, #304]	; (800282c <HAL_DFSDM_ChannelInit+0x17c>)
 80026fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026fe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002700:	4b4a      	ldr	r3, [pc, #296]	; (800282c <HAL_DFSDM_ChannelInit+0x17c>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4948      	ldr	r1, [pc, #288]	; (800282c <HAL_DFSDM_ChannelInit+0x17c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_DFSDM_ChannelInit+0x17c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a46      	ldr	r2, [pc, #280]	; (800282c <HAL_DFSDM_ChannelInit+0x17c>)
 8002714:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002718:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	791b      	ldrb	r3, [r3, #4]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d108      	bne.n	8002734 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002722:	4b42      	ldr	r3, [pc, #264]	; (800282c <HAL_DFSDM_ChannelInit+0x17c>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	3b01      	subs	r3, #1
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	493f      	ldr	r1, [pc, #252]	; (800282c <HAL_DFSDM_ChannelInit+0x17c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002734:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_DFSDM_ChannelInit+0x17c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3c      	ldr	r2, [pc, #240]	; (800282c <HAL_DFSDM_ChannelInit+0x17c>)
 800273a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800273e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800274e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800275e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002764:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 020f 	bic.w	r2, r2, #15
 800277c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80027a4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6899      	ldr	r1, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	3b01      	subs	r3, #1
 80027b6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f002 0207 	and.w	r2, r2, #7
 80027d0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6859      	ldr	r1, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027fc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f930 	bl	8002a70 <DFSDM_GetChannelFromInstance>
 8002810:	4602      	mov	r2, r0
 8002812:	4904      	ldr	r1, [pc, #16]	; (8002824 <HAL_DFSDM_ChannelInit+0x174>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200001b8 	.word	0x200001b8
 8002828:	200001b4 	.word	0x200001b4
 800282c:	40016000 	.word	0x40016000

08002830 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0ca      	b.n	80029d8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a66      	ldr	r2, [pc, #408]	; (80029e0 <HAL_DFSDM_FilterInit+0x1b0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d109      	bne.n	8002860 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002850:	2b01      	cmp	r3, #1
 8002852:	d003      	beq.n	800285c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0bb      	b.n	80029d8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7fe fadf 	bl	8000e3c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800288c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7a1b      	ldrb	r3, [r3, #8]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d108      	bne.n	80028a8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e007      	b.n	80028b8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80028b6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	7a5b      	ldrb	r3, [r3, #9]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d108      	bne.n	80028d2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e007      	b.n	80028e2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028f0:	f023 0308 	bic.w	r3, r3, #8
 80028f4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d108      	bne.n	8002910 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7c1b      	ldrb	r3, [r3, #16]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d108      	bne.n	800292a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0210 	orr.w	r2, r2, #16
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e007      	b.n	800293a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0210 	bic.w	r2, r2, #16
 8002938:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7c5b      	ldrb	r3, [r3, #17]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d108      	bne.n	8002954 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0220 	orr.w	r2, r2, #32
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	e007      	b.n	8002964 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0220 	bic.w	r2, r2, #32
 8002962:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002972:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8002976:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6959      	ldr	r1, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	3b01      	subs	r3, #1
 8002988:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800298a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002992:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7c1a      	ldrb	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40016100 	.word	0x40016100

080029e4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d02e      	beq.n	8002a5c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a04:	2bff      	cmp	r3, #255	; 0xff
 8002a06:	d029      	beq.n	8002a5c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10d      	bne.n	8002a3e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e00a      	b.n	8002a54 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5a:	e001      	b.n	8002a60 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a1c      	ldr	r2, [pc, #112]	; (8002aec <DFSDM_GetChannelFromInstance+0x7c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d102      	bne.n	8002a86 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e02b      	b.n	8002ade <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a19      	ldr	r2, [pc, #100]	; (8002af0 <DFSDM_GetChannelFromInstance+0x80>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d102      	bne.n	8002a94 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	e024      	b.n	8002ade <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <DFSDM_GetChannelFromInstance+0x84>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d102      	bne.n	8002aa2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e01d      	b.n	8002ade <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <DFSDM_GetChannelFromInstance+0x88>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d102      	bne.n	8002ab0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002aaa:	2304      	movs	r3, #4
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e016      	b.n	8002ade <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <DFSDM_GetChannelFromInstance+0x8c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d102      	bne.n	8002abe <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002ab8:	2305      	movs	r3, #5
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e00f      	b.n	8002ade <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <DFSDM_GetChannelFromInstance+0x90>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d102      	bne.n	8002acc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e008      	b.n	8002ade <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <DFSDM_GetChannelFromInstance+0x94>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d102      	bne.n	8002ada <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e001      	b.n	8002ade <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002ada:	2303      	movs	r3, #3
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40016000 	.word	0x40016000
 8002af0:	40016020 	.word	0x40016020
 8002af4:	40016040 	.word	0x40016040
 8002af8:	40016080 	.word	0x40016080
 8002afc:	400160a0 	.word	0x400160a0
 8002b00:	400160c0 	.word	0x400160c0
 8002b04:	400160e0 	.word	0x400160e0

08002b08 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e08d      	b.n	8002c36 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_DMA_Init+0x138>)
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d80f      	bhi.n	8002b46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b45      	ldr	r3, [pc, #276]	; (8002c44 <HAL_DMA_Init+0x13c>)
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a45      	ldr	r2, [pc, #276]	; (8002c48 <HAL_DMA_Init+0x140>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	091b      	lsrs	r3, r3, #4
 8002b38:	009a      	lsls	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a42      	ldr	r2, [pc, #264]	; (8002c4c <HAL_DMA_Init+0x144>)
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
 8002b44:	e00e      	b.n	8002b64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b40      	ldr	r3, [pc, #256]	; (8002c50 <HAL_DMA_Init+0x148>)
 8002b4e:	4413      	add	r3, r2
 8002b50:	4a3d      	ldr	r2, [pc, #244]	; (8002c48 <HAL_DMA_Init+0x140>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	009a      	lsls	r2, r3, #2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a3c      	ldr	r2, [pc, #240]	; (8002c54 <HAL_DMA_Init+0x14c>)
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f8fe 	bl	8002db8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc4:	d102      	bne.n	8002bcc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002be0:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d010      	beq.n	8002c0c <HAL_DMA_Init+0x104>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d80c      	bhi.n	8002c0c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f91e 	bl	8002e34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	e008      	b.n	8002c1e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40020407 	.word	0x40020407
 8002c44:	bffdfff8 	.word	0xbffdfff8
 8002c48:	cccccccd 	.word	0xcccccccd
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	bffdfbf8 	.word	0xbffdfbf8
 8002c54:	40020400 	.word	0x40020400

08002c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	f003 031c 	and.w	r3, r3, #28
 8002c78:	2204      	movs	r2, #4
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d026      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x7a>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d021      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0320 	and.w	r3, r3, #32
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0204 	bic.w	r2, r2, #4
 8002caa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	f003 021c 	and.w	r2, r3, #28
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	2104      	movs	r1, #4
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d071      	beq.n	8002dac <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002cd0:	e06c      	b.n	8002dac <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f003 031c 	and.w	r3, r3, #28
 8002cda:	2202      	movs	r2, #2
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d02e      	beq.n	8002d44 <HAL_DMA_IRQHandler+0xec>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d029      	beq.n	8002d44 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10b      	bne.n	8002d16 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 020a 	bic.w	r2, r2, #10
 8002d0c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f003 021c 	and.w	r2, r3, #28
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2102      	movs	r1, #2
 8002d24:	fa01 f202 	lsl.w	r2, r1, r2
 8002d28:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d038      	beq.n	8002dac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d42:	e033      	b.n	8002dac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	f003 031c 	and.w	r3, r3, #28
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d02a      	beq.n	8002dae <HAL_DMA_IRQHandler+0x156>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d025      	beq.n	8002dae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 020e 	bic.w	r2, r2, #14
 8002d70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	f003 021c 	and.w	r2, r3, #28
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
}
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d80a      	bhi.n	8002de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dd8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6493      	str	r3, [r2, #72]	; 0x48
 8002de0:	e007      	b.n	8002df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	009a      	lsls	r2, r3, #2
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002dec:	4413      	add	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	3b08      	subs	r3, #8
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e08:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2201      	movs	r2, #1
 8002e12:	409a      	lsls	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	40020407 	.word	0x40020407
 8002e28:	4002081c 	.word	0x4002081c
 8002e2c:	cccccccd 	.word	0xcccccccd
 8002e30:	40020880 	.word	0x40020880

08002e34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a08      	ldr	r2, [pc, #32]	; (8002e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e56:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2201      	movs	r2, #1
 8002e62:	409a      	lsls	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	1000823f 	.word	0x1000823f
 8002e78:	40020940 	.word	0x40020940

08002e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8a:	e166      	b.n	800315a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8158 	beq.w	8003154 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_GPIO_Init+0x48>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d007      	beq.n	8002ec4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eb8:	2b11      	cmp	r3, #17
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b12      	cmp	r3, #18
 8002ec2:	d130      	bne.n	8002f26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002efa:	2201      	movs	r2, #1
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 0201 	and.w	r2, r3, #1
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	2203      	movs	r2, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_Init+0xea>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b12      	cmp	r3, #18
 8002f64:	d123      	bne.n	8002fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	08da      	lsrs	r2, r3, #3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	220f      	movs	r2, #15
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	6939      	ldr	r1, [r7, #16]
 8002faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0203 	and.w	r2, r3, #3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 80b2 	beq.w	8003154 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff0:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_GPIO_Init+0x2fc>)
 8002ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff4:	4a60      	ldr	r2, [pc, #384]	; (8003178 <HAL_GPIO_Init+0x2fc>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8002ffc:	4b5e      	ldr	r3, [pc, #376]	; (8003178 <HAL_GPIO_Init+0x2fc>)
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003008:	4a5c      	ldr	r2, [pc, #368]	; (800317c <HAL_GPIO_Init+0x300>)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	220f      	movs	r2, #15
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003032:	d02b      	beq.n	800308c <HAL_GPIO_Init+0x210>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_GPIO_Init+0x304>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d025      	beq.n	8003088 <HAL_GPIO_Init+0x20c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a51      	ldr	r2, [pc, #324]	; (8003184 <HAL_GPIO_Init+0x308>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d01f      	beq.n	8003084 <HAL_GPIO_Init+0x208>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a50      	ldr	r2, [pc, #320]	; (8003188 <HAL_GPIO_Init+0x30c>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d019      	beq.n	8003080 <HAL_GPIO_Init+0x204>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a4f      	ldr	r2, [pc, #316]	; (800318c <HAL_GPIO_Init+0x310>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_GPIO_Init+0x200>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a4e      	ldr	r2, [pc, #312]	; (8003190 <HAL_GPIO_Init+0x314>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00d      	beq.n	8003078 <HAL_GPIO_Init+0x1fc>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a4d      	ldr	r2, [pc, #308]	; (8003194 <HAL_GPIO_Init+0x318>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <HAL_GPIO_Init+0x1f8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a4c      	ldr	r2, [pc, #304]	; (8003198 <HAL_GPIO_Init+0x31c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_GPIO_Init+0x1f4>
 800306c:	2307      	movs	r3, #7
 800306e:	e00e      	b.n	800308e <HAL_GPIO_Init+0x212>
 8003070:	2308      	movs	r3, #8
 8003072:	e00c      	b.n	800308e <HAL_GPIO_Init+0x212>
 8003074:	2306      	movs	r3, #6
 8003076:	e00a      	b.n	800308e <HAL_GPIO_Init+0x212>
 8003078:	2305      	movs	r3, #5
 800307a:	e008      	b.n	800308e <HAL_GPIO_Init+0x212>
 800307c:	2304      	movs	r3, #4
 800307e:	e006      	b.n	800308e <HAL_GPIO_Init+0x212>
 8003080:	2303      	movs	r3, #3
 8003082:	e004      	b.n	800308e <HAL_GPIO_Init+0x212>
 8003084:	2302      	movs	r3, #2
 8003086:	e002      	b.n	800308e <HAL_GPIO_Init+0x212>
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_GPIO_Init+0x212>
 800308c:	2300      	movs	r3, #0
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	f002 0203 	and.w	r2, r2, #3
 8003094:	0092      	lsls	r2, r2, #2
 8003096:	4093      	lsls	r3, r2
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800309e:	4937      	ldr	r1, [pc, #220]	; (800317c <HAL_GPIO_Init+0x300>)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030ac:	4b3b      	ldr	r3, [pc, #236]	; (800319c <HAL_GPIO_Init+0x320>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030d0:	4a32      	ldr	r2, [pc, #200]	; (800319c <HAL_GPIO_Init+0x320>)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030d6:	4b31      	ldr	r3, [pc, #196]	; (800319c <HAL_GPIO_Init+0x320>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030fa:	4a28      	ldr	r2, [pc, #160]	; (800319c <HAL_GPIO_Init+0x320>)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003100:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_GPIO_Init+0x320>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	43db      	mvns	r3, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_GPIO_Init+0x320>)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800312a:	4b1c      	ldr	r3, [pc, #112]	; (800319c <HAL_GPIO_Init+0x320>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	43db      	mvns	r3, r3
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4013      	ands	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800314e:	4a13      	ldr	r2, [pc, #76]	; (800319c <HAL_GPIO_Init+0x320>)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f ae91 	bne.w	8002e8c <HAL_GPIO_Init+0x10>
  }
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	40021000 	.word	0x40021000
 800317c:	40010000 	.word	0x40010000
 8003180:	48000400 	.word	0x48000400
 8003184:	48000800 	.word	0x48000800
 8003188:	48000c00 	.word	0x48000c00
 800318c:	48001000 	.word	0x48001000
 8003190:	48001400 	.word	0x48001400
 8003194:	48001800 	.word	0x48001800
 8003198:	48001c00 	.word	0x48001c00
 800319c:	40010400 	.word	0x40010400

080031a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	e001      	b.n	80031c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	807b      	strh	r3, [r7, #2]
 80031dc:	4613      	mov	r3, r2
 80031de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031e0:	787b      	ldrb	r3, [r7, #1]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031e6:	887a      	ldrh	r2, [r7, #2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ee:	887a      	ldrh	r2, [r7, #2]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e081      	b.n	8003316 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd fea0 	bl	8000f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	; 0x24
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003250:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003260:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d107      	bne.n	800327a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	e006      	b.n	8003288 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003286:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d104      	bne.n	800329a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003298:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	021a      	lsls	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69d9      	ldr	r1, [r3, #28]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b20      	cmp	r3, #32
 8003332:	d138      	bne.n	80033a6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800333e:	2302      	movs	r3, #2
 8003340:	e032      	b.n	80033a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2224      	movs	r2, #36	; 0x24
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003370:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6819      	ldr	r1, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d139      	bne.n	800343e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e033      	b.n	8003440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	; 0x24
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003406:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344e:	b08f      	sub	sp, #60	; 0x3c
 8003450:	af0a      	add	r7, sp, #40	; 0x28
 8003452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e116      	b.n	800368c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f00a fb55 	bl	800db28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2203      	movs	r2, #3
 8003482:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f007 f8e8 	bl	800a672 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	687e      	ldr	r6, [r7, #4]
 80034aa:	466d      	mov	r5, sp
 80034ac:	f106 0410 	add.w	r4, r6, #16
 80034b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80034c0:	1d33      	adds	r3, r6, #4
 80034c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c4:	6838      	ldr	r0, [r7, #0]
 80034c6:	f006 fffb 	bl	800a4c0 <USB_CoreInit>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0d7      	b.n	800368c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2100      	movs	r1, #0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f007 f8d6 	bl	800a694 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	e04a      	b.n	8003584 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034ee:	7bfa      	ldrb	r2, [r7, #15]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	333d      	adds	r3, #61	; 0x3d
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	333c      	adds	r3, #60	; 0x3c
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	b298      	uxth	r0, r3
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	3342      	adds	r3, #66	; 0x42
 800352a:	4602      	mov	r2, r0
 800352c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800352e:	7bfa      	ldrb	r2, [r7, #15]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	333f      	adds	r3, #63	; 0x3f
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3344      	adds	r3, #68	; 0x44
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	3348      	adds	r3, #72	; 0x48
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3350      	adds	r3, #80	; 0x50
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	3301      	adds	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
 8003584:	7bfa      	ldrb	r2, [r7, #15]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d3af      	bcc.n	80034ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358e:	2300      	movs	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]
 8003592:	e044      	b.n	800361e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003594:	7bfa      	ldrb	r2, [r7, #15]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80035d2:	2200      	movs	r2, #0
 80035d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	3301      	adds	r3, #1
 800361c:	73fb      	strb	r3, [r7, #15]
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	d3b5      	bcc.n	8003594 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	687e      	ldr	r6, [r7, #4]
 8003630:	466d      	mov	r5, sp
 8003632:	f106 0410 	add.w	r4, r6, #16
 8003636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800363c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003642:	e885 0003 	stmia.w	r5, {r0, r1}
 8003646:	1d33      	adds	r3, r6, #4
 8003648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800364a:	6838      	ldr	r0, [r7, #0]
 800364c:	f007 f84c 	bl	800a6e8 <USB_DevInit>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e014      	b.n	800368c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	2b01      	cmp	r3, #1
 8003678:	d102      	bne.n	8003680 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 ff62 	bl	8004544 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f007 ffce 	bl	800b626 <USB_DevDisconnect>

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003694 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_PCD_Start+0x1c>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e01c      	b.n	80036ea <HAL_PCD_Start+0x56>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f006 ffbd 	bl	800a650 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f007 ff82 	bl	800b5e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036f2:	b590      	push	{r4, r7, lr}
 80036f4:	b08d      	sub	sp, #52	; 0x34
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f008 f840 	bl	800b78e <USB_GetMode>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	f040 838f 	bne.w	8003e34 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f007 ffa4 	bl	800b668 <USB_ReadInterrupts>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8385 	beq.w	8003e32 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f007 ff9b 	bl	800b668 <USB_ReadInterrupts>
 8003732:	4603      	mov	r3, r0
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b02      	cmp	r3, #2
 800373a:	d107      	bne.n	800374c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f002 0202 	and.w	r2, r2, #2
 800374a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f007 ff89 	bl	800b668 <USB_ReadInterrupts>
 8003756:	4603      	mov	r3, r0
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b10      	cmp	r3, #16
 800375e:	d161      	bne.n	8003824 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0210 	bic.w	r2, r2, #16
 800376e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f003 020f 	and.w	r2, r3, #15
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	3304      	adds	r3, #4
 800378e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	0c5b      	lsrs	r3, r3, #17
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	2b02      	cmp	r3, #2
 800379a:	d124      	bne.n	80037e6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d035      	beq.n	8003814 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	6a38      	ldr	r0, [r7, #32]
 80037bc:	f007 fdef 	bl	800b39e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037cc:	441a      	add	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037de:	441a      	add	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	619a      	str	r2, [r3, #24]
 80037e4:	e016      	b.n	8003814 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	0c5b      	lsrs	r3, r3, #17
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	2b06      	cmp	r3, #6
 80037f0:	d110      	bne.n	8003814 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037f8:	2208      	movs	r2, #8
 80037fa:	4619      	mov	r1, r3
 80037fc:	6a38      	ldr	r0, [r7, #32]
 80037fe:	f007 fdce 	bl	800b39e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800380e:	441a      	add	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699a      	ldr	r2, [r3, #24]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0210 	orr.w	r2, r2, #16
 8003822:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f007 ff1d 	bl	800b668 <USB_ReadInterrupts>
 800382e:	4603      	mov	r3, r0
 8003830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003834:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003838:	d16e      	bne.n	8003918 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f007 ff23 	bl	800b68e <USB_ReadDevAllOutEpInterrupt>
 8003848:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800384a:	e062      	b.n	8003912 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d057      	beq.n	8003906 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f007 ff48 	bl	800b6f6 <USB_ReadDevOutEPInterrupt>
 8003866:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	461a      	mov	r2, r3
 8003880:	2301      	movs	r3, #1
 8003882:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fd82 	bl	8004390 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00c      	beq.n	80038b0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a2:	461a      	mov	r2, r3
 80038a4:	2308      	movs	r3, #8
 80038a6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fdbe 	bl	800442c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f003 0310 	and.w	r3, r3, #16
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c6:	461a      	mov	r2, r3
 80038c8:	2310      	movs	r3, #16
 80038ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	461a      	mov	r2, r3
 80038e4:	2320      	movs	r3, #32
 80038e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fe:	461a      	mov	r2, r3
 8003900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003904:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	3301      	adds	r3, #1
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	085b      	lsrs	r3, r3, #1
 8003910:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d199      	bne.n	800384c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f007 fea3 	bl	800b668 <USB_ReadInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800392c:	f040 8087 	bne.w	8003a3e <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4618      	mov	r0, r3
 8003936:	f007 fec4 	bl	800b6c2 <USB_ReadDevAllInEpInterrupt>
 800393a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003940:	e07a      	b.n	8003a38 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d06f      	beq.n	8003a2c <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f007 feeb 	bl	800b732 <USB_ReadDevInEPInterrupt>
 800395c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	2201      	movs	r2, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800397c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	43db      	mvns	r3, r3
 8003982:	69f9      	ldr	r1, [r7, #28]
 8003984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003988:	4013      	ands	r3, r2
 800398a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003998:	461a      	mov	r2, r3
 800399a:	2301      	movs	r3, #1
 800399c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f00a f952 	bl	800dc4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c0:	461a      	mov	r2, r3
 80039c2:	2308      	movs	r3, #8
 80039c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039dc:	461a      	mov	r2, r3
 80039de:	2310      	movs	r3, #16
 80039e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f8:	461a      	mov	r2, r3
 80039fa:	2340      	movs	r3, #64	; 0x40
 80039fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a14:	461a      	mov	r2, r3
 8003a16:	2302      	movs	r3, #2
 8003a18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fc29 	bl	800427e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	3301      	adds	r3, #1
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d181      	bne.n	8003942 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f007 fe10 	bl	800b668 <USB_ReadInterrupts>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a52:	d122      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d108      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f00a fbfd 	bl	800e27c <HAL_PCDEx_LPM_Callback>
 8003a82:	e002      	b.n	8003a8a <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f00a f94f 	bl	800dd28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f007 fde2 	bl	800b668 <USB_ReadInterrupts>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aae:	d112      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d102      	bne.n	8003ac6 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f00a f90b 	bl	800dcdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f007 fdc4 	bl	800b668 <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aea:	d121      	bne.n	8003b30 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003afa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d111      	bne.n	8003b2a <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	f003 020f 	and.w	r2, r3, #15
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b20:	2101      	movs	r1, #1
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f00a fbaa 	bl	800e27c <HAL_PCDEx_LPM_Callback>
 8003b28:	e002      	b.n	8003b30 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f00a f8d6 	bl	800dcdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f007 fd97 	bl	800b668 <USB_ReadInterrupts>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b44:	f040 80c5 	bne.w	8003cd2 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2110      	movs	r1, #16
 8003b62:	4618      	mov	r0, r3
 8003b64:	f006 ff0c 	bl	800a980 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6c:	e056      	b.n	8003c1c <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b92:	0151      	lsls	r1, r2, #5
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	440a      	add	r2, r1
 8003b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ba0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb2:	0151      	lsls	r1, r2, #5
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be6:	0151      	lsls	r1, r2, #5
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	440a      	add	r2, r1
 8003bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bf4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c06:	0151      	lsls	r1, r2, #5
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	440a      	add	r2, r1
 8003c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	3301      	adds	r3, #1
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3a3      	bcc.n	8003b6e <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d016      	beq.n	8003c70 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c52:	f043 030b 	orr.w	r3, r3, #11
 8003c56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c68:	f043 030b 	orr.w	r3, r3, #11
 8003c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6e:	e015      	b.n	8003c9c <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c96:	f043 030b 	orr.w	r3, r3, #11
 8003c9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003caa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f007 fd97 	bl	800b7f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f007 fcc6 	bl	800b668 <USB_ReadInterrupts>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce6:	d124      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f007 fd5c 	bl	800b7aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f006 fea3 	bl	800aa42 <USB_GetDevSpeed>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	461a      	mov	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681c      	ldr	r4, [r3, #0]
 8003d08:	f001 fb10 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8003d0c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	4620      	mov	r0, r4
 8003d18:	f006 fbfe 	bl	800a518 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f009 ffbe 	bl	800dc9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d30:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f007 fc96 	bl	800b668 <USB_ReadInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d10a      	bne.n	8003d5c <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f009 ff9b 	bl	800dc82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f002 0208 	and.w	r2, r2, #8
 8003d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f007 fc81 	bl	800b668 <USB_ReadInterrupts>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d70:	d10f      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f00a f80d 	bl	800dd9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695a      	ldr	r2, [r3, #20]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f007 fc66 	bl	800b668 <USB_ReadInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da6:	d10f      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	4619      	mov	r1, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f009 ffe0 	bl	800dd78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f007 fc4b 	bl	800b668 <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ddc:	d10a      	bne.n	8003df4 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f009 ffee 	bl	800ddc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f007 fc35 	bl	800b668 <USB_ReadInterrupts>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d115      	bne.n	8003e34 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f009 ffde 	bl	800dddc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	e000      	b.n	8003e34 <HAL_PCD_IRQHandler+0x742>
      return;
 8003e32:	bf00      	nop
    }
  }
}
 8003e34:	3734      	adds	r7, #52	; 0x34
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd90      	pop	{r4, r7, pc}

08003e3a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_PCD_SetAddress+0x1a>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e013      	b.n	8003e7c <HAL_PCD_SetAddress+0x42>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f007 fb93 	bl	800b598 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4603      	mov	r3, r0
 8003e94:	70fb      	strb	r3, [r7, #3]
 8003e96:	460b      	mov	r3, r1
 8003e98:	803b      	strh	r3, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	da0f      	bge.n	8003eca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	f003 020f 	and.w	r2, r3, #15
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	3338      	adds	r3, #56	; 0x38
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	705a      	strb	r2, [r3, #1]
 8003ec8:	e00f      	b.n	8003eea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	f003 020f 	and.w	r2, r3, #15
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ef6:	883a      	ldrh	r2, [r7, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	78ba      	ldrb	r2, [r7, #2]
 8003f00:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f14:	78bb      	ldrb	r3, [r7, #2]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d102      	bne.n	8003f20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_PCD_EP_Open+0xaa>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e00e      	b.n	8003f4c <HAL_PCD_EP_Open+0xc8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f006 fd9f 	bl	800aa80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003f4a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	da0f      	bge.n	8003f88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	f003 020f 	and.w	r2, r3, #15
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	3338      	adds	r3, #56	; 0x38
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	705a      	strb	r2, [r3, #1]
 8003f86:	e00f      	b.n	8003fa8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f003 020f 	and.w	r2, r3, #15
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_PCD_EP_Close+0x6e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e00e      	b.n	8003fe0 <HAL_PCD_EP_Close+0x8c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68f9      	ldr	r1, [r7, #12]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f006 fddd 	bl	800ab90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff8:	7afb      	ldrb	r3, [r7, #11]
 8003ffa:	f003 020f 	and.w	r2, r3, #15
 8003ffe:	4613      	mov	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	3304      	adds	r3, #4
 8004010:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2200      	movs	r2, #0
 8004022:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2200      	movs	r2, #0
 8004028:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800402a:	7afb      	ldrb	r3, [r7, #11]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	b2da      	uxtb	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004036:	7afb      	ldrb	r3, [r7, #11]
 8004038:	f003 030f 	and.w	r3, r3, #15
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6979      	ldr	r1, [r7, #20]
 8004046:	4618      	mov	r0, r3
 8004048:	f007 f85a 	bl	800b100 <USB_EP0StartXfer>
 800404c:	e005      	b.n	800405a <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	4618      	mov	r0, r3
 8004056:	f006 fe77 	bl	800ad48 <USB_EPStartXfer>
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	460b      	mov	r3, r1
 80040a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040a4:	7afb      	ldrb	r3, [r7, #11]
 80040a6:	f003 020f 	and.w	r2, r3, #15
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	3338      	adds	r3, #56	; 0x38
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2200      	movs	r2, #0
 80040cc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2201      	movs	r2, #1
 80040d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d4:	7afb      	ldrb	r3, [r7, #11]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040e0:	7afb      	ldrb	r3, [r7, #11]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6979      	ldr	r1, [r7, #20]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f007 f805 	bl	800b100 <USB_EP0StartXfer>
 80040f6:	e005      	b.n	8004104 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6979      	ldr	r1, [r7, #20]
 80040fe:	4618      	mov	r0, r3
 8004100:	f006 fe22 	bl	800ad48 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 020f 	and.w	r2, r3, #15
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	429a      	cmp	r2, r3
 8004126:	d901      	bls.n	800412c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e04e      	b.n	80041ca <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800412c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004130:	2b00      	cmp	r3, #0
 8004132:	da0f      	bge.n	8004154 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	f003 020f 	and.w	r2, r3, #15
 800413a:	4613      	mov	r3, r2
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	3338      	adds	r3, #56	; 0x38
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	3304      	adds	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	705a      	strb	r2, [r3, #1]
 8004152:	e00d      	b.n	8004170 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	3304      	adds	r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_PCD_EP_SetStall+0x82>
 800418c:	2302      	movs	r3, #2
 800418e:	e01c      	b.n	80041ca <HAL_PCD_EP_SetStall+0xbc>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68f9      	ldr	r1, [r7, #12]
 800419e:	4618      	mov	r0, r3
 80041a0:	f007 f926 	bl	800b3f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d108      	bne.n	80041c0 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f007 fb18 	bl	800b7f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 020f 	and.w	r2, r3, #15
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d901      	bls.n	80041f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e042      	b.n	8004276 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	da0f      	bge.n	8004218 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	f003 020f 	and.w	r2, r3, #15
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	3338      	adds	r3, #56	; 0x38
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	3304      	adds	r3, #4
 800420e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	705a      	strb	r2, [r3, #1]
 8004216:	e00f      	b.n	8004238 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	f003 020f 	and.w	r2, r3, #15
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4413      	add	r3, r2
 800422e:	3304      	adds	r3, #4
 8004230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	b2da      	uxtb	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_PCD_EP_ClrStall+0x86>
 8004254:	2302      	movs	r3, #2
 8004256:	e00e      	b.n	8004276 <HAL_PCD_EP_ClrStall+0xa4>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68f9      	ldr	r1, [r7, #12]
 8004266:	4618      	mov	r0, r3
 8004268:	f007 f930 	bl	800b4cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b088      	sub	sp, #32
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	3338      	adds	r3, #56	; 0x38
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	3304      	adds	r3, #4
 80042a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d901      	bls.n	80042b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e067      	b.n	8004386 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d902      	bls.n	80042d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3303      	adds	r3, #3
 80042d6:	089b      	lsrs	r3, r3, #2
 80042d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042da:	e026      	b.n	800432a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	695a      	ldr	r2, [r3, #20]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d902      	bls.n	80042f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	3303      	adds	r3, #3
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	68d9      	ldr	r1, [r3, #12]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	b2da      	uxtb	r2, r3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	b29b      	uxth	r3, r3
 800430c:	6978      	ldr	r0, [r7, #20]
 800430e:	f007 f815 	bl	800b33c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	441a      	add	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	441a      	add	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	b29b      	uxth	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	429a      	cmp	r2, r3
 800433e:	d809      	bhi.n	8004354 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004348:	429a      	cmp	r2, r3
 800434a:	d203      	bcs.n	8004354 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1c3      	bne.n	80042dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	429a      	cmp	r2, r3
 800435e:	d811      	bhi.n	8004384 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	2201      	movs	r2, #1
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	43db      	mvns	r3, r3
 800437a:	6939      	ldr	r1, [r7, #16]
 800437c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004380:	4013      	ands	r3, r2
 8004382:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	333c      	adds	r3, #60	; 0x3c
 80043a8:	3304      	adds	r3, #4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4a19      	ldr	r2, [pc, #100]	; (8004428 <PCD_EP_OutXfrComplete_int+0x98>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d124      	bne.n	8004410 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	461a      	mov	r2, r3
 80043de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e2:	6093      	str	r3, [r2, #8]
 80043e4:	e01a      	b.n	800441c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	2320      	movs	r3, #32
 8004400:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f009 fc05 	bl	800dc18 <HAL_PCD_DataOutStageCallback>
 800440e:	e005      	b.n	800441c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b2db      	uxtb	r3, r3
 8004414:	4619      	mov	r1, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f009 fbfe 	bl	800dc18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	4f54310a 	.word	0x4f54310a

0800442c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	333c      	adds	r3, #60	; 0x3c
 8004444:	3304      	adds	r3, #4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a0c      	ldr	r2, [pc, #48]	; (8004490 <PCD_EP_OutSetupPacket_int+0x64>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d90e      	bls.n	8004480 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004478:	461a      	mov	r2, r3
 800447a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800447e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f009 fbb7 	bl	800dbf4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	4f54300a 	.word	0x4f54300a

08004494 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
 80044a0:	4613      	mov	r3, r2
 80044a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d107      	bne.n	80044c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044b2:	883b      	ldrh	r3, [r7, #0]
 80044b4:	0419      	lsls	r1, r3, #16
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	430a      	orrs	r2, r1
 80044be:	629a      	str	r2, [r3, #40]	; 0x28
 80044c0:	e028      	b.n	8004514 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	4413      	add	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]
 80044d4:	e00d      	b.n	80044f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	3340      	adds	r3, #64	; 0x40
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	4413      	add	r3, r2
 80044ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	3301      	adds	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	7bfa      	ldrb	r2, [r7, #15]
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d3ec      	bcc.n	80044d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044fc:	883b      	ldrh	r3, [r7, #0]
 80044fe:	0418      	lsls	r0, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6819      	ldr	r1, [r3, #0]
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	3b01      	subs	r3, #1
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	4302      	orrs	r2, r0
 800450c:	3340      	adds	r3, #64	; 0x40
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004576:	f043 0303 	orr.w	r3, r3, #3
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40007000 	.word	0x40007000

080045ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045bc:	d102      	bne.n	80045c4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80045be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c2:	e00b      	b.n	80045dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80045c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d2:	d102      	bne.n	80045da <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80045d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045d8:	e000      	b.n	80045dc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80045da:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40007000 	.word	0x40007000

080045ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d141      	bne.n	800467e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045fa:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004606:	d131      	bne.n	800466c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004608:	4b47      	ldr	r3, [pc, #284]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800460a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460e:	4a46      	ldr	r2, [pc, #280]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004614:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004618:	4b43      	ldr	r3, [pc, #268]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004620:	4a41      	ldr	r2, [pc, #260]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004626:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004628:	4b40      	ldr	r3, [pc, #256]	; (800472c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2232      	movs	r2, #50	; 0x32
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	4a3f      	ldr	r2, [pc, #252]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	0c9b      	lsrs	r3, r3, #18
 800463a:	3301      	adds	r3, #1
 800463c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800463e:	e002      	b.n	8004646 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3b01      	subs	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004646:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004652:	d102      	bne.n	800465a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f2      	bne.n	8004640 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800465a:	4b33      	ldr	r3, [pc, #204]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004666:	d158      	bne.n	800471a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e057      	b.n	800471c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800466c:	4b2e      	ldr	r3, [pc, #184]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004672:	4a2d      	ldr	r2, [pc, #180]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800467c:	e04d      	b.n	800471a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004684:	d141      	bne.n	800470a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004686:	4b28      	ldr	r3, [pc, #160]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004692:	d131      	bne.n	80046f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004694:	4b24      	ldr	r3, [pc, #144]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800469a:	4a23      	ldr	r2, [pc, #140]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046a4:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046ac:	4a1e      	ldr	r2, [pc, #120]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80046b4:	4b1d      	ldr	r3, [pc, #116]	; (800472c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2232      	movs	r2, #50	; 0x32
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	0c9b      	lsrs	r3, r3, #18
 80046c6:	3301      	adds	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ca:	e002      	b.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046de:	d102      	bne.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f2      	bne.n	80046cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046e6:	4b10      	ldr	r3, [pc, #64]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f2:	d112      	bne.n	800471a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e011      	b.n	800471c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046fe:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004708:	e007      	b.n	800471a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004712:	4a05      	ldr	r2, [pc, #20]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004714:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004718:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40007000 	.word	0x40007000
 800472c:	20000000 	.word	0x20000000
 8004730:	431bde83 	.word	0x431bde83

08004734 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <HAL_PWREx_EnableVddUSB+0x1c>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	4a04      	ldr	r2, [pc, #16]	; (8004750 <HAL_PWREx_EnableVddUSB+0x1c>)
 800473e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004742:	6053      	str	r3, [r2, #4]
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40007000 	.word	0x40007000

08004754 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_PWREx_EnableVddIO2+0x1c>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a04      	ldr	r2, [pc, #16]	; (8004770 <HAL_PWREx_EnableVddIO2+0x1c>)
 800475e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004762:	6053      	str	r3, [r2, #4]
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40007000 	.word	0x40007000

08004774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f000 bc16 	b.w	8004fb4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004788:	4ba0      	ldr	r3, [pc, #640]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 030c 	and.w	r3, r3, #12
 8004790:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004792:	4b9e      	ldr	r3, [pc, #632]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f000 80e4 	beq.w	8004972 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4c>
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	f040 808b 	bne.w	80048ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f040 8087 	bne.w	80048ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c0:	4b92      	ldr	r3, [pc, #584]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_OscConfig+0x64>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e3ed      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	4b8b      	ldr	r3, [pc, #556]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_RCC_OscConfig+0x7e>
 80047e8:	4b88      	ldr	r3, [pc, #544]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f0:	e005      	b.n	80047fe <HAL_RCC_OscConfig+0x8a>
 80047f2:	4b86      	ldr	r3, [pc, #536]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80047f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047fe:	4293      	cmp	r3, r2
 8004800:	d223      	bcs.n	800484a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fdc8 	bl	800539c <RCC_SetFlashLatencyFromMSIRange>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e3ce      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004816:	4b7d      	ldr	r3, [pc, #500]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a7c      	ldr	r2, [pc, #496]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 800481c:	f043 0308 	orr.w	r3, r3, #8
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4b7a      	ldr	r3, [pc, #488]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	4977      	ldr	r1, [pc, #476]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004834:	4b75      	ldr	r3, [pc, #468]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	4972      	ldr	r1, [pc, #456]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004844:	4313      	orrs	r3, r2
 8004846:	604b      	str	r3, [r1, #4]
 8004848:	e025      	b.n	8004896 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484a:	4b70      	ldr	r3, [pc, #448]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a6f      	ldr	r2, [pc, #444]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	4b6d      	ldr	r3, [pc, #436]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	496a      	ldr	r1, [pc, #424]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004868:	4b68      	ldr	r3, [pc, #416]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	4965      	ldr	r1, [pc, #404]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fd88 	bl	800539c <RCC_SetFlashLatencyFromMSIRange>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e38e      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004896:	f000 fcbf 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 800489a:	4602      	mov	r2, r0
 800489c:	4b5b      	ldr	r3, [pc, #364]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	495a      	ldr	r1, [pc, #360]	; (8004a10 <HAL_RCC_OscConfig+0x29c>)
 80048a8:	5ccb      	ldrb	r3, [r1, r3]
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	fa22 f303 	lsr.w	r3, r2, r3
 80048b2:	4a58      	ldr	r2, [pc, #352]	; (8004a14 <HAL_RCC_OscConfig+0x2a0>)
 80048b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048b6:	4b58      	ldr	r3, [pc, #352]	; (8004a18 <HAL_RCC_OscConfig+0x2a4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fc fe7e 	bl	80015bc <HAL_InitTick>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d052      	beq.n	8004970 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	e372      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d032      	beq.n	800493c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048d6:	4b4d      	ldr	r3, [pc, #308]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a4c      	ldr	r2, [pc, #304]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e2:	f7fc febb 	bl	800165c <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ea:	f7fc feb7 	bl	800165c <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e35b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048fc:	4b43      	ldr	r3, [pc, #268]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004908:	4b40      	ldr	r3, [pc, #256]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3f      	ldr	r2, [pc, #252]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 800490e:	f043 0308 	orr.w	r3, r3, #8
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b3d      	ldr	r3, [pc, #244]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	493a      	ldr	r1, [pc, #232]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004926:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	4935      	ldr	r1, [pc, #212]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004936:	4313      	orrs	r3, r2
 8004938:	604b      	str	r3, [r1, #4]
 800493a:	e01a      	b.n	8004972 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800493c:	4b33      	ldr	r3, [pc, #204]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a32      	ldr	r2, [pc, #200]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004948:	f7fc fe88 	bl	800165c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004950:	f7fc fe84 	bl	800165c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e328      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004962:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x1dc>
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004970:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d073      	beq.n	8004a66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d005      	beq.n	8004990 <HAL_RCC_OscConfig+0x21c>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b0c      	cmp	r3, #12
 8004988:	d10e      	bne.n	80049a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d10b      	bne.n	80049a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004990:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d063      	beq.n	8004a64 <HAL_RCC_OscConfig+0x2f0>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d15f      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e305      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d106      	bne.n	80049c0 <HAL_RCC_OscConfig+0x24c>
 80049b2:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a15      	ldr	r2, [pc, #84]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e01d      	b.n	80049fc <HAL_RCC_OscConfig+0x288>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x270>
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a0f      	ldr	r2, [pc, #60]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80049d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e00b      	b.n	80049fc <HAL_RCC_OscConfig+0x288>
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a08      	ldr	r2, [pc, #32]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a05      	ldr	r2, [pc, #20]	; (8004a0c <HAL_RCC_OscConfig+0x298>)
 80049f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01b      	beq.n	8004a3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fc fe2a 	bl	800165c <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0a:	e010      	b.n	8004a2e <HAL_RCC_OscConfig+0x2ba>
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	0800e40c 	.word	0x0800e40c
 8004a14:	20000000 	.word	0x20000000
 8004a18:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fc fe1e 	bl	800165c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e2c2      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a2e:	4baf      	ldr	r3, [pc, #700]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x2a8>
 8004a3a:	e014      	b.n	8004a66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fc fe0e 	bl	800165c <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fc fe0a 	bl	800165c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	; 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e2ae      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a56:	4ba5      	ldr	r3, [pc, #660]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x2d0>
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d060      	beq.n	8004b34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_OscConfig+0x310>
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b0c      	cmp	r3, #12
 8004a7c:	d119      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d116      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a84:	4b99      	ldr	r3, [pc, #612]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_OscConfig+0x328>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e28b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9c:	4b93      	ldr	r3, [pc, #588]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	061b      	lsls	r3, r3, #24
 8004aaa:	4990      	ldr	r1, [pc, #576]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab0:	e040      	b.n	8004b34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d023      	beq.n	8004b02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aba:	4b8c      	ldr	r3, [pc, #560]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a8b      	ldr	r2, [pc, #556]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac6:	f7fc fdc9 	bl	800165c <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ace:	f7fc fdc5 	bl	800165c <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e269      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae0:	4b82      	ldr	r3, [pc, #520]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aec:	4b7f      	ldr	r3, [pc, #508]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	497c      	ldr	r1, [pc, #496]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]
 8004b00:	e018      	b.n	8004b34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b02:	4b7a      	ldr	r3, [pc, #488]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a79      	ldr	r2, [pc, #484]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fc fda5 	bl	800165c <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b16:	f7fc fda1 	bl	800165c <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e245      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b28:	4b70      	ldr	r3, [pc, #448]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d03c      	beq.n	8004bba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01c      	beq.n	8004b82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b48:	4b68      	ldr	r3, [pc, #416]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b4e:	4a67      	ldr	r2, [pc, #412]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fc fd80 	bl	800165c <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b60:	f7fc fd7c 	bl	800165c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e220      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b72:	4b5e      	ldr	r3, [pc, #376]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ef      	beq.n	8004b60 <HAL_RCC_OscConfig+0x3ec>
 8004b80:	e01b      	b.n	8004bba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b82:	4b5a      	ldr	r3, [pc, #360]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b88:	4a58      	ldr	r2, [pc, #352]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004b8a:	f023 0301 	bic.w	r3, r3, #1
 8004b8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b92:	f7fc fd63 	bl	800165c <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fc fd5f 	bl	800165c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e203      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bac:	4b4f      	ldr	r3, [pc, #316]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1ef      	bne.n	8004b9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 80a6 	beq.w	8004d14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bcc:	4b47      	ldr	r3, [pc, #284]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10d      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd8:	4b44      	ldr	r3, [pc, #272]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	4a43      	ldr	r2, [pc, #268]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be2:	6593      	str	r3, [r2, #88]	; 0x58
 8004be4:	4b41      	ldr	r3, [pc, #260]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf4:	4b3e      	ldr	r3, [pc, #248]	; (8004cf0 <HAL_RCC_OscConfig+0x57c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d118      	bne.n	8004c32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c00:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x57c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a3a      	ldr	r2, [pc, #232]	; (8004cf0 <HAL_RCC_OscConfig+0x57c>)
 8004c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0c:	f7fc fd26 	bl	800165c <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fc fd22 	bl	800165c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e1c6      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c26:	4b32      	ldr	r3, [pc, #200]	; (8004cf0 <HAL_RCC_OscConfig+0x57c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d108      	bne.n	8004c4c <HAL_RCC_OscConfig+0x4d8>
 8004c3a:	4b2c      	ldr	r3, [pc, #176]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	4a2a      	ldr	r2, [pc, #168]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004c42:	f043 0301 	orr.w	r3, r3, #1
 8004c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c4a:	e024      	b.n	8004c96 <HAL_RCC_OscConfig+0x522>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b05      	cmp	r3, #5
 8004c52:	d110      	bne.n	8004c76 <HAL_RCC_OscConfig+0x502>
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	4a24      	ldr	r2, [pc, #144]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004c5c:	f043 0304 	orr.w	r3, r3, #4
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c64:	4b21      	ldr	r3, [pc, #132]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	4a20      	ldr	r2, [pc, #128]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c74:	e00f      	b.n	8004c96 <HAL_RCC_OscConfig+0x522>
 8004c76:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c86:	4b19      	ldr	r3, [pc, #100]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	4a17      	ldr	r2, [pc, #92]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004c8e:	f023 0304 	bic.w	r3, r3, #4
 8004c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d016      	beq.n	8004ccc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9e:	f7fc fcdd 	bl	800165c <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7fc fcd9 	bl	800165c <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e17b      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_OscConfig+0x578>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0ed      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x532>
 8004cca:	e01a      	b.n	8004d02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ccc:	f7fc fcc6 	bl	800165c <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd2:	e00f      	b.n	8004cf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f7fc fcc2 	bl	800165c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d906      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e164      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
 8004cea:	bf00      	nop
 8004cec:	40021000 	.word	0x40021000
 8004cf0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf4:	4ba8      	ldr	r3, [pc, #672]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e8      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d02:	7ffb      	ldrb	r3, [r7, #31]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d105      	bne.n	8004d14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d08:	4ba3      	ldr	r3, [pc, #652]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	4aa2      	ldr	r2, [pc, #648]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d03c      	beq.n	8004d9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01c      	beq.n	8004d62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d28:	4b9b      	ldr	r3, [pc, #620]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d2e:	4a9a      	ldr	r2, [pc, #616]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004d30:	f043 0301 	orr.w	r3, r3, #1
 8004d34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d38:	f7fc fc90 	bl	800165c <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d40:	f7fc fc8c 	bl	800165c <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e130      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d52:	4b91      	ldr	r3, [pc, #580]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ef      	beq.n	8004d40 <HAL_RCC_OscConfig+0x5cc>
 8004d60:	e01b      	b.n	8004d9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d62:	4b8d      	ldr	r3, [pc, #564]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d68:	4a8b      	ldr	r2, [pc, #556]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fc fc73 	bl	800165c <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d7a:	f7fc fc6f 	bl	800165c <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e113      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d8c:	4b82      	ldr	r3, [pc, #520]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ef      	bne.n	8004d7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8107 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	f040 80cb 	bne.w	8004f44 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dae:	4b7a      	ldr	r3, [pc, #488]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0203 	and.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d12c      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d123      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dde:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d11b      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d113      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	3b01      	subs	r3, #1
 8004e02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d109      	bne.n	8004e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	3b01      	subs	r3, #1
 8004e16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d06d      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2b0c      	cmp	r3, #12
 8004e20:	d068      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e22:	4b5d      	ldr	r3, [pc, #372]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d105      	bne.n	8004e3a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e2e:	4b5a      	ldr	r3, [pc, #360]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e0ba      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e3e:	4b56      	ldr	r3, [pc, #344]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a55      	ldr	r2, [pc, #340]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e4a:	f7fc fc07 	bl	800165c <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e52:	f7fc fc03 	bl	800165c <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e0a7      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e64:	4b4c      	ldr	r3, [pc, #304]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e70:	4b49      	ldr	r3, [pc, #292]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	4b49      	ldr	r3, [pc, #292]	; (8004f9c <HAL_RCC_OscConfig+0x828>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e80:	3a01      	subs	r2, #1
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	4311      	orrs	r1, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e8a:	0212      	lsls	r2, r2, #8
 8004e8c:	4311      	orrs	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e92:	0852      	lsrs	r2, r2, #1
 8004e94:	3a01      	subs	r2, #1
 8004e96:	0552      	lsls	r2, r2, #21
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e9e:	0852      	lsrs	r2, r2, #1
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	0652      	lsls	r2, r2, #25
 8004ea4:	4311      	orrs	r1, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004eaa:	06d2      	lsls	r2, r2, #27
 8004eac:	430a      	orrs	r2, r1
 8004eae:	493a      	ldr	r1, [pc, #232]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004eb4:	4b38      	ldr	r3, [pc, #224]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a37      	ldr	r2, [pc, #220]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ec0:	4b35      	ldr	r3, [pc, #212]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4a34      	ldr	r2, [pc, #208]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ecc:	f7fc fbc6 	bl	800165c <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ed2:	e008      	b.n	8004ee6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed4:	f7fc fbc2 	bl	800165c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e066      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee6:	4b2c      	ldr	r3, [pc, #176]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ef2:	e05e      	b.n	8004fb2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e05d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef8:	4b27      	ldr	r3, [pc, #156]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d156      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f04:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a23      	ldr	r2, [pc, #140]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f10:	4b21      	ldr	r3, [pc, #132]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f1c:	f7fc fb9e 	bl	800165c <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f24:	f7fc fb9a 	bl	800165c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e03e      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f36:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x7b0>
 8004f42:	e036      	b.n	8004fb2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2b0c      	cmp	r3, #12
 8004f48:	d031      	beq.n	8004fae <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4a:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a12      	ldr	r2, [pc, #72]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f54:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004f56:	4b10      	ldr	r3, [pc, #64]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d105      	bne.n	8004f6e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f68:	f023 0303 	bic.w	r3, r3, #3
 8004f6c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <HAL_RCC_OscConfig+0x824>)
 8004f74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7e:	f7fc fb6d 	bl	800165c <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f84:	e00c      	b.n	8004fa0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f86:	f7fc fb69 	bl	800165c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d905      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e00d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCC_OscConfig+0x848>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1ec      	bne.n	8004f86 <HAL_RCC_OscConfig+0x812>
 8004fac:	e001      	b.n	8004fb2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40021000 	.word	0x40021000

08004fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e10f      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b89      	ldr	r3, [pc, #548]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d910      	bls.n	8005008 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b86      	ldr	r3, [pc, #536]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 020f 	bic.w	r2, r3, #15
 8004fee:	4984      	ldr	r1, [pc, #528]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b82      	ldr	r3, [pc, #520]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0f7      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8089 	beq.w	8005128 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b03      	cmp	r3, #3
 800501c:	d133      	bne.n	8005086 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501e:	4b79      	ldr	r3, [pc, #484]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0e4      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800502e:	f000 fa0f 	bl	8005450 <RCC_GetSysClockFreqFromPLLSource>
 8005032:	4603      	mov	r3, r0
 8005034:	4a74      	ldr	r2, [pc, #464]	; (8005208 <HAL_RCC_ClockConfig+0x248>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d955      	bls.n	80050e6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800503a:	4b72      	ldr	r3, [pc, #456]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10a      	bne.n	800505c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005046:	4b6f      	ldr	r3, [pc, #444]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504e:	4a6d      	ldr	r2, [pc, #436]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005054:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	e044      	b.n	80050e6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d03e      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x126>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d13a      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005070:	4b64      	ldr	r3, [pc, #400]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005078:	4a62      	ldr	r2, [pc, #392]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005080:	2380      	movs	r3, #128	; 0x80
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e02f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800508e:	4b5d      	ldr	r3, [pc, #372]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0ac      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050a6:	4b57      	ldr	r3, [pc, #348]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e0a0      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b6:	4b53      	ldr	r3, [pc, #332]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e098      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80050c6:	f000 f8a7 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4a4e      	ldr	r2, [pc, #312]	; (8005208 <HAL_RCC_ClockConfig+0x248>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d909      	bls.n	80050e6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050d2:	4b4c      	ldr	r3, [pc, #304]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050da:	4a4a      	ldr	r2, [pc, #296]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050e6:	4b47      	ldr	r3, [pc, #284]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f023 0203 	bic.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4944      	ldr	r1, [pc, #272]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f8:	f7fc fab0 	bl	800165c <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005100:	f7fc faac 	bl	800165c <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e070      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	4b3b      	ldr	r3, [pc, #236]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 020c 	and.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	429a      	cmp	r2, r3
 8005126:	d1eb      	bne.n	8005100 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005134:	4b33      	ldr	r3, [pc, #204]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4930      	ldr	r1, [pc, #192]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
 8005146:	e008      	b.n	800515a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d105      	bne.n	800515a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800514e:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	4a2c      	ldr	r2, [pc, #176]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005154:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005158:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800515a:	4b29      	ldr	r3, [pc, #164]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d210      	bcs.n	800518a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005168:	4b25      	ldr	r3, [pc, #148]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 020f 	bic.w	r2, r3, #15
 8005170:	4923      	ldr	r1, [pc, #140]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005178:	4b21      	ldr	r3, [pc, #132]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d001      	beq.n	800518a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e036      	b.n	80051f8 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005196:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	4918      	ldr	r1, [pc, #96]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d009      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b4:	4b13      	ldr	r3, [pc, #76]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4910      	ldr	r1, [pc, #64]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051c8:	f000 f826 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80051cc:	4602      	mov	r2, r0
 80051ce:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	091b      	lsrs	r3, r3, #4
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	490c      	ldr	r1, [pc, #48]	; (800520c <HAL_RCC_ClockConfig+0x24c>)
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
 80051e4:	4a0a      	ldr	r2, [pc, #40]	; (8005210 <HAL_RCC_ClockConfig+0x250>)
 80051e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <HAL_RCC_ClockConfig+0x254>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fc f9e5 	bl	80015bc <HAL_InitTick>
 80051f2:	4603      	mov	r3, r0
 80051f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40022000 	.word	0x40022000
 8005204:	40021000 	.word	0x40021000
 8005208:	04c4b400 	.word	0x04c4b400
 800520c:	0800e40c 	.word	0x0800e40c
 8005210:	20000000 	.word	0x20000000
 8005214:	20000004 	.word	0x20000004

08005218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005226:	4b3e      	ldr	r3, [pc, #248]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005230:	4b3b      	ldr	r3, [pc, #236]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x34>
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b0c      	cmp	r3, #12
 8005244:	d121      	bne.n	800528a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d11e      	bne.n	800528a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800524c:	4b34      	ldr	r3, [pc, #208]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d107      	bne.n	8005268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005258:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 800525a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e005      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005268:	4b2d      	ldr	r3, [pc, #180]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005274:	4a2b      	ldr	r2, [pc, #172]	; (8005324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10d      	bne.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005288:	e00a      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d102      	bne.n	8005296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005290:	4b25      	ldr	r3, [pc, #148]	; (8005328 <HAL_RCC_GetSysClockFreq+0x110>)
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	e004      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800529c:	4b22      	ldr	r3, [pc, #136]	; (8005328 <HAL_RCC_GetSysClockFreq+0x110>)
 800529e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d134      	bne.n	8005310 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052a6:	4b1e      	ldr	r3, [pc, #120]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d003      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0xa6>
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d003      	beq.n	80052c4 <HAL_RCC_GetSysClockFreq+0xac>
 80052bc:	e005      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052be:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c0:	617b      	str	r3, [r7, #20]
      break;
 80052c2:	e005      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052c4:	4b18      	ldr	r3, [pc, #96]	; (8005328 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c6:	617b      	str	r3, [r7, #20]
      break;
 80052c8:	e002      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	617b      	str	r3, [r7, #20]
      break;
 80052ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d0:	4b13      	ldr	r3, [pc, #76]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	3301      	adds	r3, #1
 80052dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052de:	4b10      	ldr	r3, [pc, #64]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	fb02 f203 	mul.w	r2, r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	0e5b      	lsrs	r3, r3, #25
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	3301      	adds	r3, #1
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	fbb2 f3f3 	udiv	r3, r2, r3
 800530e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005310:	69bb      	ldr	r3, [r7, #24]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3724      	adds	r7, #36	; 0x24
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	0800e424 	.word	0x0800e424
 8005328:	00f42400 	.word	0x00f42400

0800532c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_RCC_GetHCLKFreq+0x14>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000000 	.word	0x20000000

08005344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005348:	f7ff fff0 	bl	800532c <HAL_RCC_GetHCLKFreq>
 800534c:	4602      	mov	r2, r0
 800534e:	4b06      	ldr	r3, [pc, #24]	; (8005368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	4904      	ldr	r1, [pc, #16]	; (800536c <HAL_RCC_GetPCLK1Freq+0x28>)
 800535a:	5ccb      	ldrb	r3, [r1, r3]
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005364:	4618      	mov	r0, r3
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40021000 	.word	0x40021000
 800536c:	0800e41c 	.word	0x0800e41c

08005370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005374:	f7ff ffda 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005378:	4602      	mov	r2, r0
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	0adb      	lsrs	r3, r3, #11
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	4904      	ldr	r1, [pc, #16]	; (8005398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005386:	5ccb      	ldrb	r3, [r1, r3]
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40021000 	.word	0x40021000
 8005398:	0800e41c 	.word	0x0800e41c

0800539c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053a8:	4b27      	ldr	r3, [pc, #156]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053b4:	f7ff f8fa 	bl	80045ac <HAL_PWREx_GetVoltageRange>
 80053b8:	6178      	str	r0, [r7, #20]
 80053ba:	e014      	b.n	80053e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053bc:	4b22      	ldr	r3, [pc, #136]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c0:	4a21      	ldr	r2, [pc, #132]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c6:	6593      	str	r3, [r2, #88]	; 0x58
 80053c8:	4b1f      	ldr	r3, [pc, #124]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053d4:	f7ff f8ea 	bl	80045ac <HAL_PWREx_GetVoltageRange>
 80053d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053da:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053de:	4a1a      	ldr	r2, [pc, #104]	; (8005448 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ec:	d10b      	bne.n	8005406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b80      	cmp	r3, #128	; 0x80
 80053f2:	d913      	bls.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2ba0      	cmp	r3, #160	; 0xa0
 80053f8:	d902      	bls.n	8005400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053fa:	2302      	movs	r3, #2
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	e00d      	b.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005400:	2301      	movs	r3, #1
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	e00a      	b.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b7f      	cmp	r3, #127	; 0x7f
 800540a:	d902      	bls.n	8005412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800540c:	2302      	movs	r3, #2
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	e004      	b.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b70      	cmp	r3, #112	; 0x70
 8005416:	d101      	bne.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005418:	2301      	movs	r3, #1
 800541a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f023 020f 	bic.w	r2, r3, #15
 8005424:	4909      	ldr	r1, [pc, #36]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	429a      	cmp	r2, r3
 8005438:	d001      	beq.n	800543e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	40022000 	.word	0x40022000

08005450 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800545a:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b01      	cmp	r3, #1
 8005464:	d118      	bne.n	8005498 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005466:	4b2a      	ldr	r3, [pc, #168]	; (8005510 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d107      	bne.n	8005482 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005472:	4b27      	ldr	r3, [pc, #156]	; (8005510 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005478:	0a1b      	lsrs	r3, r3, #8
 800547a:	f003 030f 	and.w	r3, r3, #15
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e005      	b.n	800548e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005482:	4b23      	ldr	r3, [pc, #140]	; (8005510 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800548e:	4a21      	ldr	r2, [pc, #132]	; (8005514 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005496:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d003      	beq.n	80054b0 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d003      	beq.n	80054b6 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80054ae:	e005      	b.n	80054bc <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80054b0:	4b19      	ldr	r3, [pc, #100]	; (8005518 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80054b2:	613b      	str	r3, [r7, #16]
    break;
 80054b4:	e005      	b.n	80054c2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80054b6:	4b18      	ldr	r3, [pc, #96]	; (8005518 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80054b8:	613b      	str	r3, [r7, #16]
    break;
 80054ba:	e002      	b.n	80054c2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	613b      	str	r3, [r7, #16]
    break;
 80054c0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054c2:	4b13      	ldr	r3, [pc, #76]	; (8005510 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	091b      	lsrs	r3, r3, #4
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	3301      	adds	r3, #1
 80054ce:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80054d0:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	0a1b      	lsrs	r3, r3, #8
 80054d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	fb02 f203 	mul.w	r2, r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	0e5b      	lsrs	r3, r3, #25
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	3301      	adds	r3, #1
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005502:	683b      	ldr	r3, [r7, #0]
}
 8005504:	4618      	mov	r0, r3
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40021000 	.word	0x40021000
 8005514:	0800e424 	.word	0x0800e424
 8005518:	00f42400 	.word	0x00f42400

0800551c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005524:	2300      	movs	r3, #0
 8005526:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005528:	2300      	movs	r3, #0
 800552a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005534:	2b00      	cmp	r3, #0
 8005536:	d040      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d02a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005540:	2b80      	cmp	r3, #128	; 0x80
 8005542:	d825      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005544:	2b60      	cmp	r3, #96	; 0x60
 8005546:	d026      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005548:	2b60      	cmp	r3, #96	; 0x60
 800554a:	d821      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800554c:	2b40      	cmp	r3, #64	; 0x40
 800554e:	d006      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d81d      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d009      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005558:	2b20      	cmp	r3, #32
 800555a:	d010      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800555c:	e018      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800555e:	4b89      	ldr	r3, [pc, #548]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	4a88      	ldr	r2, [pc, #544]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005568:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800556a:	e015      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3304      	adds	r3, #4
 8005570:	2100      	movs	r1, #0
 8005572:	4618      	mov	r0, r3
 8005574:	f001 fa7e 	bl	8006a74 <RCCEx_PLLSAI1_Config>
 8005578:	4603      	mov	r3, r0
 800557a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800557c:	e00c      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3320      	adds	r3, #32
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f001 fb69 	bl	8006c5c <RCCEx_PLLSAI2_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800558e:	e003      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	74fb      	strb	r3, [r7, #19]
      break;
 8005594:	e000      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10b      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800559e:	4b79      	ldr	r3, [pc, #484]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055a4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ac:	4975      	ldr	r1, [pc, #468]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80055b4:	e001      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b6:	7cfb      	ldrb	r3, [r7, #19]
 80055b8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d047      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ce:	d030      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80055d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d4:	d82a      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80055d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055da:	d02a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80055dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055e0:	d824      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80055e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e6:	d008      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80055e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ec:	d81e      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80055f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055f6:	d010      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80055f8:	e018      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055fa:	4b62      	ldr	r3, [pc, #392]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	4a61      	ldr	r2, [pc, #388]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005604:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005606:	e015      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f001 fa30 	bl	8006a74 <RCCEx_PLLSAI1_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005618:	e00c      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3320      	adds	r3, #32
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f001 fb1b 	bl	8006c5c <RCCEx_PLLSAI2_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800562a:	e003      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	74fb      	strb	r3, [r7, #19]
      break;
 8005630:	e000      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005634:	7cfb      	ldrb	r3, [r7, #19]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10b      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800563a:	4b52      	ldr	r3, [pc, #328]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800563c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005648:	494e      	ldr	r1, [pc, #312]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005650:	e001      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005652:	7cfb      	ldrb	r3, [r7, #19]
 8005654:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 809f 	beq.w	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005664:	2300      	movs	r3, #0
 8005666:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005668:	4b46      	ldr	r3, [pc, #280]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005678:	2300      	movs	r3, #0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00d      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800567e:	4b41      	ldr	r3, [pc, #260]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005682:	4a40      	ldr	r2, [pc, #256]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005688:	6593      	str	r3, [r2, #88]	; 0x58
 800568a:	4b3e      	ldr	r3, [pc, #248]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800568c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005692:	60bb      	str	r3, [r7, #8]
 8005694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005696:	2301      	movs	r3, #1
 8005698:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800569a:	4b3b      	ldr	r3, [pc, #236]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a3a      	ldr	r2, [pc, #232]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056a6:	f7fb ffd9 	bl	800165c <HAL_GetTick>
 80056aa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056ac:	e009      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ae:	f7fb ffd5 	bl	800165c <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d902      	bls.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	74fb      	strb	r3, [r7, #19]
        break;
 80056c0:	e005      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056c2:	4b31      	ldr	r3, [pc, #196]	; (8005788 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0ef      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80056ce:	7cfb      	ldrb	r3, [r7, #19]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d15b      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056d4:	4b2b      	ldr	r3, [pc, #172]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056de:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01f      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d019      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056f2:	4b24      	ldr	r3, [pc, #144]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056fe:	4b21      	ldr	r3, [pc, #132]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800570e:	4b1d      	ldr	r3, [pc, #116]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	4a1b      	ldr	r2, [pc, #108]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800571e:	4a19      	ldr	r2, [pc, #100]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d016      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fb ff94 	bl	800165c <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005736:	e00b      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005738:	f7fb ff90 	bl	800165c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	; 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d902      	bls.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	74fb      	strb	r3, [r7, #19]
            break;
 800574e:	e006      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005750:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0ec      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800575e:	7cfb      	ldrb	r3, [r7, #19]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10c      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005764:	4b07      	ldr	r3, [pc, #28]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005774:	4903      	ldr	r1, [pc, #12]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800577c:	e008      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800577e:	7cfb      	ldrb	r3, [r7, #19]
 8005780:	74bb      	strb	r3, [r7, #18]
 8005782:	e005      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005784:	40021000 	.word	0x40021000
 8005788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800578c:	7cfb      	ldrb	r3, [r7, #19]
 800578e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005790:	7c7b      	ldrb	r3, [r7, #17]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d105      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005796:	4ba0      	ldr	r3, [pc, #640]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579a:	4a9f      	ldr	r2, [pc, #636]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800579c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ae:	4b9a      	ldr	r3, [pc, #616]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b4:	f023 0203 	bic.w	r2, r3, #3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	4996      	ldr	r1, [pc, #600]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057d0:	4b91      	ldr	r3, [pc, #580]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	f023 020c 	bic.w	r2, r3, #12
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	498e      	ldr	r1, [pc, #568]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057f2:	4b89      	ldr	r3, [pc, #548]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005800:	4985      	ldr	r1, [pc, #532]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005814:	4b80      	ldr	r3, [pc, #512]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005822:	497d      	ldr	r1, [pc, #500]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005836:	4b78      	ldr	r3, [pc, #480]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005844:	4974      	ldr	r1, [pc, #464]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005858:	4b6f      	ldr	r3, [pc, #444]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005866:	496c      	ldr	r1, [pc, #432]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800587a:	4b67      	ldr	r3, [pc, #412]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005880:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005888:	4963      	ldr	r1, [pc, #396]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800589c:	4b5e      	ldr	r3, [pc, #376]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058aa:	495b      	ldr	r1, [pc, #364]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058be:	4b56      	ldr	r3, [pc, #344]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	4952      	ldr	r1, [pc, #328]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058e0:	4b4d      	ldr	r3, [pc, #308]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	494a      	ldr	r1, [pc, #296]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005902:	4b45      	ldr	r3, [pc, #276]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005910:	4941      	ldr	r1, [pc, #260]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005924:	4b3c      	ldr	r3, [pc, #240]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800592a:	f023 0203 	bic.w	r2, r3, #3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005932:	4939      	ldr	r1, [pc, #228]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d028      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005946:	4b34      	ldr	r3, [pc, #208]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005954:	4930      	ldr	r1, [pc, #192]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005964:	d106      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005966:	4b2c      	ldr	r3, [pc, #176]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	4a2b      	ldr	r2, [pc, #172]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800596c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005970:	60d3      	str	r3, [r2, #12]
 8005972:	e011      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800597c:	d10c      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3304      	adds	r3, #4
 8005982:	2101      	movs	r1, #1
 8005984:	4618      	mov	r0, r3
 8005986:	f001 f875 	bl	8006a74 <RCCEx_PLLSAI1_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800598e:	7cfb      	ldrb	r3, [r7, #19]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005994:	7cfb      	ldrb	r3, [r7, #19]
 8005996:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d04d      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059ac:	d108      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80059ae:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059b4:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80059be:	e012      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80059c0:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059c6:	4a14      	ldr	r2, [pc, #80]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80059d0:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059de:	490e      	ldr	r1, [pc, #56]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ee:	d106      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059f0:	4b09      	ldr	r3, [pc, #36]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4a08      	ldr	r2, [pc, #32]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059fa:	60d3      	str	r3, [r2, #12]
 80059fc:	e020      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a06:	d109      	bne.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a08:	4b03      	ldr	r3, [pc, #12]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4a02      	ldr	r2, [pc, #8]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a12:	60d3      	str	r3, [r2, #12]
 8005a14:	e014      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005a16:	bf00      	nop
 8005a18:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a24:	d10c      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 f821 	bl	8006a74 <RCCEx_PLLSAI1_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005a3c:	7cfb      	ldrb	r3, [r7, #19]
 8005a3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d028      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a4c:	4b7a      	ldr	r3, [pc, #488]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a5a:	4977      	ldr	r1, [pc, #476]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a6a:	d106      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a6c:	4b72      	ldr	r3, [pc, #456]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4a71      	ldr	r2, [pc, #452]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a76:	60d3      	str	r3, [r2, #12]
 8005a78:	e011      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a82:	d10c      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3304      	adds	r3, #4
 8005a88:	2101      	movs	r1, #1
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fff2 	bl	8006a74 <RCCEx_PLLSAI1_Config>
 8005a90:	4603      	mov	r3, r0
 8005a92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a94:	7cfb      	ldrb	r3, [r7, #19]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005a9a:	7cfb      	ldrb	r3, [r7, #19]
 8005a9c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01e      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005aaa:	4b63      	ldr	r3, [pc, #396]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aba:	495f      	ldr	r1, [pc, #380]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005acc:	d10c      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	2102      	movs	r1, #2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 ffcd 	bl	8006a74 <RCCEx_PLLSAI1_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ade:	7cfb      	ldrb	r3, [r7, #19]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005ae4:	7cfb      	ldrb	r3, [r7, #19]
 8005ae6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005af4:	4b50      	ldr	r3, [pc, #320]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005afa:	f023 0204 	bic.w	r2, r3, #4
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b04:	494c      	ldr	r1, [pc, #304]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005b18:	4b47      	ldr	r3, [pc, #284]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b1e:	f023 0218 	bic.w	r2, r3, #24
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	4943      	ldr	r1, [pc, #268]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d035      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b3c:	4b3e      	ldr	r3, [pc, #248]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a3d      	ldr	r2, [pc, #244]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b48:	f7fb fd88 	bl	800165c <HAL_GetTick>
 8005b4c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b4e:	e009      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b50:	f7fb fd84 	bl	800165c <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d902      	bls.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	74fb      	strb	r3, [r7, #19]
        break;
 8005b62:	e005      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b64:	4b34      	ldr	r3, [pc, #208]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1ef      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005b70:	7cfb      	ldrb	r3, [r7, #19]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d113      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005b76:	4b30      	ldr	r3, [pc, #192]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b86:	492c      	ldr	r1, [pc, #176]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3320      	adds	r3, #32
 8005b92:	2102      	movs	r1, #2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 f861 	bl	8006c5c <RCCEx_PLLSAI2_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005b9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01e      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005bb4:	4b20      	ldr	r3, [pc, #128]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc4:	491c      	ldr	r1, [pc, #112]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd6:	d10c      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3320      	adds	r3, #32
 8005bdc:	2101      	movs	r1, #1
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 f83c 	bl	8006c5c <RCCEx_PLLSAI2_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005be8:	7cfb      	ldrb	r3, [r7, #19]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005bee:	7cfb      	ldrb	r3, [r7, #19]
 8005bf0:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d017      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c0e:	490a      	ldr	r1, [pc, #40]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c20:	d105      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c22:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	4a04      	ldr	r2, [pc, #16]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c2c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40021000 	.word	0x40021000

08005c3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c4e:	d13e      	bne.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c50:	4bbd      	ldr	r3, [pc, #756]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5a:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c62:	d028      	beq.n	8005cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6a:	f200 86ec 	bhi.w	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c74:	d005      	beq.n	8005c82 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c7c:	d00e      	beq.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005c7e:	f000 bee2 	b.w	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005c82:	4bb1      	ldr	r3, [pc, #708]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	f040 86e3 	bne.w	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
        frequency = LSE_VALUE;
 8005c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c96:	61fb      	str	r3, [r7, #28]
      break;
 8005c98:	f000 bede 	b.w	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005c9c:	4baa      	ldr	r3, [pc, #680]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	f040 86d8 	bne.w	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
          frequency = LSI_VALUE;
 8005cac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005cb0:	61fb      	str	r3, [r7, #28]
      break;
 8005cb2:	f000 bed3 	b.w	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cb6:	4ba4      	ldr	r3, [pc, #656]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cc2:	f040 86cd 	bne.w	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
        frequency = HSE_VALUE / 32U;
 8005cc6:	4ba1      	ldr	r3, [pc, #644]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8005cc8:	61fb      	str	r3, [r7, #28]
      break;
 8005cca:	f000 bec9 	b.w	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cce:	4b9e      	ldr	r3, [pc, #632]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d036      	beq.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d840      	bhi.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d003      	beq.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d020      	beq.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005cf0:	e039      	b.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005cf2:	4b95      	ldr	r3, [pc, #596]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d116      	bne.n	8005d2c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005cfe:	4b92      	ldr	r3, [pc, #584]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005d0a:	4b8f      	ldr	r3, [pc, #572]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	091b      	lsrs	r3, r3, #4
 8005d10:	f003 030f 	and.w	r3, r3, #15
 8005d14:	e005      	b.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005d16:	4b8c      	ldr	r3, [pc, #560]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	4a8b      	ldr	r2, [pc, #556]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8005d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005d2a:	e01f      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61bb      	str	r3, [r7, #24]
      break;
 8005d30:	e01c      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d32:	4b85      	ldr	r3, [pc, #532]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3e:	d102      	bne.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005d40:	4b84      	ldr	r3, [pc, #528]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8005d42:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005d44:	e012      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
      break;
 8005d4a:	e00f      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d4c:	4b7e      	ldr	r3, [pc, #504]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d58:	d102      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005d5a:	4b7e      	ldr	r3, [pc, #504]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8005d5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005d5e:	e005      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61bb      	str	r3, [r7, #24]
      break;
 8005d64:	e002      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
      break;
 8005d6a:	bf00      	nop
    }

    switch(PeriphClk)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d72:	f000 85fe 	beq.w	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d7c:	f200 8672 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d86:	f000 8466 	beq.w	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d90:	f200 8668 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d9a:	f000 852d 	beq.w	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da4:	f200 865e 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005dae:	f000 8183 	beq.w	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005db8:	f200 8654 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dc2:	f000 80c9 	beq.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dcc:	f200 864a 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd6:	f000 842d 	beq.w	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de0:	f200 8640 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dea:	f000 83e1 	beq.w	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005df4:	f200 8636 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dfe:	f000 80ab 	beq.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e08:	f200 862c 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	f000 8091 	beq.w	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1c:	f200 8622 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e26:	d07f      	beq.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2e:	f200 8619 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e38:	f000 8551 	beq.w	80068de <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e42:	f200 860f 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4c:	f000 84fd 	beq.w	800684a <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e56:	f200 8605 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e60:	f000 849e 	beq.w	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6a:	f200 85fb 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b80      	cmp	r3, #128	; 0x80
 8005e72:	f000 8463 	beq.w	800673c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b80      	cmp	r3, #128	; 0x80
 8005e7a:	f200 85f3 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	d84b      	bhi.n	8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 85ec 	beq.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	2b1f      	cmp	r3, #31
 8005e92:	f200 85e7 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e96:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	080062ab 	.word	0x080062ab
 8005ea0:	0800631b 	.word	0x0800631b
 8005ea4:	08006a65 	.word	0x08006a65
 8005ea8:	080063af 	.word	0x080063af
 8005eac:	08006a65 	.word	0x08006a65
 8005eb0:	08006a65 	.word	0x08006a65
 8005eb4:	08006a65 	.word	0x08006a65
 8005eb8:	08006427 	.word	0x08006427
 8005ebc:	08006a65 	.word	0x08006a65
 8005ec0:	08006a65 	.word	0x08006a65
 8005ec4:	08006a65 	.word	0x08006a65
 8005ec8:	08006a65 	.word	0x08006a65
 8005ecc:	08006a65 	.word	0x08006a65
 8005ed0:	08006a65 	.word	0x08006a65
 8005ed4:	08006a65 	.word	0x08006a65
 8005ed8:	0800649f 	.word	0x0800649f
 8005edc:	08006a65 	.word	0x08006a65
 8005ee0:	08006a65 	.word	0x08006a65
 8005ee4:	08006a65 	.word	0x08006a65
 8005ee8:	08006a65 	.word	0x08006a65
 8005eec:	08006a65 	.word	0x08006a65
 8005ef0:	08006a65 	.word	0x08006a65
 8005ef4:	08006a65 	.word	0x08006a65
 8005ef8:	08006a65 	.word	0x08006a65
 8005efc:	08006a65 	.word	0x08006a65
 8005f00:	08006a65 	.word	0x08006a65
 8005f04:	08006a65 	.word	0x08006a65
 8005f08:	08006a65 	.word	0x08006a65
 8005f0c:	08006a65 	.word	0x08006a65
 8005f10:	08006a65 	.word	0x08006a65
 8005f14:	08006a65 	.word	0x08006a65
 8005f18:	0800652f 	.word	0x0800652f
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b40      	cmp	r3, #64	; 0x40
 8005f20:	f000 83e0 	beq.w	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005f24:	f000 bd9e 	b.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005f28:	69b9      	ldr	r1, [r7, #24]
 8005f2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f2e:	f000 ff89 	bl	8006e44 <RCCEx_GetSAIxPeriphCLKFreq>
 8005f32:	61f8      	str	r0, [r7, #28]
      break;
 8005f34:	f000 bd99 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005f38:	69b9      	ldr	r1, [r7, #24]
 8005f3a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f3e:	f000 ff81 	bl	8006e44 <RCCEx_GetSAIxPeriphCLKFreq>
 8005f42:	61f8      	str	r0, [r7, #28]
      break;
 8005f44:	f000 bd91 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	0007a120 	.word	0x0007a120
 8005f50:	0800e424 	.word	0x0800e424
 8005f54:	00f42400 	.word	0x00f42400
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005f58:	4bb0      	ldr	r3, [pc, #704]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f5e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f6a:	d015      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005f72:	f200 8092 	bhi.w	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f7c:	d029      	beq.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f84:	f200 8089 	bhi.w	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d07b      	beq.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f94:	d04a      	beq.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
          break;
 8005f96:	e080      	b.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005f98:	4ba0      	ldr	r3, [pc, #640]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d17d      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005fa4:	4b9d      	ldr	r3, [pc, #628]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8005fb0:	4b9a      	ldr	r3, [pc, #616]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	091b      	lsrs	r3, r3, #4
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	e005      	b.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 8005fbc:	4b97      	ldr	r3, [pc, #604]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	4a95      	ldr	r2, [pc, #596]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8005fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fce:	61fb      	str	r3, [r7, #28]
          break;
 8005fd0:	e066      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005fd2:	4b92      	ldr	r3, [pc, #584]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fde:	d162      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005fe0:	4b8e      	ldr	r3, [pc, #568]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fec:	d15b      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005fee:	4b8b      	ldr	r3, [pc, #556]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	0a1b      	lsrs	r3, r3, #8
 8005ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ff8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	fb02 f203 	mul.w	r2, r2, r3
 8006002:	4b86      	ldr	r3, [pc, #536]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	3301      	adds	r3, #1
 800600e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006012:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006014:	4b81      	ldr	r3, [pc, #516]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	0d5b      	lsrs	r3, r3, #21
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	3301      	adds	r3, #1
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	fbb2 f3f3 	udiv	r3, r2, r3
 8006028:	61fb      	str	r3, [r7, #28]
          break;
 800602a:	e03c      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800602c:	4b7b      	ldr	r3, [pc, #492]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006038:	d138      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800603a:	4b78      	ldr	r3, [pc, #480]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006046:	d131      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006048:	4b74      	ldr	r3, [pc, #464]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	0a1b      	lsrs	r3, r3, #8
 800604e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006052:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	fb02 f203 	mul.w	r2, r2, r3
 800605c:	4b6f      	ldr	r3, [pc, #444]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	091b      	lsrs	r3, r3, #4
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	3301      	adds	r3, #1
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800606e:	4b6b      	ldr	r3, [pc, #428]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	0d5b      	lsrs	r3, r3, #21
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	3301      	adds	r3, #1
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006082:	61fb      	str	r3, [r7, #28]
          break;
 8006084:	e012      	b.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006086:	4b65      	ldr	r3, [pc, #404]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d10e      	bne.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
            frequency = HSI48_VALUE;
 8006094:	4b63      	ldr	r3, [pc, #396]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8006096:	61fb      	str	r3, [r7, #28]
          break;
 8006098:	e00b      	b.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
          break;
 800609a:	bf00      	nop
 800609c:	f000 bce5 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80060a0:	bf00      	nop
 80060a2:	f000 bce2 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80060a6:	bf00      	nop
 80060a8:	f000 bcdf 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80060ac:	bf00      	nop
 80060ae:	f000 bcdc 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80060b2:	bf00      	nop
        break;
 80060b4:	f000 bcd9 	b.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80060b8:	4b58      	ldr	r3, [pc, #352]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060c6:	d13d      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80060c8:	4b54      	ldr	r3, [pc, #336]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060d4:	f040 84c8 	bne.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80060d8:	4b50      	ldr	r3, [pc, #320]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060e4:	f040 84c0 	bne.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060e8:	4b4c      	ldr	r3, [pc, #304]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	0a1b      	lsrs	r3, r3, #8
 80060ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	fb02 f203 	mul.w	r2, r2, r3
 80060fc:	4b47      	ldr	r3, [pc, #284]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	3301      	adds	r3, #1
 8006108:	fbb2 f3f3 	udiv	r3, r2, r3
 800610c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800610e:	4b43      	ldr	r3, [pc, #268]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	0edb      	lsrs	r3, r3, #27
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006120:	4b3e      	ldr	r3, [pc, #248]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
                pllp = 17U;
 800612c:	2311      	movs	r3, #17
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	e001      	b.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 7U;
 8006132:	2307      	movs	r3, #7
 8006134:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	fbb2 f3f3 	udiv	r3, r2, r3
 800613e:	61fb      	str	r3, [r7, #28]
      break;
 8006140:	f000 bc92 	b.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006144:	4b35      	ldr	r3, [pc, #212]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006156:	d016      	beq.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800615e:	f200 809a 	bhi.w	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006168:	d02b      	beq.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006170:	f200 8091 	bhi.w	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 8083 	beq.w	8006282 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006182:	d051      	beq.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 8006184:	e087      	b.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006186:	4b25      	ldr	r3, [pc, #148]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	f040 8083 	bne.w	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006194:	4b21      	ldr	r3, [pc, #132]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x570>
 80061a0:	4b1e      	ldr	r3, [pc, #120]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	f003 030f 	and.w	r3, r3, #15
 80061aa:	e005      	b.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	4a19      	ldr	r2, [pc, #100]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 80061ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061be:	61fb      	str	r3, [r7, #28]
          break;
 80061c0:	e06b      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80061c2:	4b16      	ldr	r3, [pc, #88]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ce:	d166      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80061d0:	4b12      	ldr	r3, [pc, #72]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061dc:	d15f      	bne.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061de:	4b0f      	ldr	r3, [pc, #60]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	0a1b      	lsrs	r3, r3, #8
 80061e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061e8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	fb02 f203 	mul.w	r2, r2, r3
 80061f2:	4b0a      	ldr	r3, [pc, #40]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	091b      	lsrs	r3, r3, #4
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	3301      	adds	r3, #1
 80061fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006202:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	0d5b      	lsrs	r3, r3, #21
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	3301      	adds	r3, #1
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	fbb2 f3f3 	udiv	r3, r2, r3
 8006218:	61fb      	str	r3, [r7, #28]
          break;
 800621a:	e040      	b.n	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 800621c:	40021000 	.word	0x40021000
 8006220:	0800e424 	.word	0x0800e424
 8006224:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006228:	4bae      	ldr	r3, [pc, #696]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006234:	d135      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006236:	4bab      	ldr	r3, [pc, #684]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800623e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006242:	d12e      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006244:	4ba7      	ldr	r3, [pc, #668]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	0a1b      	lsrs	r3, r3, #8
 800624a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	fb02 f203 	mul.w	r2, r2, r3
 8006258:	4ba2      	ldr	r3, [pc, #648]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	3301      	adds	r3, #1
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800626a:	4b9e      	ldr	r3, [pc, #632]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	0d5b      	lsrs	r3, r3, #21
 8006270:	f003 0303 	and.w	r3, r3, #3
 8006274:	3301      	adds	r3, #1
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	fbb2 f3f3 	udiv	r3, r2, r3
 800627e:	61fb      	str	r3, [r7, #28]
          break;
 8006280:	e00f      	b.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006282:	4b98      	ldr	r3, [pc, #608]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006284:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b02      	cmp	r3, #2
 800628e:	d10a      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
            frequency = HSI48_VALUE;
 8006290:	4b95      	ldr	r3, [pc, #596]	; (80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8006292:	61fb      	str	r3, [r7, #28]
          break;
 8006294:	e007      	b.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
          break;
 8006296:	bf00      	nop
 8006298:	e3e6      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800629a:	bf00      	nop
 800629c:	e3e4      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800629e:	bf00      	nop
 80062a0:	e3e2      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80062a2:	bf00      	nop
 80062a4:	e3e0      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80062a6:	bf00      	nop
      break;
 80062a8:	e3de      	b.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80062aa:	4b8e      	ldr	r3, [pc, #568]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d828      	bhi.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062d5 	.word	0x080062d5
 80062c8:	080062dd 	.word	0x080062dd
 80062cc:	080062e5 	.word	0x080062e5
 80062d0:	080062f9 	.word	0x080062f9
          frequency = HAL_RCC_GetPCLK2Freq();
 80062d4:	f7ff f84c 	bl	8005370 <HAL_RCC_GetPCLK2Freq>
 80062d8:	61f8      	str	r0, [r7, #28]
          break;
 80062da:	e01d      	b.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetSysClockFreq();
 80062dc:	f7fe ff9c 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80062e0:	61f8      	str	r0, [r7, #28]
          break;
 80062e2:	e019      	b.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062e4:	4b7f      	ldr	r3, [pc, #508]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f0:	d10f      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
            frequency = HSI_VALUE;
 80062f2:	4b7e      	ldr	r3, [pc, #504]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80062f4:	61fb      	str	r3, [r7, #28]
          break;
 80062f6:	e00c      	b.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062f8:	4b7a      	ldr	r3, [pc, #488]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b02      	cmp	r3, #2
 8006304:	d107      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = LSE_VALUE;
 8006306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630a:	61fb      	str	r3, [r7, #28]
          break;
 800630c:	e003      	b.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          break;
 800630e:	bf00      	nop
 8006310:	e3ab      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006312:	bf00      	nop
 8006314:	e3a9      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006316:	bf00      	nop
        break;
 8006318:	e3a7      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800631a:	4b72      	ldr	r3, [pc, #456]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006320:	f003 030c 	and.w	r3, r3, #12
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b0c      	cmp	r3, #12
 800632a:	d83a      	bhi.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 800632c:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 800632e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006332:	bf00      	nop
 8006334:	08006369 	.word	0x08006369
 8006338:	080063a3 	.word	0x080063a3
 800633c:	080063a3 	.word	0x080063a3
 8006340:	080063a3 	.word	0x080063a3
 8006344:	08006371 	.word	0x08006371
 8006348:	080063a3 	.word	0x080063a3
 800634c:	080063a3 	.word	0x080063a3
 8006350:	080063a3 	.word	0x080063a3
 8006354:	08006379 	.word	0x08006379
 8006358:	080063a3 	.word	0x080063a3
 800635c:	080063a3 	.word	0x080063a3
 8006360:	080063a3 	.word	0x080063a3
 8006364:	0800638d 	.word	0x0800638d
          frequency = HAL_RCC_GetPCLK1Freq();
 8006368:	f7fe ffec 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800636c:	61f8      	str	r0, [r7, #28]
          break;
 800636e:	e01d      	b.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          frequency = HAL_RCC_GetSysClockFreq();
 8006370:	f7fe ff52 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8006374:	61f8      	str	r0, [r7, #28]
          break;
 8006376:	e019      	b.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006378:	4b5a      	ldr	r3, [pc, #360]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006384:	d10f      	bne.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
            frequency = HSI_VALUE;
 8006386:	4b59      	ldr	r3, [pc, #356]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8006388:	61fb      	str	r3, [r7, #28]
          break;
 800638a:	e00c      	b.n	80063a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800638c:	4b55      	ldr	r3, [pc, #340]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b02      	cmp	r3, #2
 8006398:	d107      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = LSE_VALUE;
 800639a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800639e:	61fb      	str	r3, [r7, #28]
          break;
 80063a0:	e003      	b.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          break;
 80063a2:	bf00      	nop
 80063a4:	e361      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063a6:	bf00      	nop
 80063a8:	e35f      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063aa:	bf00      	nop
        break;
 80063ac:	e35d      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80063ae:	4b4d      	ldr	r3, [pc, #308]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b30      	cmp	r3, #48	; 0x30
 80063be:	d021      	beq.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b30      	cmp	r3, #48	; 0x30
 80063c4:	d829      	bhi.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d011      	beq.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d823      	bhi.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d004      	beq.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          break;
 80063de:	e01c      	b.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063e0:	f7fe ffb0 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 80063e4:	61f8      	str	r0, [r7, #28]
          break;
 80063e6:	e01d      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80063e8:	f7fe ff16 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80063ec:	61f8      	str	r0, [r7, #28]
          break;
 80063ee:	e019      	b.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063f0:	4b3c      	ldr	r3, [pc, #240]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fc:	d10f      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 80063fe:	4b3b      	ldr	r3, [pc, #236]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8006400:	61fb      	str	r3, [r7, #28]
          break;
 8006402:	e00c      	b.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006404:	4b37      	ldr	r3, [pc, #220]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b02      	cmp	r3, #2
 8006410:	d107      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = LSE_VALUE;
 8006412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006416:	61fb      	str	r3, [r7, #28]
          break;
 8006418:	e003      	b.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          break;
 800641a:	bf00      	nop
 800641c:	e325      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800641e:	bf00      	nop
 8006420:	e323      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006422:	bf00      	nop
        break;
 8006424:	e321      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006426:	4b2f      	ldr	r3, [pc, #188]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2bc0      	cmp	r3, #192	; 0xc0
 8006436:	d021      	beq.n	800647c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2bc0      	cmp	r3, #192	; 0xc0
 800643c:	d829      	bhi.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d011      	beq.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b80      	cmp	r3, #128	; 0x80
 8006448:	d823      	bhi.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d004      	beq.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          break;
 8006456:	e01c      	b.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006458:	f7fe ff74 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800645c:	61f8      	str	r0, [r7, #28]
          break;
 800645e:	e01d      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          frequency = HAL_RCC_GetSysClockFreq();
 8006460:	f7fe feda 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8006464:	61f8      	str	r0, [r7, #28]
          break;
 8006466:	e019      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006468:	4b1e      	ldr	r3, [pc, #120]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006474:	d10f      	bne.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            frequency = HSI_VALUE;
 8006476:	4b1d      	ldr	r3, [pc, #116]	; (80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8006478:	61fb      	str	r3, [r7, #28]
          break;
 800647a:	e00c      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800647c:	4b19      	ldr	r3, [pc, #100]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d107      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = LSE_VALUE;
 800648a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648e:	61fb      	str	r3, [r7, #28]
          break;
 8006490:	e003      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          break;
 8006492:	bf00      	nop
 8006494:	e2e9      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006496:	bf00      	nop
 8006498:	e2e7      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800649a:	bf00      	nop
        break;
 800649c:	e2e5      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800649e:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064b0:	d02c      	beq.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064b8:	d833      	bhi.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c0:	d01a      	beq.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c8:	d82b      	bhi.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d6:	d00b      	beq.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          break;
 80064d8:	e023      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064da:	f7fe ff33 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 80064de:	61f8      	str	r0, [r7, #28]
          break;
 80064e0:	e024      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 80064e2:	bf00      	nop
 80064e4:	40021000 	.word	0x40021000
 80064e8:	02dc6c00 	.word	0x02dc6c00
 80064ec:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetSysClockFreq();
 80064f0:	f7fe fe92 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80064f4:	61f8      	str	r0, [r7, #28]
          break;
 80064f6:	e019      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064f8:	4ba6      	ldr	r3, [pc, #664]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006504:	d10f      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 8006506:	4ba4      	ldr	r3, [pc, #656]	; (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006508:	61fb      	str	r3, [r7, #28]
          break;
 800650a:	e00c      	b.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800650c:	4ba1      	ldr	r3, [pc, #644]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800650e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d107      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = LSE_VALUE;
 800651a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651e:	61fb      	str	r3, [r7, #28]
          break;
 8006520:	e003      	b.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8006522:	bf00      	nop
 8006524:	e2a1      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006526:	bf00      	nop
 8006528:	e29f      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800652a:	bf00      	nop
        break;
 800652c:	e29d      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800652e:	4b99      	ldr	r3, [pc, #612]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006540:	d025      	beq.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006548:	d82c      	bhi.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006550:	d013      	beq.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006558:	d824      	bhi.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d004      	beq.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006566:	d004      	beq.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          break;
 8006568:	e01c      	b.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HAL_RCC_GetPCLK1Freq();
 800656a:	f7fe feeb 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800656e:	61f8      	str	r0, [r7, #28]
          break;
 8006570:	e01d      	b.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = HAL_RCC_GetSysClockFreq();
 8006572:	f7fe fe51 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8006576:	61f8      	str	r0, [r7, #28]
          break;
 8006578:	e019      	b.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800657a:	4b86      	ldr	r3, [pc, #536]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006586:	d10f      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            frequency = HSI_VALUE;
 8006588:	4b83      	ldr	r3, [pc, #524]	; (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800658a:	61fb      	str	r3, [r7, #28]
          break;
 800658c:	e00c      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800658e:	4b81      	ldr	r3, [pc, #516]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b02      	cmp	r3, #2
 800659a:	d107      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x970>
            frequency = LSE_VALUE;
 800659c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a0:	61fb      	str	r3, [r7, #28]
          break;
 80065a2:	e003      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          break;
 80065a4:	bf00      	nop
 80065a6:	e260      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80065a8:	bf00      	nop
 80065aa:	e25e      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80065ac:	bf00      	nop
        break;
 80065ae:	e25c      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80065b0:	4b78      	ldr	r3, [pc, #480]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065c2:	d007      	beq.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065ca:	d12f      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80065cc:	f7fe fe24 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80065d0:	61f8      	str	r0, [r7, #28]
          break;
 80065d2:	e02e      	b.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80065d4:	4b6f      	ldr	r3, [pc, #444]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e0:	d126      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80065e2:	4b6c      	ldr	r3, [pc, #432]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d020      	beq.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80065ee:	4b69      	ldr	r3, [pc, #420]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	0a1b      	lsrs	r3, r3, #8
 80065f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065f8:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	fb02 f203 	mul.w	r2, r2, r3
 8006602:	4b64      	ldr	r3, [pc, #400]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	3301      	adds	r3, #1
 800660e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006612:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8006614:	4b5f      	ldr	r3, [pc, #380]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	0e5b      	lsrs	r3, r3, #25
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	3301      	adds	r3, #1
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	fbb2 f3f3 	udiv	r3, r2, r3
 8006628:	61fb      	str	r3, [r7, #28]
          break;
 800662a:	e001      	b.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
          break;
 800662c:	bf00      	nop
 800662e:	e21c      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006630:	bf00      	nop
        break;
 8006632:	e21a      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006634:	4b57      	ldr	r3, [pc, #348]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006646:	f7fe fe93 	bl	8005370 <HAL_RCC_GetPCLK2Freq>
 800664a:	61f8      	str	r0, [r7, #28]
        break;
 800664c:	e20d      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          frequency = HAL_RCC_GetSysClockFreq();
 800664e:	f7fe fde3 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8006652:	61f8      	str	r0, [r7, #28]
        break;
 8006654:	e209      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006656:	4b4f      	ldr	r3, [pc, #316]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006658:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800665c:	f003 0318 	and.w	r3, r3, #24
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b10      	cmp	r3, #16
 8006666:	d010      	beq.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b10      	cmp	r3, #16
 800666c:	d834      	bhi.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b08      	cmp	r3, #8
 8006678:	d024      	beq.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
          break;
 800667a:	e02d      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800667c:	69b9      	ldr	r1, [r7, #24]
 800667e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006682:	f000 fbdf 	bl	8006e44 <RCCEx_GetSAIxPeriphCLKFreq>
 8006686:	61f8      	str	r0, [r7, #28]
          break;
 8006688:	e02b      	b.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800668a:	4b42      	ldr	r3, [pc, #264]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b02      	cmp	r3, #2
 8006694:	d122      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006696:	4b3f      	ldr	r3, [pc, #252]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80066a2:	4b3c      	ldr	r3, [pc, #240]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	091b      	lsrs	r3, r3, #4
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	e005      	b.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 80066ae:	4b39      	ldr	r3, [pc, #228]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b4:	0a1b      	lsrs	r3, r3, #8
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	4a38      	ldr	r2, [pc, #224]	; (800679c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 80066bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c0:	61fb      	str	r3, [r7, #28]
          break;
 80066c2:	e00b      	b.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066c4:	4b33      	ldr	r3, [pc, #204]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d0:	d106      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = HSI_VALUE;
 80066d2:	4b31      	ldr	r3, [pc, #196]	; (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80066d4:	61fb      	str	r3, [r7, #28]
          break;
 80066d6:	e003      	b.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          break;
 80066d8:	bf00      	nop
 80066da:	e1c6      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80066dc:	bf00      	nop
 80066de:	e1c4      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80066e0:	bf00      	nop
        break;
 80066e2:	e1c2      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80066e4:	4b2b      	ldr	r3, [pc, #172]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f6:	d013      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066fe:	d819      	bhi.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670c:	d004      	beq.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
          break;
 800670e:	e011      	b.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006710:	f7fe fe18 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8006714:	61f8      	str	r0, [r7, #28]
          break;
 8006716:	e010      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006718:	f7fe fd7e 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 800671c:	61f8      	str	r0, [r7, #28]
          break;
 800671e:	e00c      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006720:	4b1c      	ldr	r3, [pc, #112]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672c:	d104      	bne.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
            frequency = HSI_VALUE;
 800672e:	4b1a      	ldr	r3, [pc, #104]	; (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006730:	61fb      	str	r3, [r7, #28]
          break;
 8006732:	e001      	b.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
          break;
 8006734:	bf00      	nop
 8006736:	e198      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006738:	bf00      	nop
        break;
 800673a:	e196      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800673c:	4b15      	ldr	r3, [pc, #84]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006742:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800674e:	d013      	beq.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006756:	d819      	bhi.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d004      	beq.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006764:	d004      	beq.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8006766:	e011      	b.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006768:	f7fe fdec 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800676c:	61f8      	str	r0, [r7, #28]
          break;
 800676e:	e010      	b.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = HAL_RCC_GetSysClockFreq();
 8006770:	f7fe fd52 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8006774:	61f8      	str	r0, [r7, #28]
          break;
 8006776:	e00c      	b.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006778:	4b06      	ldr	r3, [pc, #24]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006784:	d104      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
            frequency = HSI_VALUE;
 8006786:	4b04      	ldr	r3, [pc, #16]	; (8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006788:	61fb      	str	r3, [r7, #28]
          break;
 800678a:	e001      	b.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
          break;
 800678c:	bf00      	nop
 800678e:	e16c      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006790:	bf00      	nop
        break;
 8006792:	e16a      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006794:	40021000 	.word	0x40021000
 8006798:	00f42400 	.word	0x00f42400
 800679c:	0800e424 	.word	0x0800e424
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80067a0:	4baa      	ldr	r3, [pc, #680]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b2:	d013      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ba:	d819      	bhi.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d004      	beq.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c8:	d004      	beq.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
          break;
 80067ca:	e011      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067cc:	f7fe fdba 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 80067d0:	61f8      	str	r0, [r7, #28]
          break;
 80067d2:	e010      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = HAL_RCC_GetSysClockFreq();
 80067d4:	f7fe fd20 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80067d8:	61f8      	str	r0, [r7, #28]
          break;
 80067da:	e00c      	b.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067dc:	4b9b      	ldr	r3, [pc, #620]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e8:	d104      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
            frequency = HSI_VALUE;
 80067ea:	4b99      	ldr	r3, [pc, #612]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80067ec:	61fb      	str	r3, [r7, #28]
          break;
 80067ee:	e001      	b.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          break;
 80067f0:	bf00      	nop
 80067f2:	e13a      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80067f4:	bf00      	nop
        break;
 80067f6:	e138      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80067f8:	4b94      	ldr	r3, [pc, #592]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80067fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d011      	beq.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d818      	bhi.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d004      	beq.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 800681c:	e011      	b.n	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
          frequency = HAL_RCC_GetPCLK1Freq();
 800681e:	f7fe fd91 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8006822:	61f8      	str	r0, [r7, #28]
          break;
 8006824:	e010      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006826:	f7fe fcf7 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 800682a:	61f8      	str	r0, [r7, #28]
          break;
 800682c:	e00c      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800682e:	4b87      	ldr	r3, [pc, #540]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683a:	d104      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
            frequency = HSI_VALUE;
 800683c:	4b84      	ldr	r3, [pc, #528]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 800683e:	61fb      	str	r3, [r7, #28]
          break;
 8006840:	e001      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          break;
 8006842:	bf00      	nop
 8006844:	e111      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006846:	bf00      	nop
        break;
 8006848:	e10f      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800684a:	4b80      	ldr	r3, [pc, #512]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006850:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800685c:	d02c      	beq.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006864:	d833      	bhi.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800686c:	d01a      	beq.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006874:	d82b      	bhi.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006882:	d004      	beq.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          break;
 8006884:	e023      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006886:	f7fe fd5d 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800688a:	61f8      	str	r0, [r7, #28]
          break;
 800688c:	e026      	b.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xca0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800688e:	4b6f      	ldr	r3, [pc, #444]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b02      	cmp	r3, #2
 800689a:	d11a      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
              frequency = LSI_VALUE;
 800689c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068a0:	61fb      	str	r3, [r7, #28]
          break;
 80068a2:	e016      	b.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068a4:	4b69      	ldr	r3, [pc, #420]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b0:	d111      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
            frequency = HSI_VALUE;
 80068b2:	4b67      	ldr	r3, [pc, #412]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80068b4:	61fb      	str	r3, [r7, #28]
          break;
 80068b6:	e00e      	b.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068b8:	4b64      	ldr	r3, [pc, #400]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d109      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = LSE_VALUE;
 80068c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ca:	61fb      	str	r3, [r7, #28]
          break;
 80068cc:	e005      	b.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          break;
 80068ce:	bf00      	nop
 80068d0:	e0cb      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80068d2:	bf00      	nop
 80068d4:	e0c9      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80068d6:	bf00      	nop
 80068d8:	e0c7      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80068da:	bf00      	nop
        break;
 80068dc:	e0c5      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80068de:	4b5b      	ldr	r3, [pc, #364]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068f0:	d02c      	beq.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068f8:	d833      	bhi.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006900:	d01a      	beq.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006908:	d82b      	bhi.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006916:	d004      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
          break;
 8006918:	e023      	b.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
          frequency = HAL_RCC_GetPCLK1Freq();
 800691a:	f7fe fd13 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 800691e:	61f8      	str	r0, [r7, #28]
          break;
 8006920:	e026      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006922:	4b4a      	ldr	r3, [pc, #296]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b02      	cmp	r3, #2
 800692e:	d11a      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
              frequency = LSI_VALUE;
 8006930:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006934:	61fb      	str	r3, [r7, #28]
          break;
 8006936:	e016      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006938:	4b44      	ldr	r3, [pc, #272]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006944:	d111      	bne.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = HSI_VALUE;
 8006946:	4b42      	ldr	r3, [pc, #264]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006948:	61fb      	str	r3, [r7, #28]
          break;
 800694a:	e00e      	b.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800694c:	4b3f      	ldr	r3, [pc, #252]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 800694e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b02      	cmp	r3, #2
 8006958:	d109      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
            frequency = LSE_VALUE;
 800695a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800695e:	61fb      	str	r3, [r7, #28]
          break;
 8006960:	e005      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          break;
 8006962:	bf00      	nop
 8006964:	e081      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006966:	bf00      	nop
 8006968:	e07f      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800696a:	bf00      	nop
 800696c:	e07d      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800696e:	bf00      	nop
        break;
 8006970:	e07b      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006972:	4b36      	ldr	r3, [pc, #216]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006974:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006978:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006984:	d02c      	beq.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800698c:	d855      	bhi.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699a:	d004      	beq.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
          break;
 800699c:	e04d      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
          frequency = HAL_RCC_GetSysClockFreq();
 800699e:	f7fe fc3b 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80069a2:	61f8      	str	r0, [r7, #28]
          break;
 80069a4:	e04e      	b.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80069a6:	4b29      	ldr	r3, [pc, #164]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d145      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80069b2:	4b26      	ldr	r3, [pc, #152]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d005      	beq.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80069be:	4b23      	ldr	r3, [pc, #140]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	091b      	lsrs	r3, r3, #4
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	e005      	b.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 80069ca:	4b20      	ldr	r3, [pc, #128]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d0:	0a1b      	lsrs	r3, r3, #8
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	4a1f      	ldr	r2, [pc, #124]	; (8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>)
 80069d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069dc:	61fb      	str	r3, [r7, #28]
          break;
 80069de:	e02e      	b.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069e0:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ec:	d129      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80069ee:	4b17      	ldr	r3, [pc, #92]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069fa:	d122      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069fc:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	0a1b      	lsrs	r3, r3, #8
 8006a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a06:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	fb02 f203 	mul.w	r2, r2, r3
 8006a10:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	091b      	lsrs	r3, r3, #4
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a20:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006a22:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	0d5b      	lsrs	r3, r3, #21
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	61fb      	str	r3, [r7, #28]
          break;
 8006a38:	e003      	b.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
          break;
 8006a3a:	bf00      	nop
 8006a3c:	e015      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a3e:	bf00      	nop
 8006a40:	e013      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a42:	bf00      	nop
        break;
 8006a44:	e011      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006a46:	bf00      	nop
 8006a48:	e00f      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006a4a:	bf00      	nop
 8006a4c:	40021000 	.word	0x40021000
 8006a50:	00f42400 	.word	0x00f42400
 8006a54:	0800e424 	.word	0x0800e424
      break;
 8006a58:	bf00      	nop
 8006a5a:	e006      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006a5c:	bf00      	nop
 8006a5e:	e004      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006a60:	bf00      	nop
 8006a62:	e002      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006a64:	bf00      	nop
 8006a66:	e000      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006a68:	bf00      	nop
    }
  }

  return(frequency);
 8006a6a:	69fb      	ldr	r3, [r7, #28]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3720      	adds	r7, #32
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a82:	4b72      	ldr	r3, [pc, #456]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f003 0303 	and.w	r3, r3, #3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a8e:	4b6f      	ldr	r3, [pc, #444]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f003 0203 	and.w	r2, r3, #3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d103      	bne.n	8006aa6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
       ||
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d142      	bne.n	8006b2c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	73fb      	strb	r3, [r7, #15]
 8006aaa:	e03f      	b.n	8006b2c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d018      	beq.n	8006ae6 <RCCEx_PLLSAI1_Config+0x72>
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d825      	bhi.n	8006b04 <RCCEx_PLLSAI1_Config+0x90>
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d002      	beq.n	8006ac2 <RCCEx_PLLSAI1_Config+0x4e>
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d009      	beq.n	8006ad4 <RCCEx_PLLSAI1_Config+0x60>
 8006ac0:	e020      	b.n	8006b04 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ac2:	4b62      	ldr	r3, [pc, #392]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d11d      	bne.n	8006b0a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ad2:	e01a      	b.n	8006b0a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ad4:	4b5d      	ldr	r3, [pc, #372]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d116      	bne.n	8006b0e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ae4:	e013      	b.n	8006b0e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ae6:	4b59      	ldr	r3, [pc, #356]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10f      	bne.n	8006b12 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006af2:	4b56      	ldr	r3, [pc, #344]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b02:	e006      	b.n	8006b12 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
      break;
 8006b08:	e004      	b.n	8006b14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b0a:	bf00      	nop
 8006b0c:	e002      	b.n	8006b14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b12:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d108      	bne.n	8006b2c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006b1a:	4b4c      	ldr	r3, [pc, #304]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f023 0203 	bic.w	r2, r3, #3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4949      	ldr	r1, [pc, #292]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f040 8086 	bne.w	8006c40 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b34:	4b45      	ldr	r3, [pc, #276]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a44      	ldr	r2, [pc, #272]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b40:	f7fa fd8c 	bl	800165c <HAL_GetTick>
 8006b44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b46:	e009      	b.n	8006b5c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b48:	f7fa fd88 	bl	800165c <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d902      	bls.n	8006b5c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	73fb      	strb	r3, [r7, #15]
        break;
 8006b5a:	e005      	b.n	8006b68 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b5c:	4b3b      	ldr	r3, [pc, #236]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1ef      	bne.n	8006b48 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d168      	bne.n	8006c40 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d113      	bne.n	8006b9c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b74:	4b35      	ldr	r3, [pc, #212]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	4b35      	ldr	r3, [pc, #212]	; (8006c50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6892      	ldr	r2, [r2, #8]
 8006b80:	0211      	lsls	r1, r2, #8
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68d2      	ldr	r2, [r2, #12]
 8006b86:	06d2      	lsls	r2, r2, #27
 8006b88:	4311      	orrs	r1, r2
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6852      	ldr	r2, [r2, #4]
 8006b8e:	3a01      	subs	r2, #1
 8006b90:	0112      	lsls	r2, r2, #4
 8006b92:	430a      	orrs	r2, r1
 8006b94:	492d      	ldr	r1, [pc, #180]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	610b      	str	r3, [r1, #16]
 8006b9a:	e02d      	b.n	8006bf8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d115      	bne.n	8006bce <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ba2:	4b2a      	ldr	r3, [pc, #168]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ba4:	691a      	ldr	r2, [r3, #16]
 8006ba6:	4b2b      	ldr	r3, [pc, #172]	; (8006c54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6892      	ldr	r2, [r2, #8]
 8006bae:	0211      	lsls	r1, r2, #8
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6912      	ldr	r2, [r2, #16]
 8006bb4:	0852      	lsrs	r2, r2, #1
 8006bb6:	3a01      	subs	r2, #1
 8006bb8:	0552      	lsls	r2, r2, #21
 8006bba:	4311      	orrs	r1, r2
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	6852      	ldr	r2, [r2, #4]
 8006bc0:	3a01      	subs	r2, #1
 8006bc2:	0112      	lsls	r2, r2, #4
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	4921      	ldr	r1, [pc, #132]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	610b      	str	r3, [r1, #16]
 8006bcc:	e014      	b.n	8006bf8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bce:	4b1f      	ldr	r3, [pc, #124]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd0:	691a      	ldr	r2, [r3, #16]
 8006bd2:	4b21      	ldr	r3, [pc, #132]	; (8006c58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6892      	ldr	r2, [r2, #8]
 8006bda:	0211      	lsls	r1, r2, #8
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6952      	ldr	r2, [r2, #20]
 8006be0:	0852      	lsrs	r2, r2, #1
 8006be2:	3a01      	subs	r2, #1
 8006be4:	0652      	lsls	r2, r2, #25
 8006be6:	4311      	orrs	r1, r2
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6852      	ldr	r2, [r2, #4]
 8006bec:	3a01      	subs	r2, #1
 8006bee:	0112      	lsls	r2, r2, #4
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	4916      	ldr	r1, [pc, #88]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006bf8:	4b14      	ldr	r3, [pc, #80]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a13      	ldr	r2, [pc, #76]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c04:	f7fa fd2a 	bl	800165c <HAL_GetTick>
 8006c08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c0a:	e009      	b.n	8006c20 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c0c:	f7fa fd26 	bl	800165c <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d902      	bls.n	8006c20 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	73fb      	strb	r3, [r7, #15]
          break;
 8006c1e:	e005      	b.n	8006c2c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c20:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0ef      	beq.n	8006c0c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c32:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	4904      	ldr	r1, [pc, #16]	; (8006c4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	07ff800f 	.word	0x07ff800f
 8006c54:	ff9f800f 	.word	0xff9f800f
 8006c58:	f9ff800f 	.word	0xf9ff800f

08006c5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c6a:	4b72      	ldr	r3, [pc, #456]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00e      	beq.n	8006c94 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c76:	4b6f      	ldr	r3, [pc, #444]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f003 0203 	and.w	r2, r3, #3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d103      	bne.n	8006c8e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
       ||
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d142      	bne.n	8006d14 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	73fb      	strb	r3, [r7, #15]
 8006c92:	e03f      	b.n	8006d14 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d018      	beq.n	8006cce <RCCEx_PLLSAI2_Config+0x72>
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d825      	bhi.n	8006cec <RCCEx_PLLSAI2_Config+0x90>
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d002      	beq.n	8006caa <RCCEx_PLLSAI2_Config+0x4e>
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d009      	beq.n	8006cbc <RCCEx_PLLSAI2_Config+0x60>
 8006ca8:	e020      	b.n	8006cec <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006caa:	4b62      	ldr	r3, [pc, #392]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d11d      	bne.n	8006cf2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cba:	e01a      	b.n	8006cf2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cbc:	4b5d      	ldr	r3, [pc, #372]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d116      	bne.n	8006cf6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ccc:	e013      	b.n	8006cf6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cce:	4b59      	ldr	r3, [pc, #356]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10f      	bne.n	8006cfa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cda:	4b56      	ldr	r3, [pc, #344]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cea:	e006      	b.n	8006cfa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf0:	e004      	b.n	8006cfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006cf2:	bf00      	nop
 8006cf4:	e002      	b.n	8006cfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006cf6:	bf00      	nop
 8006cf8:	e000      	b.n	8006cfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006cfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d108      	bne.n	8006d14 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006d02:	4b4c      	ldr	r3, [pc, #304]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f023 0203 	bic.w	r2, r3, #3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4949      	ldr	r1, [pc, #292]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f040 8086 	bne.w	8006e28 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d1c:	4b45      	ldr	r3, [pc, #276]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a44      	ldr	r2, [pc, #272]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d28:	f7fa fc98 	bl	800165c <HAL_GetTick>
 8006d2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d2e:	e009      	b.n	8006d44 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d30:	f7fa fc94 	bl	800165c <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d902      	bls.n	8006d44 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	73fb      	strb	r3, [r7, #15]
        break;
 8006d42:	e005      	b.n	8006d50 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d44:	4b3b      	ldr	r3, [pc, #236]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1ef      	bne.n	8006d30 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d168      	bne.n	8006e28 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d113      	bne.n	8006d84 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d5c:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d5e:	695a      	ldr	r2, [r3, #20]
 8006d60:	4b35      	ldr	r3, [pc, #212]	; (8006e38 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6892      	ldr	r2, [r2, #8]
 8006d68:	0211      	lsls	r1, r2, #8
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	68d2      	ldr	r2, [r2, #12]
 8006d6e:	06d2      	lsls	r2, r2, #27
 8006d70:	4311      	orrs	r1, r2
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	6852      	ldr	r2, [r2, #4]
 8006d76:	3a01      	subs	r2, #1
 8006d78:	0112      	lsls	r2, r2, #4
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	492d      	ldr	r1, [pc, #180]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	614b      	str	r3, [r1, #20]
 8006d82:	e02d      	b.n	8006de0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d115      	bne.n	8006db6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d8a:	4b2a      	ldr	r3, [pc, #168]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d8c:	695a      	ldr	r2, [r3, #20]
 8006d8e:	4b2b      	ldr	r3, [pc, #172]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1e0>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6892      	ldr	r2, [r2, #8]
 8006d96:	0211      	lsls	r1, r2, #8
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6912      	ldr	r2, [r2, #16]
 8006d9c:	0852      	lsrs	r2, r2, #1
 8006d9e:	3a01      	subs	r2, #1
 8006da0:	0552      	lsls	r2, r2, #21
 8006da2:	4311      	orrs	r1, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6852      	ldr	r2, [r2, #4]
 8006da8:	3a01      	subs	r2, #1
 8006daa:	0112      	lsls	r2, r2, #4
 8006dac:	430a      	orrs	r2, r1
 8006dae:	4921      	ldr	r1, [pc, #132]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	614b      	str	r3, [r1, #20]
 8006db4:	e014      	b.n	8006de0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006db6:	4b1f      	ldr	r3, [pc, #124]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	4b21      	ldr	r3, [pc, #132]	; (8006e40 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6892      	ldr	r2, [r2, #8]
 8006dc2:	0211      	lsls	r1, r2, #8
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6952      	ldr	r2, [r2, #20]
 8006dc8:	0852      	lsrs	r2, r2, #1
 8006dca:	3a01      	subs	r2, #1
 8006dcc:	0652      	lsls	r2, r2, #25
 8006dce:	4311      	orrs	r1, r2
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6852      	ldr	r2, [r2, #4]
 8006dd4:	3a01      	subs	r2, #1
 8006dd6:	0112      	lsls	r2, r2, #4
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	4916      	ldr	r1, [pc, #88]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006de0:	4b14      	ldr	r3, [pc, #80]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dec:	f7fa fc36 	bl	800165c <HAL_GetTick>
 8006df0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006df2:	e009      	b.n	8006e08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006df4:	f7fa fc32 	bl	800165c <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d902      	bls.n	8006e08 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	73fb      	strb	r3, [r7, #15]
          break;
 8006e06:	e005      	b.n	8006e14 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0ef      	beq.n	8006df4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e1a:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	4904      	ldr	r1, [pc, #16]	; (8006e34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40021000 	.word	0x40021000
 8006e38:	07ff800f 	.word	0x07ff800f
 8006e3c:	ff9f800f 	.word	0xff9f800f
 8006e40:	f9ff800f 	.word	0xf9ff800f

08006e44 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b089      	sub	sp, #36	; 0x24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e60:	d10b      	bne.n	8006e7a <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006e62:	4b7e      	ldr	r3, [pc, #504]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e68:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006e6c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	2b60      	cmp	r3, #96	; 0x60
 8006e72:	d112      	bne.n	8006e9a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e74:	4b7a      	ldr	r3, [pc, #488]	; (8007060 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006e76:	61fb      	str	r3, [r7, #28]
 8006e78:	e00f      	b.n	8006e9a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e80:	d10b      	bne.n	8006e9a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006e82:	4b76      	ldr	r3, [pc, #472]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e8c:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e94:	d101      	bne.n	8006e9a <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006e96:	4b72      	ldr	r3, [pc, #456]	; (8007060 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006e98:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 80d6 	bne.w	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	d003      	beq.n	8006eb4 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb2:	d13b      	bne.n	8006f2c <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006eb4:	4b69      	ldr	r3, [pc, #420]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ec0:	f040 80c4 	bne.w	800704c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006ec4:	4b65      	ldr	r3, [pc, #404]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80bd 	beq.w	800704c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006ed2:	4b62      	ldr	r3, [pc, #392]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	091b      	lsrs	r3, r3, #4
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	3301      	adds	r3, #1
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006ee6:	4b5d      	ldr	r3, [pc, #372]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	0a1b      	lsrs	r3, r3, #8
 8006eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006ef2:	4b5a      	ldr	r3, [pc, #360]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	0edb      	lsrs	r3, r3, #27
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006f04:	4b55      	ldr	r3, [pc, #340]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006f10:	2311      	movs	r3, #17
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	e001      	b.n	8006f1a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006f16:	2307      	movs	r3, #7
 8006f18:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	fb02 f203 	mul.w	r2, r2, r3
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f2a:	e08f      	b.n	800704c <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d13a      	bne.n	8006fa8 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006f32:	4b4a      	ldr	r3, [pc, #296]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f3e:	f040 8086 	bne.w	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006f42:	4b46      	ldr	r3, [pc, #280]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d07f      	beq.n	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006f4e:	4b43      	ldr	r3, [pc, #268]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f003 030f 	and.w	r3, r3, #15
 8006f58:	3301      	adds	r3, #1
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f60:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006f62:	4b3e      	ldr	r3, [pc, #248]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f6c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006f6e:	4b3b      	ldr	r3, [pc, #236]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	0edb      	lsrs	r3, r3, #27
 8006f74:	f003 031f 	and.w	r3, r3, #31
 8006f78:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006f80:	4b36      	ldr	r3, [pc, #216]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006f8c:	2311      	movs	r3, #17
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e001      	b.n	8006f96 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006f92:	2307      	movs	r3, #7
 8006f94:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	fb02 f203 	mul.w	r2, r2, r3
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa4:	61fb      	str	r3, [r7, #28]
 8006fa6:	e052      	b.n	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	2b80      	cmp	r3, #128	; 0x80
 8006fac:	d003      	beq.n	8006fb6 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fb4:	d109      	bne.n	8006fca <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fb6:	4b29      	ldr	r3, [pc, #164]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc2:	d144      	bne.n	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8006fc4:	4b27      	ldr	r3, [pc, #156]	; (8007064 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8006fc6:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fc8:	e041      	b.n	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d003      	beq.n	8006fd8 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd6:	d13a      	bne.n	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8006fd8:	4b20      	ldr	r3, [pc, #128]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fe4:	d133      	bne.n	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006fe6:	4b1d      	ldr	r3, [pc, #116]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02d      	beq.n	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8006ff2:	4b1a      	ldr	r3, [pc, #104]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	091b      	lsrs	r3, r3, #4
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	fbb2 f3f3 	udiv	r3, r2, r3
 8007004:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007006:	4b15      	ldr	r3, [pc, #84]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007010:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8007012:	4b12      	ldr	r3, [pc, #72]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	0edb      	lsrs	r3, r3, #27
 8007018:	f003 031f 	and.w	r3, r3, #31
 800701c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007024:	4b0d      	ldr	r3, [pc, #52]	; (800705c <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007030:	2311      	movs	r3, #17
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	e001      	b.n	800703a <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007036:	2307      	movs	r3, #7
 8007038:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	fb02 f203 	mul.w	r2, r2, r3
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	fbb2 f3f3 	udiv	r3, r2, r3
 8007048:	61fb      	str	r3, [r7, #28]
 800704a:	e000      	b.n	800704e <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800704c:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800704e:	69fb      	ldr	r3, [r7, #28]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3724      	adds	r7, #36	; 0x24
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	40021000 	.word	0x40021000
 8007060:	001fff68 	.word	0x001fff68
 8007064:	00f42400 	.word	0x00f42400

08007068 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d06c      	beq.n	8007154 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7f9 ffe4 	bl	800105c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	22ca      	movs	r2, #202	; 0xca
 80070a2:	625a      	str	r2, [r3, #36]	; 0x24
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2253      	movs	r2, #83	; 0x53
 80070aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f9a0 	bl	80073f2 <RTC_EnterInitMode>
 80070b2:	4603      	mov	r3, r0
 80070b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d14b      	bne.n	8007154 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ce:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6899      	ldr	r1, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	431a      	orrs	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	68d2      	ldr	r2, [r2, #12]
 80070f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6919      	ldr	r1, [r3, #16]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	041a      	lsls	r2, r3, #16
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f9a3 	bl	8007458 <RTC_ExitInitMode>
 8007112:	4603      	mov	r3, r0
 8007114:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d11b      	bne.n	8007154 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0203 	bic.w	r2, r2, #3
 800712a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	69da      	ldr	r2, [r3, #28]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	22ff      	movs	r2, #255	; 0xff
 800714a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800715e:	b590      	push	{r4, r7, lr}
 8007160:	b087      	sub	sp, #28
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_RTC_SetTime+0x1a>
 8007174:	2302      	movs	r3, #2
 8007176:	e08b      	b.n	8007290 <HAL_RTC_SetTime+0x132>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	22ca      	movs	r2, #202	; 0xca
 800718e:	625a      	str	r2, [r3, #36]	; 0x24
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2253      	movs	r2, #83	; 0x53
 8007196:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f92a 	bl	80073f2 <RTC_EnterInitMode>
 800719e:	4603      	mov	r3, r0
 80071a0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80071a2:	7cfb      	ldrb	r3, [r7, #19]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d163      	bne.n	8007270 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d126      	bne.n	80071fc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d102      	bne.n	80071c2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f984 	bl	80074d4 <RTC_ByteToBcd2>
 80071cc:	4603      	mov	r3, r0
 80071ce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f97d 	bl	80074d4 <RTC_ByteToBcd2>
 80071da:	4603      	mov	r3, r0
 80071dc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071de:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	789b      	ldrb	r3, [r3, #2]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f975 	bl	80074d4 <RTC_ByteToBcd2>
 80071ea:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071ec:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	78db      	ldrb	r3, [r3, #3]
 80071f4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	e018      	b.n	800722e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d102      	bne.n	8007210 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2200      	movs	r2, #0
 800720e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800721c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007222:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	78db      	ldrb	r3, [r3, #3]
 8007228:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007238:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800723c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800724c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6899      	ldr	r1, [r3, #8]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	431a      	orrs	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 f8f6 	bl	8007458 <RTC_ExitInitMode>
 800726c:	4603      	mov	r3, r0
 800726e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	22ff      	movs	r2, #255	; 0xff
 8007276:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007278:	7cfb      	ldrb	r3, [r7, #19]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800728e:	7cfb      	ldrb	r3, [r7, #19]
}
 8007290:	4618      	mov	r0, r3
 8007292:	371c      	adds	r7, #28
 8007294:	46bd      	mov	sp, r7
 8007296:	bd90      	pop	{r4, r7, pc}

08007298 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007298:	b590      	push	{r4, r7, lr}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_RTC_SetDate+0x1a>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e075      	b.n	800739e <HAL_RTC_SetDate+0x106>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2202      	movs	r2, #2
 80072be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10e      	bne.n	80072e6 <HAL_RTC_SetDate+0x4e>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d008      	beq.n	80072e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	785b      	ldrb	r3, [r3, #1]
 80072d8:	f023 0310 	bic.w	r3, r3, #16
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	330a      	adds	r3, #10
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d11c      	bne.n	8007326 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	78db      	ldrb	r3, [r3, #3]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 f8ef 	bl	80074d4 <RTC_ByteToBcd2>
 80072f6:	4603      	mov	r3, r0
 80072f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 f8e8 	bl	80074d4 <RTC_ByteToBcd2>
 8007304:	4603      	mov	r3, r0
 8007306:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007308:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	789b      	ldrb	r3, [r3, #2]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 f8e0 	bl	80074d4 <RTC_ByteToBcd2>
 8007314:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007316:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	e00e      	b.n	8007344 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	78db      	ldrb	r3, [r3, #3]
 800732a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007332:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007338:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	22ca      	movs	r2, #202	; 0xca
 800734a:	625a      	str	r2, [r3, #36]	; 0x24
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2253      	movs	r2, #83	; 0x53
 8007352:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f84c 	bl	80073f2 <RTC_EnterInitMode>
 800735a:	4603      	mov	r3, r0
 800735c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800735e:	7cfb      	ldrb	r3, [r7, #19]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10c      	bne.n	800737e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800736e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007372:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f86f 	bl	8007458 <RTC_ExitInitMode>
 800737a:	4603      	mov	r3, r0
 800737c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	22ff      	movs	r2, #255	; 0xff
 8007384:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007386:	7cfb      	ldrb	r3, [r7, #19]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800739c:	7cfb      	ldrb	r3, [r7, #19]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd90      	pop	{r4, r7, pc}

080073a6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68da      	ldr	r2, [r3, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073bc:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80073be:	f7fa f94d 	bl	800165c <HAL_GetTick>
 80073c2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073c4:	e009      	b.n	80073da <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073c6:	f7fa f949 	bl	800165c <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073d4:	d901      	bls.n	80073da <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e007      	b.n	80073ea <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0ee      	beq.n	80073c6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	d120      	bne.n	800744e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f04f 32ff 	mov.w	r2, #4294967295
 8007414:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007416:	f7fa f921 	bl	800165c <HAL_GetTick>
 800741a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800741c:	e00d      	b.n	800743a <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800741e:	f7fa f91d 	bl	800165c <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800742c:	d905      	bls.n	800743a <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2203      	movs	r2, #3
 8007436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <RTC_EnterInitMode+0x5c>
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	2b03      	cmp	r3, #3
 800744c:	d1e7      	bne.n	800741e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007464:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <RTC_ExitInitMode+0x78>)
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	4a19      	ldr	r2, [pc, #100]	; (80074d0 <RTC_ExitInitMode+0x78>)
 800746a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007470:	4b17      	ldr	r3, [pc, #92]	; (80074d0 <RTC_ExitInitMode+0x78>)
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10c      	bne.n	8007496 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff ff92 	bl	80073a6 <HAL_RTC_WaitForSynchro>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01e      	beq.n	80074c6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2203      	movs	r2, #3
 800748c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	e017      	b.n	80074c6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007496:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <RTC_ExitInitMode+0x78>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	4a0d      	ldr	r2, [pc, #52]	; (80074d0 <RTC_ExitInitMode+0x78>)
 800749c:	f023 0320 	bic.w	r3, r3, #32
 80074a0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff ff7f 	bl	80073a6 <HAL_RTC_WaitForSynchro>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2203      	movs	r2, #3
 80074b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80074ba:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <RTC_ExitInitMode+0x78>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	4a04      	ldr	r2, [pc, #16]	; (80074d0 <RTC_ExitInitMode+0x78>)
 80074c0:	f043 0320 	orr.w	r3, r3, #32
 80074c4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40002800 	.word	0x40002800

080074d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80074e6:	e005      	b.n	80074f4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80074ee:	7afb      	ldrb	r3, [r7, #11]
 80074f0:	3b0a      	subs	r3, #10
 80074f2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	2b09      	cmp	r3, #9
 80074f8:	d8f6      	bhi.n	80074e8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	b2da      	uxtb	r2, r3
 8007502:	7afb      	ldrb	r3, [r7, #11]
 8007504:	4313      	orrs	r3, r2
 8007506:	b2db      	uxtb	r3, r3
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e078      	b.n	8007618 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d105      	bne.n	800753e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7f9 fdab 	bl	8001094 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2203      	movs	r2, #3
 8007542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f86a 	bl	8007620 <HAL_SD_InitCard>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e060      	b.n	8007618 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007556:	f107 0308 	add.w	r3, r7, #8
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fdc7 	bl	80080f0 <HAL_SD_GetCardStatus>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e055      	b.n	8007618 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800756c:	7e3b      	ldrb	r3, [r7, #24]
 800756e:	b2db      	uxtb	r3, r3
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007572:	7e7b      	ldrb	r3, [r7, #25]
 8007574:	b2db      	uxtb	r3, r3
 8007576:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757c:	2b01      	cmp	r3, #1
 800757e:	d10a      	bne.n	8007596 <HAL_SD_Init+0x82>
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	2b00      	cmp	r3, #0
 8007584:	d102      	bne.n	800758c <HAL_SD_Init+0x78>
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007592:	65da      	str	r2, [r3, #92]	; 0x5c
 8007594:	e00b      	b.n	80075ae <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d104      	bne.n	80075a8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80075a6:	e002      	b.n	80075ae <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fe7d 	bl	80082b4 <HAL_SD_ConfigWideBusOperation>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e029      	b.n	8007618 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80075c4:	f7fa f84a 	bl	800165c <HAL_GetTick>
 80075c8:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80075ca:	e014      	b.n	80075f6 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80075cc:	f7fa f846 	bl	800165c <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075da:	d10c      	bne.n	80075f6 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e010      	b.n	8007618 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 ff70 	bl	80084dc <HAL_SD_GetCardState>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d1e4      	bne.n	80075cc <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3728      	adds	r7, #40	; 0x28
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007620:	b5b0      	push	{r4, r5, r7, lr}
 8007622:	b090      	sub	sp, #64	; 0x40
 8007624:	af04      	add	r7, sp, #16
 8007626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007634:	2300      	movs	r3, #0
 8007636:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007638:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800763c:	f7fe fafe 	bl	8005c3c <HAL_RCCEx_GetPeriphCLKFreq>
 8007640:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 8007642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d109      	bne.n	800765c <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007656:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e08b      	b.n	8007774 <HAL_SD_InitCard+0x154>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	0a1b      	lsrs	r3, r3, #8
 8007660:	4a46      	ldr	r2, [pc, #280]	; (800777c <HAL_SD_InitCard+0x15c>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	091b      	lsrs	r3, r3, #4
 8007668:	61fb      	str	r3, [r7, #28]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	623b      	str	r3, [r7, #32]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d107      	bne.n	8007688 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0210 	orr.w	r2, r2, #16
 8007686:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681d      	ldr	r5, [r3, #0]
 800768c:	466c      	mov	r4, sp
 800768e:	f107 0318 	add.w	r3, r7, #24
 8007692:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007696:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800769a:	f107 030c 	add.w	r3, r7, #12
 800769e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076a0:	4628      	mov	r0, r5
 80076a2:	f002 f927 	bl	80098f4 <SDMMC_Init>
 80076a6:	4603      	mov	r3, r0
 80076a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 80076ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_SD_InitCard+0x98>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e05d      	b.n	8007774 <HAL_SD_InitCard+0x154>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4618      	mov	r0, r3
 80076be:	f002 f961 	bl	8009984 <SDMMC_PowerState_ON>
 80076c2:	4603      	mov	r3, r0
 80076c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 80076c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_SD_InitCard+0xb4>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e04f      	b.n	8007774 <HAL_SD_InitCard+0x154>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076da:	fbb2 f3f3 	udiv	r3, r2, r3
 80076de:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80076e0:	4a27      	ldr	r2, [pc, #156]	; (8007780 <HAL_SD_InitCard+0x160>)
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e8:	3301      	adds	r3, #1
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7f9 ffc2 	bl	8001674 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 ffd1 	bl	8008698 <SD_PowerON>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <HAL_SD_InitCard+0xf6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e02e      	b.n	8007774 <HAL_SD_InitCard+0x154>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 ff00 	bl	800851c <SD_InitCard>
 800771c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800771e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <HAL_SD_InitCard+0x11c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	431a      	orrs	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e01b      	b.n	8007774 <HAL_SD_InitCard+0x154>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007744:	4618      	mov	r0, r3
 8007746:	f002 f9b3 	bl	8009ab0 <SDMMC_CmdBlockLength>
 800774a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00f      	beq.n	8007772 <HAL_SD_InitCard+0x152>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a0b      	ldr	r2, [pc, #44]	; (8007784 <HAL_SD_InitCard+0x164>)
 8007758:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <HAL_SD_InitCard+0x154>
  }

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3730      	adds	r7, #48	; 0x30
 8007778:	46bd      	mov	sp, r7
 800777a:	bdb0      	pop	{r4, r5, r7, pc}
 800777c:	014f8b59 	.word	0x014f8b59
 8007780:	00012110 	.word	0x00012110
 8007784:	1fe00fff 	.word	0x1fe00fff

08007788 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08c      	sub	sp, #48	; 0x30
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d107      	bne.n	80077b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e08d      	b.n	80078cc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	f040 8086 	bne.w	80078ca <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80077c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	441a      	add	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d907      	bls.n	80077e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e074      	b.n	80078cc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2203      	movs	r2, #3
 80077e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2200      	movs	r2, #0
 80077f0:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	025a      	lsls	r2, r3, #9
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007804:	2b01      	cmp	r3, #1
 8007806:	d002      	beq.n	800780e <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	025b      	lsls	r3, r3, #9
 800780c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800780e:	f04f 33ff 	mov.w	r3, #4294967295
 8007812:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	025b      	lsls	r3, r3, #9
 8007818:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800781a:	2390      	movs	r3, #144	; 0x90
 800781c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800781e:	2302      	movs	r3, #2
 8007820:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007822:	2300      	movs	r3, #0
 8007824:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 8007826:	2300      	movs	r3, #0
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f107 0210 	add.w	r2, r7, #16
 8007832:	4611      	mov	r1, r2
 8007834:	4618      	mov	r0, r3
 8007836:	f002 f90f 	bl	8009a58 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007848:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2201      	movs	r2, #1
 8007858:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d90a      	bls.n	8007876 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2282      	movs	r2, #130	; 0x82
 8007864:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800786c:	4618      	mov	r0, r3
 800786e:	f002 f965 	bl	8009b3c <SDMMC_CmdReadMultiBlock>
 8007872:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007874:	e009      	b.n	800788a <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2281      	movs	r2, #129	; 0x81
 800787a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007882:	4618      	mov	r0, r3
 8007884:	f002 f937 	bl	8009af6 <SDMMC_CmdReadSingleBlock>
 8007888:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d012      	beq.n	80078b6 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a0f      	ldr	r2, [pc, #60]	; (80078d4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007896:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	431a      	orrs	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e00a      	b.n	80078cc <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80078c4:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	e000      	b.n	80078cc <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80078ca:	2302      	movs	r3, #2
  }
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3730      	adds	r7, #48	; 0x30
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	1fe00fff 	.word	0x1fe00fff

080078d8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08c      	sub	sp, #48	; 0x30
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d107      	bne.n	8007900 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e08d      	b.n	8007a1c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	f040 8086 	bne.w	8007a1a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	441a      	add	r2, r3
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	429a      	cmp	r2, r3
 8007920:	d907      	bls.n	8007932 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007926:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e074      	b.n	8007a1c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2203      	movs	r2, #3
 8007936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2200      	movs	r2, #0
 8007940:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	025a      	lsls	r2, r3, #9
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007954:	2b01      	cmp	r3, #1
 8007956:	d002      	beq.n	800795e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795a:	025b      	lsls	r3, r3, #9
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800795e:	f04f 33ff 	mov.w	r3, #4294967295
 8007962:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	025b      	lsls	r3, r3, #9
 8007968:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800796a:	2390      	movs	r3, #144	; 0x90
 800796c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800796e:	2300      	movs	r3, #0
 8007970:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007972:	2300      	movs	r3, #0
 8007974:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007976:	2300      	movs	r3, #0
 8007978:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f107 0210 	add.w	r2, r7, #16
 8007982:	4611      	mov	r1, r2
 8007984:	4618      	mov	r0, r3
 8007986:	f002 f867 	bl	8009a58 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007998:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2201      	movs	r2, #1
 80079a8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d90a      	bls.n	80079c6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	22a0      	movs	r2, #160	; 0xa0
 80079b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079bc:	4618      	mov	r0, r3
 80079be:	f002 f903 	bl	8009bc8 <SDMMC_CmdWriteMultiBlock>
 80079c2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80079c4:	e009      	b.n	80079da <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2290      	movs	r2, #144	; 0x90
 80079ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079d2:	4618      	mov	r0, r3
 80079d4:	f002 f8d5 	bl	8009b82 <SDMMC_CmdWriteSingleBlock>
 80079d8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d012      	beq.n	8007a06 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a0f      	ldr	r2, [pc, #60]	; (8007a24 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	431a      	orrs	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e00a      	b.n	8007a1c <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007a14:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	e000      	b.n	8007a1c <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007a1a:	2302      	movs	r3, #2
  }
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3730      	adds	r7, #48	; 0x30
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	1fe00fff 	.word	0x1fe00fff

08007a28 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d008      	beq.n	8007a56 <HAL_SD_IRQHandler+0x2e>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 f98c 	bl	8008d6c <SD_Read_IT>
 8007a54:	e199      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 80ae 	beq.w	8007bc2 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a6e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007a7e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007a82:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007a92:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aa2:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f003 0308 	and.w	r3, r3, #8
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d038      	beq.n	8007b20 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <HAL_SD_IRQHandler+0x9a>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d011      	beq.n	8007ae6 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f002 f8a2 	bl	8009c10 <SDMMC_CmdStopTransfer>
 8007acc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d008      	beq.n	8007ae6 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f957 	bl	8007d94 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4aa0      	ldr	r2, [pc, #640]	; (8007d6c <HAL_SD_IRQHandler+0x344>)
 8007aec:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d104      	bne.n	8007b10 <HAL_SD_IRQHandler+0xe8>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d003      	beq.n	8007b18 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f003 ff7d 	bl	800ba10 <HAL_SD_RxCpltCallback>
 8007b16:	e138      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f003 ff6f 	bl	800b9fc <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007b1e:	e134      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 812f 	beq.w	8007d8a <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2200      	movs	r2, #0
 8007b32:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2200      	movs	r2, #0
 8007b42:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <HAL_SD_IRQHandler+0x130>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d011      	beq.n	8007b7c <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f002 f857 	bl	8009c10 <SDMMC_CmdStopTransfer>
 8007b62:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f90c 	bl	8007d94 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f003 0310 	and.w	r3, r3, #16
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d104      	bne.n	8007b9e <HAL_SD_IRQHandler+0x176>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f003 ff2c 	bl	800b9fc <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d105      	bne.n	8007bba <HAL_SD_IRQHandler+0x192>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 80e8 	beq.w	8007d8a <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f003 ff28 	bl	800ba10 <HAL_SD_RxCpltCallback>
}
 8007bc0:	e0e3      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d008      	beq.n	8007be2 <HAL_SD_IRQHandler+0x1ba>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 f917 	bl	8008e0e <SD_Write_IT>
 8007be0:	e0d3      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 809d 	beq.w	8007d2c <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	f043 0202 	orr.w	r2, r3, #2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	f043 0208 	orr.w	r2, r3, #8
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2c:	f003 0320 	and.w	r3, r3, #32
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	f043 0220 	orr.w	r2, r3, #32
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c46:	f003 0310 	and.w	r3, r3, #16
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	f043 0210 	orr.w	r2, r3, #16
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a43      	ldr	r2, [pc, #268]	; (8007d6c <HAL_SD_IRQHandler+0x344>)
 8007c60:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007c70:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c80:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c90:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ca0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f001 ffb2 	bl	8009c10 <SDMMC_CmdStopTransfer>
 8007cac:	4602      	mov	r2, r0
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cc6:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f852 	bl	8007d94 <HAL_SD_ErrorCallback>
}
 8007cf0:	e04b      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d046      	beq.n	8007d8a <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d042      	beq.n	8007d8a <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007d12:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f835 	bl	8007d94 <HAL_SD_ErrorCallback>
}
 8007d2a:	e02e      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d027      	beq.n	8007d8a <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10e      	bne.n	8007d70 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f003 0320 	and.w	r3, r3, #32
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 f8d4 	bl	8008f0a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8007d62:	e012      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f001 f8bc 	bl	8008ee2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8007d6a:	e00e      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
 8007d6c:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f001 f8bb 	bl	8008ef6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8007d80:	e003      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 f8a3 	bl	8008ece <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8007d88:	e7ff      	b.n	8007d8a <HAL_SD_IRQHandler+0x362>
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop

08007d94 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db6:	0f9b      	lsrs	r3, r3, #30
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc2:	0e9b      	lsrs	r3, r3, #26
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd4:	0e1b      	lsrs	r3, r3, #24
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de6:	0c1b      	lsrs	r3, r3, #16
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df2:	0a1b      	lsrs	r3, r3, #8
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e08:	0d1b      	lsrs	r3, r3, #20
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	f003 030f 	and.w	r3, r3, #15
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e26:	0bdb      	lsrs	r3, r3, #15
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e38:	0b9b      	lsrs	r3, r3, #14
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e4a:	0b5b      	lsrs	r3, r3, #13
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5c:	0b1b      	lsrs	r3, r3, #12
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d163      	bne.n	8007f40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e7c:	009a      	lsls	r2, r3, #2
 8007e7e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e82:	4013      	ands	r3, r2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007e88:	0f92      	lsrs	r2, r2, #30
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e94:	0edb      	lsrs	r3, r3, #27
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ea6:	0e1b      	lsrs	r3, r3, #24
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb8:	0d5b      	lsrs	r3, r3, #21
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eca:	0c9b      	lsrs	r3, r3, #18
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007edc:	0bdb      	lsrs	r3, r3, #15
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	1c5a      	adds	r2, r3, #1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	7e1b      	ldrb	r3, [r3, #24]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	3302      	adds	r3, #2
 8007f00:	2201      	movs	r2, #1
 8007f02:	fa02 f303 	lsl.w	r3, r2, r3
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f0a:	fb02 f203 	mul.w	r2, r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	7a1b      	ldrb	r3, [r3, #8]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	409a      	lsls	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f2c:	0a52      	lsrs	r2, r2, #9
 8007f2e:	fb02 f203 	mul.w	r2, r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f3c:	659a      	str	r2, [r3, #88]	; 0x58
 8007f3e:	e031      	b.n	8007fa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d11d      	bne.n	8007f84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f4c:	041b      	lsls	r3, r3, #16
 8007f4e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f56:	0c1b      	lsrs	r3, r3, #16
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	3301      	adds	r3, #1
 8007f64:	029a      	lsls	r2, r3, #10
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f78:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	659a      	str	r2, [r3, #88]	; 0x58
 8007f82:	e00f      	b.n	8007fa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a58      	ldr	r2, [pc, #352]	; (80080ec <HAL_SD_GetCardCSD+0x344>)
 8007f8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e09d      	b.n	80080e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fa8:	0b9b      	lsrs	r3, r3, #14
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fba:	09db      	lsrs	r3, r3, #7
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fdc:	0fdb      	lsrs	r3, r3, #31
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe8:	0f5b      	lsrs	r3, r3, #29
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ffa:	0e9b      	lsrs	r3, r3, #26
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0307 	and.w	r3, r3, #7
 8008002:	b2da      	uxtb	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800800c:	0d9b      	lsrs	r3, r3, #22
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	b2da      	uxtb	r2, r3
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800801e:	0d5b      	lsrs	r3, r3, #21
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800803a:	0c1b      	lsrs	r3, r3, #16
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	b2da      	uxtb	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804e:	0bdb      	lsrs	r3, r3, #15
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008062:	0b9b      	lsrs	r3, r3, #14
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008076:	0b5b      	lsrs	r3, r3, #13
 8008078:	b2db      	uxtb	r3, r3
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	b2da      	uxtb	r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800808a:	0b1b      	lsrs	r3, r3, #12
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f003 0301 	and.w	r3, r3, #1
 8008092:	b2da      	uxtb	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800809e:	0a9b      	lsrs	r3, r3, #10
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b2:	0a1b      	lsrs	r3, r3, #8
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c6:	085b      	lsrs	r3, r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	1fe00fff 	.word	0x1fe00fff

080080f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b094      	sub	sp, #80	; 0x50
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008100:	f107 0308 	add.w	r3, r7, #8
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fbd2 	bl	80088b0 <SD_SendSDStatus>
 800810c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800810e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008110:	2b00      	cmp	r3, #0
 8008112:	d011      	beq.n	8008138 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a4f      	ldr	r2, [pc, #316]	; (8008258 <HAL_SD_GetCardStatus+0x168>)
 800811a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008136:	e070      	b.n	800821a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	099b      	lsrs	r3, r3, #6
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	b2db      	uxtb	r3, r3
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	b2da      	uxtb	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	0a1b      	lsrs	r3, r3, #8
 800815c:	b29b      	uxth	r3, r3
 800815e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008162:	b29a      	uxth	r2, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	0e1b      	lsrs	r3, r3, #24
 8008168:	b29b      	uxth	r3, r3
 800816a:	4313      	orrs	r3, r2
 800816c:	b29a      	uxth	r2, r3
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	061a      	lsls	r2, r3, #24
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800817e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	0a1b      	lsrs	r3, r3, #8
 8008184:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008188:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	0e1b      	lsrs	r3, r3, #24
 800818e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	0a1b      	lsrs	r3, r3, #8
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	0d1b      	lsrs	r3, r3, #20
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	f003 030f 	and.w	r3, r3, #15
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	0c1b      	lsrs	r3, r3, #16
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4313      	orrs	r3, r2
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	0a9b      	lsrs	r3, r3, #10
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	0a1b      	lsrs	r3, r3, #8
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 0303 	and.w	r3, r3, #3
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	091b      	lsrs	r3, r3, #4
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	b2da      	uxtb	r2, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	0e1b      	lsrs	r3, r3, #24
 8008214:	b2da      	uxtb	r2, r3
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008222:	4618      	mov	r0, r3
 8008224:	f001 fc44 	bl	8009ab0 <SDMMC_CmdBlockLength>
 8008228:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800822a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00d      	beq.n	800824c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a08      	ldr	r2, [pc, #32]	; (8008258 <HAL_SD_GetCardStatus+0x168>)
 8008236:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800823c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800824c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008250:	4618      	mov	r0, r3
 8008252:	3750      	adds	r7, #80	; 0x50
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	1fe00fff 	.word	0x1fe00fff

0800825c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80082b4:	b5b0      	push	{r4, r5, r7, lr}
 80082b6:	b090      	sub	sp, #64	; 0x40
 80082b8:	af04      	add	r7, sp, #16
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2203      	movs	r2, #3
 80082c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d02e      	beq.n	8008332 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082da:	d106      	bne.n	80082ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	639a      	str	r2, [r3, #56]	; 0x38
 80082e8:	e029      	b.n	800833e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082f0:	d10a      	bne.n	8008308 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fbd4 	bl	8008aa0 <SD_WideBus_Enable>
 80082f8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	639a      	str	r2, [r3, #56]	; 0x38
 8008306:	e01a      	b.n	800833e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10a      	bne.n	8008324 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fc11 	bl	8008b36 <SD_WideBus_Disable>
 8008314:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800831a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	639a      	str	r2, [r3, #56]	; 0x38
 8008322:	e00c      	b.n	800833e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	639a      	str	r2, [r3, #56]	; 0x38
 8008330:	e005      	b.n	800833e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	d007      	beq.n	8008356 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a60      	ldr	r2, [pc, #384]	; (80084cc <HAL_SD_ConfigWideBusOperation+0x218>)
 800834c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008354:	e097      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008356:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800835a:	f7fd fc6f 	bl	8005c3c <HAL_RCCEx_GetPeriphCLKFreq>
 800835e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	2b00      	cmp	r3, #0
 8008364:	f000 8086 	beq.w	8008474 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695a      	ldr	r2, [r3, #20]
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	4952      	ldr	r1, [pc, #328]	; (80084d0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008386:	fba1 1303 	umull	r1, r3, r1, r3
 800838a:	0e1b      	lsrs	r3, r3, #24
 800838c:	429a      	cmp	r2, r3
 800838e:	d303      	bcc.n	8008398 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	61fb      	str	r3, [r7, #28]
 8008396:	e05a      	b.n	800844e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a0:	d103      	bne.n	80083aa <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	e051      	b.n	800844e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b2:	d126      	bne.n	8008402 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10e      	bne.n	80083da <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	4a45      	ldr	r2, [pc, #276]	; (80084d4 <HAL_SD_ConfigWideBusOperation+0x220>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d906      	bls.n	80083d2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	4a42      	ldr	r2, [pc, #264]	; (80084d0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80083c8:	fba2 2303 	umull	r2, r3, r2, r3
 80083cc:	0e5b      	lsrs	r3, r3, #25
 80083ce:	61fb      	str	r3, [r7, #28]
 80083d0:	e03d      	b.n	800844e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	61fb      	str	r3, [r7, #28]
 80083d8:	e039      	b.n	800844e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e6:	4a3b      	ldr	r2, [pc, #236]	; (80084d4 <HAL_SD_ConfigWideBusOperation+0x220>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d906      	bls.n	80083fa <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	4a38      	ldr	r2, [pc, #224]	; (80084d0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80083f0:	fba2 2303 	umull	r2, r3, r2, r3
 80083f4:	0e5b      	lsrs	r3, r3, #25
 80083f6:	61fb      	str	r3, [r7, #28]
 80083f8:	e029      	b.n	800844e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	61fb      	str	r3, [r7, #28]
 8008400:	e025      	b.n	800844e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10e      	bne.n	8008428 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	4a32      	ldr	r2, [pc, #200]	; (80084d8 <HAL_SD_ConfigWideBusOperation+0x224>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d906      	bls.n	8008420 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	4a2e      	ldr	r2, [pc, #184]	; (80084d0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008416:	fba2 2303 	umull	r2, r3, r2, r3
 800841a:	0e1b      	lsrs	r3, r3, #24
 800841c:	61fb      	str	r3, [r7, #28]
 800841e:	e016      	b.n	800844e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	695b      	ldr	r3, [r3, #20]
 8008424:	61fb      	str	r3, [r7, #28]
 8008426:	e012      	b.n	800844e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	695b      	ldr	r3, [r3, #20]
 800842c:	005b      	lsls	r3, r3, #1
 800842e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008430:	fbb2 f3f3 	udiv	r3, r2, r3
 8008434:	4a28      	ldr	r2, [pc, #160]	; (80084d8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d906      	bls.n	8008448 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	4a24      	ldr	r2, [pc, #144]	; (80084d0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800843e:	fba2 2303 	umull	r2, r3, r2, r3
 8008442:	0e1b      	lsrs	r3, r3, #24
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	e002      	b.n	800844e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681d      	ldr	r5, [r3, #0]
 8008458:	466c      	mov	r4, sp
 800845a:	f107 0318 	add.w	r3, r7, #24
 800845e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008466:	f107 030c 	add.w	r3, r7, #12
 800846a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800846c:	4628      	mov	r0, r5
 800846e:	f001 fa41 	bl	80098f4 <SDMMC_Init>
 8008472:	e008      	b.n	8008486 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008478:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800848e:	4618      	mov	r0, r3
 8008490:	f001 fb0e 	bl	8009ab0 <SDMMC_CmdBlockLength>
 8008494:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00c      	beq.n	80084b6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0a      	ldr	r2, [pc, #40]	; (80084cc <HAL_SD_ConfigWideBusOperation+0x218>)
 80084a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80084be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3730      	adds	r7, #48	; 0x30
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bdb0      	pop	{r4, r5, r7, pc}
 80084ca:	bf00      	nop
 80084cc:	1fe00fff 	.word	0x1fe00fff
 80084d0:	55e63b89 	.word	0x55e63b89
 80084d4:	02faf080 	.word	0x02faf080
 80084d8:	017d7840 	.word	0x017d7840

080084dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80084e8:	f107 030c 	add.w	r3, r7, #12
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 faae 	bl	8008a50 <SD_SendStatus>
 80084f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d005      	beq.n	8008508 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	0a5b      	lsrs	r3, r3, #9
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008512:	693b      	ldr	r3, [r7, #16]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b090      	sub	sp, #64	; 0x40
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008524:	2301      	movs	r3, #1
 8008526:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4618      	mov	r0, r3
 800852e:	f001 fa3b 	bl	80099a8 <SDMMC_GetPowerState>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d102      	bne.n	800853e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008538:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800853c:	e0a7      	b.n	800868e <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008542:	2b03      	cmp	r3, #3
 8008544:	d02e      	beq.n	80085a4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f001 fc80 	bl	8009e50 <SDMMC_CmdSendCID>
 8008550:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <SD_InitCard+0x40>
    {
      return errorstate;
 8008558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855a:	e098      	b.n	800868e <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2100      	movs	r1, #0
 8008562:	4618      	mov	r0, r3
 8008564:	f001 fa65 	bl	8009a32 <SDMMC_GetResponse>
 8008568:	4602      	mov	r2, r0
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2104      	movs	r1, #4
 8008574:	4618      	mov	r0, r3
 8008576:	f001 fa5c 	bl	8009a32 <SDMMC_GetResponse>
 800857a:	4602      	mov	r2, r0
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2108      	movs	r1, #8
 8008586:	4618      	mov	r0, r3
 8008588:	f001 fa53 	bl	8009a32 <SDMMC_GetResponse>
 800858c:	4602      	mov	r2, r0
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	210c      	movs	r1, #12
 8008598:	4618      	mov	r0, r3
 800859a:	f001 fa4a 	bl	8009a32 <SDMMC_GetResponse>
 800859e:	4602      	mov	r2, r0
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d00d      	beq.n	80085c8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f107 020e 	add.w	r2, r7, #14
 80085b4:	4611      	mov	r1, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f001 fc89 	bl	8009ece <SDMMC_CmdSetRelAdd>
 80085bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <SD_InitCard+0xac>
    {
      return errorstate;
 80085c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c6:	e062      	b.n	800868e <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d036      	beq.n	800863e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80085d0:	89fb      	ldrh	r3, [r7, #14]
 80085d2:	461a      	mov	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085e0:	041b      	lsls	r3, r3, #16
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f001 fc52 	bl	8009e8e <SDMMC_CmdSendCSD>
 80085ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <SD_InitCard+0xda>
    {
      return errorstate;
 80085f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f4:	e04b      	b.n	800868e <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2100      	movs	r1, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 fa18 	bl	8009a32 <SDMMC_GetResponse>
 8008602:	4602      	mov	r2, r0
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2104      	movs	r1, #4
 800860e:	4618      	mov	r0, r3
 8008610:	f001 fa0f 	bl	8009a32 <SDMMC_GetResponse>
 8008614:	4602      	mov	r2, r0
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2108      	movs	r1, #8
 8008620:	4618      	mov	r0, r3
 8008622:	f001 fa06 	bl	8009a32 <SDMMC_GetResponse>
 8008626:	4602      	mov	r2, r0
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	210c      	movs	r1, #12
 8008632:	4618      	mov	r0, r3
 8008634:	f001 f9fd 	bl	8009a32 <SDMMC_GetResponse>
 8008638:	4602      	mov	r2, r0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2104      	movs	r1, #4
 8008644:	4618      	mov	r0, r3
 8008646:	f001 f9f4 	bl	8009a32 <SDMMC_GetResponse>
 800864a:	4603      	mov	r3, r0
 800864c:	0d1a      	lsrs	r2, r3, #20
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008652:	f107 0310 	add.w	r3, r7, #16
 8008656:	4619      	mov	r1, r3
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff fba5 	bl	8007da8 <HAL_SD_GetCardCSD>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008668:	e011      	b.n	800868e <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6819      	ldr	r1, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008672:	041b      	lsls	r3, r3, #16
 8008674:	461a      	mov	r2, r3
 8008676:	f04f 0300 	mov.w	r3, #0
 800867a:	4608      	mov	r0, r1
 800867c:	f001 fafe 	bl	8009c7c <SDMMC_CmdSelDesel>
 8008680:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <SD_InitCard+0x170>
  {
    return errorstate;
 8008688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868a:	e000      	b.n	800868e <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3740      	adds	r7, #64	; 0x40
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b088      	sub	sp, #32
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	2300      	movs	r3, #0
 80086aa:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80086ac:	f7f8 ffd6 	bl	800165c <HAL_GetTick>
 80086b0:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 fb04 	bl	8009cc4 <SDMMC_CmdGoIdleState>
 80086bc:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <SD_PowerON+0x30>
  {
    return errorstate;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	e0ed      	b.n	80088a4 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 fb17 	bl	8009d00 <SDMMC_CmdOperCond>
 80086d2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00d      	beq.n	80086f6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 faed 	bl	8009cc4 <SDMMC_CmdGoIdleState>
 80086ea:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d004      	beq.n	80086fc <SD_PowerON+0x64>
    {
      return errorstate;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	e0d6      	b.n	80088a4 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008700:	2b01      	cmp	r3, #1
 8008702:	d137      	bne.n	8008774 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2100      	movs	r1, #0
 800870a:	4618      	mov	r0, r3
 800870c:	f001 fb18 	bl	8009d40 <SDMMC_CmdAppCommand>
 8008710:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d02d      	beq.n	8008774 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008718:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800871c:	e0c2      	b.n	80088a4 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2100      	movs	r1, #0
 8008724:	4618      	mov	r0, r3
 8008726:	f001 fb0b 	bl	8009d40 <SDMMC_CmdAppCommand>
 800872a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	e0b6      	b.n	80088a4 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	495c      	ldr	r1, [pc, #368]	; (80088ac <SD_PowerON+0x214>)
 800873c:	4618      	mov	r0, r3
 800873e:	f001 fb22 	bl	8009d86 <SDMMC_CmdAppOperCommand>
 8008742:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800874a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800874e:	e0a9      	b.n	80088a4 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f001 f96b 	bl	8009a32 <SDMMC_GetResponse>
 800875c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	0fdb      	lsrs	r3, r3, #31
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <SD_PowerON+0xd2>
 8008766:	2301      	movs	r3, #1
 8008768:	e000      	b.n	800876c <SD_PowerON+0xd4>
 800876a:	2300      	movs	r3, #0
 800876c:	61bb      	str	r3, [r7, #24]

    count++;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3301      	adds	r3, #1
 8008772:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800877a:	4293      	cmp	r3, r2
 800877c:	d802      	bhi.n	8008784 <SD_PowerON+0xec>
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d0cc      	beq.n	800871e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800878a:	4293      	cmp	r3, r2
 800878c:	d902      	bls.n	8008794 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800878e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008792:	e087      	b.n	80088a4 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d07e      	beq.n	800889c <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d17a      	bne.n	80088a2 <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d075      	beq.n	80088a2 <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087bc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f042 0208 	orr.w	r2, r2, #8
 80087cc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f001 fbe2 	bl	8009f9c <SDMMC_CmdVoltageSwitch>
 80087d8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00c      	beq.n	80087fa <SD_PowerON+0x162>
        {
          return errorstate;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	e05f      	b.n	80088a4 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80087e4:	f7f8 ff3a 	bl	800165c <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f2:	d102      	bne.n	80087fa <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80087f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087f8:	e054      	b.n	80088a4 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008808:	d1ec      	bne.n	80087e4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008812:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800881e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008822:	d002      	beq.n	800882a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008824:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008828:	e03c      	b.n	80088a4 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800882a:	2001      	movs	r0, #1
 800882c:	f000 fb44 	bl	8008eb8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0204 	orr.w	r2, r2, #4
 800883e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008840:	e00a      	b.n	8008858 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008842:	f7f8 ff0b 	bl	800165c <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008850:	d102      	bne.n	8008858 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008852:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008856:	e025      	b.n	80088a4 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008866:	d1ec      	bne.n	8008842 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008870:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800887c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008880:	d102      	bne.n	8008888 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008886:	e00d      	b.n	80088a4 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2213      	movs	r2, #19
 800888e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f04f 32ff 	mov.w	r2, #4294967295
 8008898:	639a      	str	r2, [r3, #56]	; 0x38
 800889a:	e002      	b.n	80088a2 <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3720      	adds	r7, #32
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	c1100000 	.word	0xc1100000

080088b0 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08c      	sub	sp, #48	; 0x30
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088ba:	f7f8 fecf 	bl	800165c <HAL_GetTick>
 80088be:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2100      	movs	r1, #0
 80088ca:	4618      	mov	r0, r3
 80088cc:	f001 f8b1 	bl	8009a32 <SDMMC_GetResponse>
 80088d0:	4603      	mov	r3, r0
 80088d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088da:	d102      	bne.n	80088e2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088e0:	e0b0      	b.n	8008a44 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2140      	movs	r1, #64	; 0x40
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 f8e1 	bl	8009ab0 <SDMMC_CmdBlockLength>
 80088ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	e0a0      	b.n	8008a44 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f001 fa16 	bl	8009d40 <SDMMC_CmdAppCommand>
 8008914:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	e08d      	b.n	8008a44 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008928:	f04f 33ff 	mov.w	r3, #4294967295
 800892c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800892e:	2340      	movs	r3, #64	; 0x40
 8008930:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008932:	2360      	movs	r3, #96	; 0x60
 8008934:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008936:	2302      	movs	r3, #2
 8008938:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800893a:	2300      	movs	r3, #0
 800893c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800893e:	2301      	movs	r3, #1
 8008940:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f107 0208 	add.w	r2, r7, #8
 800894a:	4611      	mov	r1, r2
 800894c:	4618      	mov	r0, r3
 800894e:	f001 f883 	bl	8009a58 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4618      	mov	r0, r3
 8008958:	f001 fafe 	bl	8009f58 <SDMMC_CmdStatusRegister>
 800895c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d02b      	beq.n	80089bc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	e069      	b.n	8008a44 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d013      	beq.n	80089a6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800897e:	2300      	movs	r3, #0
 8008980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008982:	e00d      	b.n	80089a0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 ffdd 	bl	8009948 <SDMMC_ReadFIFO>
 800898e:	4602      	mov	r2, r0
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	601a      	str	r2, [r3, #0]
        pData++;
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	3304      	adds	r3, #4
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	3301      	adds	r3, #1
 800899e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	2b07      	cmp	r3, #7
 80089a4:	d9ee      	bls.n	8008984 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089a6:	f7f8 fe59 	bl	800165c <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b4:	d102      	bne.n	80089bc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089ba:	e043      	b.n	8008a44 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0d2      	beq.n	8008970 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d0:	f003 0308 	and.w	r3, r3, #8
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d001      	beq.n	80089dc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089d8:	2308      	movs	r3, #8
 80089da:	e033      	b.n	8008a44 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e2:	f003 0302 	and.w	r3, r3, #2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089ea:	2302      	movs	r3, #2
 80089ec:	e02a      	b.n	8008a44 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f4:	f003 0320 	and.w	r3, r3, #32
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d017      	beq.n	8008a2c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80089fc:	2320      	movs	r3, #32
 80089fe:	e021      	b.n	8008a44 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 ff9f 	bl	8009948 <SDMMC_ReadFIFO>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	601a      	str	r2, [r3, #0]
    pData++;
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	3304      	adds	r3, #4
 8008a14:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a16:	f7f8 fe21 	bl	800165c <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a24:	d102      	bne.n	8008a2c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a2a:	e00b      	b.n	8008a44 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e2      	bne.n	8008a00 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a03      	ldr	r2, [pc, #12]	; (8008a4c <SD_SendSDStatus+0x19c>)
 8008a40:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3730      	adds	r7, #48	; 0x30
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	18000f3a 	.word	0x18000f3a

08008a50 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d102      	bne.n	8008a66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a64:	e018      	b.n	8008a98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a6e:	041b      	lsls	r3, r3, #16
 8008a70:	4619      	mov	r1, r3
 8008a72:	4610      	mov	r0, r2
 8008a74:	f001 fa4d 	bl	8009f12 <SDMMC_CmdSendStatus>
 8008a78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	e009      	b.n	8008a98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 ffd1 	bl	8009a32 <SDMMC_GetResponse>
 8008a90:	4602      	mov	r2, r0
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	2300      	movs	r3, #0
 8008aae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 ffbb 	bl	8009a32 <SDMMC_GetResponse>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ac6:	d102      	bne.n	8008ace <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ac8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008acc:	e02f      	b.n	8008b2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ace:	f107 030c 	add.w	r3, r7, #12
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f879 	bl	8008bcc <SD_FindSCR>
 8008ada:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	e023      	b.n	8008b2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01c      	beq.n	8008b2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008af8:	041b      	lsls	r3, r3, #16
 8008afa:	4619      	mov	r1, r3
 8008afc:	4610      	mov	r0, r2
 8008afe:	f001 f91f 	bl	8009d40 <SDMMC_CmdAppCommand>
 8008b02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	e00f      	b.n	8008b2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2102      	movs	r1, #2
 8008b14:	4618      	mov	r0, r3
 8008b16:	f001 f956 	bl	8009dc6 <SDMMC_CmdBusWidth>
 8008b1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	e003      	b.n	8008b2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b26:	2300      	movs	r3, #0
 8008b28:	e001      	b.n	8008b2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3718      	adds	r7, #24
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b086      	sub	sp, #24
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	2300      	movs	r3, #0
 8008b44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 ff70 	bl	8009a32 <SDMMC_GetResponse>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b5c:	d102      	bne.n	8008b64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b62:	e02f      	b.n	8008bc4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b64:	f107 030c 	add.w	r3, r7, #12
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f82e 	bl	8008bcc <SD_FindSCR>
 8008b70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	e023      	b.n	8008bc4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d01c      	beq.n	8008bc0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b8e:	041b      	lsls	r3, r3, #16
 8008b90:	4619      	mov	r1, r3
 8008b92:	4610      	mov	r0, r2
 8008b94:	f001 f8d4 	bl	8009d40 <SDMMC_CmdAppCommand>
 8008b98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	e00f      	b.n	8008bc4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2100      	movs	r1, #0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f001 f90b 	bl	8009dc6 <SDMMC_CmdBusWidth>
 8008bb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	e003      	b.n	8008bc4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e001      	b.n	8008bc4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08e      	sub	sp, #56	; 0x38
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bd6:	f7f8 fd41 	bl	800165c <HAL_GetTick>
 8008bda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008be0:	2300      	movs	r3, #0
 8008be2:	60bb      	str	r3, [r7, #8]
 8008be4:	2300      	movs	r3, #0
 8008be6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2108      	movs	r1, #8
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 ff5c 	bl	8009ab0 <SDMMC_CmdBlockLength>
 8008bf8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	e0ad      	b.n	8008d60 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c0c:	041b      	lsls	r3, r3, #16
 8008c0e:	4619      	mov	r1, r3
 8008c10:	4610      	mov	r0, r2
 8008c12:	f001 f895 	bl	8009d40 <SDMMC_CmdAppCommand>
 8008c16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	e09e      	b.n	8008d60 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c22:	f04f 33ff 	mov.w	r3, #4294967295
 8008c26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c28:	2308      	movs	r3, #8
 8008c2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008c2c:	2330      	movs	r3, #48	; 0x30
 8008c2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c30:	2302      	movs	r3, #2
 8008c32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f107 0210 	add.w	r2, r7, #16
 8008c44:	4611      	mov	r1, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 ff06 	bl	8009a58 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 f8db 	bl	8009e0c <SDMMC_CmdSendSCR>
 8008c56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d027      	beq.n	8008cae <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	e07e      	b.n	8008d60 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d113      	bne.n	8008c98 <SD_FindSCR+0xcc>
 8008c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d110      	bne.n	8008c98 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f000 fe64 	bl	8009948 <SDMMC_ReadFIFO>
 8008c80:	4603      	mov	r3, r0
 8008c82:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 fe5d 	bl	8009948 <SDMMC_ReadFIFO>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	60fb      	str	r3, [r7, #12]
      index++;
 8008c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c94:	3301      	adds	r3, #1
 8008c96:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c98:	f7f8 fce0 	bl	800165c <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca6:	d102      	bne.n	8008cae <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ca8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cac:	e058      	b.n	8008d60 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cb4:	f240 532a 	movw	r3, #1322	; 0x52a
 8008cb8:	4013      	ands	r3, r2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0d1      	beq.n	8008c62 <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc4:	f003 0308 	and.w	r3, r3, #8
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d005      	beq.n	8008cd8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2208      	movs	r2, #8
 8008cd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	e043      	b.n	8008d60 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d005      	beq.n	8008cf2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2202      	movs	r2, #2
 8008cec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e036      	b.n	8008d60 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d005      	beq.n	8008d0c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2220      	movs	r2, #32
 8008d06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d08:	2320      	movs	r3, #32
 8008d0a:	e029      	b.n	8008d60 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a15      	ldr	r2, [pc, #84]	; (8008d68 <SD_FindSCR+0x19c>)
 8008d12:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	061a      	lsls	r2, r3, #24
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	021b      	lsls	r3, r3, #8
 8008d1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d20:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	0a1b      	lsrs	r3, r3, #8
 8008d26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	0e1b      	lsrs	r3, r3, #24
 8008d30:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d34:	601a      	str	r2, [r3, #0]
    scr++;
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	3304      	adds	r3, #4
 8008d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	061a      	lsls	r2, r3, #24
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	021b      	lsls	r3, r3, #8
 8008d44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d48:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	0a1b      	lsrs	r3, r3, #8
 8008d4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	0e1b      	lsrs	r3, r3, #24
 8008d58:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3738      	adds	r7, #56	; 0x38
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	18000f3a 	.word	0x18000f3a

08008d6c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d03f      	beq.n	8008e06 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
 8008d8a:	e033      	b.n	8008df4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fdd9 	bl	8009948 <SDMMC_ReadFIFO>
 8008d96:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3301      	adds	r3, #1
 8008da4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	0a1b      	lsrs	r3, r3, #8
 8008db0:	b2da      	uxtb	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	0c1b      	lsrs	r3, r3, #16
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	0e1b      	lsrs	r3, r3, #24
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3301      	adds	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	3301      	adds	r3, #1
 8008df2:	617b      	str	r3, [r7, #20]
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b07      	cmp	r3, #7
 8008df8:	d9c8      	bls.n	8008d8c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008e06:	bf00      	nop
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b086      	sub	sp, #24
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d043      	beq.n	8008eb0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	e037      	b.n	8008e9e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3301      	adds	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	021a      	lsls	r2, r3, #8
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	041a      	lsls	r2, r3, #16
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3301      	adds	r3, #1
 8008e68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	061a      	lsls	r2, r3, #24
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f107 0208 	add.w	r2, r7, #8
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fd65 	bl	8009962 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	617b      	str	r3, [r7, #20]
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	2b07      	cmp	r3, #7
 8008ea2:	d9c4      	bls.n	8008e2e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008eb0:	bf00      	nop
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8008ec2:	bf00      	nop
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008ed6:	bf00      	nop
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008efe:	bf00      	nop
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e095      	b.n	800905c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d108      	bne.n	8008f4a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f40:	d009      	beq.n	8008f56 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	61da      	str	r2, [r3, #28]
 8008f48:	e005      	b.n	8008f56 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7f8 f929 	bl	80011c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f8c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f96:	d902      	bls.n	8008f9e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	e002      	b.n	8008fa4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fa2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008fac:	d007      	beq.n	8008fbe <HAL_SPI_Init+0xa0>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fb6:	d002      	beq.n	8008fbe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009000:	ea42 0103 	orr.w	r1, r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	0c1b      	lsrs	r3, r3, #16
 800901a:	f003 0204 	and.w	r2, r3, #4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	f003 0310 	and.w	r3, r3, #16
 8009026:	431a      	orrs	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800903a:	ea42 0103 	orr.w	r1, r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e049      	b.n	800910a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d106      	bne.n	8009090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f7f8 f984 	bl	8001398 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3304      	adds	r3, #4
 80090a0:	4619      	mov	r1, r3
 80090a2:	4610      	mov	r0, r2
 80090a4:	f000 fa4c 	bl	8009540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b02      	cmp	r3, #2
 8009126:	d122      	bne.n	800916e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b02      	cmp	r3, #2
 8009134:	d11b      	bne.n	800916e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f06f 0202 	mvn.w	r2, #2
 800913e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	f003 0303 	and.w	r3, r3, #3
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f9d5 	bl	8009504 <HAL_TIM_IC_CaptureCallback>
 800915a:	e005      	b.n	8009168 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f9c7 	bl	80094f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9d8 	bl	8009518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	f003 0304 	and.w	r3, r3, #4
 8009178:	2b04      	cmp	r3, #4
 800917a:	d122      	bne.n	80091c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f003 0304 	and.w	r3, r3, #4
 8009186:	2b04      	cmp	r3, #4
 8009188:	d11b      	bne.n	80091c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f06f 0204 	mvn.w	r2, #4
 8009192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f9ab 	bl	8009504 <HAL_TIM_IC_CaptureCallback>
 80091ae:	e005      	b.n	80091bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f99d 	bl	80094f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f9ae 	bl	8009518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b08      	cmp	r3, #8
 80091ce:	d122      	bne.n	8009216 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	f003 0308 	and.w	r3, r3, #8
 80091da:	2b08      	cmp	r3, #8
 80091dc:	d11b      	bne.n	8009216 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f06f 0208 	mvn.w	r2, #8
 80091e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2204      	movs	r2, #4
 80091ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	f003 0303 	and.w	r3, r3, #3
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f981 	bl	8009504 <HAL_TIM_IC_CaptureCallback>
 8009202:	e005      	b.n	8009210 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 f973 	bl	80094f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f984 	bl	8009518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	2b10      	cmp	r3, #16
 8009222:	d122      	bne.n	800926a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f003 0310 	and.w	r3, r3, #16
 800922e:	2b10      	cmp	r3, #16
 8009230:	d11b      	bne.n	800926a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f06f 0210 	mvn.w	r2, #16
 800923a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2208      	movs	r2, #8
 8009240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800924c:	2b00      	cmp	r3, #0
 800924e:	d003      	beq.n	8009258 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f957 	bl	8009504 <HAL_TIM_IC_CaptureCallback>
 8009256:	e005      	b.n	8009264 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f949 	bl	80094f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f95a 	bl	8009518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	f003 0301 	and.w	r3, r3, #1
 8009274:	2b01      	cmp	r3, #1
 8009276:	d10e      	bne.n	8009296 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b01      	cmp	r3, #1
 8009284:	d107      	bne.n	8009296 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f06f 0201 	mvn.w	r2, #1
 800928e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f923 	bl	80094dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a0:	2b80      	cmp	r3, #128	; 0x80
 80092a2:	d10e      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ae:	2b80      	cmp	r3, #128	; 0x80
 80092b0:	d107      	bne.n	80092c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fb05 	bl	80098cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d0:	d10e      	bne.n	80092f0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092dc:	2b80      	cmp	r3, #128	; 0x80
 80092de:	d107      	bne.n	80092f0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80092e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 faf8 	bl	80098e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fa:	2b40      	cmp	r3, #64	; 0x40
 80092fc:	d10e      	bne.n	800931c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009308:	2b40      	cmp	r3, #64	; 0x40
 800930a:	d107      	bne.n	800931c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f908 	bl	800952c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b20      	cmp	r3, #32
 8009328:	d10e      	bne.n	8009348 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b20      	cmp	r3, #32
 8009336:	d107      	bne.n	8009348 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f06f 0220 	mvn.w	r2, #32
 8009340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fab8 	bl	80098b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009360:	2b01      	cmp	r3, #1
 8009362:	d101      	bne.n	8009368 <HAL_TIM_ConfigClockSource+0x18>
 8009364:	2302      	movs	r3, #2
 8009366:	e0b5      	b.n	80094d4 <HAL_TIM_ConfigClockSource+0x184>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800938a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009392:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093a4:	d03e      	beq.n	8009424 <HAL_TIM_ConfigClockSource+0xd4>
 80093a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093aa:	f200 8087 	bhi.w	80094bc <HAL_TIM_ConfigClockSource+0x16c>
 80093ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b2:	f000 8085 	beq.w	80094c0 <HAL_TIM_ConfigClockSource+0x170>
 80093b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093ba:	d87f      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x16c>
 80093bc:	2b70      	cmp	r3, #112	; 0x70
 80093be:	d01a      	beq.n	80093f6 <HAL_TIM_ConfigClockSource+0xa6>
 80093c0:	2b70      	cmp	r3, #112	; 0x70
 80093c2:	d87b      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x16c>
 80093c4:	2b60      	cmp	r3, #96	; 0x60
 80093c6:	d050      	beq.n	800946a <HAL_TIM_ConfigClockSource+0x11a>
 80093c8:	2b60      	cmp	r3, #96	; 0x60
 80093ca:	d877      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x16c>
 80093cc:	2b50      	cmp	r3, #80	; 0x50
 80093ce:	d03c      	beq.n	800944a <HAL_TIM_ConfigClockSource+0xfa>
 80093d0:	2b50      	cmp	r3, #80	; 0x50
 80093d2:	d873      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x16c>
 80093d4:	2b40      	cmp	r3, #64	; 0x40
 80093d6:	d058      	beq.n	800948a <HAL_TIM_ConfigClockSource+0x13a>
 80093d8:	2b40      	cmp	r3, #64	; 0x40
 80093da:	d86f      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x16c>
 80093dc:	2b30      	cmp	r3, #48	; 0x30
 80093de:	d064      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x15a>
 80093e0:	2b30      	cmp	r3, #48	; 0x30
 80093e2:	d86b      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x16c>
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	d060      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x15a>
 80093e8:	2b20      	cmp	r3, #32
 80093ea:	d867      	bhi.n	80094bc <HAL_TIM_ConfigClockSource+0x16c>
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d05c      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x15a>
 80093f0:	2b10      	cmp	r3, #16
 80093f2:	d05a      	beq.n	80094aa <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80093f4:	e062      	b.n	80094bc <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6818      	ldr	r0, [r3, #0]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	6899      	ldr	r1, [r3, #8]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f000 f9af 	bl	8009768 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009418:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	609a      	str	r2, [r3, #8]
      break;
 8009422:	e04e      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	6899      	ldr	r1, [r3, #8]
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f000 f998 	bl	8009768 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689a      	ldr	r2, [r3, #8]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009446:	609a      	str	r2, [r3, #8]
      break;
 8009448:	e03b      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	6859      	ldr	r1, [r3, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	461a      	mov	r2, r3
 8009458:	f000 f90c 	bl	8009674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2150      	movs	r1, #80	; 0x50
 8009462:	4618      	mov	r0, r3
 8009464:	f000 f965 	bl	8009732 <TIM_ITRx_SetConfig>
      break;
 8009468:	e02b      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	6859      	ldr	r1, [r3, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	461a      	mov	r2, r3
 8009478:	f000 f92b 	bl	80096d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2160      	movs	r1, #96	; 0x60
 8009482:	4618      	mov	r0, r3
 8009484:	f000 f955 	bl	8009732 <TIM_ITRx_SetConfig>
      break;
 8009488:	e01b      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	6859      	ldr	r1, [r3, #4]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	461a      	mov	r2, r3
 8009498:	f000 f8ec 	bl	8009674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2140      	movs	r1, #64	; 0x40
 80094a2:	4618      	mov	r0, r3
 80094a4:	f000 f945 	bl	8009732 <TIM_ITRx_SetConfig>
      break;
 80094a8:	e00b      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4619      	mov	r1, r3
 80094b4:	4610      	mov	r0, r2
 80094b6:	f000 f93c 	bl	8009732 <TIM_ITRx_SetConfig>
        break;
 80094ba:	e002      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80094bc:	bf00      	nop
 80094be:	e000      	b.n	80094c2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80094c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a40      	ldr	r2, [pc, #256]	; (8009654 <TIM_Base_SetConfig+0x114>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d013      	beq.n	8009580 <TIM_Base_SetConfig+0x40>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800955e:	d00f      	beq.n	8009580 <TIM_Base_SetConfig+0x40>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a3d      	ldr	r2, [pc, #244]	; (8009658 <TIM_Base_SetConfig+0x118>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d00b      	beq.n	8009580 <TIM_Base_SetConfig+0x40>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a3c      	ldr	r2, [pc, #240]	; (800965c <TIM_Base_SetConfig+0x11c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d007      	beq.n	8009580 <TIM_Base_SetConfig+0x40>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a3b      	ldr	r2, [pc, #236]	; (8009660 <TIM_Base_SetConfig+0x120>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d003      	beq.n	8009580 <TIM_Base_SetConfig+0x40>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a3a      	ldr	r2, [pc, #232]	; (8009664 <TIM_Base_SetConfig+0x124>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d108      	bne.n	8009592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	4313      	orrs	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a2f      	ldr	r2, [pc, #188]	; (8009654 <TIM_Base_SetConfig+0x114>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d01f      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a0:	d01b      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a2c      	ldr	r2, [pc, #176]	; (8009658 <TIM_Base_SetConfig+0x118>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d017      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a2b      	ldr	r2, [pc, #172]	; (800965c <TIM_Base_SetConfig+0x11c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d013      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a2a      	ldr	r2, [pc, #168]	; (8009660 <TIM_Base_SetConfig+0x120>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00f      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a29      	ldr	r2, [pc, #164]	; (8009664 <TIM_Base_SetConfig+0x124>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00b      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a28      	ldr	r2, [pc, #160]	; (8009668 <TIM_Base_SetConfig+0x128>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d007      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a27      	ldr	r2, [pc, #156]	; (800966c <TIM_Base_SetConfig+0x12c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d003      	beq.n	80095da <TIM_Base_SetConfig+0x9a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a26      	ldr	r2, [pc, #152]	; (8009670 <TIM_Base_SetConfig+0x130>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d108      	bne.n	80095ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	689a      	ldr	r2, [r3, #8]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a10      	ldr	r2, [pc, #64]	; (8009654 <TIM_Base_SetConfig+0x114>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d00f      	beq.n	8009638 <TIM_Base_SetConfig+0xf8>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a12      	ldr	r2, [pc, #72]	; (8009664 <TIM_Base_SetConfig+0x124>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00b      	beq.n	8009638 <TIM_Base_SetConfig+0xf8>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a11      	ldr	r2, [pc, #68]	; (8009668 <TIM_Base_SetConfig+0x128>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d007      	beq.n	8009638 <TIM_Base_SetConfig+0xf8>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a10      	ldr	r2, [pc, #64]	; (800966c <TIM_Base_SetConfig+0x12c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d003      	beq.n	8009638 <TIM_Base_SetConfig+0xf8>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a0f      	ldr	r2, [pc, #60]	; (8009670 <TIM_Base_SetConfig+0x130>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d103      	bne.n	8009640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	691a      	ldr	r2, [r3, #16]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	615a      	str	r2, [r3, #20]
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	40012c00 	.word	0x40012c00
 8009658:	40000400 	.word	0x40000400
 800965c:	40000800 	.word	0x40000800
 8009660:	40000c00 	.word	0x40000c00
 8009664:	40013400 	.word	0x40013400
 8009668:	40014000 	.word	0x40014000
 800966c:	40014400 	.word	0x40014400
 8009670:	40014800 	.word	0x40014800

08009674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	f023 0201 	bic.w	r2, r3, #1
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800969e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f023 030a 	bic.w	r3, r3, #10
 80096b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	697a      	ldr	r2, [r7, #20]
 80096c4:	621a      	str	r2, [r3, #32]
}
 80096c6:	bf00      	nop
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b087      	sub	sp, #28
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	f023 0210 	bic.w	r2, r3, #16
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	031b      	lsls	r3, r3, #12
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	4313      	orrs	r3, r2
 8009706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800970e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4313      	orrs	r3, r2
 8009718:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	621a      	str	r2, [r3, #32]
}
 8009726:	bf00      	nop
 8009728:	371c      	adds	r7, #28
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009732:	b480      	push	{r7}
 8009734:	b085      	sub	sp, #20
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	f043 0307 	orr.w	r3, r3, #7
 8009754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	609a      	str	r2, [r3, #8]
}
 800975c:	bf00      	nop
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009768:	b480      	push	{r7}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	021a      	lsls	r2, r3, #8
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	431a      	orrs	r2, r3
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	4313      	orrs	r3, r2
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	4313      	orrs	r3, r2
 8009794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	697a      	ldr	r2, [r7, #20]
 800979a:	609a      	str	r2, [r3, #8]
}
 800979c:	bf00      	nop
 800979e:	371c      	adds	r7, #28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d101      	bne.n	80097c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097bc:	2302      	movs	r3, #2
 80097be:	e068      	b.n	8009892 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2202      	movs	r2, #2
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a2e      	ldr	r2, [pc, #184]	; (80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d004      	beq.n	80097f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a2d      	ldr	r2, [pc, #180]	; (80098a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d108      	bne.n	8009806 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80097fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4313      	orrs	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800980c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	4313      	orrs	r3, r2
 8009816:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a1e      	ldr	r2, [pc, #120]	; (80098a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d01d      	beq.n	8009866 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009832:	d018      	beq.n	8009866 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a1b      	ldr	r2, [pc, #108]	; (80098a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d013      	beq.n	8009866 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a1a      	ldr	r2, [pc, #104]	; (80098ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d00e      	beq.n	8009866 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a18      	ldr	r2, [pc, #96]	; (80098b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d009      	beq.n	8009866 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a13      	ldr	r2, [pc, #76]	; (80098a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d004      	beq.n	8009866 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a14      	ldr	r2, [pc, #80]	; (80098b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d10c      	bne.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800986c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	4313      	orrs	r3, r2
 8009876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	40012c00 	.word	0x40012c00
 80098a4:	40013400 	.word	0x40013400
 80098a8:	40000400 	.word	0x40000400
 80098ac:	40000800 	.word	0x40000800
 80098b0:	40000c00 	.word	0x40000c00
 80098b4:	40014000 	.word	0x40014000

080098b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80098f4:	b084      	sub	sp, #16
 80098f6:	b480      	push	{r7}
 80098f8:	b085      	sub	sp, #20
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	f107 001c 	add.w	r0, r7, #28
 8009902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800990a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800990c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800990e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8009912:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8009916:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800991a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	4313      	orrs	r3, r2
 8009920:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685a      	ldr	r2, [r3, #4]
 8009926:	4b07      	ldr	r3, [pc, #28]	; (8009944 <SDMMC_Init+0x50>)
 8009928:	4013      	ands	r3, r2
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	431a      	orrs	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	b004      	add	sp, #16
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	ffc02c00 	.word	0xffc02c00

08009948 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009962:	b480      	push	{r7}
 8009964:	b083      	sub	sp, #12
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f043 0203 	orr.w	r2, r3, #3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009998:	2002      	movs	r0, #2
 800999a:	f7f7 fe6b 	bl	8001674 <HAL_Delay>

  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f003 0303 	and.w	r3, r3, #3
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80099e2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80099e8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80099ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68da      	ldr	r2, [r3, #12]
 80099fa:	4b06      	ldr	r3, [pc, #24]	; (8009a14 <SDMMC_SendCommand+0x50>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	431a      	orrs	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	fffee0c0 	.word	0xfffee0c0

08009a18 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	b2db      	uxtb	r3, r3
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b085      	sub	sp, #20
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	3314      	adds	r3, #20
 8009a40:	461a      	mov	r2, r3
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	4413      	add	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a7e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009a84:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009a8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0

}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b088      	sub	sp, #32
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009abe:	2310      	movs	r3, #16
 8009ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ad2:	f107 0308 	add.w	r3, r7, #8
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff ff73 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ae2:	2110      	movs	r1, #16
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fa7b 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009aea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aec:	69fb      	ldr	r3, [r7, #28]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3720      	adds	r7, #32
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b088      	sub	sp, #32
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009b04:	2311      	movs	r3, #17
 8009b06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b18:	f107 0308 	add.w	r3, r7, #8
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff ff50 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b28:	2111      	movs	r1, #17
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fa58 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b32:	69fb      	ldr	r3, [r7, #28]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3720      	adds	r7, #32
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b088      	sub	sp, #32
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009b4a:	2312      	movs	r3, #18
 8009b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b54:	2300      	movs	r3, #0
 8009b56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b5e:	f107 0308 	add.w	r3, r7, #8
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ff2d 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b6e:	2112      	movs	r1, #18
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fa35 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009b76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b78:	69fb      	ldr	r3, [r7, #28]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3720      	adds	r7, #32
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b088      	sub	sp, #32
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009b90:	2318      	movs	r3, #24
 8009b92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ba2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ba4:	f107 0308 	add.w	r3, r7, #8
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f7ff ff0a 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bb4:	2118      	movs	r1, #24
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fa12 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009bbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bbe:	69fb      	ldr	r3, [r7, #28]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3720      	adds	r7, #32
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009bd6:	2319      	movs	r3, #25
 8009bd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009be0:	2300      	movs	r3, #0
 8009be2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009be8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bea:	f107 0308 	add.w	r3, r7, #8
 8009bee:	4619      	mov	r1, r3
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff fee7 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bfa:	2119      	movs	r1, #25
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f9ef 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009c02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c04:	69fb      	ldr	r3, [r7, #28]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3720      	adds	r7, #32
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009c1c:	230c      	movs	r3, #12
 8009c1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c26:	2300      	movs	r3, #0
 8009c28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c2e:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c48:	f107 0308 	add.w	r3, r7, #8
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff feb8 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009c54:	4a08      	ldr	r2, [pc, #32]	; (8009c78 <SDMMC_CmdStopTransfer+0x68>)
 8009c56:	210c      	movs	r1, #12
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f9c1 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009c5e:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3720      	adds	r7, #32
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	05f5e100 	.word	0x05f5e100

08009c7c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08a      	sub	sp, #40	; 0x28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009c8c:	2307      	movs	r3, #7
 8009c8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c94:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c96:	2300      	movs	r3, #0
 8009c98:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c9e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ca0:	f107 0310 	add.w	r3, r7, #16
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f7ff fe8c 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb0:	2107      	movs	r1, #7
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 f994 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009cb8:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3728      	adds	r7, #40	; 0x28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ce2:	f107 0308 	add.w	r3, r7, #8
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fe6b 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fbb8 	bl	800a464 <SDMMC_GetCmdError>
 8009cf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cf6:	69fb      	ldr	r3, [r7, #28]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009d08:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009d0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d0e:	2308      	movs	r3, #8
 8009d10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d22:	f107 0308 	add.w	r3, r7, #8
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7ff fe4b 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fb4a 	bl	800a3c8 <SDMMC_GetCmdResp7>
 8009d34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d36:	69fb      	ldr	r3, [r7, #28]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3720      	adds	r7, #32
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b088      	sub	sp, #32
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009d4e:	2337      	movs	r3, #55	; 0x37
 8009d50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d62:	f107 0308 	add.w	r3, r7, #8
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff fe2b 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d72:	2137      	movs	r1, #55	; 0x37
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f933 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009d7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3720      	adds	r7, #32
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b088      	sub	sp, #32
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009d94:	2329      	movs	r3, #41	; 0x29
 8009d96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009da6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009da8:	f107 0308 	add.w	r3, r7, #8
 8009dac:	4619      	mov	r1, r3
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7ff fe08 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fa4f 	bl	800a258 <SDMMC_GetCmdResp3>
 8009dba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dbc:	69fb      	ldr	r3, [r7, #28]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3720      	adds	r7, #32
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b088      	sub	sp, #32
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009dd4:	2306      	movs	r3, #6
 8009dd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dde:	2300      	movs	r3, #0
 8009de0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009de6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009de8:	f107 0308 	add.w	r3, r7, #8
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff fde8 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df8:	2106      	movs	r1, #6
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f8f0 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e02:	69fb      	ldr	r3, [r7, #28]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3720      	adds	r7, #32
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e14:	2300      	movs	r3, #0
 8009e16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009e18:	2333      	movs	r3, #51	; 0x33
 8009e1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e22:	2300      	movs	r3, #0
 8009e24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e2c:	f107 0308 	add.w	r3, r7, #8
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff fdc6 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e3c:	2133      	movs	r1, #51	; 0x33
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f8ce 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009e44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e46:	69fb      	ldr	r3, [r7, #28]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3720      	adds	r7, #32
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b088      	sub	sp, #32
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e66:	2300      	movs	r3, #0
 8009e68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e70:	f107 0308 	add.w	r3, r7, #8
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff fda4 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f9a1 	bl	800a1c4 <SDMMC_GetCmdResp2>
 8009e82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e84:	69fb      	ldr	r3, [r7, #28]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3720      	adds	r7, #32
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b088      	sub	sp, #32
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009e9c:	2309      	movs	r3, #9
 8009e9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ea0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009ea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eb0:	f107 0308 	add.w	r3, r7, #8
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff fd84 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f981 	bl	800a1c4 <SDMMC_GetCmdResp2>
 8009ec2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3720      	adds	r7, #32
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b088      	sub	sp, #32
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009edc:	2303      	movs	r3, #3
 8009ede:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ef0:	f107 0308 	add.w	r3, r7, #8
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff fd64 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	2103      	movs	r1, #3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f9e9 	bl	800a2d8 <SDMMC_GetCmdResp6>
 8009f06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f08:	69fb      	ldr	r3, [r7, #28]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3720      	adds	r7, #32
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b088      	sub	sp, #32
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f20:	230d      	movs	r3, #13
 8009f22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f34:	f107 0308 	add.w	r3, r7, #8
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff fd42 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f44:	210d      	movs	r1, #13
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f84a 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009f4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f4e:	69fb      	ldr	r3, [r7, #28]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3720      	adds	r7, #32
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009f64:	230d      	movs	r3, #13
 8009f66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f78:	f107 0308 	add.w	r3, r7, #8
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7ff fd20 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f88:	210d      	movs	r1, #13
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f828 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f92:	69fb      	ldr	r3, [r7, #28]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3720      	adds	r7, #32
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b088      	sub	sp, #32
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009fa8:	230b      	movs	r3, #11
 8009faa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fbc:	f107 0308 	add.w	r3, r7, #8
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7ff fcfe 	bl	80099c4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8009fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fcc:	210b      	movs	r1, #11
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f806 	bl	8009fe0 <SDMMC_GetCmdResp1>
 8009fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fd6:	69fb      	ldr	r3, [r7, #28]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3720      	adds	r7, #32
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009fee:	4b70      	ldr	r3, [pc, #448]	; (800a1b0 <SDMMC_GetCmdResp1+0x1d0>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a70      	ldr	r2, [pc, #448]	; (800a1b4 <SDMMC_GetCmdResp1+0x1d4>)
 8009ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff8:	0a5a      	lsrs	r2, r3, #9
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	fb02 f303 	mul.w	r3, r2, r3
 800a000:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	1e5a      	subs	r2, r3, #1
 800a006:	61fa      	str	r2, [r7, #28]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d102      	bne.n	800a012 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a00c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a010:	e0c9      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a016:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	4b67      	ldr	r3, [pc, #412]	; (800a1b8 <SDMMC_GetCmdResp1+0x1d8>)
 800a01c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0ef      	beq.n	800a002 <SDMMC_GetCmdResp1+0x22>
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1ea      	bne.n	800a002 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a030:	f003 0304 	and.w	r3, r3, #4
 800a034:	2b00      	cmp	r3, #0
 800a036:	d004      	beq.n	800a042 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2204      	movs	r2, #4
 800a03c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a03e:	2304      	movs	r3, #4
 800a040:	e0b1      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d004      	beq.n	800a058 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a054:	2301      	movs	r3, #1
 800a056:	e0a6      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4a58      	ldr	r2, [pc, #352]	; (800a1bc <SDMMC_GetCmdResp1+0x1dc>)
 800a05c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7ff fcda 	bl	8009a18 <SDMMC_GetCommandResponse>
 800a064:	4603      	mov	r3, r0
 800a066:	461a      	mov	r2, r3
 800a068:	7afb      	ldrb	r3, [r7, #11]
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d001      	beq.n	800a072 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a06e:	2301      	movs	r3, #1
 800a070:	e099      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a072:	2100      	movs	r1, #0
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f7ff fcdc 	bl	8009a32 <SDMMC_GetResponse>
 800a07a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	4b50      	ldr	r3, [pc, #320]	; (800a1c0 <SDMMC_GetCmdResp1+0x1e0>)
 800a080:	4013      	ands	r3, r2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a086:	2300      	movs	r3, #0
 800a088:	e08d      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	da02      	bge.n	800a096 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a094:	e087      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0a0:	2340      	movs	r3, #64	; 0x40
 800a0a2:	e080      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0ae:	2380      	movs	r3, #128	; 0x80
 800a0b0:	e079      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a0bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0c0:	e071      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d002      	beq.n	800a0d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a0cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0d0:	e069      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a0dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e0:	e061      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a0ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0f0:	e059      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a100:	e051      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a10c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a110:	e049      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a11c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a120:	e041      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a12c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a130:	e039      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a13c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a140:	e031      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a14c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a150:	e029      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a15c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a160:	e021      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a16c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a170:	e019      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d002      	beq.n	800a182 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a17c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a180:	e011      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a18c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a190:	e009      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f003 0308 	and.w	r3, r3, #8
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a19c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a1a0:	e001      	b.n	800a1a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a1a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3720      	adds	r7, #32
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20000000 	.word	0x20000000
 800a1b4:	10624dd3 	.word	0x10624dd3
 800a1b8:	00200045 	.word	0x00200045
 800a1bc:	002000c5 	.word	0x002000c5
 800a1c0:	fdffe008 	.word	0xfdffe008

0800a1c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1cc:	4b1f      	ldr	r3, [pc, #124]	; (800a24c <SDMMC_GetCmdResp2+0x88>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a1f      	ldr	r2, [pc, #124]	; (800a250 <SDMMC_GetCmdResp2+0x8c>)
 800a1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d6:	0a5b      	lsrs	r3, r3, #9
 800a1d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1dc:	fb02 f303 	mul.w	r3, r2, r3
 800a1e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	1e5a      	subs	r2, r3, #1
 800a1e6:	60fa      	str	r2, [r7, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d102      	bne.n	800a1f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1f0:	e026      	b.n	800a240 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0ef      	beq.n	800a1e2 <SDMMC_GetCmdResp2+0x1e>
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1ea      	bne.n	800a1e2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a210:	f003 0304 	and.w	r3, r3, #4
 800a214:	2b00      	cmp	r3, #0
 800a216:	d004      	beq.n	800a222 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2204      	movs	r2, #4
 800a21c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a21e:	2304      	movs	r3, #4
 800a220:	e00e      	b.n	800a240 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d004      	beq.n	800a238 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a234:	2301      	movs	r3, #1
 800a236:	e003      	b.n	800a240 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a06      	ldr	r2, [pc, #24]	; (800a254 <SDMMC_GetCmdResp2+0x90>)
 800a23c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	20000000 	.word	0x20000000
 800a250:	10624dd3 	.word	0x10624dd3
 800a254:	002000c5 	.word	0x002000c5

0800a258 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a260:	4b1a      	ldr	r3, [pc, #104]	; (800a2cc <SDMMC_GetCmdResp3+0x74>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a1a      	ldr	r2, [pc, #104]	; (800a2d0 <SDMMC_GetCmdResp3+0x78>)
 800a266:	fba2 2303 	umull	r2, r3, r2, r3
 800a26a:	0a5b      	lsrs	r3, r3, #9
 800a26c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a270:	fb02 f303 	mul.w	r3, r2, r3
 800a274:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	1e5a      	subs	r2, r3, #1
 800a27a:	60fa      	str	r2, [r7, #12]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d102      	bne.n	800a286 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a284:	e01b      	b.n	800a2be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0ef      	beq.n	800a276 <SDMMC_GetCmdResp3+0x1e>
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1ea      	bne.n	800a276 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d004      	beq.n	800a2b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2204      	movs	r2, #4
 800a2b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2b2:	2304      	movs	r3, #4
 800a2b4:	e003      	b.n	800a2be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a06      	ldr	r2, [pc, #24]	; (800a2d4 <SDMMC_GetCmdResp3+0x7c>)
 800a2ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	20000000 	.word	0x20000000
 800a2d0:	10624dd3 	.word	0x10624dd3
 800a2d4:	002000c5 	.word	0x002000c5

0800a2d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b088      	sub	sp, #32
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2e6:	4b35      	ldr	r3, [pc, #212]	; (800a3bc <SDMMC_GetCmdResp6+0xe4>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a35      	ldr	r2, [pc, #212]	; (800a3c0 <SDMMC_GetCmdResp6+0xe8>)
 800a2ec:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f0:	0a5b      	lsrs	r3, r3, #9
 800a2f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2f6:	fb02 f303 	mul.w	r3, r2, r3
 800a2fa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	1e5a      	subs	r2, r3, #1
 800a300:	61fa      	str	r2, [r7, #28]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d102      	bne.n	800a30c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a306:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a30a:	e052      	b.n	800a3b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a310:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0ef      	beq.n	800a2fc <SDMMC_GetCmdResp6+0x24>
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1ea      	bne.n	800a2fc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d004      	beq.n	800a33c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2204      	movs	r2, #4
 800a336:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a338:	2304      	movs	r3, #4
 800a33a:	e03a      	b.n	800a3b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2201      	movs	r2, #1
 800a34c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a34e:	2301      	movs	r3, #1
 800a350:	e02f      	b.n	800a3b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f7ff fb60 	bl	8009a18 <SDMMC_GetCommandResponse>
 800a358:	4603      	mov	r3, r0
 800a35a:	461a      	mov	r2, r3
 800a35c:	7afb      	ldrb	r3, [r7, #11]
 800a35e:	4293      	cmp	r3, r2
 800a360:	d001      	beq.n	800a366 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a362:	2301      	movs	r3, #1
 800a364:	e025      	b.n	800a3b2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4a16      	ldr	r2, [pc, #88]	; (800a3c4 <SDMMC_GetCmdResp6+0xec>)
 800a36a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a36c:	2100      	movs	r1, #0
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f7ff fb5f 	bl	8009a32 <SDMMC_GetResponse>
 800a374:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d106      	bne.n	800a38e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	0c1b      	lsrs	r3, r3, #16
 800a384:	b29a      	uxth	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e011      	b.n	800a3b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a39c:	e009      	b.n	800a3b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3ac:	e001      	b.n	800a3b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3720      	adds	r7, #32
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20000000 	.word	0x20000000
 800a3c0:	10624dd3 	.word	0x10624dd3
 800a3c4:	002000c5 	.word	0x002000c5

0800a3c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3d0:	4b22      	ldr	r3, [pc, #136]	; (800a45c <SDMMC_GetCmdResp7+0x94>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a22      	ldr	r2, [pc, #136]	; (800a460 <SDMMC_GetCmdResp7+0x98>)
 800a3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3da:	0a5b      	lsrs	r3, r3, #9
 800a3dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e0:	fb02 f303 	mul.w	r3, r2, r3
 800a3e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	1e5a      	subs	r2, r3, #1
 800a3ea:	60fa      	str	r2, [r7, #12]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d102      	bne.n	800a3f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3f4:	e02c      	b.n	800a450 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a402:	2b00      	cmp	r3, #0
 800a404:	d0ef      	beq.n	800a3e6 <SDMMC_GetCmdResp7+0x1e>
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1ea      	bne.n	800a3e6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d004      	beq.n	800a426 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2204      	movs	r2, #4
 800a420:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a422:	2304      	movs	r3, #4
 800a424:	e014      	b.n	800a450 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d004      	beq.n	800a43c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a438:	2301      	movs	r3, #1
 800a43a:	e009      	b.n	800a450 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2240      	movs	r2, #64	; 0x40
 800a44c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a44e:	2300      	movs	r3, #0

}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	20000000 	.word	0x20000000
 800a460:	10624dd3 	.word	0x10624dd3

0800a464 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a46c:	4b11      	ldr	r3, [pc, #68]	; (800a4b4 <SDMMC_GetCmdError+0x50>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a11      	ldr	r2, [pc, #68]	; (800a4b8 <SDMMC_GetCmdError+0x54>)
 800a472:	fba2 2303 	umull	r2, r3, r2, r3
 800a476:	0a5b      	lsrs	r3, r3, #9
 800a478:	f241 3288 	movw	r2, #5000	; 0x1388
 800a47c:	fb02 f303 	mul.w	r3, r2, r3
 800a480:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	1e5a      	subs	r2, r3, #1
 800a486:	60fa      	str	r2, [r7, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d102      	bne.n	800a492 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a48c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a490:	e009      	b.n	800a4a6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d0f1      	beq.n	800a482 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a06      	ldr	r2, [pc, #24]	; (800a4bc <SDMMC_GetCmdError+0x58>)
 800a4a2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	20000000 	.word	0x20000000
 800a4b8:	10624dd3 	.word	0x10624dd3
 800a4bc:	002000c5 	.word	0x002000c5

0800a4c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	f107 001c 	add.w	r0, r7, #28
 800a4ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 f9ce 	bl	800b880 <USB_CoreReset>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a4e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	639a      	str	r2, [r3, #56]	; 0x38
 800a4fa:	e005      	b.n	800a508 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a500:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a508:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a514:	b004      	add	sp, #16
 800a516:	4770      	bx	lr

0800a518 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a518:	b480      	push	{r7}
 800a51a:	b087      	sub	sp, #28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	4613      	mov	r3, r2
 800a524:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d165      	bne.n	800a5f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	4a3e      	ldr	r2, [pc, #248]	; (800a628 <USB_SetTurnaroundTime+0x110>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d906      	bls.n	800a542 <USB_SetTurnaroundTime+0x2a>
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	4a3d      	ldr	r2, [pc, #244]	; (800a62c <USB_SetTurnaroundTime+0x114>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d202      	bcs.n	800a542 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a53c:	230f      	movs	r3, #15
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	e05c      	b.n	800a5fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	4a39      	ldr	r2, [pc, #228]	; (800a62c <USB_SetTurnaroundTime+0x114>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d306      	bcc.n	800a558 <USB_SetTurnaroundTime+0x40>
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	4a38      	ldr	r2, [pc, #224]	; (800a630 <USB_SetTurnaroundTime+0x118>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d202      	bcs.n	800a558 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a552:	230e      	movs	r3, #14
 800a554:	617b      	str	r3, [r7, #20]
 800a556:	e051      	b.n	800a5fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	4a35      	ldr	r2, [pc, #212]	; (800a630 <USB_SetTurnaroundTime+0x118>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d306      	bcc.n	800a56e <USB_SetTurnaroundTime+0x56>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4a34      	ldr	r2, [pc, #208]	; (800a634 <USB_SetTurnaroundTime+0x11c>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d202      	bcs.n	800a56e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a568:	230d      	movs	r3, #13
 800a56a:	617b      	str	r3, [r7, #20]
 800a56c:	e046      	b.n	800a5fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	4a30      	ldr	r2, [pc, #192]	; (800a634 <USB_SetTurnaroundTime+0x11c>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d306      	bcc.n	800a584 <USB_SetTurnaroundTime+0x6c>
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	4a2f      	ldr	r2, [pc, #188]	; (800a638 <USB_SetTurnaroundTime+0x120>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d802      	bhi.n	800a584 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a57e:	230c      	movs	r3, #12
 800a580:	617b      	str	r3, [r7, #20]
 800a582:	e03b      	b.n	800a5fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	4a2c      	ldr	r2, [pc, #176]	; (800a638 <USB_SetTurnaroundTime+0x120>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d906      	bls.n	800a59a <USB_SetTurnaroundTime+0x82>
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	4a2b      	ldr	r2, [pc, #172]	; (800a63c <USB_SetTurnaroundTime+0x124>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d802      	bhi.n	800a59a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a594:	230b      	movs	r3, #11
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	e030      	b.n	800a5fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	4a27      	ldr	r2, [pc, #156]	; (800a63c <USB_SetTurnaroundTime+0x124>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d906      	bls.n	800a5b0 <USB_SetTurnaroundTime+0x98>
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	4a26      	ldr	r2, [pc, #152]	; (800a640 <USB_SetTurnaroundTime+0x128>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d802      	bhi.n	800a5b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a5aa:	230a      	movs	r3, #10
 800a5ac:	617b      	str	r3, [r7, #20]
 800a5ae:	e025      	b.n	800a5fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	4a23      	ldr	r2, [pc, #140]	; (800a640 <USB_SetTurnaroundTime+0x128>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d906      	bls.n	800a5c6 <USB_SetTurnaroundTime+0xae>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	4a22      	ldr	r2, [pc, #136]	; (800a644 <USB_SetTurnaroundTime+0x12c>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d202      	bcs.n	800a5c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a5c0:	2309      	movs	r3, #9
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	e01a      	b.n	800a5fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	4a1e      	ldr	r2, [pc, #120]	; (800a644 <USB_SetTurnaroundTime+0x12c>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d306      	bcc.n	800a5dc <USB_SetTurnaroundTime+0xc4>
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	4a1d      	ldr	r2, [pc, #116]	; (800a648 <USB_SetTurnaroundTime+0x130>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d802      	bhi.n	800a5dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a5d6:	2308      	movs	r3, #8
 800a5d8:	617b      	str	r3, [r7, #20]
 800a5da:	e00f      	b.n	800a5fc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	4a1a      	ldr	r2, [pc, #104]	; (800a648 <USB_SetTurnaroundTime+0x130>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d906      	bls.n	800a5f2 <USB_SetTurnaroundTime+0xda>
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	4a19      	ldr	r2, [pc, #100]	; (800a64c <USB_SetTurnaroundTime+0x134>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d202      	bcs.n	800a5f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a5ec:	2307      	movs	r3, #7
 800a5ee:	617b      	str	r3, [r7, #20]
 800a5f0:	e004      	b.n	800a5fc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a5f2:	2306      	movs	r3, #6
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	e001      	b.n	800a5fc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a5f8:	2309      	movs	r3, #9
 800a5fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	68da      	ldr	r2, [r3, #12]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	029b      	lsls	r3, r3, #10
 800a610:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a614:	431a      	orrs	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	371c      	adds	r7, #28
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	00d8acbf 	.word	0x00d8acbf
 800a62c:	00e4e1c0 	.word	0x00e4e1c0
 800a630:	00f42400 	.word	0x00f42400
 800a634:	01067380 	.word	0x01067380
 800a638:	011a499f 	.word	0x011a499f
 800a63c:	01312cff 	.word	0x01312cff
 800a640:	014ca43f 	.word	0x014ca43f
 800a644:	016e3600 	.word	0x016e3600
 800a648:	01a6ab1f 	.word	0x01a6ab1f
 800a64c:	01e84800 	.word	0x01e84800

0800a650 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f043 0201 	orr.w	r2, r3, #1
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f023 0201 	bic.w	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d106      	bne.n	800a6c0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	60da      	str	r2, [r3, #12]
 800a6be:	e00b      	b.n	800a6d8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d106      	bne.n	800a6d4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	60da      	str	r2, [r3, #12]
 800a6d2:	e001      	b.n	800a6d8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e003      	b.n	800a6e0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a6d8:	2032      	movs	r0, #50	; 0x32
 800a6da:	f7f6 ffcb 	bl	8001674 <HAL_Delay>

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b086      	sub	sp, #24
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a6f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a702:	2300      	movs	r3, #0
 800a704:	613b      	str	r3, [r7, #16]
 800a706:	e009      	b.n	800a71c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	3340      	adds	r3, #64	; 0x40
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	2200      	movs	r2, #0
 800a714:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	3301      	adds	r3, #1
 800a71a:	613b      	str	r3, [r7, #16]
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	2b0e      	cmp	r3, #14
 800a720:	d9f2      	bls.n	800a708 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d11c      	bne.n	800a762 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a736:	f043 0302 	orr.w	r3, r3, #2
 800a73a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a740:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	601a      	str	r2, [r3, #0]
 800a760:	e005      	b.n	800a76e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a766:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a774:	461a      	mov	r2, r3
 800a776:	2300      	movs	r3, #0
 800a778:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a780:	4619      	mov	r1, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a788:	461a      	mov	r2, r3
 800a78a:	680b      	ldr	r3, [r1, #0]
 800a78c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a78e:	2103      	movs	r1, #3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 f93d 	bl	800aa10 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a796:	2110      	movs	r1, #16
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f8f1 	bl	800a980 <USB_FlushTxFifo>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 f90f 	bl	800a9cc <USB_FlushRxFifo>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7be:	461a      	mov	r2, r3
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	2300      	movs	r3, #0
 800a7da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	613b      	str	r3, [r7, #16]
 800a7e0:	e043      	b.n	800a86a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7f8:	d118      	bne.n	800a82c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d10a      	bne.n	800a816 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a80c:	461a      	mov	r2, r3
 800a80e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	e013      	b.n	800a83e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a822:	461a      	mov	r2, r3
 800a824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	e008      	b.n	800a83e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a838:	461a      	mov	r2, r3
 800a83a:	2300      	movs	r3, #0
 800a83c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	015a      	lsls	r2, r3, #5
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	4413      	add	r3, r2
 800a846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84a:	461a      	mov	r2, r3
 800a84c:	2300      	movs	r3, #0
 800a84e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	015a      	lsls	r2, r3, #5
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	4413      	add	r3, r2
 800a858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a85c:	461a      	mov	r2, r3
 800a85e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a862:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	3301      	adds	r3, #1
 800a868:	613b      	str	r3, [r7, #16]
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d3b7      	bcc.n	800a7e2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a872:	2300      	movs	r3, #0
 800a874:	613b      	str	r3, [r7, #16]
 800a876:	e043      	b.n	800a900 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a88a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a88e:	d118      	bne.n	800a8c2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10a      	bne.n	800a8ac <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	e013      	b.n	800a8d4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	015a      	lsls	r2, r3, #5
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	e008      	b.n	800a8d4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	015a      	lsls	r2, r3, #5
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	015a      	lsls	r2, r3, #5
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	613b      	str	r3, [r7, #16]
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	429a      	cmp	r2, r3
 800a906:	d3b7      	bcc.n	800a878 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a91a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a928:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	f043 0210 	orr.w	r2, r3, #16
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	699a      	ldr	r2, [r3, #24]
 800a93a:	4b10      	ldr	r3, [pc, #64]	; (800a97c <USB_DevInit+0x294>)
 800a93c:	4313      	orrs	r3, r2
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a944:	2b00      	cmp	r3, #0
 800a946:	d005      	beq.n	800a954 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	f043 0208 	orr.w	r2, r3, #8
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a956:	2b01      	cmp	r3, #1
 800a958:	d107      	bne.n	800a96a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a962:	f043 0304 	orr.w	r3, r3, #4
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a976:	b004      	add	sp, #16
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	803c3800 	.word	0x803c3800

0800a980 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a98a:	2300      	movs	r3, #0
 800a98c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	019b      	lsls	r3, r3, #6
 800a992:	f043 0220 	orr.w	r2, r3, #32
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	3301      	adds	r3, #1
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4a09      	ldr	r2, [pc, #36]	; (800a9c8 <USB_FlushTxFifo+0x48>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d901      	bls.n	800a9ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e006      	b.n	800a9ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	f003 0320 	and.w	r3, r3, #32
 800a9b4:	2b20      	cmp	r3, #32
 800a9b6:	d0f0      	beq.n	800a99a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	00030d40 	.word	0x00030d40

0800a9cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2210      	movs	r2, #16
 800a9dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	60fb      	str	r3, [r7, #12]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4a09      	ldr	r2, [pc, #36]	; (800aa0c <USB_FlushRxFifo+0x40>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d901      	bls.n	800a9f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	e006      	b.n	800a9fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	f003 0310 	and.w	r3, r3, #16
 800a9f8:	2b10      	cmp	r3, #16
 800a9fa:	d0f0      	beq.n	800a9de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	00030d40 	.word	0x00030d40

0800aa10 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	68f9      	ldr	r1, [r7, #12]
 800aa2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa30:	4313      	orrs	r3, r2
 800aa32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b087      	sub	sp, #28
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	f003 0306 	and.w	r3, r3, #6
 800aa5a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d002      	beq.n	800aa68 <USB_GetDevSpeed+0x26>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2b06      	cmp	r3, #6
 800aa66:	d102      	bne.n	800aa6e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aa68:	2302      	movs	r3, #2
 800aa6a:	75fb      	strb	r3, [r7, #23]
 800aa6c:	e001      	b.n	800aa72 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800aa6e:	230f      	movs	r3, #15
 800aa70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	371c      	adds	r7, #28
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	785b      	ldrb	r3, [r3, #1]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d13a      	bne.n	800ab12 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa2:	69da      	ldr	r2, [r3, #28]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f003 030f 	and.w	r3, r3, #15
 800aaac:	2101      	movs	r1, #1
 800aaae:	fa01 f303 	lsl.w	r3, r1, r3
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	68f9      	ldr	r1, [r7, #12]
 800aab6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aaba:	4313      	orrs	r3, r2
 800aabc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	015a      	lsls	r2, r3, #5
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	4413      	add	r3, r2
 800aac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d155      	bne.n	800ab80 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	015a      	lsls	r2, r3, #5
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	4413      	add	r3, r2
 800aadc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	78db      	ldrb	r3, [r3, #3]
 800aaee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aaf0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	059b      	lsls	r3, r3, #22
 800aaf6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	0151      	lsls	r1, r2, #5
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	440a      	add	r2, r1
 800ab02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab0e:	6013      	str	r3, [r2, #0]
 800ab10:	e036      	b.n	800ab80 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab18:	69da      	ldr	r2, [r3, #28]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	f003 030f 	and.w	r3, r3, #15
 800ab22:	2101      	movs	r1, #1
 800ab24:	fa01 f303 	lsl.w	r3, r1, r3
 800ab28:	041b      	lsls	r3, r3, #16
 800ab2a:	68f9      	ldr	r1, [r7, #12]
 800ab2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab30:	4313      	orrs	r3, r2
 800ab32:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d11a      	bne.n	800ab80 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	015a      	lsls	r2, r3, #5
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	78db      	ldrb	r3, [r3, #3]
 800ab64:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ab66:	430b      	orrs	r3, r1
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	0151      	lsls	r1, r2, #5
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	440a      	add	r2, r1
 800ab72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab7e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
	...

0800ab90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	785b      	ldrb	r3, [r3, #1]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d161      	bne.n	800ac70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abc2:	d11f      	bne.n	800ac04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	015a      	lsls	r2, r3, #5
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4413      	add	r3, r2
 800abcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	0151      	lsls	r1, r2, #5
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	440a      	add	r2, r1
 800abda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abe2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	0151      	lsls	r1, r2, #5
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	440a      	add	r2, r1
 800abfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	f003 030f 	and.w	r3, r3, #15
 800ac14:	2101      	movs	r1, #1
 800ac16:	fa01 f303 	lsl.w	r3, r1, r3
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	43db      	mvns	r3, r3
 800ac1e:	68f9      	ldr	r1, [r7, #12]
 800ac20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac24:	4013      	ands	r3, r2
 800ac26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2e:	69da      	ldr	r2, [r3, #28]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f003 030f 	and.w	r3, r3, #15
 800ac38:	2101      	movs	r1, #1
 800ac3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	43db      	mvns	r3, r3
 800ac42:	68f9      	ldr	r1, [r7, #12]
 800ac44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac48:	4013      	ands	r3, r2
 800ac4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	0159      	lsls	r1, r3, #5
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	440b      	add	r3, r1
 800ac62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac66:	4619      	mov	r1, r3
 800ac68:	4b35      	ldr	r3, [pc, #212]	; (800ad40 <USB_DeactivateEndpoint+0x1b0>)
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	600b      	str	r3, [r1, #0]
 800ac6e:	e060      	b.n	800ad32 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac86:	d11f      	bne.n	800acc8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	015a      	lsls	r2, r3, #5
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	0151      	lsls	r1, r2, #5
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	440a      	add	r2, r1
 800ac9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aca2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aca6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	015a      	lsls	r2, r3, #5
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	4413      	add	r3, r2
 800acb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	0151      	lsls	r1, r2, #5
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	440a      	add	r2, r1
 800acbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	2101      	movs	r1, #1
 800acda:	fa01 f303 	lsl.w	r3, r1, r3
 800acde:	041b      	lsls	r3, r3, #16
 800ace0:	43db      	mvns	r3, r3
 800ace2:	68f9      	ldr	r1, [r7, #12]
 800ace4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ace8:	4013      	ands	r3, r2
 800acea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf2:	69da      	ldr	r2, [r3, #28]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	f003 030f 	and.w	r3, r3, #15
 800acfc:	2101      	movs	r1, #1
 800acfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ad02:	041b      	lsls	r3, r3, #16
 800ad04:	43db      	mvns	r3, r3
 800ad06:	68f9      	ldr	r1, [r7, #12]
 800ad08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	0159      	lsls	r1, r3, #5
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	440b      	add	r3, r1
 800ad26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <USB_DeactivateEndpoint+0x1b4>)
 800ad2e:	4013      	ands	r3, r2
 800ad30:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3714      	adds	r7, #20
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	ec337800 	.word	0xec337800
 800ad44:	eff37800 	.word	0xeff37800

0800ad48 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	785b      	ldrb	r3, [r3, #1]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	f040 810a 	bne.w	800af7a <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d132      	bne.n	800add4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	015a      	lsls	r2, r3, #5
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	4413      	add	r3, r2
 800ad76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	0151      	lsls	r1, r2, #5
 800ad80:	697a      	ldr	r2, [r7, #20]
 800ad82:	440a      	add	r2, r1
 800ad84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	015a      	lsls	r2, r3, #5
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	4413      	add	r3, r2
 800ad9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	0151      	lsls	r1, r2, #5
 800ada4:	697a      	ldr	r2, [r7, #20]
 800ada6:	440a      	add	r2, r1
 800ada8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	0151      	lsls	r1, r2, #5
 800adc4:	697a      	ldr	r2, [r7, #20]
 800adc6:	440a      	add	r2, r1
 800adc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adcc:	0cdb      	lsrs	r3, r3, #19
 800adce:	04db      	lsls	r3, r3, #19
 800add0:	6113      	str	r3, [r2, #16]
 800add2:	e074      	b.n	800aebe <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	4413      	add	r3, r2
 800addc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	693a      	ldr	r2, [r7, #16]
 800ade4:	0151      	lsls	r1, r2, #5
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	440a      	add	r2, r1
 800adea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adee:	0cdb      	lsrs	r3, r3, #19
 800adf0:	04db      	lsls	r3, r3, #19
 800adf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	015a      	lsls	r2, r3, #5
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	4413      	add	r3, r2
 800adfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	0151      	lsls	r1, r2, #5
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	440a      	add	r2, r1
 800ae0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	015a      	lsls	r2, r3, #5
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	4413      	add	r3, r2
 800ae20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae24:	691a      	ldr	r2, [r3, #16]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	6959      	ldr	r1, [r3, #20]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	440b      	add	r3, r1
 800ae30:	1e59      	subs	r1, r3, #1
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae3a:	04d9      	lsls	r1, r3, #19
 800ae3c:	4baf      	ldr	r3, [pc, #700]	; (800b0fc <USB_EPStartXfer+0x3b4>)
 800ae3e:	400b      	ands	r3, r1
 800ae40:	6939      	ldr	r1, [r7, #16]
 800ae42:	0148      	lsls	r0, r1, #5
 800ae44:	6979      	ldr	r1, [r7, #20]
 800ae46:	4401      	add	r1, r0
 800ae48:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae5c:	691a      	ldr	r2, [r3, #16]
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae66:	6939      	ldr	r1, [r7, #16]
 800ae68:	0148      	lsls	r0, r1, #5
 800ae6a:	6979      	ldr	r1, [r7, #20]
 800ae6c:	4401      	add	r1, r0
 800ae6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae72:	4313      	orrs	r3, r2
 800ae74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	78db      	ldrb	r3, [r3, #3]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d11f      	bne.n	800aebe <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	0151      	lsls	r1, r2, #5
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	440a      	add	r2, r1
 800ae94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae98:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ae9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	0151      	lsls	r1, r2, #5
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	440a      	add	r2, r1
 800aeb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aeb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aebc:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	0151      	lsls	r1, r2, #5
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	440a      	add	r2, r1
 800aed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aedc:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	78db      	ldrb	r3, [r3, #3]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d015      	beq.n	800af12 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f000 8100 	beq.w	800b0f0 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	f003 030f 	and.w	r3, r3, #15
 800af00:	2101      	movs	r1, #1
 800af02:	fa01 f303 	lsl.w	r3, r1, r3
 800af06:	6979      	ldr	r1, [r7, #20]
 800af08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af0c:	4313      	orrs	r3, r2
 800af0e:	634b      	str	r3, [r1, #52]	; 0x34
 800af10:	e0ee      	b.n	800b0f0 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d110      	bne.n	800af44 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	015a      	lsls	r2, r3, #5
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	693a      	ldr	r2, [r7, #16]
 800af32:	0151      	lsls	r1, r2, #5
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	440a      	add	r2, r1
 800af38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af40:	6013      	str	r3, [r2, #0]
 800af42:	e00f      	b.n	800af64 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	015a      	lsls	r2, r3, #5
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	0151      	lsls	r1, r2, #5
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	440a      	add	r2, r1
 800af5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af62:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	68d9      	ldr	r1, [r3, #12]
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	781a      	ldrb	r2, [r3, #0]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	b29b      	uxth	r3, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f9e2 	bl	800b33c <USB_WritePacket>
 800af78:	e0ba      	b.n	800b0f0 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	015a      	lsls	r2, r3, #5
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	4413      	add	r3, r2
 800af82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	0151      	lsls	r1, r2, #5
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	440a      	add	r2, r1
 800af90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af94:	0cdb      	lsrs	r3, r3, #19
 800af96:	04db      	lsls	r3, r3, #19
 800af98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa6:	691b      	ldr	r3, [r3, #16]
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	0151      	lsls	r1, r2, #5
 800afac:	697a      	ldr	r2, [r7, #20]
 800afae:	440a      	add	r2, r1
 800afb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afb4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afb8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afbc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d123      	bne.n	800b00e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	015a      	lsls	r2, r3, #5
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	4413      	add	r3, r2
 800afce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd2:	691a      	ldr	r2, [r3, #16]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afdc:	6939      	ldr	r1, [r7, #16]
 800afde:	0148      	lsls	r0, r1, #5
 800afe0:	6979      	ldr	r1, [r7, #20]
 800afe2:	4401      	add	r1, r0
 800afe4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800afe8:	4313      	orrs	r3, r2
 800afea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	0151      	lsls	r1, r2, #5
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	440a      	add	r2, r1
 800b002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b00a:	6113      	str	r3, [r2, #16]
 800b00c:	e033      	b.n	800b076 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	695a      	ldr	r2, [r3, #20]
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	4413      	add	r3, r2
 800b018:	1e5a      	subs	r2, r3, #1
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b022:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b030:	691a      	ldr	r2, [r3, #16]
 800b032:	89fb      	ldrh	r3, [r7, #14]
 800b034:	04d9      	lsls	r1, r3, #19
 800b036:	4b31      	ldr	r3, [pc, #196]	; (800b0fc <USB_EPStartXfer+0x3b4>)
 800b038:	400b      	ands	r3, r1
 800b03a:	6939      	ldr	r1, [r7, #16]
 800b03c:	0148      	lsls	r0, r1, #5
 800b03e:	6979      	ldr	r1, [r7, #20]
 800b040:	4401      	add	r1, r0
 800b042:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b046:	4313      	orrs	r3, r2
 800b048:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	015a      	lsls	r2, r3, #5
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	4413      	add	r3, r2
 800b052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b056:	691a      	ldr	r2, [r3, #16]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	89f9      	ldrh	r1, [r7, #14]
 800b05e:	fb01 f303 	mul.w	r3, r1, r3
 800b062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b066:	6939      	ldr	r1, [r7, #16]
 800b068:	0148      	lsls	r0, r1, #5
 800b06a:	6979      	ldr	r1, [r7, #20]
 800b06c:	4401      	add	r1, r0
 800b06e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b072:	4313      	orrs	r3, r2
 800b074:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	78db      	ldrb	r3, [r3, #3]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d128      	bne.n	800b0d0 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d110      	bne.n	800b0b0 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	015a      	lsls	r2, r3, #5
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	4413      	add	r3, r2
 800b096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	0151      	lsls	r1, r2, #5
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	440a      	add	r2, r1
 800b0a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	e00f      	b.n	800b0d0 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	015a      	lsls	r2, r3, #5
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	693a      	ldr	r2, [r7, #16]
 800b0c0:	0151      	lsls	r1, r2, #5
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	440a      	add	r2, r1
 800b0c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	015a      	lsls	r2, r3, #5
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	0151      	lsls	r1, r2, #5
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	440a      	add	r2, r1
 800b0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	1ff80000 	.word	0x1ff80000

0800b100 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	785b      	ldrb	r3, [r3, #1]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	f040 80ab 	bne.w	800b274 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	695b      	ldr	r3, [r3, #20]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d132      	bne.n	800b18c <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	015a      	lsls	r2, r3, #5
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4413      	add	r3, r2
 800b12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	0151      	lsls	r1, r2, #5
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	440a      	add	r2, r1
 800b13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b140:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b144:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b148:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	0151      	lsls	r1, r2, #5
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	440a      	add	r2, r1
 800b160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	015a      	lsls	r2, r3, #5
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	4413      	add	r3, r2
 800b172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	0151      	lsls	r1, r2, #5
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	440a      	add	r2, r1
 800b180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b184:	0cdb      	lsrs	r3, r3, #19
 800b186:	04db      	lsls	r3, r3, #19
 800b188:	6113      	str	r3, [r2, #16]
 800b18a:	e04e      	b.n	800b22a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	4413      	add	r3, r2
 800b194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	0151      	lsls	r1, r2, #5
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	440a      	add	r2, r1
 800b1a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1a6:	0cdb      	lsrs	r3, r3, #19
 800b1a8:	04db      	lsls	r3, r3, #19
 800b1aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	015a      	lsls	r2, r3, #5
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	0151      	lsls	r1, r2, #5
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	440a      	add	r2, r1
 800b1c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b1ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	695a      	ldr	r2, [r3, #20]
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d903      	bls.n	800b1e4 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	689a      	ldr	r2, [r3, #8]
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	015a      	lsls	r2, r3, #5
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	0151      	lsls	r1, r2, #5
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	440a      	add	r2, r1
 800b1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b210:	691a      	ldr	r2, [r3, #16]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b21a:	68b9      	ldr	r1, [r7, #8]
 800b21c:	0148      	lsls	r0, r1, #5
 800b21e:	68f9      	ldr	r1, [r7, #12]
 800b220:	4401      	add	r1, r0
 800b222:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b226:	4313      	orrs	r3, r2
 800b228:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b244:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b248:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d06d      	beq.n	800b32e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	f003 030f 	and.w	r3, r3, #15
 800b262:	2101      	movs	r1, #1
 800b264:	fa01 f303 	lsl.w	r3, r1, r3
 800b268:	68f9      	ldr	r1, [r7, #12]
 800b26a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b26e:	4313      	orrs	r3, r2
 800b270:	634b      	str	r3, [r1, #52]	; 0x34
 800b272:	e05c      	b.n	800b32e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	015a      	lsls	r2, r3, #5
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	0151      	lsls	r1, r2, #5
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	440a      	add	r2, r1
 800b28a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b28e:	0cdb      	lsrs	r3, r3, #19
 800b290:	04db      	lsls	r3, r3, #19
 800b292:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	0151      	lsls	r1, r2, #5
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	440a      	add	r2, r1
 800b2aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d003      	beq.n	800b2c8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	689a      	ldr	r2, [r3, #8]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	015a      	lsls	r2, r3, #5
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	0151      	lsls	r1, r2, #5
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	440a      	add	r2, r1
 800b2de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f4:	691a      	ldr	r2, [r3, #16]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	0148      	lsls	r0, r1, #5
 800b302:	68f9      	ldr	r1, [r7, #12]
 800b304:	4401      	add	r1, r0
 800b306:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b30a:	4313      	orrs	r3, r2
 800b30c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	015a      	lsls	r2, r3, #5
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	4413      	add	r3, r2
 800b316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	0151      	lsls	r1, r2, #5
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	440a      	add	r2, r1
 800b324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b328:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b32c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b089      	sub	sp, #36	; 0x24
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	4611      	mov	r1, r2
 800b348:	461a      	mov	r2, r3
 800b34a:	460b      	mov	r3, r1
 800b34c:	71fb      	strb	r3, [r7, #7]
 800b34e:	4613      	mov	r3, r2
 800b350:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b35a:	88bb      	ldrh	r3, [r7, #4]
 800b35c:	3303      	adds	r3, #3
 800b35e:	089b      	lsrs	r3, r3, #2
 800b360:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b362:	2300      	movs	r3, #0
 800b364:	61bb      	str	r3, [r7, #24]
 800b366:	e00f      	b.n	800b388 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b368:	79fb      	ldrb	r3, [r7, #7]
 800b36a:	031a      	lsls	r2, r3, #12
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b374:	461a      	mov	r2, r3
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	3304      	adds	r3, #4
 800b380:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	3301      	adds	r3, #1
 800b386:	61bb      	str	r3, [r7, #24]
 800b388:	69ba      	ldr	r2, [r7, #24]
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d3eb      	bcc.n	800b368 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	4618      	mov	r0, r3
 800b394:	3724      	adds	r7, #36	; 0x24
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b089      	sub	sp, #36	; 0x24
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60f8      	str	r0, [r7, #12]
 800b3a6:	60b9      	str	r1, [r7, #8]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b3b4:	88fb      	ldrh	r3, [r7, #6]
 800b3b6:	3303      	adds	r3, #3
 800b3b8:	089b      	lsrs	r3, r3, #2
 800b3ba:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b3bc:	2300      	movs	r3, #0
 800b3be:	61bb      	str	r3, [r7, #24]
 800b3c0:	e00b      	b.n	800b3da <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	601a      	str	r2, [r3, #0]
    pDest++;
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	61bb      	str	r3, [r7, #24]
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d3ef      	bcc.n	800b3c2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b3e2:	69fb      	ldr	r3, [r7, #28]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3724      	adds	r7, #36	; 0x24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	785b      	ldrb	r3, [r3, #1]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d12c      	bne.n	800b466 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	015a      	lsls	r2, r3, #5
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	4413      	add	r3, r2
 800b414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	db12      	blt.n	800b444 <USB_EPSetStall+0x54>
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00f      	beq.n	800b444 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	0151      	lsls	r1, r2, #5
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	440a      	add	r2, r1
 800b43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b43e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b442:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	015a      	lsls	r2, r3, #5
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	4413      	add	r3, r2
 800b44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	0151      	lsls	r1, r2, #5
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	440a      	add	r2, r1
 800b45a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b45e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	e02b      	b.n	800b4be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	015a      	lsls	r2, r3, #5
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	4413      	add	r3, r2
 800b46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	db12      	blt.n	800b49e <USB_EPSetStall+0xae>
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00f      	beq.n	800b49e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	4413      	add	r3, r2
 800b486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	0151      	lsls	r1, r2, #5
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	440a      	add	r2, r1
 800b494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b498:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b49c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	015a      	lsls	r2, r3, #5
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	0151      	lsls	r1, r2, #5
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	440a      	add	r2, r1
 800b4b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b085      	sub	sp, #20
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	785b      	ldrb	r3, [r3, #1]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d128      	bne.n	800b53a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	015a      	lsls	r2, r3, #5
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	0151      	lsls	r1, r2, #5
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	440a      	add	r2, r1
 800b4fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b506:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	78db      	ldrb	r3, [r3, #3]
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	d003      	beq.n	800b518 <USB_EPClearStall+0x4c>
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	78db      	ldrb	r3, [r3, #3]
 800b514:	2b02      	cmp	r3, #2
 800b516:	d138      	bne.n	800b58a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	015a      	lsls	r2, r3, #5
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	4413      	add	r3, r2
 800b520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	0151      	lsls	r1, r2, #5
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	440a      	add	r2, r1
 800b52e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b536:	6013      	str	r3, [r2, #0]
 800b538:	e027      	b.n	800b58a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	015a      	lsls	r2, r3, #5
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	4413      	add	r3, r2
 800b542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	0151      	lsls	r1, r2, #5
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	440a      	add	r2, r1
 800b550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b554:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b558:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	78db      	ldrb	r3, [r3, #3]
 800b55e:	2b03      	cmp	r3, #3
 800b560:	d003      	beq.n	800b56a <USB_EPClearStall+0x9e>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	78db      	ldrb	r3, [r3, #3]
 800b566:	2b02      	cmp	r3, #2
 800b568:	d10f      	bne.n	800b58a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	015a      	lsls	r2, r3, #5
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	4413      	add	r3, r2
 800b572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	0151      	lsls	r1, r2, #5
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	440a      	add	r2, r1
 800b580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b588:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b5ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	011b      	lsls	r3, r3, #4
 800b5c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b5cc:	68f9      	ldr	r1, [r7, #12]
 800b5ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5fe:	f023 0303 	bic.w	r3, r3, #3
 800b602:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b612:	f023 0302 	bic.w	r3, r3, #2
 800b616:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3714      	adds	r7, #20
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr

0800b626 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b626:	b480      	push	{r7}
 800b628:	b085      	sub	sp, #20
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b640:	f023 0303 	bic.w	r3, r3, #3
 800b644:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b654:	f043 0302 	orr.w	r3, r3, #2
 800b658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	695b      	ldr	r3, [r3, #20]
 800b674:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	699b      	ldr	r3, [r3, #24]
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	4013      	ands	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b680:	68fb      	ldr	r3, [r7, #12]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b68e:	b480      	push	{r7}
 800b690:	b085      	sub	sp, #20
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	4013      	ands	r3, r2
 800b6b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	0c1b      	lsrs	r3, r3, #16
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b085      	sub	sp, #20
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6de:	69db      	ldr	r3, [r3, #28]
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	b29b      	uxth	r3, r3
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b085      	sub	sp, #20
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b706:	78fb      	ldrb	r3, [r7, #3]
 800b708:	015a      	lsls	r2, r3, #5
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	4413      	add	r3, r2
 800b70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	4013      	ands	r3, r2
 800b722:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b724:	68bb      	ldr	r3, [r7, #8]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b732:	b480      	push	{r7}
 800b734:	b087      	sub	sp, #28
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	460b      	mov	r3, r1
 800b73c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b754:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b756:	78fb      	ldrb	r3, [r7, #3]
 800b758:	f003 030f 	and.w	r3, r3, #15
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	fa22 f303 	lsr.w	r3, r2, r3
 800b762:	01db      	lsls	r3, r3, #7
 800b764:	b2db      	uxtb	r3, r3
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	4313      	orrs	r3, r2
 800b76a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b76c:	78fb      	ldrb	r3, [r7, #3]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	4013      	ands	r3, r2
 800b77e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b780:	68bb      	ldr	r3, [r7, #8]
}
 800b782:	4618      	mov	r0, r3
 800b784:	371c      	adds	r7, #28
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b78e:	b480      	push	{r7}
 800b790:	b083      	sub	sp, #12
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	f003 0301 	and.w	r3, r3, #1
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	370c      	adds	r7, #12
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr

0800b7aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b085      	sub	sp, #20
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b7c8:	f023 0307 	bic.w	r3, r3, #7
 800b7cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3714      	adds	r7, #20
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	333c      	adds	r3, #60	; 0x3c
 800b802:	3304      	adds	r3, #4
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	4a1c      	ldr	r2, [pc, #112]	; (800b87c <USB_EP0_OutStart+0x8c>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d90a      	bls.n	800b826 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b81c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b820:	d101      	bne.n	800b826 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b822:	2300      	movs	r3, #0
 800b824:	e024      	b.n	800b870 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b82c:	461a      	mov	r2, r3
 800b82e:	2300      	movs	r3, #0
 800b830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	68fa      	ldr	r2, [r7, #12]
 800b850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b854:	f043 0318 	orr.w	r3, r3, #24
 800b858:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b868:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b86c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	4f54300a 	.word	0x4f54300a

0800b880 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3301      	adds	r3, #1
 800b890:	60fb      	str	r3, [r7, #12]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	4a13      	ldr	r2, [pc, #76]	; (800b8e4 <USB_CoreReset+0x64>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d901      	bls.n	800b89e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b89a:	2303      	movs	r3, #3
 800b89c:	e01b      	b.n	800b8d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	daf2      	bge.n	800b88c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	f043 0201 	orr.w	r2, r3, #1
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4a09      	ldr	r2, [pc, #36]	; (800b8e4 <USB_CoreReset+0x64>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d901      	bls.n	800b8c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	e006      	b.n	800b8d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	f003 0301 	and.w	r3, r3, #1
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d0f0      	beq.n	800b8b6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3714      	adds	r7, #20
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	00030d40 	.word	0x00030d40

0800b8e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b8ec:	4904      	ldr	r1, [pc, #16]	; (800b900 <MX_FATFS_Init+0x18>)
 800b8ee:	4805      	ldr	r0, [pc, #20]	; (800b904 <MX_FATFS_Init+0x1c>)
 800b8f0:	f001 ff18 	bl	800d724 <FATFS_LinkDriver>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	4b03      	ldr	r3, [pc, #12]	; (800b908 <MX_FATFS_Init+0x20>)
 800b8fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b8fc:	bf00      	nop
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	200008b8 	.word	0x200008b8
 800b904:	0800e454 	.word	0x0800e454
 800b908:	200008b4 	.word	0x200008b4

0800b90c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b916:	f000 f885 	bl	800ba24 <BSP_SD_IsDetected>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d001      	beq.n	800b924 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b920:	2302      	movs	r3, #2
 800b922:	e012      	b.n	800b94a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b924:	480b      	ldr	r0, [pc, #44]	; (800b954 <BSP_SD_Init+0x48>)
 800b926:	f7fb fdf5 	bl	8007514 <HAL_SD_Init>
 800b92a:	4603      	mov	r3, r0
 800b92c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d109      	bne.n	800b948 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b934:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b938:	4806      	ldr	r0, [pc, #24]	; (800b954 <BSP_SD_Init+0x48>)
 800b93a:	f7fc fcbb 	bl	80082b4 <HAL_SD_ConfigWideBusOperation>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d001      	beq.n	800b948 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b948:	79fb      	ldrb	r3, [r7, #7]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3708      	adds	r7, #8
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	20000560 	.word	0x20000560

0800b958 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	68f9      	ldr	r1, [r7, #12]
 800b96e:	4806      	ldr	r0, [pc, #24]	; (800b988 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b970:	f7fb ff0a 	bl	8007788 <HAL_SD_ReadBlocks_DMA>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b97a:	2301      	movs	r3, #1
 800b97c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3718      	adds	r7, #24
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	20000560 	.word	0x20000560

0800b98c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	68f9      	ldr	r1, [r7, #12]
 800b9a2:	4806      	ldr	r0, [pc, #24]	; (800b9bc <BSP_SD_WriteBlocks_DMA+0x30>)
 800b9a4:	f7fb ff98 	bl	80078d8 <HAL_SD_WriteBlocks_DMA>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d001      	beq.n	800b9b2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20000560 	.word	0x20000560

0800b9c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b9c4:	4805      	ldr	r0, [pc, #20]	; (800b9dc <BSP_SD_GetCardState+0x1c>)
 800b9c6:	f7fc fd89 	bl	80084dc <HAL_SD_GetCardState>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	bf14      	ite	ne
 800b9d0:	2301      	movne	r3, #1
 800b9d2:	2300      	moveq	r3, #0
 800b9d4:	b2db      	uxtb	r3, r3
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20000560 	.word	0x20000560

0800b9e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b9e8:	6879      	ldr	r1, [r7, #4]
 800b9ea:	4803      	ldr	r0, [pc, #12]	; (800b9f8 <BSP_SD_GetCardInfo+0x18>)
 800b9ec:	f7fc fc36 	bl	800825c <HAL_SD_GetCardInfo>
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}
 800b9f8:	20000560 	.word	0x20000560

0800b9fc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ba04:	f000 f9a0 	bl	800bd48 <BSP_SD_WriteCpltCallback>
}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ba18:	f000 f9a2 	bl	800bd60 <BSP_SD_ReadCpltCallback>
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ba2e:	f000 f80b 	bl	800ba48 <BSP_PlatformIsDetected>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d101      	bne.n	800ba3c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
 800ba3e:	b2db      	uxtb	r3, r3
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3708      	adds	r7, #8
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ba52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba56:	4806      	ldr	r0, [pc, #24]	; (800ba70 <BSP_PlatformIsDetected+0x28>)
 800ba58:	f7f7 fba2 	bl	80031a0 <HAL_GPIO_ReadPin>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ba62:	2300      	movs	r3, #0
 800ba64:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ba66:	79fb      	ldrb	r3, [r7, #7]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	48000400 	.word	0x48000400

0800ba74 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ba7c:	f7f5 fdee 	bl	800165c <HAL_GetTick>
 800ba80:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ba82:	e006      	b.n	800ba92 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba84:	f7ff ff9c 	bl	800b9c0 <BSP_SD_GetCardState>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	e009      	b.n	800baa6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ba92:	f7f5 fde3 	bl	800165c <HAL_GetTick>
 800ba96:	4602      	mov	r2, r0
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d8f0      	bhi.n	800ba84 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800baa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
	...

0800bab0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	4603      	mov	r3, r0
 800bab8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800baba:	4b0b      	ldr	r3, [pc, #44]	; (800bae8 <SD_CheckStatus+0x38>)
 800babc:	2201      	movs	r2, #1
 800babe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bac0:	f7ff ff7e 	bl	800b9c0 <BSP_SD_GetCardState>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d107      	bne.n	800bada <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800baca:	4b07      	ldr	r3, [pc, #28]	; (800bae8 <SD_CheckStatus+0x38>)
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	f023 0301 	bic.w	r3, r3, #1
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	4b04      	ldr	r3, [pc, #16]	; (800bae8 <SD_CheckStatus+0x38>)
 800bad8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bada:	4b03      	ldr	r3, [pc, #12]	; (800bae8 <SD_CheckStatus+0x38>)
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	b2db      	uxtb	r3, r3
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	20000009 	.word	0x20000009

0800baec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	4603      	mov	r3, r0
 800baf4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800baf6:	f7ff ff09 	bl	800b90c <BSP_SD_Init>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d107      	bne.n	800bb10 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bb00:	79fb      	ldrb	r3, [r7, #7]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff ffd4 	bl	800bab0 <SD_CheckStatus>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	4b04      	ldr	r3, [pc, #16]	; (800bb20 <SD_initialize+0x34>)
 800bb0e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bb10:	4b03      	ldr	r3, [pc, #12]	; (800bb20 <SD_initialize+0x34>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	b2db      	uxtb	r3, r3
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000009 	.word	0x20000009

0800bb24 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bb2e:	79fb      	ldrb	r3, [r7, #7]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7ff ffbd 	bl	800bab0 <SD_CheckStatus>
 800bb36:	4603      	mov	r3, r0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	607a      	str	r2, [r7, #4]
 800bb4a:	603b      	str	r3, [r7, #0]
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bb54:	f247 5030 	movw	r0, #30000	; 0x7530
 800bb58:	f7ff ff8c 	bl	800ba74 <SD_CheckStatusWithTimeout>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	da01      	bge.n	800bb66 <SD_read+0x26>
  {
    return res;
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
 800bb64:	e03b      	b.n	800bbde <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	68b8      	ldr	r0, [r7, #8]
 800bb6c:	f7ff fef4 	bl	800b958 <BSP_SD_ReadBlocks_DMA>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d132      	bne.n	800bbdc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bb76:	4b1c      	ldr	r3, [pc, #112]	; (800bbe8 <SD_read+0xa8>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bb7c:	f7f5 fd6e 	bl	800165c <HAL_GetTick>
 800bb80:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bb82:	bf00      	nop
 800bb84:	4b18      	ldr	r3, [pc, #96]	; (800bbe8 <SD_read+0xa8>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d108      	bne.n	800bb9e <SD_read+0x5e>
 800bb8c:	f7f5 fd66 	bl	800165c <HAL_GetTick>
 800bb90:	4602      	mov	r2, r0
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	f247 522f 	movw	r2, #29999	; 0x752f
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d9f2      	bls.n	800bb84 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800bb9e:	4b12      	ldr	r3, [pc, #72]	; (800bbe8 <SD_read+0xa8>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d102      	bne.n	800bbac <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	75fb      	strb	r3, [r7, #23]
 800bbaa:	e017      	b.n	800bbdc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bbac:	4b0e      	ldr	r3, [pc, #56]	; (800bbe8 <SD_read+0xa8>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bbb2:	f7f5 fd53 	bl	800165c <HAL_GetTick>
 800bbb6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bbb8:	e007      	b.n	800bbca <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bbba:	f7ff ff01 	bl	800b9c0 <BSP_SD_GetCardState>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d102      	bne.n	800bbca <SD_read+0x8a>
          {
            res = RES_OK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bbc8:	e008      	b.n	800bbdc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bbca:	f7f5 fd47 	bl	800165c <HAL_GetTick>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	f247 522f 	movw	r2, #29999	; 0x752f
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d9ee      	bls.n	800bbba <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bbdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200001dc 	.word	0x200001dc

0800bbec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60b9      	str	r1, [r7, #8]
 800bbf4:	607a      	str	r2, [r7, #4]
 800bbf6:	603b      	str	r3, [r7, #0]
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bc00:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <SD_write+0xa8>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bc06:	f247 5030 	movw	r0, #30000	; 0x7530
 800bc0a:	f7ff ff33 	bl	800ba74 <SD_CheckStatusWithTimeout>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	da01      	bge.n	800bc18 <SD_write+0x2c>
  {
    return res;
 800bc14:	7dfb      	ldrb	r3, [r7, #23]
 800bc16:	e038      	b.n	800bc8a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bc18:	683a      	ldr	r2, [r7, #0]
 800bc1a:	6879      	ldr	r1, [r7, #4]
 800bc1c:	68b8      	ldr	r0, [r7, #8]
 800bc1e:	f7ff feb5 	bl	800b98c <BSP_SD_WriteBlocks_DMA>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d12f      	bne.n	800bc88 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bc28:	f7f5 fd18 	bl	800165c <HAL_GetTick>
 800bc2c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bc2e:	bf00      	nop
 800bc30:	4b18      	ldr	r3, [pc, #96]	; (800bc94 <SD_write+0xa8>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d108      	bne.n	800bc4a <SD_write+0x5e>
 800bc38:	f7f5 fd10 	bl	800165c <HAL_GetTick>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d9f2      	bls.n	800bc30 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800bc4a:	4b12      	ldr	r3, [pc, #72]	; (800bc94 <SD_write+0xa8>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d102      	bne.n	800bc58 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	75fb      	strb	r3, [r7, #23]
 800bc56:	e017      	b.n	800bc88 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800bc58:	4b0e      	ldr	r3, [pc, #56]	; (800bc94 <SD_write+0xa8>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bc5e:	f7f5 fcfd 	bl	800165c <HAL_GetTick>
 800bc62:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bc64:	e007      	b.n	800bc76 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc66:	f7ff feab 	bl	800b9c0 <BSP_SD_GetCardState>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d102      	bne.n	800bc76 <SD_write+0x8a>
          {
            res = RES_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	75fb      	strb	r3, [r7, #23]
            break;
 800bc74:	e008      	b.n	800bc88 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bc76:	f7f5 fcf1 	bl	800165c <HAL_GetTick>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d9ee      	bls.n	800bc66 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	200001d8 	.word	0x200001d8

0800bc98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b08c      	sub	sp, #48	; 0x30
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	603a      	str	r2, [r7, #0]
 800bca2:	71fb      	strb	r3, [r7, #7]
 800bca4:	460b      	mov	r3, r1
 800bca6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bcae:	4b25      	ldr	r3, [pc, #148]	; (800bd44 <SD_ioctl+0xac>)
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d001      	beq.n	800bcc0 <SD_ioctl+0x28>
 800bcbc:	2303      	movs	r3, #3
 800bcbe:	e03c      	b.n	800bd3a <SD_ioctl+0xa2>

  switch (cmd)
 800bcc0:	79bb      	ldrb	r3, [r7, #6]
 800bcc2:	2b03      	cmp	r3, #3
 800bcc4:	d834      	bhi.n	800bd30 <SD_ioctl+0x98>
 800bcc6:	a201      	add	r2, pc, #4	; (adr r2, 800bccc <SD_ioctl+0x34>)
 800bcc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bccc:	0800bcdd 	.word	0x0800bcdd
 800bcd0:	0800bce5 	.word	0x0800bce5
 800bcd4:	0800bcfd 	.word	0x0800bcfd
 800bcd8:	0800bd17 	.word	0x0800bd17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bce2:	e028      	b.n	800bd36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bce4:	f107 0308 	add.w	r3, r7, #8
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7ff fe79 	bl	800b9e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bcee:	6a3a      	ldr	r2, [r7, #32]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bcfa:	e01c      	b.n	800bd36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcfc:	f107 0308 	add.w	r3, r7, #8
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7ff fe6d 	bl	800b9e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd14:	e00f      	b.n	800bd36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd16:	f107 0308 	add.w	r3, r7, #8
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff fe60 	bl	800b9e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd22:	0a5a      	lsrs	r2, r3, #9
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd2e:	e002      	b.n	800bd36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bd30:	2304      	movs	r3, #4
 800bd32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bd36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3730      	adds	r7, #48	; 0x30
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	20000009 	.word	0x20000009

0800bd48 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800bd4c:	4b03      	ldr	r3, [pc, #12]	; (800bd5c <BSP_SD_WriteCpltCallback+0x14>)
 800bd4e:	2201      	movs	r2, #1
 800bd50:	601a      	str	r2, [r3, #0]
}
 800bd52:	bf00      	nop
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	200001d8 	.word	0x200001d8

0800bd60 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bd60:	b480      	push	{r7}
 800bd62:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800bd64:	4b03      	ldr	r3, [pc, #12]	; (800bd74 <BSP_SD_ReadCpltCallback+0x14>)
 800bd66:	2201      	movs	r2, #1
 800bd68:	601a      	str	r2, [r3, #0]
}
 800bd6a:	bf00      	nop
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	200001dc 	.word	0x200001dc

0800bd78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	460b      	mov	r3, r1
 800bd82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bd84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bd88:	f002 fac6 	bl	800e318 <USBD_static_malloc>
 800bd8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d105      	bne.n	800bda0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	e066      	b.n	800be6e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	7c1b      	ldrb	r3, [r3, #16]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d119      	bne.n	800bde4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bdb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdb4:	2202      	movs	r2, #2
 800bdb6:	2181      	movs	r1, #129	; 0x81
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f002 f899 	bl	800def0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bdc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdc8:	2202      	movs	r2, #2
 800bdca:	2101      	movs	r1, #1
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f002 f88f 	bl	800def0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2210      	movs	r2, #16
 800bdde:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bde2:	e016      	b.n	800be12 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bde4:	2340      	movs	r3, #64	; 0x40
 800bde6:	2202      	movs	r2, #2
 800bde8:	2181      	movs	r1, #129	; 0x81
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f002 f880 	bl	800def0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bdf6:	2340      	movs	r3, #64	; 0x40
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f002 f877 	bl	800def0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2210      	movs	r2, #16
 800be0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800be12:	2308      	movs	r3, #8
 800be14:	2203      	movs	r2, #3
 800be16:	2182      	movs	r1, #130	; 0x82
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f002 f869 	bl	800def0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	7c1b      	ldrb	r3, [r3, #16]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d109      	bne.n	800be5c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be52:	2101      	movs	r1, #1
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f002 f9c5 	bl	800e1e4 <USBD_LL_PrepareReceive>
 800be5a:	e007      	b.n	800be6c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be62:	2340      	movs	r3, #64	; 0x40
 800be64:	2101      	movs	r1, #1
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f002 f9bc 	bl	800e1e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	460b      	mov	r3, r1
 800be80:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800be82:	2181      	movs	r1, #129	; 0x81
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f002 f871 	bl	800df6c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800be90:	2101      	movs	r1, #1
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f002 f86a 	bl	800df6c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bea0:	2182      	movs	r1, #130	; 0x82
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f002 f862 	bl	800df6c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00e      	beq.n	800bee0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bed2:	4618      	mov	r0, r3
 800bed4:	f002 fa2e 	bl	800e334 <USBD_static_free>
    pdev->pClassData = NULL;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
	...

0800beec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800befc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800befe:	2300      	movs	r3, #0
 800bf00:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf02:	2300      	movs	r3, #0
 800bf04:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bf10:	2303      	movs	r3, #3
 800bf12:	e0af      	b.n	800c074 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d03f      	beq.n	800bfa0 <USBD_CDC_Setup+0xb4>
 800bf20:	2b20      	cmp	r3, #32
 800bf22:	f040 809f 	bne.w	800c064 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	88db      	ldrh	r3, [r3, #6]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d02e      	beq.n	800bf8c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	b25b      	sxtb	r3, r3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	da16      	bge.n	800bf66 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	683a      	ldr	r2, [r7, #0]
 800bf42:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bf44:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf46:	683a      	ldr	r2, [r7, #0]
 800bf48:	88d2      	ldrh	r2, [r2, #6]
 800bf4a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	88db      	ldrh	r3, [r3, #6]
 800bf50:	2b07      	cmp	r3, #7
 800bf52:	bf28      	it	cs
 800bf54:	2307      	movcs	r3, #7
 800bf56:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	89fa      	ldrh	r2, [r7, #14]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 fb13 	bl	800d58a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bf64:	e085      	b.n	800c072 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	785a      	ldrb	r2, [r3, #1]
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	88db      	ldrh	r3, [r3, #6]
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bf7c:	6939      	ldr	r1, [r7, #16]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	88db      	ldrh	r3, [r3, #6]
 800bf82:	461a      	mov	r2, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f001 fb2c 	bl	800d5e2 <USBD_CtlPrepareRx>
      break;
 800bf8a:	e072      	b.n	800c072 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	683a      	ldr	r2, [r7, #0]
 800bf96:	7850      	ldrb	r0, [r2, #1]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	6839      	ldr	r1, [r7, #0]
 800bf9c:	4798      	blx	r3
      break;
 800bf9e:	e068      	b.n	800c072 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	785b      	ldrb	r3, [r3, #1]
 800bfa4:	2b0b      	cmp	r3, #11
 800bfa6:	d852      	bhi.n	800c04e <USBD_CDC_Setup+0x162>
 800bfa8:	a201      	add	r2, pc, #4	; (adr r2, 800bfb0 <USBD_CDC_Setup+0xc4>)
 800bfaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfae:	bf00      	nop
 800bfb0:	0800bfe1 	.word	0x0800bfe1
 800bfb4:	0800c05d 	.word	0x0800c05d
 800bfb8:	0800c04f 	.word	0x0800c04f
 800bfbc:	0800c04f 	.word	0x0800c04f
 800bfc0:	0800c04f 	.word	0x0800c04f
 800bfc4:	0800c04f 	.word	0x0800c04f
 800bfc8:	0800c04f 	.word	0x0800c04f
 800bfcc:	0800c04f 	.word	0x0800c04f
 800bfd0:	0800c04f 	.word	0x0800c04f
 800bfd4:	0800c04f 	.word	0x0800c04f
 800bfd8:	0800c00b 	.word	0x0800c00b
 800bfdc:	0800c035 	.word	0x0800c035
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	2b03      	cmp	r3, #3
 800bfea:	d107      	bne.n	800bffc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bfec:	f107 030a 	add.w	r3, r7, #10
 800bff0:	2202      	movs	r2, #2
 800bff2:	4619      	mov	r1, r3
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f001 fac8 	bl	800d58a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bffa:	e032      	b.n	800c062 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f001 fa52 	bl	800d4a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800c004:	2303      	movs	r3, #3
 800c006:	75fb      	strb	r3, [r7, #23]
          break;
 800c008:	e02b      	b.n	800c062 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b03      	cmp	r3, #3
 800c014:	d107      	bne.n	800c026 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c016:	f107 030d 	add.w	r3, r7, #13
 800c01a:	2201      	movs	r2, #1
 800c01c:	4619      	mov	r1, r3
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f001 fab3 	bl	800d58a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c024:	e01d      	b.n	800c062 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c026:	6839      	ldr	r1, [r7, #0]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f001 fa3d 	bl	800d4a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800c02e:	2303      	movs	r3, #3
 800c030:	75fb      	strb	r3, [r7, #23]
          break;
 800c032:	e016      	b.n	800c062 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	2b03      	cmp	r3, #3
 800c03e:	d00f      	beq.n	800c060 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f001 fa30 	bl	800d4a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800c048:	2303      	movs	r3, #3
 800c04a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c04c:	e008      	b.n	800c060 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f001 fa29 	bl	800d4a8 <USBD_CtlError>
          ret = USBD_FAIL;
 800c056:	2303      	movs	r3, #3
 800c058:	75fb      	strb	r3, [r7, #23]
          break;
 800c05a:	e002      	b.n	800c062 <USBD_CDC_Setup+0x176>
          break;
 800c05c:	bf00      	nop
 800c05e:	e008      	b.n	800c072 <USBD_CDC_Setup+0x186>
          break;
 800c060:	bf00      	nop
      }
      break;
 800c062:	e006      	b.n	800c072 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f001 fa1e 	bl	800d4a8 <USBD_CtlError>
      ret = USBD_FAIL;
 800c06c:	2303      	movs	r3, #3
 800c06e:	75fb      	strb	r3, [r7, #23]
      break;
 800c070:	bf00      	nop
  }

  return (uint8_t)ret;
 800c072:	7dfb      	ldrb	r3, [r7, #23]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3718      	adds	r7, #24
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c08e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c09a:	2303      	movs	r3, #3
 800c09c:	e04f      	b.n	800c13e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c0a6:	78fa      	ldrb	r2, [r7, #3]
 800c0a8:	6879      	ldr	r1, [r7, #4]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	440b      	add	r3, r1
 800c0b4:	3318      	adds	r3, #24
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d029      	beq.n	800c110 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c0bc:	78fa      	ldrb	r2, [r7, #3]
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	440b      	add	r3, r1
 800c0ca:	3318      	adds	r3, #24
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	78f9      	ldrb	r1, [r7, #3]
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	00db      	lsls	r3, r3, #3
 800c0d6:	1a5b      	subs	r3, r3, r1
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	4403      	add	r3, r0
 800c0dc:	3344      	adds	r3, #68	; 0x44
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c0e4:	fb03 f301 	mul.w	r3, r3, r1
 800c0e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d110      	bne.n	800c110 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c0ee:	78fa      	ldrb	r2, [r7, #3]
 800c0f0:	6879      	ldr	r1, [r7, #4]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	440b      	add	r3, r1
 800c0fc:	3318      	adds	r3, #24
 800c0fe:	2200      	movs	r2, #0
 800c100:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c102:	78f9      	ldrb	r1, [r7, #3]
 800c104:	2300      	movs	r3, #0
 800c106:	2200      	movs	r2, #0
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f002 f833 	bl	800e174 <USBD_LL_Transmit>
 800c10e:	e015      	b.n	800c13c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	2200      	movs	r2, #0
 800c114:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00b      	beq.n	800c13c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c138:	78fa      	ldrb	r2, [r7, #3]
 800c13a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b084      	sub	sp, #16
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	460b      	mov	r3, r1
 800c150:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c158:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c160:	2b00      	cmp	r3, #0
 800c162:	d101      	bne.n	800c168 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c164:	2303      	movs	r3, #3
 800c166:	e015      	b.n	800c194 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c168:	78fb      	ldrb	r3, [r7, #3]
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f002 f871 	bl	800e254 <USBD_LL_GetRxDataSize>
 800c172:	4602      	mov	r2, r0
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c18e:	4611      	mov	r1, r2
 800c190:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1aa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e01b      	b.n	800c1ee <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d015      	beq.n	800c1ec <USBD_CDC_EP0_RxReady+0x50>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c1c6:	2bff      	cmp	r3, #255	; 0xff
 800c1c8:	d010      	beq.n	800c1ec <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c1d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c1e0:	b292      	uxth	r2, r2
 800c1e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	22ff      	movs	r2, #255	; 0xff
 800c1e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
	...

0800c1f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2243      	movs	r2, #67	; 0x43
 800c204:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c206:	4b03      	ldr	r3, [pc, #12]	; (800c214 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c208:	4618      	mov	r0, r3
 800c20a:	370c      	adds	r7, #12
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr
 800c214:	20000094 	.word	0x20000094

0800c218 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2243      	movs	r2, #67	; 0x43
 800c224:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c226:	4b03      	ldr	r3, [pc, #12]	; (800c234 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c228:	4618      	mov	r0, r3
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	20000050 	.word	0x20000050

0800c238 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2243      	movs	r2, #67	; 0x43
 800c244:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c246:	4b03      	ldr	r3, [pc, #12]	; (800c254 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c248:	4618      	mov	r0, r3
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	200000d8 	.word	0x200000d8

0800c258 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	220a      	movs	r2, #10
 800c264:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c266:	4b03      	ldr	r3, [pc, #12]	; (800c274 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c268:	4618      	mov	r0, r3
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	2000000c 	.word	0x2000000c

0800c278 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d101      	bne.n	800c28c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c288:	2303      	movs	r3, #3
 800c28a:	e004      	b.n	800c296 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b087      	sub	sp, #28
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	60f8      	str	r0, [r7, #12]
 800c2aa:	60b9      	str	r1, [r7, #8]
 800c2ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2b4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d101      	bne.n	800c2c0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c2bc:	2303      	movs	r3, #3
 800c2be:	e008      	b.n	800c2d2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	371c      	adds	r7, #28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr

0800c2de <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c2de:	b480      	push	{r7}
 800c2e0:	b085      	sub	sp, #20
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
 800c2e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	e004      	b.n	800c304 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c31e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c32a:	2303      	movs	r3, #3
 800c32c:	e016      	b.n	800c35c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	7c1b      	ldrb	r3, [r3, #16]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d109      	bne.n	800c34a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c33c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c340:	2101      	movs	r1, #1
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f001 ff4e 	bl	800e1e4 <USBD_LL_PrepareReceive>
 800c348:	e007      	b.n	800c35a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c350:	2340      	movs	r3, #64	; 0x40
 800c352:	2101      	movs	r1, #1
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 ff45 	bl	800e1e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b086      	sub	sp, #24
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	4613      	mov	r3, r2
 800c370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c378:	2303      	movs	r3, #3
 800c37a:	e01f      	b.n	800c3bc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2200      	movs	r2, #0
 800c388:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	79fa      	ldrb	r2, [r7, #7]
 800c3ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f001 fd21 	bl	800ddf8 <USBD_LL_Init>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3718      	adds	r7, #24
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d101      	bne.n	800c3dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e016      	b.n	800c40a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00b      	beq.n	800c408 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f8:	f107 020e 	add.w	r2, r7, #14
 800c3fc:	4610      	mov	r0, r2
 800c3fe:	4798      	blx	r3
 800c400:	4602      	mov	r2, r0
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b082      	sub	sp, #8
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f001 fd36 	bl	800de8c <USBD_LL_Start>
 800c420:	4603      	mov	r3, r0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c42a:	b480      	push	{r7}
 800c42c:	b083      	sub	sp, #12
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	460b      	mov	r3, r1
 800c44a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c44c:	2303      	movs	r3, #3
 800c44e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c456:	2b00      	cmp	r3, #0
 800c458:	d009      	beq.n	800c46e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	78fa      	ldrb	r2, [r7, #3]
 800c464:	4611      	mov	r1, r2
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	4798      	blx	r3
 800c46a:	4603      	mov	r3, r0
 800c46c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d007      	beq.n	800c49e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	78fa      	ldrb	r2, [r7, #3]
 800c498:	4611      	mov	r1, r2
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	4798      	blx	r3
  }

  return USBD_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4b8:	6839      	ldr	r1, [r7, #0]
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 ffba 	bl	800d434 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4dc:	f003 031f 	and.w	r3, r3, #31
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d01a      	beq.n	800c51a <USBD_LL_SetupStage+0x72>
 800c4e4:	2b02      	cmp	r3, #2
 800c4e6:	d822      	bhi.n	800c52e <USBD_LL_SetupStage+0x86>
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d002      	beq.n	800c4f2 <USBD_LL_SetupStage+0x4a>
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d00a      	beq.n	800c506 <USBD_LL_SetupStage+0x5e>
 800c4f0:	e01d      	b.n	800c52e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fa62 	bl	800c9c4 <USBD_StdDevReq>
 800c500:	4603      	mov	r3, r0
 800c502:	73fb      	strb	r3, [r7, #15]
      break;
 800c504:	e020      	b.n	800c548 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c50c:	4619      	mov	r1, r3
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fac6 	bl	800caa0 <USBD_StdItfReq>
 800c514:	4603      	mov	r3, r0
 800c516:	73fb      	strb	r3, [r7, #15]
      break;
 800c518:	e016      	b.n	800c548 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fb05 	bl	800cb32 <USBD_StdEPReq>
 800c528:	4603      	mov	r3, r0
 800c52a:	73fb      	strb	r3, [r7, #15]
      break;
 800c52c:	e00c      	b.n	800c548 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c534:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f001 fd4b 	bl	800dfd8 <USBD_LL_StallEP>
 800c542:	4603      	mov	r3, r0
 800c544:	73fb      	strb	r3, [r7, #15]
      break;
 800c546:	bf00      	nop
  }

  return ret;
 800c548:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b086      	sub	sp, #24
 800c556:	af00      	add	r7, sp, #0
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	460b      	mov	r3, r1
 800c55c:	607a      	str	r2, [r7, #4]
 800c55e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c560:	7afb      	ldrb	r3, [r7, #11]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d138      	bne.n	800c5d8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c56c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c574:	2b03      	cmp	r3, #3
 800c576:	d14a      	bne.n	800c60e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	689a      	ldr	r2, [r3, #8]
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	429a      	cmp	r2, r3
 800c582:	d913      	bls.n	800c5ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	689a      	ldr	r2, [r3, #8]
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	1ad2      	subs	r2, r2, r3
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	68da      	ldr	r2, [r3, #12]
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	4293      	cmp	r3, r2
 800c59c:	bf28      	it	cs
 800c59e:	4613      	movcs	r3, r2
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f001 f839 	bl	800d61c <USBD_CtlContinueRx>
 800c5aa:	e030      	b.n	800c60e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	2b03      	cmp	r3, #3
 800c5b6:	d10b      	bne.n	800c5d0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5be:	691b      	ldr	r3, [r3, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d005      	beq.n	800c5d0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f001 f834 	bl	800d63e <USBD_CtlSendStatus>
 800c5d6:	e01a      	b.n	800c60e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	2b03      	cmp	r3, #3
 800c5e2:	d114      	bne.n	800c60e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ea:	699b      	ldr	r3, [r3, #24]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00e      	beq.n	800c60e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	7afa      	ldrb	r2, [r7, #11]
 800c5fa:	4611      	mov	r1, r2
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	4798      	blx	r3
 800c600:	4603      	mov	r3, r0
 800c602:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c604:	7dfb      	ldrb	r3, [r7, #23]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c60a:	7dfb      	ldrb	r3, [r7, #23]
 800c60c:	e000      	b.n	800c610 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3718      	adds	r7, #24
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b086      	sub	sp, #24
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	460b      	mov	r3, r1
 800c622:	607a      	str	r2, [r7, #4]
 800c624:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c626:	7afb      	ldrb	r3, [r7, #11]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d16b      	bne.n	800c704 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	3314      	adds	r3, #20
 800c630:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d156      	bne.n	800c6ea <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	689a      	ldr	r2, [r3, #8]
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	429a      	cmp	r2, r3
 800c646:	d914      	bls.n	800c672 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	689a      	ldr	r2, [r3, #8]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	1ad2      	subs	r2, r2, r3
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	461a      	mov	r2, r3
 800c65c:	6879      	ldr	r1, [r7, #4]
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f000 ffae 	bl	800d5c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c664:	2300      	movs	r3, #0
 800c666:	2200      	movs	r2, #0
 800c668:	2100      	movs	r1, #0
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	f001 fdba 	bl	800e1e4 <USBD_LL_PrepareReceive>
 800c670:	e03b      	b.n	800c6ea <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	68da      	ldr	r2, [r3, #12]
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d11c      	bne.n	800c6b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c686:	429a      	cmp	r2, r3
 800c688:	d316      	bcc.n	800c6b8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c694:	429a      	cmp	r2, r3
 800c696:	d20f      	bcs.n	800c6b8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c698:	2200      	movs	r2, #0
 800c69a:	2100      	movs	r1, #0
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f000 ff8f 	bl	800d5c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f001 fd97 	bl	800e1e4 <USBD_LL_PrepareReceive>
 800c6b6:	e018      	b.n	800c6ea <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d10b      	bne.n	800c6dc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d005      	beq.n	800c6dc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6dc:	2180      	movs	r1, #128	; 0x80
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	f001 fc7a 	bl	800dfd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f000 ffbd 	bl	800d664 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d122      	bne.n	800c73a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f7ff fe98 	bl	800c42a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c702:	e01a      	b.n	800c73a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	2b03      	cmp	r3, #3
 800c70e:	d114      	bne.n	800c73a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c716:	695b      	ldr	r3, [r3, #20]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00e      	beq.n	800c73a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c722:	695b      	ldr	r3, [r3, #20]
 800c724:	7afa      	ldrb	r2, [r7, #11]
 800c726:	4611      	mov	r1, r2
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	4798      	blx	r3
 800c72c:	4603      	mov	r3, r0
 800c72e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c730:	7dfb      	ldrb	r3, [r7, #23]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c736:	7dfb      	ldrb	r3, [r7, #23]
 800c738:	e000      	b.n	800c73c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c73a:	2300      	movs	r3, #0
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3718      	adds	r7, #24
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c770:	2b00      	cmp	r3, #0
 800c772:	d101      	bne.n	800c778 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c774:	2303      	movs	r3, #3
 800c776:	e02f      	b.n	800c7d8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00f      	beq.n	800c7a2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d009      	beq.n	800c7a2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	6852      	ldr	r2, [r2, #4]
 800c79a:	b2d2      	uxtb	r2, r2
 800c79c:	4611      	mov	r1, r2
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7a2:	2340      	movs	r3, #64	; 0x40
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f001 fba1 	bl	800def0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2240      	movs	r2, #64	; 0x40
 800c7ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7be:	2340      	movs	r3, #64	; 0x40
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2180      	movs	r1, #128	; 0x80
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f001 fb93 	bl	800def0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2240      	movs	r2, #64	; 0x40
 800c7d4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	78fa      	ldrb	r2, [r7, #3]
 800c7f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2204      	movs	r2, #4
 800c81a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d106      	bne.n	800c84e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c846:	b2da      	uxtb	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d101      	bne.n	800c872 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c86e:	2303      	movs	r3, #3
 800c870:	e012      	b.n	800c898 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b03      	cmp	r3, #3
 800c87c:	d10b      	bne.n	800c896 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c884:	69db      	ldr	r3, [r3, #28]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d005      	beq.n	800c896 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c890:	69db      	ldr	r3, [r3, #28]
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d101      	bne.n	800c8ba <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	e014      	b.n	800c8e4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d10d      	bne.n	800c8e2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d007      	beq.n	800c8e2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	78fa      	ldrb	r2, [r7, #3]
 800c8dc:	4611      	mov	r1, r2
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c902:	2303      	movs	r3, #3
 800c904:	e014      	b.n	800c930 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d10d      	bne.n	800c92e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d007      	beq.n	800c92e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c926:	78fa      	ldrb	r2, [r7, #3]
 800c928:	4611      	mov	r1, r2
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	370c      	adds	r7, #12
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr

0800c94e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b082      	sub	sp, #8
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c964:	2b00      	cmp	r3, #0
 800c966:	d009      	beq.n	800c97c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	6852      	ldr	r2, [r2, #4]
 800c974:	b2d2      	uxtb	r2, r2
 800c976:	4611      	mov	r1, r2
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	4798      	blx	r3
  }

  return USBD_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c986:	b480      	push	{r7}
 800c988:	b087      	sub	sp, #28
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	3301      	adds	r3, #1
 800c99c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9a4:	8a3b      	ldrh	r3, [r7, #16]
 800c9a6:	021b      	lsls	r3, r3, #8
 800c9a8:	b21a      	sxth	r2, r3
 800c9aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	b21b      	sxth	r3, r3
 800c9b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9b4:	89fb      	ldrh	r3, [r7, #14]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	371c      	adds	r7, #28
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
	...

0800c9c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9da:	2b40      	cmp	r3, #64	; 0x40
 800c9dc:	d005      	beq.n	800c9ea <USBD_StdDevReq+0x26>
 800c9de:	2b40      	cmp	r3, #64	; 0x40
 800c9e0:	d853      	bhi.n	800ca8a <USBD_StdDevReq+0xc6>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00b      	beq.n	800c9fe <USBD_StdDevReq+0x3a>
 800c9e6:	2b20      	cmp	r3, #32
 800c9e8:	d14f      	bne.n	800ca8a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	4798      	blx	r3
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c9fc:	e04a      	b.n	800ca94 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	785b      	ldrb	r3, [r3, #1]
 800ca02:	2b09      	cmp	r3, #9
 800ca04:	d83b      	bhi.n	800ca7e <USBD_StdDevReq+0xba>
 800ca06:	a201      	add	r2, pc, #4	; (adr r2, 800ca0c <USBD_StdDevReq+0x48>)
 800ca08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0c:	0800ca61 	.word	0x0800ca61
 800ca10:	0800ca75 	.word	0x0800ca75
 800ca14:	0800ca7f 	.word	0x0800ca7f
 800ca18:	0800ca6b 	.word	0x0800ca6b
 800ca1c:	0800ca7f 	.word	0x0800ca7f
 800ca20:	0800ca3f 	.word	0x0800ca3f
 800ca24:	0800ca35 	.word	0x0800ca35
 800ca28:	0800ca7f 	.word	0x0800ca7f
 800ca2c:	0800ca57 	.word	0x0800ca57
 800ca30:	0800ca49 	.word	0x0800ca49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 f9de 	bl	800cdf8 <USBD_GetDescriptor>
          break;
 800ca3c:	e024      	b.n	800ca88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca3e:	6839      	ldr	r1, [r7, #0]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 fb6d 	bl	800d120 <USBD_SetAddress>
          break;
 800ca46:	e01f      	b.n	800ca88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca48:	6839      	ldr	r1, [r7, #0]
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fbac 	bl	800d1a8 <USBD_SetConfig>
 800ca50:	4603      	mov	r3, r0
 800ca52:	73fb      	strb	r3, [r7, #15]
          break;
 800ca54:	e018      	b.n	800ca88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca56:	6839      	ldr	r1, [r7, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 fc4b 	bl	800d2f4 <USBD_GetConfig>
          break;
 800ca5e:	e013      	b.n	800ca88 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fc7c 	bl	800d360 <USBD_GetStatus>
          break;
 800ca68:	e00e      	b.n	800ca88 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ca6a:	6839      	ldr	r1, [r7, #0]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 fcab 	bl	800d3c8 <USBD_SetFeature>
          break;
 800ca72:	e009      	b.n	800ca88 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fcba 	bl	800d3f0 <USBD_ClrFeature>
          break;
 800ca7c:	e004      	b.n	800ca88 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ca7e:	6839      	ldr	r1, [r7, #0]
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 fd11 	bl	800d4a8 <USBD_CtlError>
          break;
 800ca86:	bf00      	nop
      }
      break;
 800ca88:	e004      	b.n	800ca94 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ca8a:	6839      	ldr	r1, [r7, #0]
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 fd0b 	bl	800d4a8 <USBD_CtlError>
      break;
 800ca92:	bf00      	nop
  }

  return ret;
 800ca94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop

0800caa0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cab6:	2b40      	cmp	r3, #64	; 0x40
 800cab8:	d005      	beq.n	800cac6 <USBD_StdItfReq+0x26>
 800caba:	2b40      	cmp	r3, #64	; 0x40
 800cabc:	d82f      	bhi.n	800cb1e <USBD_StdItfReq+0x7e>
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <USBD_StdItfReq+0x26>
 800cac2:	2b20      	cmp	r3, #32
 800cac4:	d12b      	bne.n	800cb1e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	3b01      	subs	r3, #1
 800cad0:	2b02      	cmp	r3, #2
 800cad2:	d81d      	bhi.n	800cb10 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	889b      	ldrh	r3, [r3, #4]
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d813      	bhi.n	800cb06 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cae4:	689b      	ldr	r3, [r3, #8]
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	4798      	blx	r3
 800caec:	4603      	mov	r3, r0
 800caee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	88db      	ldrh	r3, [r3, #6]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d110      	bne.n	800cb1a <USBD_StdItfReq+0x7a>
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10d      	bne.n	800cb1a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fd9d 	bl	800d63e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb04:	e009      	b.n	800cb1a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fccd 	bl	800d4a8 <USBD_CtlError>
          break;
 800cb0e:	e004      	b.n	800cb1a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fcc8 	bl	800d4a8 <USBD_CtlError>
          break;
 800cb18:	e000      	b.n	800cb1c <USBD_StdItfReq+0x7c>
          break;
 800cb1a:	bf00      	nop
      }
      break;
 800cb1c:	e004      	b.n	800cb28 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fcc1 	bl	800d4a8 <USBD_CtlError>
      break;
 800cb26:	bf00      	nop
  }

  return ret;
 800cb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	889b      	ldrh	r3, [r3, #4]
 800cb44:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb4e:	2b40      	cmp	r3, #64	; 0x40
 800cb50:	d007      	beq.n	800cb62 <USBD_StdEPReq+0x30>
 800cb52:	2b40      	cmp	r3, #64	; 0x40
 800cb54:	f200 8145 	bhi.w	800cde2 <USBD_StdEPReq+0x2b0>
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00c      	beq.n	800cb76 <USBD_StdEPReq+0x44>
 800cb5c:	2b20      	cmp	r3, #32
 800cb5e:	f040 8140 	bne.w	800cde2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	6839      	ldr	r1, [r7, #0]
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	4798      	blx	r3
 800cb70:	4603      	mov	r3, r0
 800cb72:	73fb      	strb	r3, [r7, #15]
      break;
 800cb74:	e13a      	b.n	800cdec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	785b      	ldrb	r3, [r3, #1]
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d007      	beq.n	800cb8e <USBD_StdEPReq+0x5c>
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	f300 8129 	bgt.w	800cdd6 <USBD_StdEPReq+0x2a4>
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d07f      	beq.n	800cc88 <USBD_StdEPReq+0x156>
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d03c      	beq.n	800cc06 <USBD_StdEPReq+0xd4>
 800cb8c:	e123      	b.n	800cdd6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d002      	beq.n	800cba0 <USBD_StdEPReq+0x6e>
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d016      	beq.n	800cbcc <USBD_StdEPReq+0x9a>
 800cb9e:	e02c      	b.n	800cbfa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cba0:	7bbb      	ldrb	r3, [r7, #14]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00d      	beq.n	800cbc2 <USBD_StdEPReq+0x90>
 800cba6:	7bbb      	ldrb	r3, [r7, #14]
 800cba8:	2b80      	cmp	r3, #128	; 0x80
 800cbaa:	d00a      	beq.n	800cbc2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f001 fa11 	bl	800dfd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbb6:	2180      	movs	r1, #128	; 0x80
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f001 fa0d 	bl	800dfd8 <USBD_LL_StallEP>
 800cbbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cbc0:	e020      	b.n	800cc04 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 fc6f 	bl	800d4a8 <USBD_CtlError>
              break;
 800cbca:	e01b      	b.n	800cc04 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	885b      	ldrh	r3, [r3, #2]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10e      	bne.n	800cbf2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00b      	beq.n	800cbf2 <USBD_StdEPReq+0xc0>
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	2b80      	cmp	r3, #128	; 0x80
 800cbde:	d008      	beq.n	800cbf2 <USBD_StdEPReq+0xc0>
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	88db      	ldrh	r3, [r3, #6]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d104      	bne.n	800cbf2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f001 f9f3 	bl	800dfd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fd23 	bl	800d63e <USBD_CtlSendStatus>

              break;
 800cbf8:	e004      	b.n	800cc04 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fc53 	bl	800d4a8 <USBD_CtlError>
              break;
 800cc02:	bf00      	nop
          }
          break;
 800cc04:	e0ec      	b.n	800cde0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d002      	beq.n	800cc18 <USBD_StdEPReq+0xe6>
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	d016      	beq.n	800cc44 <USBD_StdEPReq+0x112>
 800cc16:	e030      	b.n	800cc7a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc18:	7bbb      	ldrb	r3, [r7, #14]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00d      	beq.n	800cc3a <USBD_StdEPReq+0x108>
 800cc1e:	7bbb      	ldrb	r3, [r7, #14]
 800cc20:	2b80      	cmp	r3, #128	; 0x80
 800cc22:	d00a      	beq.n	800cc3a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc24:	7bbb      	ldrb	r3, [r7, #14]
 800cc26:	4619      	mov	r1, r3
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f001 f9d5 	bl	800dfd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc2e:	2180      	movs	r1, #128	; 0x80
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f001 f9d1 	bl	800dfd8 <USBD_LL_StallEP>
 800cc36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc38:	e025      	b.n	800cc86 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cc3a:	6839      	ldr	r1, [r7, #0]
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 fc33 	bl	800d4a8 <USBD_CtlError>
              break;
 800cc42:	e020      	b.n	800cc86 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	885b      	ldrh	r3, [r3, #2]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d11b      	bne.n	800cc84 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc4c:	7bbb      	ldrb	r3, [r7, #14]
 800cc4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d004      	beq.n	800cc60 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc56:	7bbb      	ldrb	r3, [r7, #14]
 800cc58:	4619      	mov	r1, r3
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f001 f9f2 	bl	800e044 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 fcec 	bl	800d63e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	6839      	ldr	r1, [r7, #0]
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	4798      	blx	r3
 800cc74:	4603      	mov	r3, r0
 800cc76:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cc78:	e004      	b.n	800cc84 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 fc13 	bl	800d4a8 <USBD_CtlError>
              break;
 800cc82:	e000      	b.n	800cc86 <USBD_StdEPReq+0x154>
              break;
 800cc84:	bf00      	nop
          }
          break;
 800cc86:	e0ab      	b.n	800cde0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	d002      	beq.n	800cc9a <USBD_StdEPReq+0x168>
 800cc94:	2b03      	cmp	r3, #3
 800cc96:	d032      	beq.n	800ccfe <USBD_StdEPReq+0x1cc>
 800cc98:	e097      	b.n	800cdca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d007      	beq.n	800ccb0 <USBD_StdEPReq+0x17e>
 800cca0:	7bbb      	ldrb	r3, [r7, #14]
 800cca2:	2b80      	cmp	r3, #128	; 0x80
 800cca4:	d004      	beq.n	800ccb0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cca6:	6839      	ldr	r1, [r7, #0]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fbfd 	bl	800d4a8 <USBD_CtlError>
                break;
 800ccae:	e091      	b.n	800cdd4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	da0b      	bge.n	800ccd0 <USBD_StdEPReq+0x19e>
 800ccb8:	7bbb      	ldrb	r3, [r7, #14]
 800ccba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4413      	add	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	3310      	adds	r3, #16
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	4413      	add	r3, r2
 800cccc:	3304      	adds	r3, #4
 800ccce:	e00b      	b.n	800cce8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccd0:	7bbb      	ldrb	r3, [r7, #14]
 800ccd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	4413      	add	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	4413      	add	r3, r2
 800cce6:	3304      	adds	r3, #4
 800cce8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	2200      	movs	r2, #0
 800ccee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 fc47 	bl	800d58a <USBD_CtlSendData>
              break;
 800ccfc:	e06a      	b.n	800cdd4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ccfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	da11      	bge.n	800cd2a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd06:	7bbb      	ldrb	r3, [r7, #14]
 800cd08:	f003 020f 	and.w	r2, r3, #15
 800cd0c:	6879      	ldr	r1, [r7, #4]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4413      	add	r3, r2
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	440b      	add	r3, r1
 800cd18:	3324      	adds	r3, #36	; 0x24
 800cd1a:	881b      	ldrh	r3, [r3, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d117      	bne.n	800cd50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 fbc0 	bl	800d4a8 <USBD_CtlError>
                  break;
 800cd28:	e054      	b.n	800cdd4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd2a:	7bbb      	ldrb	r3, [r7, #14]
 800cd2c:	f003 020f 	and.w	r2, r3, #15
 800cd30:	6879      	ldr	r1, [r7, #4]
 800cd32:	4613      	mov	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4413      	add	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	440b      	add	r3, r1
 800cd3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd40:	881b      	ldrh	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d104      	bne.n	800cd50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd46:	6839      	ldr	r1, [r7, #0]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 fbad 	bl	800d4a8 <USBD_CtlError>
                  break;
 800cd4e:	e041      	b.n	800cdd4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	da0b      	bge.n	800cd70 <USBD_StdEPReq+0x23e>
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
 800cd5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd5e:	4613      	mov	r3, r2
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4413      	add	r3, r2
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	3310      	adds	r3, #16
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	e00b      	b.n	800cd88 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd70:	7bbb      	ldrb	r3, [r7, #14]
 800cd72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd76:	4613      	mov	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	4413      	add	r3, r2
 800cd86:	3304      	adds	r3, #4
 800cd88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cd8a:	7bbb      	ldrb	r3, [r7, #14]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <USBD_StdEPReq+0x264>
 800cd90:	7bbb      	ldrb	r3, [r7, #14]
 800cd92:	2b80      	cmp	r3, #128	; 0x80
 800cd94:	d103      	bne.n	800cd9e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	e00e      	b.n	800cdbc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cd9e:	7bbb      	ldrb	r3, [r7, #14]
 800cda0:	4619      	mov	r1, r3
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f001 f984 	bl	800e0b0 <USBD_LL_IsStallEP>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	601a      	str	r2, [r3, #0]
 800cdb4:	e002      	b.n	800cdbc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2202      	movs	r2, #2
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fbe1 	bl	800d58a <USBD_CtlSendData>
              break;
 800cdc8:	e004      	b.n	800cdd4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fb6b 	bl	800d4a8 <USBD_CtlError>
              break;
 800cdd2:	bf00      	nop
          }
          break;
 800cdd4:	e004      	b.n	800cde0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fb65 	bl	800d4a8 <USBD_CtlError>
          break;
 800cdde:	bf00      	nop
      }
      break;
 800cde0:	e004      	b.n	800cdec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 fb5f 	bl	800d4a8 <USBD_CtlError>
      break;
 800cdea:	bf00      	nop
  }

  return ret;
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
	...

0800cdf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b084      	sub	sp, #16
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce02:	2300      	movs	r3, #0
 800ce04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce06:	2300      	movs	r3, #0
 800ce08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	885b      	ldrh	r3, [r3, #2]
 800ce12:	0a1b      	lsrs	r3, r3, #8
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	3b01      	subs	r3, #1
 800ce18:	2b0e      	cmp	r3, #14
 800ce1a:	f200 8152 	bhi.w	800d0c2 <USBD_GetDescriptor+0x2ca>
 800ce1e:	a201      	add	r2, pc, #4	; (adr r2, 800ce24 <USBD_GetDescriptor+0x2c>)
 800ce20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce24:	0800ce95 	.word	0x0800ce95
 800ce28:	0800cead 	.word	0x0800cead
 800ce2c:	0800ceed 	.word	0x0800ceed
 800ce30:	0800d0c3 	.word	0x0800d0c3
 800ce34:	0800d0c3 	.word	0x0800d0c3
 800ce38:	0800d063 	.word	0x0800d063
 800ce3c:	0800d08f 	.word	0x0800d08f
 800ce40:	0800d0c3 	.word	0x0800d0c3
 800ce44:	0800d0c3 	.word	0x0800d0c3
 800ce48:	0800d0c3 	.word	0x0800d0c3
 800ce4c:	0800d0c3 	.word	0x0800d0c3
 800ce50:	0800d0c3 	.word	0x0800d0c3
 800ce54:	0800d0c3 	.word	0x0800d0c3
 800ce58:	0800d0c3 	.word	0x0800d0c3
 800ce5c:	0800ce61 	.word	0x0800ce61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce66:	69db      	ldr	r3, [r3, #28]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d00b      	beq.n	800ce84 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce72:	69db      	ldr	r3, [r3, #28]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	7c12      	ldrb	r2, [r2, #16]
 800ce78:	f107 0108 	add.w	r1, r7, #8
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	4798      	blx	r3
 800ce80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce82:	e126      	b.n	800d0d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce84:	6839      	ldr	r1, [r7, #0]
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 fb0e 	bl	800d4a8 <USBD_CtlError>
        err++;
 800ce8c:	7afb      	ldrb	r3, [r7, #11]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	72fb      	strb	r3, [r7, #11]
      break;
 800ce92:	e11e      	b.n	800d0d2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	7c12      	ldrb	r2, [r2, #16]
 800cea0:	f107 0108 	add.w	r1, r7, #8
 800cea4:	4610      	mov	r0, r2
 800cea6:	4798      	blx	r3
 800cea8:	60f8      	str	r0, [r7, #12]
      break;
 800ceaa:	e112      	b.n	800d0d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	7c1b      	ldrb	r3, [r3, #16]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10d      	bne.n	800ced0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cebc:	f107 0208 	add.w	r2, r7, #8
 800cec0:	4610      	mov	r0, r2
 800cec2:	4798      	blx	r3
 800cec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3301      	adds	r3, #1
 800ceca:	2202      	movs	r2, #2
 800cecc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cece:	e100      	b.n	800d0d2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ced6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced8:	f107 0208 	add.w	r2, r7, #8
 800cedc:	4610      	mov	r0, r2
 800cede:	4798      	blx	r3
 800cee0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	3301      	adds	r3, #1
 800cee6:	2202      	movs	r2, #2
 800cee8:	701a      	strb	r2, [r3, #0]
      break;
 800ceea:	e0f2      	b.n	800d0d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	885b      	ldrh	r3, [r3, #2]
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	2b05      	cmp	r3, #5
 800cef4:	f200 80ac 	bhi.w	800d050 <USBD_GetDescriptor+0x258>
 800cef8:	a201      	add	r2, pc, #4	; (adr r2, 800cf00 <USBD_GetDescriptor+0x108>)
 800cefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cefe:	bf00      	nop
 800cf00:	0800cf19 	.word	0x0800cf19
 800cf04:	0800cf4d 	.word	0x0800cf4d
 800cf08:	0800cf81 	.word	0x0800cf81
 800cf0c:	0800cfb5 	.word	0x0800cfb5
 800cf10:	0800cfe9 	.word	0x0800cfe9
 800cf14:	0800d01d 	.word	0x0800d01d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d00b      	beq.n	800cf3c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	7c12      	ldrb	r2, [r2, #16]
 800cf30:	f107 0108 	add.w	r1, r7, #8
 800cf34:	4610      	mov	r0, r2
 800cf36:	4798      	blx	r3
 800cf38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf3a:	e091      	b.n	800d060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf3c:	6839      	ldr	r1, [r7, #0]
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fab2 	bl	800d4a8 <USBD_CtlError>
            err++;
 800cf44:	7afb      	ldrb	r3, [r7, #11]
 800cf46:	3301      	adds	r3, #1
 800cf48:	72fb      	strb	r3, [r7, #11]
          break;
 800cf4a:	e089      	b.n	800d060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00b      	beq.n	800cf70 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	7c12      	ldrb	r2, [r2, #16]
 800cf64:	f107 0108 	add.w	r1, r7, #8
 800cf68:	4610      	mov	r0, r2
 800cf6a:	4798      	blx	r3
 800cf6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf6e:	e077      	b.n	800d060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 fa98 	bl	800d4a8 <USBD_CtlError>
            err++;
 800cf78:	7afb      	ldrb	r3, [r7, #11]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf7e:	e06f      	b.n	800d060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00b      	beq.n	800cfa4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	7c12      	ldrb	r2, [r2, #16]
 800cf98:	f107 0108 	add.w	r1, r7, #8
 800cf9c:	4610      	mov	r0, r2
 800cf9e:	4798      	blx	r3
 800cfa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfa2:	e05d      	b.n	800d060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 fa7e 	bl	800d4a8 <USBD_CtlError>
            err++;
 800cfac:	7afb      	ldrb	r3, [r7, #11]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	72fb      	strb	r3, [r7, #11]
          break;
 800cfb2:	e055      	b.n	800d060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00b      	beq.n	800cfd8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	7c12      	ldrb	r2, [r2, #16]
 800cfcc:	f107 0108 	add.w	r1, r7, #8
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4798      	blx	r3
 800cfd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfd6:	e043      	b.n	800d060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 fa64 	bl	800d4a8 <USBD_CtlError>
            err++;
 800cfe0:	7afb      	ldrb	r3, [r7, #11]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	72fb      	strb	r3, [r7, #11]
          break;
 800cfe6:	e03b      	b.n	800d060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfee:	695b      	ldr	r3, [r3, #20]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00b      	beq.n	800d00c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cffa:	695b      	ldr	r3, [r3, #20]
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	7c12      	ldrb	r2, [r2, #16]
 800d000:	f107 0108 	add.w	r1, r7, #8
 800d004:	4610      	mov	r0, r2
 800d006:	4798      	blx	r3
 800d008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d00a:	e029      	b.n	800d060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fa4a 	bl	800d4a8 <USBD_CtlError>
            err++;
 800d014:	7afb      	ldrb	r3, [r7, #11]
 800d016:	3301      	adds	r3, #1
 800d018:	72fb      	strb	r3, [r7, #11]
          break;
 800d01a:	e021      	b.n	800d060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d022:	699b      	ldr	r3, [r3, #24]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00b      	beq.n	800d040 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	7c12      	ldrb	r2, [r2, #16]
 800d034:	f107 0108 	add.w	r1, r7, #8
 800d038:	4610      	mov	r0, r2
 800d03a:	4798      	blx	r3
 800d03c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d03e:	e00f      	b.n	800d060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fa30 	bl	800d4a8 <USBD_CtlError>
            err++;
 800d048:	7afb      	ldrb	r3, [r7, #11]
 800d04a:	3301      	adds	r3, #1
 800d04c:	72fb      	strb	r3, [r7, #11]
          break;
 800d04e:	e007      	b.n	800d060 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d050:	6839      	ldr	r1, [r7, #0]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 fa28 	bl	800d4a8 <USBD_CtlError>
          err++;
 800d058:	7afb      	ldrb	r3, [r7, #11]
 800d05a:	3301      	adds	r3, #1
 800d05c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d05e:	bf00      	nop
      }
      break;
 800d060:	e037      	b.n	800d0d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	7c1b      	ldrb	r3, [r3, #16]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d109      	bne.n	800d07e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d072:	f107 0208 	add.w	r2, r7, #8
 800d076:	4610      	mov	r0, r2
 800d078:	4798      	blx	r3
 800d07a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d07c:	e029      	b.n	800d0d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 fa11 	bl	800d4a8 <USBD_CtlError>
        err++;
 800d086:	7afb      	ldrb	r3, [r7, #11]
 800d088:	3301      	adds	r3, #1
 800d08a:	72fb      	strb	r3, [r7, #11]
      break;
 800d08c:	e021      	b.n	800d0d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	7c1b      	ldrb	r3, [r3, #16]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d10d      	bne.n	800d0b2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d09e:	f107 0208 	add.w	r2, r7, #8
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	4798      	blx	r3
 800d0a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	2207      	movs	r2, #7
 800d0ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0b0:	e00f      	b.n	800d0d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0b2:	6839      	ldr	r1, [r7, #0]
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f9f7 	bl	800d4a8 <USBD_CtlError>
        err++;
 800d0ba:	7afb      	ldrb	r3, [r7, #11]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	72fb      	strb	r3, [r7, #11]
      break;
 800d0c0:	e007      	b.n	800d0d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f9ef 	bl	800d4a8 <USBD_CtlError>
      err++;
 800d0ca:	7afb      	ldrb	r3, [r7, #11]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	72fb      	strb	r3, [r7, #11]
      break;
 800d0d0:	bf00      	nop
  }

  if (err != 0U)
 800d0d2:	7afb      	ldrb	r3, [r7, #11]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d11e      	bne.n	800d116 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	88db      	ldrh	r3, [r3, #6]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d016      	beq.n	800d10e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d0e0:	893b      	ldrh	r3, [r7, #8]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00e      	beq.n	800d104 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	88da      	ldrh	r2, [r3, #6]
 800d0ea:	893b      	ldrh	r3, [r7, #8]
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	bf28      	it	cs
 800d0f0:	4613      	movcs	r3, r2
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d0f6:	893b      	ldrh	r3, [r7, #8]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	68f9      	ldr	r1, [r7, #12]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 fa44 	bl	800d58a <USBD_CtlSendData>
 800d102:	e009      	b.n	800d118 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d104:	6839      	ldr	r1, [r7, #0]
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f9ce 	bl	800d4a8 <USBD_CtlError>
 800d10c:	e004      	b.n	800d118 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 fa95 	bl	800d63e <USBD_CtlSendStatus>
 800d114:	e000      	b.n	800d118 <USBD_GetDescriptor+0x320>
    return;
 800d116:	bf00      	nop
  }
}
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop

0800d120 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	889b      	ldrh	r3, [r3, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d131      	bne.n	800d196 <USBD_SetAddress+0x76>
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	88db      	ldrh	r3, [r3, #6]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d12d      	bne.n	800d196 <USBD_SetAddress+0x76>
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	885b      	ldrh	r3, [r3, #2]
 800d13e:	2b7f      	cmp	r3, #127	; 0x7f
 800d140:	d829      	bhi.n	800d196 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	885b      	ldrh	r3, [r3, #2]
 800d146:	b2db      	uxtb	r3, r3
 800d148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d14c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d154:	b2db      	uxtb	r3, r3
 800d156:	2b03      	cmp	r3, #3
 800d158:	d104      	bne.n	800d164 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d15a:	6839      	ldr	r1, [r7, #0]
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 f9a3 	bl	800d4a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d162:	e01d      	b.n	800d1a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	7bfa      	ldrb	r2, [r7, #15]
 800d168:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
 800d16e:	4619      	mov	r1, r3
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 ffc9 	bl	800e108 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fa61 	bl	800d63e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d17c:	7bfb      	ldrb	r3, [r7, #15]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d004      	beq.n	800d18c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2202      	movs	r2, #2
 800d186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d18a:	e009      	b.n	800d1a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d194:	e004      	b.n	800d1a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d196:	6839      	ldr	r1, [r7, #0]
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 f985 	bl	800d4a8 <USBD_CtlError>
  }
}
 800d19e:	bf00      	nop
 800d1a0:	bf00      	nop
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	885b      	ldrh	r3, [r3, #2]
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	4b4c      	ldr	r3, [pc, #304]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d1be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d1c0:	4b4b      	ldr	r3, [pc, #300]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b01      	cmp	r3, #1
 800d1c6:	d905      	bls.n	800d1d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1c8:	6839      	ldr	r1, [r7, #0]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f96c 	bl	800d4a8 <USBD_CtlError>
    return USBD_FAIL;
 800d1d0:	2303      	movs	r3, #3
 800d1d2:	e088      	b.n	800d2e6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	d002      	beq.n	800d1e6 <USBD_SetConfig+0x3e>
 800d1e0:	2b03      	cmp	r3, #3
 800d1e2:	d025      	beq.n	800d230 <USBD_SetConfig+0x88>
 800d1e4:	e071      	b.n	800d2ca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d1e6:	4b42      	ldr	r3, [pc, #264]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d01c      	beq.n	800d228 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d1ee:	4b40      	ldr	r3, [pc, #256]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1f8:	4b3d      	ldr	r3, [pc, #244]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7ff f91e 	bl	800c440 <USBD_SetClassConfig>
 800d204:	4603      	mov	r3, r0
 800d206:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d208:	7bfb      	ldrb	r3, [r7, #15]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d004      	beq.n	800d218 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d20e:	6839      	ldr	r1, [r7, #0]
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 f949 	bl	800d4a8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d216:	e065      	b.n	800d2e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 fa10 	bl	800d63e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2203      	movs	r2, #3
 800d222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d226:	e05d      	b.n	800d2e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fa08 	bl	800d63e <USBD_CtlSendStatus>
      break;
 800d22e:	e059      	b.n	800d2e4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d230:	4b2f      	ldr	r3, [pc, #188]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d112      	bne.n	800d25e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2202      	movs	r2, #2
 800d23c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d240:	4b2b      	ldr	r3, [pc, #172]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	461a      	mov	r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d24a:	4b29      	ldr	r3, [pc, #164]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	4619      	mov	r1, r3
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7ff f911 	bl	800c478 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f9f1 	bl	800d63e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d25c:	e042      	b.n	800d2e4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d25e:	4b24      	ldr	r3, [pc, #144]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	461a      	mov	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d02a      	beq.n	800d2c2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	b2db      	uxtb	r3, r3
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f7ff f8ff 	bl	800c478 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d27a:	4b1d      	ldr	r3, [pc, #116]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	461a      	mov	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d284:	4b1a      	ldr	r3, [pc, #104]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	4619      	mov	r1, r3
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7ff f8d8 	bl	800c440 <USBD_SetClassConfig>
 800d290:	4603      	mov	r3, r0
 800d292:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d294:	7bfb      	ldrb	r3, [r7, #15]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00f      	beq.n	800d2ba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f903 	bl	800d4a8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7ff f8e4 	bl	800c478 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2202      	movs	r2, #2
 800d2b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d2b8:	e014      	b.n	800d2e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f9bf 	bl	800d63e <USBD_CtlSendStatus>
      break;
 800d2c0:	e010      	b.n	800d2e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 f9bb 	bl	800d63e <USBD_CtlSendStatus>
      break;
 800d2c8:	e00c      	b.n	800d2e4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f8eb 	bl	800d4a8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2d2:	4b07      	ldr	r3, [pc, #28]	; (800d2f0 <USBD_SetConfig+0x148>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f7ff f8cd 	bl	800c478 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d2de:	2303      	movs	r3, #3
 800d2e0:	73fb      	strb	r3, [r7, #15]
      break;
 800d2e2:	bf00      	nop
  }

  return ret;
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	200001e0 	.word	0x200001e0

0800d2f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	88db      	ldrh	r3, [r3, #6]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d004      	beq.n	800d310 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f8cd 	bl	800d4a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d30e:	e023      	b.n	800d358 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b02      	cmp	r3, #2
 800d31a:	dc02      	bgt.n	800d322 <USBD_GetConfig+0x2e>
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	dc03      	bgt.n	800d328 <USBD_GetConfig+0x34>
 800d320:	e015      	b.n	800d34e <USBD_GetConfig+0x5a>
 800d322:	2b03      	cmp	r3, #3
 800d324:	d00b      	beq.n	800d33e <USBD_GetConfig+0x4a>
 800d326:	e012      	b.n	800d34e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	3308      	adds	r3, #8
 800d332:	2201      	movs	r2, #1
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f927 	bl	800d58a <USBD_CtlSendData>
        break;
 800d33c:	e00c      	b.n	800d358 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	3304      	adds	r3, #4
 800d342:	2201      	movs	r2, #1
 800d344:	4619      	mov	r1, r3
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 f91f 	bl	800d58a <USBD_CtlSendData>
        break;
 800d34c:	e004      	b.n	800d358 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d34e:	6839      	ldr	r1, [r7, #0]
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f8a9 	bl	800d4a8 <USBD_CtlError>
        break;
 800d356:	bf00      	nop
}
 800d358:	bf00      	nop
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d370:	b2db      	uxtb	r3, r3
 800d372:	3b01      	subs	r3, #1
 800d374:	2b02      	cmp	r3, #2
 800d376:	d81e      	bhi.n	800d3b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	88db      	ldrh	r3, [r3, #6]
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d004      	beq.n	800d38a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d380:	6839      	ldr	r1, [r7, #0]
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 f890 	bl	800d4a8 <USBD_CtlError>
        break;
 800d388:	e01a      	b.n	800d3c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2201      	movs	r2, #1
 800d38e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d396:	2b00      	cmp	r3, #0
 800d398:	d005      	beq.n	800d3a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	f043 0202 	orr.w	r2, r3, #2
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	330c      	adds	r3, #12
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 f8eb 	bl	800d58a <USBD_CtlSendData>
      break;
 800d3b4:	e004      	b.n	800d3c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 f875 	bl	800d4a8 <USBD_CtlError>
      break;
 800d3be:	bf00      	nop
  }
}
 800d3c0:	bf00      	nop
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	885b      	ldrh	r3, [r3, #2]
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d106      	bne.n	800d3e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f92b 	bl	800d63e <USBD_CtlSendStatus>
  }
}
 800d3e8:	bf00      	nop
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d400:	b2db      	uxtb	r3, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	2b02      	cmp	r3, #2
 800d406:	d80b      	bhi.n	800d420 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	885b      	ldrh	r3, [r3, #2]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d10c      	bne.n	800d42a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f000 f910 	bl	800d63e <USBD_CtlSendStatus>
      }
      break;
 800d41e:	e004      	b.n	800d42a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d420:	6839      	ldr	r1, [r7, #0]
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 f840 	bl	800d4a8 <USBD_CtlError>
      break;
 800d428:	e000      	b.n	800d42c <USBD_ClrFeature+0x3c>
      break;
 800d42a:	bf00      	nop
  }
}
 800d42c:	bf00      	nop
 800d42e:	3708      	adds	r7, #8
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	781a      	ldrb	r2, [r3, #0]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3301      	adds	r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	781a      	ldrb	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	3301      	adds	r3, #1
 800d45c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d45e:	68f8      	ldr	r0, [r7, #12]
 800d460:	f7ff fa91 	bl	800c986 <SWAPBYTE>
 800d464:	4603      	mov	r3, r0
 800d466:	461a      	mov	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	3301      	adds	r3, #1
 800d470:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	3301      	adds	r3, #1
 800d476:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f7ff fa84 	bl	800c986 <SWAPBYTE>
 800d47e:	4603      	mov	r3, r0
 800d480:	461a      	mov	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3301      	adds	r3, #1
 800d48a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	3301      	adds	r3, #1
 800d490:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f7ff fa77 	bl	800c986 <SWAPBYTE>
 800d498:	4603      	mov	r3, r0
 800d49a:	461a      	mov	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	80da      	strh	r2, [r3, #6]
}
 800d4a0:	bf00      	nop
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4b2:	2180      	movs	r1, #128	; 0x80
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 fd8f 	bl	800dfd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 fd8b 	bl	800dfd8 <USBD_LL_StallEP>
}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b086      	sub	sp, #24
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	60f8      	str	r0, [r7, #12]
 800d4d2:	60b9      	str	r1, [r7, #8]
 800d4d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d036      	beq.n	800d54e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d4e4:	6938      	ldr	r0, [r7, #16]
 800d4e6:	f000 f836 	bl	800d556 <USBD_GetLen>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	005b      	lsls	r3, r3, #1
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d4f8:	7dfb      	ldrb	r3, [r7, #23]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	687a      	ldr	r2, [r7, #4]
 800d500:	7812      	ldrb	r2, [r2, #0]
 800d502:	701a      	strb	r2, [r3, #0]
  idx++;
 800d504:	7dfb      	ldrb	r3, [r7, #23]
 800d506:	3301      	adds	r3, #1
 800d508:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d50a:	7dfb      	ldrb	r3, [r7, #23]
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	4413      	add	r3, r2
 800d510:	2203      	movs	r2, #3
 800d512:	701a      	strb	r2, [r3, #0]
  idx++;
 800d514:	7dfb      	ldrb	r3, [r7, #23]
 800d516:	3301      	adds	r3, #1
 800d518:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d51a:	e013      	b.n	800d544 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d51c:	7dfb      	ldrb	r3, [r7, #23]
 800d51e:	68ba      	ldr	r2, [r7, #8]
 800d520:	4413      	add	r3, r2
 800d522:	693a      	ldr	r2, [r7, #16]
 800d524:	7812      	ldrb	r2, [r2, #0]
 800d526:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	3301      	adds	r3, #1
 800d52c:	613b      	str	r3, [r7, #16]
    idx++;
 800d52e:	7dfb      	ldrb	r3, [r7, #23]
 800d530:	3301      	adds	r3, #1
 800d532:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d534:	7dfb      	ldrb	r3, [r7, #23]
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	4413      	add	r3, r2
 800d53a:	2200      	movs	r2, #0
 800d53c:	701a      	strb	r2, [r3, #0]
    idx++;
 800d53e:	7dfb      	ldrb	r3, [r7, #23]
 800d540:	3301      	adds	r3, #1
 800d542:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1e7      	bne.n	800d51c <USBD_GetString+0x52>
 800d54c:	e000      	b.n	800d550 <USBD_GetString+0x86>
    return;
 800d54e:	bf00      	nop
  }
}
 800d550:	3718      	adds	r7, #24
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}

0800d556 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d556:	b480      	push	{r7}
 800d558:	b085      	sub	sp, #20
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d55e:	2300      	movs	r3, #0
 800d560:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d566:	e005      	b.n	800d574 <USBD_GetLen+0x1e>
  {
    len++;
 800d568:	7bfb      	ldrb	r3, [r7, #15]
 800d56a:	3301      	adds	r3, #1
 800d56c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	3301      	adds	r3, #1
 800d572:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1f5      	bne.n	800d568 <USBD_GetLen+0x12>
  }

  return len;
 800d57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3714      	adds	r7, #20
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	60f8      	str	r0, [r7, #12]
 800d592:	60b9      	str	r1, [r7, #8]
 800d594:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2202      	movs	r2, #2
 800d59a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f000 fddf 	bl	800e174 <USBD_LL_Transmit>

  return USBD_OK;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f000 fdce 	bl	800e174 <USBD_LL_Transmit>

  return USBD_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3710      	adds	r7, #16
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b084      	sub	sp, #16
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	60f8      	str	r0, [r7, #12]
 800d5ea:	60b9      	str	r1, [r7, #8]
 800d5ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2203      	movs	r2, #3
 800d5f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	68ba      	ldr	r2, [r7, #8]
 800d60a:	2100      	movs	r1, #0
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	f000 fde9 	bl	800e1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	3710      	adds	r7, #16
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	2100      	movs	r1, #0
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f000 fdd8 	bl	800e1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b082      	sub	sp, #8
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2204      	movs	r2, #4
 800d64a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d64e:	2300      	movs	r3, #0
 800d650:	2200      	movs	r2, #0
 800d652:	2100      	movs	r1, #0
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 fd8d 	bl	800e174 <USBD_LL_Transmit>

  return USBD_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2205      	movs	r2, #5
 800d670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d674:	2300      	movs	r3, #0
 800d676:	2200      	movs	r2, #0
 800d678:	2100      	movs	r1, #0
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fdb2 	bl	800e1e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
	...

0800d68c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b087      	sub	sp, #28
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	4613      	mov	r3, r2
 800d698:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d69a:	2301      	movs	r3, #1
 800d69c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6a2:	4b1f      	ldr	r3, [pc, #124]	; (800d720 <FATFS_LinkDriverEx+0x94>)
 800d6a4:	7a5b      	ldrb	r3, [r3, #9]
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d131      	bne.n	800d710 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6ac:	4b1c      	ldr	r3, [pc, #112]	; (800d720 <FATFS_LinkDriverEx+0x94>)
 800d6ae:	7a5b      	ldrb	r3, [r3, #9]
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	4b1a      	ldr	r3, [pc, #104]	; (800d720 <FATFS_LinkDriverEx+0x94>)
 800d6b6:	2100      	movs	r1, #0
 800d6b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d6ba:	4b19      	ldr	r3, [pc, #100]	; (800d720 <FATFS_LinkDriverEx+0x94>)
 800d6bc:	7a5b      	ldrb	r3, [r3, #9]
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	4a17      	ldr	r2, [pc, #92]	; (800d720 <FATFS_LinkDriverEx+0x94>)
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	4413      	add	r3, r2
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6ca:	4b15      	ldr	r3, [pc, #84]	; (800d720 <FATFS_LinkDriverEx+0x94>)
 800d6cc:	7a5b      	ldrb	r3, [r3, #9]
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	4b13      	ldr	r3, [pc, #76]	; (800d720 <FATFS_LinkDriverEx+0x94>)
 800d6d4:	4413      	add	r3, r2
 800d6d6:	79fa      	ldrb	r2, [r7, #7]
 800d6d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d6da:	4b11      	ldr	r3, [pc, #68]	; (800d720 <FATFS_LinkDriverEx+0x94>)
 800d6dc:	7a5b      	ldrb	r3, [r3, #9]
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	1c5a      	adds	r2, r3, #1
 800d6e2:	b2d1      	uxtb	r1, r2
 800d6e4:	4a0e      	ldr	r2, [pc, #56]	; (800d720 <FATFS_LinkDriverEx+0x94>)
 800d6e6:	7251      	strb	r1, [r2, #9]
 800d6e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d6ea:	7dbb      	ldrb	r3, [r7, #22]
 800d6ec:	3330      	adds	r3, #48	; 0x30
 800d6ee:	b2da      	uxtb	r2, r3
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	223a      	movs	r2, #58	; 0x3a
 800d6fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	3302      	adds	r3, #2
 800d700:	222f      	movs	r2, #47	; 0x2f
 800d702:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	3303      	adds	r3, #3
 800d708:	2200      	movs	r2, #0
 800d70a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d70c:	2300      	movs	r3, #0
 800d70e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d710:	7dfb      	ldrb	r3, [r7, #23]
}
 800d712:	4618      	mov	r0, r3
 800d714:	371c      	adds	r7, #28
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	200001e4 	.word	0x200001e4

0800d724 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d72e:	2200      	movs	r2, #0
 800d730:	6839      	ldr	r1, [r7, #0]
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7ff ffaa 	bl	800d68c <FATFS_LinkDriverEx>
 800d738:	4603      	mov	r3, r0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
	...

0800d744 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d748:	2200      	movs	r2, #0
 800d74a:	4912      	ldr	r1, [pc, #72]	; (800d794 <MX_USB_DEVICE_Init+0x50>)
 800d74c:	4812      	ldr	r0, [pc, #72]	; (800d798 <MX_USB_DEVICE_Init+0x54>)
 800d74e:	f7fe fe09 	bl	800c364 <USBD_Init>
 800d752:	4603      	mov	r3, r0
 800d754:	2b00      	cmp	r3, #0
 800d756:	d001      	beq.n	800d75c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d758:	f7f3 faee 	bl	8000d38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d75c:	490f      	ldr	r1, [pc, #60]	; (800d79c <MX_USB_DEVICE_Init+0x58>)
 800d75e:	480e      	ldr	r0, [pc, #56]	; (800d798 <MX_USB_DEVICE_Init+0x54>)
 800d760:	f7fe fe30 	bl	800c3c4 <USBD_RegisterClass>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d001      	beq.n	800d76e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d76a:	f7f3 fae5 	bl	8000d38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d76e:	490c      	ldr	r1, [pc, #48]	; (800d7a0 <MX_USB_DEVICE_Init+0x5c>)
 800d770:	4809      	ldr	r0, [pc, #36]	; (800d798 <MX_USB_DEVICE_Init+0x54>)
 800d772:	f7fe fd81 	bl	800c278 <USBD_CDC_RegisterInterface>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d001      	beq.n	800d780 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d77c:	f7f3 fadc 	bl	8000d38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d780:	4805      	ldr	r0, [pc, #20]	; (800d798 <MX_USB_DEVICE_Init+0x54>)
 800d782:	f7fe fe46 	bl	800c412 <USBD_Start>
 800d786:	4603      	mov	r3, r0
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d001      	beq.n	800d790 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d78c:	f7f3 fad4 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d790:	bf00      	nop
 800d792:	bd80      	pop	{r7, pc}
 800d794:	20000130 	.word	0x20000130
 800d798:	20000d20 	.word	0x20000d20
 800d79c:	20000018 	.word	0x20000018
 800d7a0:	2000011c 	.word	0x2000011c

0800d7a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	4905      	ldr	r1, [pc, #20]	; (800d7c0 <CDC_Init_FS+0x1c>)
 800d7ac:	4805      	ldr	r0, [pc, #20]	; (800d7c4 <CDC_Init_FS+0x20>)
 800d7ae:	f7fe fd78 	bl	800c2a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d7b2:	4905      	ldr	r1, [pc, #20]	; (800d7c8 <CDC_Init_FS+0x24>)
 800d7b4:	4803      	ldr	r0, [pc, #12]	; (800d7c4 <CDC_Init_FS+0x20>)
 800d7b6:	f7fe fd92 	bl	800c2de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d7ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	200017f0 	.word	0x200017f0
 800d7c4:	20000d20 	.word	0x20000d20
 800d7c8:	20000ff0 	.word	0x20000ff0

0800d7cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d7d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	6039      	str	r1, [r7, #0]
 800d7e6:	71fb      	strb	r3, [r7, #7]
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d7ec:	79fb      	ldrb	r3, [r7, #7]
 800d7ee:	2b23      	cmp	r3, #35	; 0x23
 800d7f0:	d84a      	bhi.n	800d888 <CDC_Control_FS+0xac>
 800d7f2:	a201      	add	r2, pc, #4	; (adr r2, 800d7f8 <CDC_Control_FS+0x1c>)
 800d7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f8:	0800d889 	.word	0x0800d889
 800d7fc:	0800d889 	.word	0x0800d889
 800d800:	0800d889 	.word	0x0800d889
 800d804:	0800d889 	.word	0x0800d889
 800d808:	0800d889 	.word	0x0800d889
 800d80c:	0800d889 	.word	0x0800d889
 800d810:	0800d889 	.word	0x0800d889
 800d814:	0800d889 	.word	0x0800d889
 800d818:	0800d889 	.word	0x0800d889
 800d81c:	0800d889 	.word	0x0800d889
 800d820:	0800d889 	.word	0x0800d889
 800d824:	0800d889 	.word	0x0800d889
 800d828:	0800d889 	.word	0x0800d889
 800d82c:	0800d889 	.word	0x0800d889
 800d830:	0800d889 	.word	0x0800d889
 800d834:	0800d889 	.word	0x0800d889
 800d838:	0800d889 	.word	0x0800d889
 800d83c:	0800d889 	.word	0x0800d889
 800d840:	0800d889 	.word	0x0800d889
 800d844:	0800d889 	.word	0x0800d889
 800d848:	0800d889 	.word	0x0800d889
 800d84c:	0800d889 	.word	0x0800d889
 800d850:	0800d889 	.word	0x0800d889
 800d854:	0800d889 	.word	0x0800d889
 800d858:	0800d889 	.word	0x0800d889
 800d85c:	0800d889 	.word	0x0800d889
 800d860:	0800d889 	.word	0x0800d889
 800d864:	0800d889 	.word	0x0800d889
 800d868:	0800d889 	.word	0x0800d889
 800d86c:	0800d889 	.word	0x0800d889
 800d870:	0800d889 	.word	0x0800d889
 800d874:	0800d889 	.word	0x0800d889
 800d878:	0800d889 	.word	0x0800d889
 800d87c:	0800d889 	.word	0x0800d889
 800d880:	0800d889 	.word	0x0800d889
 800d884:	0800d889 	.word	0x0800d889
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d888:	bf00      	nop
  }

  return (USBD_OK);
 800d88a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d8a2:	6879      	ldr	r1, [r7, #4]
 800d8a4:	4805      	ldr	r0, [pc, #20]	; (800d8bc <CDC_Receive_FS+0x24>)
 800d8a6:	f7fe fd1a 	bl	800c2de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d8aa:	4804      	ldr	r0, [pc, #16]	; (800d8bc <CDC_Receive_FS+0x24>)
 800d8ac:	f7fe fd30 	bl	800c310 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d8b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20000d20 	.word	0x20000d20

0800d8c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b087      	sub	sp, #28
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d8d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	371c      	adds	r7, #28
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr
	...

0800d8e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	6039      	str	r1, [r7, #0]
 800d8ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	2212      	movs	r2, #18
 800d8f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d8f6:	4b03      	ldr	r3, [pc, #12]	; (800d904 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr
 800d904:	20000150 	.word	0x20000150

0800d908 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	4603      	mov	r3, r0
 800d910:	6039      	str	r1, [r7, #0]
 800d912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2204      	movs	r2, #4
 800d918:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d91a:	4b03      	ldr	r3, [pc, #12]	; (800d928 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr
 800d928:	20000170 	.word	0x20000170

0800d92c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	4603      	mov	r3, r0
 800d934:	6039      	str	r1, [r7, #0]
 800d936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d938:	79fb      	ldrb	r3, [r7, #7]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d105      	bne.n	800d94a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	4907      	ldr	r1, [pc, #28]	; (800d960 <USBD_FS_ProductStrDescriptor+0x34>)
 800d942:	4808      	ldr	r0, [pc, #32]	; (800d964 <USBD_FS_ProductStrDescriptor+0x38>)
 800d944:	f7ff fdc1 	bl	800d4ca <USBD_GetString>
 800d948:	e004      	b.n	800d954 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d94a:	683a      	ldr	r2, [r7, #0]
 800d94c:	4904      	ldr	r1, [pc, #16]	; (800d960 <USBD_FS_ProductStrDescriptor+0x34>)
 800d94e:	4805      	ldr	r0, [pc, #20]	; (800d964 <USBD_FS_ProductStrDescriptor+0x38>)
 800d950:	f7ff fdbb 	bl	800d4ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800d954:	4b02      	ldr	r3, [pc, #8]	; (800d960 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d956:	4618      	mov	r0, r3
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20001ff0 	.word	0x20001ff0
 800d964:	0800e3c4 	.word	0x0800e3c4

0800d968 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	4603      	mov	r3, r0
 800d970:	6039      	str	r1, [r7, #0]
 800d972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d974:	683a      	ldr	r2, [r7, #0]
 800d976:	4904      	ldr	r1, [pc, #16]	; (800d988 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d978:	4804      	ldr	r0, [pc, #16]	; (800d98c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d97a:	f7ff fda6 	bl	800d4ca <USBD_GetString>
  return USBD_StrDesc;
 800d97e:	4b02      	ldr	r3, [pc, #8]	; (800d988 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d980:	4618      	mov	r0, r3
 800d982:	3708      	adds	r7, #8
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	20001ff0 	.word	0x20001ff0
 800d98c:	0800e3dc 	.word	0x0800e3dc

0800d990 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	4603      	mov	r3, r0
 800d998:	6039      	str	r1, [r7, #0]
 800d99a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	221a      	movs	r2, #26
 800d9a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d9a2:	f000 f855 	bl	800da50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d9a6:	4b02      	ldr	r3, [pc, #8]	; (800d9b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	20000174 	.word	0x20000174

0800d9b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	6039      	str	r1, [r7, #0]
 800d9be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d9c0:	79fb      	ldrb	r3, [r7, #7]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d105      	bne.n	800d9d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d9c6:	683a      	ldr	r2, [r7, #0]
 800d9c8:	4907      	ldr	r1, [pc, #28]	; (800d9e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d9ca:	4808      	ldr	r0, [pc, #32]	; (800d9ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800d9cc:	f7ff fd7d 	bl	800d4ca <USBD_GetString>
 800d9d0:	e004      	b.n	800d9dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d9d2:	683a      	ldr	r2, [r7, #0]
 800d9d4:	4904      	ldr	r1, [pc, #16]	; (800d9e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d9d6:	4805      	ldr	r0, [pc, #20]	; (800d9ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800d9d8:	f7ff fd77 	bl	800d4ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800d9dc:	4b02      	ldr	r3, [pc, #8]	; (800d9e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	20001ff0 	.word	0x20001ff0
 800d9ec:	0800e3f0 	.word	0x0800e3f0

0800d9f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	6039      	str	r1, [r7, #0]
 800d9fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d9fc:	79fb      	ldrb	r3, [r7, #7]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d105      	bne.n	800da0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da02:	683a      	ldr	r2, [r7, #0]
 800da04:	4907      	ldr	r1, [pc, #28]	; (800da24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da06:	4808      	ldr	r0, [pc, #32]	; (800da28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da08:	f7ff fd5f 	bl	800d4ca <USBD_GetString>
 800da0c:	e004      	b.n	800da18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	4904      	ldr	r1, [pc, #16]	; (800da24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da12:	4805      	ldr	r0, [pc, #20]	; (800da28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da14:	f7ff fd59 	bl	800d4ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800da18:	4b02      	ldr	r3, [pc, #8]	; (800da24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	20001ff0 	.word	0x20001ff0
 800da28:	0800e3fc 	.word	0x0800e3fc

0800da2c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	4603      	mov	r3, r0
 800da34:	6039      	str	r1, [r7, #0]
 800da36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	220c      	movs	r2, #12
 800da3c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800da3e:	4b03      	ldr	r3, [pc, #12]	; (800da4c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800da40:	4618      	mov	r0, r3
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	20000164 	.word	0x20000164

0800da50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800da56:	4b0f      	ldr	r3, [pc, #60]	; (800da94 <Get_SerialNum+0x44>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800da5c:	4b0e      	ldr	r3, [pc, #56]	; (800da98 <Get_SerialNum+0x48>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800da62:	4b0e      	ldr	r3, [pc, #56]	; (800da9c <Get_SerialNum+0x4c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4413      	add	r3, r2
 800da6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d009      	beq.n	800da8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800da76:	2208      	movs	r2, #8
 800da78:	4909      	ldr	r1, [pc, #36]	; (800daa0 <Get_SerialNum+0x50>)
 800da7a:	68f8      	ldr	r0, [r7, #12]
 800da7c:	f000 f814 	bl	800daa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800da80:	2204      	movs	r2, #4
 800da82:	4908      	ldr	r1, [pc, #32]	; (800daa4 <Get_SerialNum+0x54>)
 800da84:	68b8      	ldr	r0, [r7, #8]
 800da86:	f000 f80f 	bl	800daa8 <IntToUnicode>
  }
}
 800da8a:	bf00      	nop
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	1fff7590 	.word	0x1fff7590
 800da98:	1fff7594 	.word	0x1fff7594
 800da9c:	1fff7598 	.word	0x1fff7598
 800daa0:	20000176 	.word	0x20000176
 800daa4:	20000186 	.word	0x20000186

0800daa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b087      	sub	sp, #28
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	4613      	mov	r3, r2
 800dab4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800daba:	2300      	movs	r3, #0
 800dabc:	75fb      	strb	r3, [r7, #23]
 800dabe:	e027      	b.n	800db10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	0f1b      	lsrs	r3, r3, #28
 800dac4:	2b09      	cmp	r3, #9
 800dac6:	d80b      	bhi.n	800dae0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	0f1b      	lsrs	r3, r3, #28
 800dacc:	b2da      	uxtb	r2, r3
 800dace:	7dfb      	ldrb	r3, [r7, #23]
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	4619      	mov	r1, r3
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	440b      	add	r3, r1
 800dad8:	3230      	adds	r2, #48	; 0x30
 800dada:	b2d2      	uxtb	r2, r2
 800dadc:	701a      	strb	r2, [r3, #0]
 800dade:	e00a      	b.n	800daf6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	0f1b      	lsrs	r3, r3, #28
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	4619      	mov	r1, r3
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	440b      	add	r3, r1
 800daf0:	3237      	adds	r2, #55	; 0x37
 800daf2:	b2d2      	uxtb	r2, r2
 800daf4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	011b      	lsls	r3, r3, #4
 800dafa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dafc:	7dfb      	ldrb	r3, [r7, #23]
 800dafe:	005b      	lsls	r3, r3, #1
 800db00:	3301      	adds	r3, #1
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	4413      	add	r3, r2
 800db06:	2200      	movs	r2, #0
 800db08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
 800db0c:	3301      	adds	r3, #1
 800db0e:	75fb      	strb	r3, [r7, #23]
 800db10:	7dfa      	ldrb	r2, [r7, #23]
 800db12:	79fb      	ldrb	r3, [r7, #7]
 800db14:	429a      	cmp	r2, r3
 800db16:	d3d3      	bcc.n	800dac0 <IntToUnicode+0x18>
  }
}
 800db18:	bf00      	nop
 800db1a:	bf00      	nop
 800db1c:	371c      	adds	r7, #28
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
	...

0800db28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b08a      	sub	sp, #40	; 0x28
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db30:	f107 0314 	add.w	r3, r7, #20
 800db34:	2200      	movs	r2, #0
 800db36:	601a      	str	r2, [r3, #0]
 800db38:	605a      	str	r2, [r3, #4]
 800db3a:	609a      	str	r2, [r3, #8]
 800db3c:	60da      	str	r2, [r3, #12]
 800db3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800db48:	d14e      	bne.n	800dbe8 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db4a:	4b29      	ldr	r3, [pc, #164]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800db4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db4e:	4a28      	ldr	r2, [pc, #160]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800db50:	f043 0301 	orr.w	r3, r3, #1
 800db54:	64d3      	str	r3, [r2, #76]	; 0x4c
 800db56:	4b26      	ldr	r3, [pc, #152]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800db58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db5a:	f003 0301 	and.w	r3, r3, #1
 800db5e:	613b      	str	r3, [r7, #16]
 800db60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 800db62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800db66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db68:	2302      	movs	r3, #2
 800db6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db6c:	2300      	movs	r3, #0
 800db6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db70:	2303      	movs	r3, #3
 800db72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800db74:	230a      	movs	r3, #10
 800db76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db78:	f107 0314 	add.w	r3, r7, #20
 800db7c:	4619      	mov	r1, r3
 800db7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800db82:	f7f5 f97b 	bl	8002e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800db86:	4b1a      	ldr	r3, [pc, #104]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800db88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db8a:	4a19      	ldr	r2, [pc, #100]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800db8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800db90:	64d3      	str	r3, [r2, #76]	; 0x4c
 800db92:	4b17      	ldr	r3, [pc, #92]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800db94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db9a:	60fb      	str	r3, [r7, #12]
 800db9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db9e:	4b14      	ldr	r3, [pc, #80]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800dba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d114      	bne.n	800dbd4 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dbaa:	4b11      	ldr	r3, [pc, #68]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800dbac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbae:	4a10      	ldr	r2, [pc, #64]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800dbb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbb4:	6593      	str	r3, [r2, #88]	; 0x58
 800dbb6:	4b0e      	ldr	r3, [pc, #56]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800dbb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbbe:	60bb      	str	r3, [r7, #8]
 800dbc0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800dbc2:	f7f6 fdb7 	bl	8004734 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbc6:	4b0a      	ldr	r3, [pc, #40]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800dbc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbca:	4a09      	ldr	r2, [pc, #36]	; (800dbf0 <HAL_PCD_MspInit+0xc8>)
 800dbcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbd0:	6593      	str	r3, [r2, #88]	; 0x58
 800dbd2:	e001      	b.n	800dbd8 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800dbd4:	f7f6 fdae 	bl	8004734 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2100      	movs	r1, #0
 800dbdc:	2043      	movs	r0, #67	; 0x43
 800dbde:	f7f4 fd30 	bl	8002642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dbe2:	2043      	movs	r0, #67	; 0x43
 800dbe4:	f7f4 fd49 	bl	800267a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dbe8:	bf00      	nop
 800dbea:	3728      	adds	r7, #40	; 0x28
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	40021000 	.word	0x40021000

0800dbf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dc08:	4619      	mov	r1, r3
 800dc0a:	4610      	mov	r0, r2
 800dc0c:	f7fe fc4c 	bl	800c4a8 <USBD_LL_SetupStage>
}
 800dc10:	bf00      	nop
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	460b      	mov	r3, r1
 800dc22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dc2a:	78fa      	ldrb	r2, [r7, #3]
 800dc2c:	6879      	ldr	r1, [r7, #4]
 800dc2e:	4613      	mov	r3, r2
 800dc30:	00db      	lsls	r3, r3, #3
 800dc32:	1a9b      	subs	r3, r3, r2
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	440b      	add	r3, r1
 800dc38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	78fb      	ldrb	r3, [r7, #3]
 800dc40:	4619      	mov	r1, r3
 800dc42:	f7fe fc86 	bl	800c552 <USBD_LL_DataOutStage>
}
 800dc46:	bf00      	nop
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b082      	sub	sp, #8
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
 800dc56:	460b      	mov	r3, r1
 800dc58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dc60:	78fa      	ldrb	r2, [r7, #3]
 800dc62:	6879      	ldr	r1, [r7, #4]
 800dc64:	4613      	mov	r3, r2
 800dc66:	00db      	lsls	r3, r3, #3
 800dc68:	1a9b      	subs	r3, r3, r2
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	440b      	add	r3, r1
 800dc6e:	3348      	adds	r3, #72	; 0x48
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	78fb      	ldrb	r3, [r7, #3]
 800dc74:	4619      	mov	r1, r3
 800dc76:	f7fe fccf 	bl	800c618 <USBD_LL_DataInStage>
}
 800dc7a:	bf00      	nop
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b082      	sub	sp, #8
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fe fde3 	bl	800c85c <USBD_LL_SOF>
}
 800dc96:	bf00      	nop
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b084      	sub	sp, #16
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dca6:	2301      	movs	r3, #1
 800dca8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	2b02      	cmp	r3, #2
 800dcb0:	d001      	beq.n	800dcb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dcb2:	f7f3 f841 	bl	8000d38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dcbc:	7bfa      	ldrb	r2, [r7, #15]
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fe fd8d 	bl	800c7e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fe fd39 	bl	800c744 <USBD_LL_Reset>
}
 800dcd2:	bf00      	nop
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
	...

0800dcdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	6812      	ldr	r2, [r2, #0]
 800dcf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dcf6:	f043 0301 	orr.w	r3, r3, #1
 800dcfa:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fe fd7c 	bl	800c800 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6a1b      	ldr	r3, [r3, #32]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d005      	beq.n	800dd1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd10:	4b04      	ldr	r3, [pc, #16]	; (800dd24 <HAL_PCD_SuspendCallback+0x48>)
 800dd12:	691b      	ldr	r3, [r3, #16]
 800dd14:	4a03      	ldr	r2, [pc, #12]	; (800dd24 <HAL_PCD_SuspendCallback+0x48>)
 800dd16:	f043 0306 	orr.w	r3, r3, #6
 800dd1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	e000ed00 	.word	0xe000ed00

0800dd28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	6812      	ldr	r2, [r2, #0]
 800dd3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd42:	f023 0301 	bic.w	r3, r3, #1
 800dd46:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6a1b      	ldr	r3, [r3, #32]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d007      	beq.n	800dd60 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd50:	4b08      	ldr	r3, [pc, #32]	; (800dd74 <HAL_PCD_ResumeCallback+0x4c>)
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	4a07      	ldr	r2, [pc, #28]	; (800dd74 <HAL_PCD_ResumeCallback+0x4c>)
 800dd56:	f023 0306 	bic.w	r3, r3, #6
 800dd5a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dd5c:	f000 faf4 	bl	800e348 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fe fd60 	bl	800c82c <USBD_LL_Resume>
}
 800dd6c:	bf00      	nop
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	e000ed00 	.word	0xe000ed00

0800dd78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	460b      	mov	r3, r1
 800dd82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dd8a:	78fa      	ldrb	r2, [r7, #3]
 800dd8c:	4611      	mov	r1, r2
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fe fdac 	bl	800c8ec <USBD_LL_IsoOUTIncomplete>
}
 800dd94:	bf00      	nop
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	460b      	mov	r3, r1
 800dda6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddae:	78fa      	ldrb	r2, [r7, #3]
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe fd74 	bl	800c8a0 <USBD_LL_IsoINIncomplete>
}
 800ddb8:	bf00      	nop
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fe fdb2 	bl	800c938 <USBD_LL_DevConnected>
}
 800ddd4:	bf00      	nop
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe fdaf 	bl	800c94e <USBD_LL_DevDisconnected>
}
 800ddf0:	bf00      	nop
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d139      	bne.n	800de7c <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800de08:	4a1f      	ldr	r2, [pc, #124]	; (800de88 <USBD_LL_Init+0x90>)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	4a1d      	ldr	r2, [pc, #116]	; (800de88 <USBD_LL_Init+0x90>)
 800de14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de18:	4b1b      	ldr	r3, [pc, #108]	; (800de88 <USBD_LL_Init+0x90>)
 800de1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800de1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800de20:	4b19      	ldr	r3, [pc, #100]	; (800de88 <USBD_LL_Init+0x90>)
 800de22:	2206      	movs	r2, #6
 800de24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800de26:	4b18      	ldr	r3, [pc, #96]	; (800de88 <USBD_LL_Init+0x90>)
 800de28:	2202      	movs	r2, #2
 800de2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800de2c:	4b16      	ldr	r3, [pc, #88]	; (800de88 <USBD_LL_Init+0x90>)
 800de2e:	2200      	movs	r2, #0
 800de30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800de32:	4b15      	ldr	r3, [pc, #84]	; (800de88 <USBD_LL_Init+0x90>)
 800de34:	2200      	movs	r2, #0
 800de36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800de38:	4b13      	ldr	r3, [pc, #76]	; (800de88 <USBD_LL_Init+0x90>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800de3e:	4b12      	ldr	r3, [pc, #72]	; (800de88 <USBD_LL_Init+0x90>)
 800de40:	2201      	movs	r2, #1
 800de42:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800de44:	4b10      	ldr	r3, [pc, #64]	; (800de88 <USBD_LL_Init+0x90>)
 800de46:	2200      	movs	r2, #0
 800de48:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800de4a:	4b0f      	ldr	r3, [pc, #60]	; (800de88 <USBD_LL_Init+0x90>)
 800de4c:	2200      	movs	r2, #0
 800de4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800de50:	480d      	ldr	r0, [pc, #52]	; (800de88 <USBD_LL_Init+0x90>)
 800de52:	f7f5 fafb 	bl	800344c <HAL_PCD_Init>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d001      	beq.n	800de60 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800de5c:	f7f2 ff6c 	bl	8000d38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800de60:	2180      	movs	r1, #128	; 0x80
 800de62:	4809      	ldr	r0, [pc, #36]	; (800de88 <USBD_LL_Init+0x90>)
 800de64:	f7f6 fb5d 	bl	8004522 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800de68:	2240      	movs	r2, #64	; 0x40
 800de6a:	2100      	movs	r1, #0
 800de6c:	4806      	ldr	r0, [pc, #24]	; (800de88 <USBD_LL_Init+0x90>)
 800de6e:	f7f6 fb11 	bl	8004494 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800de72:	2280      	movs	r2, #128	; 0x80
 800de74:	2101      	movs	r1, #1
 800de76:	4804      	ldr	r0, [pc, #16]	; (800de88 <USBD_LL_Init+0x90>)
 800de78:	f7f6 fb0c 	bl	8004494 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800de7c:	2300      	movs	r3, #0
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3708      	adds	r7, #8
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	200021f0 	.word	0x200021f0

0800de8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de98:	2300      	movs	r3, #0
 800de9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7f5 fbf6 	bl	8003694 <HAL_PCD_Start>
 800dea8:	4603      	mov	r3, r0
 800deaa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800deac:	7bbb      	ldrb	r3, [r7, #14]
 800deae:	2b03      	cmp	r3, #3
 800deb0:	d816      	bhi.n	800dee0 <USBD_LL_Start+0x54>
 800deb2:	a201      	add	r2, pc, #4	; (adr r2, 800deb8 <USBD_LL_Start+0x2c>)
 800deb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb8:	0800dec9 	.word	0x0800dec9
 800debc:	0800decf 	.word	0x0800decf
 800dec0:	0800ded5 	.word	0x0800ded5
 800dec4:	0800dedb 	.word	0x0800dedb
    case HAL_OK :
      usb_status = USBD_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	73fb      	strb	r3, [r7, #15]
    break;
 800decc:	e00b      	b.n	800dee6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dece:	2303      	movs	r3, #3
 800ded0:	73fb      	strb	r3, [r7, #15]
    break;
 800ded2:	e008      	b.n	800dee6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ded4:	2301      	movs	r3, #1
 800ded6:	73fb      	strb	r3, [r7, #15]
    break;
 800ded8:	e005      	b.n	800dee6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800deda:	2303      	movs	r3, #3
 800dedc:	73fb      	strb	r3, [r7, #15]
    break;
 800dede:	e002      	b.n	800dee6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800dee0:	2303      	movs	r3, #3
 800dee2:	73fb      	strb	r3, [r7, #15]
    break;
 800dee4:	bf00      	nop
  }
  return usb_status;
 800dee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	4608      	mov	r0, r1
 800defa:	4611      	mov	r1, r2
 800defc:	461a      	mov	r2, r3
 800defe:	4603      	mov	r3, r0
 800df00:	70fb      	strb	r3, [r7, #3]
 800df02:	460b      	mov	r3, r1
 800df04:	70bb      	strb	r3, [r7, #2]
 800df06:	4613      	mov	r3, r2
 800df08:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df0a:	2300      	movs	r3, #0
 800df0c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df0e:	2300      	movs	r3, #0
 800df10:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df18:	78bb      	ldrb	r3, [r7, #2]
 800df1a:	883a      	ldrh	r2, [r7, #0]
 800df1c:	78f9      	ldrb	r1, [r7, #3]
 800df1e:	f7f5 ffb1 	bl	8003e84 <HAL_PCD_EP_Open>
 800df22:	4603      	mov	r3, r0
 800df24:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df26:	7bbb      	ldrb	r3, [r7, #14]
 800df28:	2b03      	cmp	r3, #3
 800df2a:	d817      	bhi.n	800df5c <USBD_LL_OpenEP+0x6c>
 800df2c:	a201      	add	r2, pc, #4	; (adr r2, 800df34 <USBD_LL_OpenEP+0x44>)
 800df2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df32:	bf00      	nop
 800df34:	0800df45 	.word	0x0800df45
 800df38:	0800df4b 	.word	0x0800df4b
 800df3c:	0800df51 	.word	0x0800df51
 800df40:	0800df57 	.word	0x0800df57
    case HAL_OK :
      usb_status = USBD_OK;
 800df44:	2300      	movs	r3, #0
 800df46:	73fb      	strb	r3, [r7, #15]
    break;
 800df48:	e00b      	b.n	800df62 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df4a:	2303      	movs	r3, #3
 800df4c:	73fb      	strb	r3, [r7, #15]
    break;
 800df4e:	e008      	b.n	800df62 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df50:	2301      	movs	r3, #1
 800df52:	73fb      	strb	r3, [r7, #15]
    break;
 800df54:	e005      	b.n	800df62 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df56:	2303      	movs	r3, #3
 800df58:	73fb      	strb	r3, [r7, #15]
    break;
 800df5a:	e002      	b.n	800df62 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800df5c:	2303      	movs	r3, #3
 800df5e:	73fb      	strb	r3, [r7, #15]
    break;
 800df60:	bf00      	nop
  }
  return usb_status;
 800df62:	7bfb      	ldrb	r3, [r7, #15]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	460b      	mov	r3, r1
 800df76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df7c:	2300      	movs	r3, #0
 800df7e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df86:	78fa      	ldrb	r2, [r7, #3]
 800df88:	4611      	mov	r1, r2
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7f5 ffe2 	bl	8003f54 <HAL_PCD_EP_Close>
 800df90:	4603      	mov	r3, r0
 800df92:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df94:	7bbb      	ldrb	r3, [r7, #14]
 800df96:	2b03      	cmp	r3, #3
 800df98:	d816      	bhi.n	800dfc8 <USBD_LL_CloseEP+0x5c>
 800df9a:	a201      	add	r2, pc, #4	; (adr r2, 800dfa0 <USBD_LL_CloseEP+0x34>)
 800df9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa0:	0800dfb1 	.word	0x0800dfb1
 800dfa4:	0800dfb7 	.word	0x0800dfb7
 800dfa8:	0800dfbd 	.word	0x0800dfbd
 800dfac:	0800dfc3 	.word	0x0800dfc3
    case HAL_OK :
      usb_status = USBD_OK;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	73fb      	strb	r3, [r7, #15]
    break;
 800dfb4:	e00b      	b.n	800dfce <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dfb6:	2303      	movs	r3, #3
 800dfb8:	73fb      	strb	r3, [r7, #15]
    break;
 800dfba:	e008      	b.n	800dfce <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	73fb      	strb	r3, [r7, #15]
    break;
 800dfc0:	e005      	b.n	800dfce <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfc2:	2303      	movs	r3, #3
 800dfc4:	73fb      	strb	r3, [r7, #15]
    break;
 800dfc6:	e002      	b.n	800dfce <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dfc8:	2303      	movs	r3, #3
 800dfca:	73fb      	strb	r3, [r7, #15]
    break;
 800dfcc:	bf00      	nop
  }
  return usb_status;
 800dfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3710      	adds	r7, #16
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dff2:	78fa      	ldrb	r2, [r7, #3]
 800dff4:	4611      	mov	r1, r2
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7f6 f889 	bl	800410e <HAL_PCD_EP_SetStall>
 800dffc:	4603      	mov	r3, r0
 800dffe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e000:	7bbb      	ldrb	r3, [r7, #14]
 800e002:	2b03      	cmp	r3, #3
 800e004:	d816      	bhi.n	800e034 <USBD_LL_StallEP+0x5c>
 800e006:	a201      	add	r2, pc, #4	; (adr r2, 800e00c <USBD_LL_StallEP+0x34>)
 800e008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00c:	0800e01d 	.word	0x0800e01d
 800e010:	0800e023 	.word	0x0800e023
 800e014:	0800e029 	.word	0x0800e029
 800e018:	0800e02f 	.word	0x0800e02f
    case HAL_OK :
      usb_status = USBD_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	73fb      	strb	r3, [r7, #15]
    break;
 800e020:	e00b      	b.n	800e03a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e022:	2303      	movs	r3, #3
 800e024:	73fb      	strb	r3, [r7, #15]
    break;
 800e026:	e008      	b.n	800e03a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e028:	2301      	movs	r3, #1
 800e02a:	73fb      	strb	r3, [r7, #15]
    break;
 800e02c:	e005      	b.n	800e03a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e02e:	2303      	movs	r3, #3
 800e030:	73fb      	strb	r3, [r7, #15]
    break;
 800e032:	e002      	b.n	800e03a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e034:	2303      	movs	r3, #3
 800e036:	73fb      	strb	r3, [r7, #15]
    break;
 800e038:	bf00      	nop
  }
  return usb_status;
 800e03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	460b      	mov	r3, r1
 800e04e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e05e:	78fa      	ldrb	r2, [r7, #3]
 800e060:	4611      	mov	r1, r2
 800e062:	4618      	mov	r0, r3
 800e064:	f7f6 f8b5 	bl	80041d2 <HAL_PCD_EP_ClrStall>
 800e068:	4603      	mov	r3, r0
 800e06a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e06c:	7bbb      	ldrb	r3, [r7, #14]
 800e06e:	2b03      	cmp	r3, #3
 800e070:	d816      	bhi.n	800e0a0 <USBD_LL_ClearStallEP+0x5c>
 800e072:	a201      	add	r2, pc, #4	; (adr r2, 800e078 <USBD_LL_ClearStallEP+0x34>)
 800e074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e078:	0800e089 	.word	0x0800e089
 800e07c:	0800e08f 	.word	0x0800e08f
 800e080:	0800e095 	.word	0x0800e095
 800e084:	0800e09b 	.word	0x0800e09b
    case HAL_OK :
      usb_status = USBD_OK;
 800e088:	2300      	movs	r3, #0
 800e08a:	73fb      	strb	r3, [r7, #15]
    break;
 800e08c:	e00b      	b.n	800e0a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e08e:	2303      	movs	r3, #3
 800e090:	73fb      	strb	r3, [r7, #15]
    break;
 800e092:	e008      	b.n	800e0a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e094:	2301      	movs	r3, #1
 800e096:	73fb      	strb	r3, [r7, #15]
    break;
 800e098:	e005      	b.n	800e0a6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e09a:	2303      	movs	r3, #3
 800e09c:	73fb      	strb	r3, [r7, #15]
    break;
 800e09e:	e002      	b.n	800e0a6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e0a0:	2303      	movs	r3, #3
 800e0a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0a4:	bf00      	nop
  }
  return usb_status;
 800e0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	460b      	mov	r3, r1
 800e0ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e0c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	da0b      	bge.n	800e0e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e0cc:	78fb      	ldrb	r3, [r7, #3]
 800e0ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0d2:	68f9      	ldr	r1, [r7, #12]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	1a9b      	subs	r3, r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	440b      	add	r3, r1
 800e0de:	333e      	adds	r3, #62	; 0x3e
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	e00b      	b.n	800e0fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e0e4:	78fb      	ldrb	r3, [r7, #3]
 800e0e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0ea:	68f9      	ldr	r1, [r7, #12]
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	00db      	lsls	r3, r3, #3
 800e0f0:	1a9b      	subs	r3, r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	440b      	add	r3, r1
 800e0f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e0fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	460b      	mov	r3, r1
 800e112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e118:	2300      	movs	r3, #0
 800e11a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e122:	78fa      	ldrb	r2, [r7, #3]
 800e124:	4611      	mov	r1, r2
 800e126:	4618      	mov	r0, r3
 800e128:	f7f5 fe87 	bl	8003e3a <HAL_PCD_SetAddress>
 800e12c:	4603      	mov	r3, r0
 800e12e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e130:	7bbb      	ldrb	r3, [r7, #14]
 800e132:	2b03      	cmp	r3, #3
 800e134:	d816      	bhi.n	800e164 <USBD_LL_SetUSBAddress+0x5c>
 800e136:	a201      	add	r2, pc, #4	; (adr r2, 800e13c <USBD_LL_SetUSBAddress+0x34>)
 800e138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e13c:	0800e14d 	.word	0x0800e14d
 800e140:	0800e153 	.word	0x0800e153
 800e144:	0800e159 	.word	0x0800e159
 800e148:	0800e15f 	.word	0x0800e15f
    case HAL_OK :
      usb_status = USBD_OK;
 800e14c:	2300      	movs	r3, #0
 800e14e:	73fb      	strb	r3, [r7, #15]
    break;
 800e150:	e00b      	b.n	800e16a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e152:	2303      	movs	r3, #3
 800e154:	73fb      	strb	r3, [r7, #15]
    break;
 800e156:	e008      	b.n	800e16a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e158:	2301      	movs	r3, #1
 800e15a:	73fb      	strb	r3, [r7, #15]
    break;
 800e15c:	e005      	b.n	800e16a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e15e:	2303      	movs	r3, #3
 800e160:	73fb      	strb	r3, [r7, #15]
    break;
 800e162:	e002      	b.n	800e16a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e164:	2303      	movs	r3, #3
 800e166:	73fb      	strb	r3, [r7, #15]
    break;
 800e168:	bf00      	nop
  }
  return usb_status;
 800e16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	607a      	str	r2, [r7, #4]
 800e17e:	603b      	str	r3, [r7, #0]
 800e180:	460b      	mov	r3, r1
 800e182:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e184:	2300      	movs	r3, #0
 800e186:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e188:	2300      	movs	r3, #0
 800e18a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e192:	7af9      	ldrb	r1, [r7, #11]
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	f7f5 ff7c 	bl	8004094 <HAL_PCD_EP_Transmit>
 800e19c:	4603      	mov	r3, r0
 800e19e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e1a0:	7dbb      	ldrb	r3, [r7, #22]
 800e1a2:	2b03      	cmp	r3, #3
 800e1a4:	d816      	bhi.n	800e1d4 <USBD_LL_Transmit+0x60>
 800e1a6:	a201      	add	r2, pc, #4	; (adr r2, 800e1ac <USBD_LL_Transmit+0x38>)
 800e1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ac:	0800e1bd 	.word	0x0800e1bd
 800e1b0:	0800e1c3 	.word	0x0800e1c3
 800e1b4:	0800e1c9 	.word	0x0800e1c9
 800e1b8:	0800e1cf 	.word	0x0800e1cf
    case HAL_OK :
      usb_status = USBD_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	75fb      	strb	r3, [r7, #23]
    break;
 800e1c0:	e00b      	b.n	800e1da <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e1c2:	2303      	movs	r3, #3
 800e1c4:	75fb      	strb	r3, [r7, #23]
    break;
 800e1c6:	e008      	b.n	800e1da <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	75fb      	strb	r3, [r7, #23]
    break;
 800e1cc:	e005      	b.n	800e1da <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1ce:	2303      	movs	r3, #3
 800e1d0:	75fb      	strb	r3, [r7, #23]
    break;
 800e1d2:	e002      	b.n	800e1da <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e1d4:	2303      	movs	r3, #3
 800e1d6:	75fb      	strb	r3, [r7, #23]
    break;
 800e1d8:	bf00      	nop
  }
  return usb_status;
 800e1da:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3718      	adds	r7, #24
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b086      	sub	sp, #24
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	607a      	str	r2, [r7, #4]
 800e1ee:	603b      	str	r3, [r7, #0]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e202:	7af9      	ldrb	r1, [r7, #11]
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	f7f5 feee 	bl	8003fe8 <HAL_PCD_EP_Receive>
 800e20c:	4603      	mov	r3, r0
 800e20e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e210:	7dbb      	ldrb	r3, [r7, #22]
 800e212:	2b03      	cmp	r3, #3
 800e214:	d816      	bhi.n	800e244 <USBD_LL_PrepareReceive+0x60>
 800e216:	a201      	add	r2, pc, #4	; (adr r2, 800e21c <USBD_LL_PrepareReceive+0x38>)
 800e218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e21c:	0800e22d 	.word	0x0800e22d
 800e220:	0800e233 	.word	0x0800e233
 800e224:	0800e239 	.word	0x0800e239
 800e228:	0800e23f 	.word	0x0800e23f
    case HAL_OK :
      usb_status = USBD_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	75fb      	strb	r3, [r7, #23]
    break;
 800e230:	e00b      	b.n	800e24a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e232:	2303      	movs	r3, #3
 800e234:	75fb      	strb	r3, [r7, #23]
    break;
 800e236:	e008      	b.n	800e24a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e238:	2301      	movs	r3, #1
 800e23a:	75fb      	strb	r3, [r7, #23]
    break;
 800e23c:	e005      	b.n	800e24a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e23e:	2303      	movs	r3, #3
 800e240:	75fb      	strb	r3, [r7, #23]
    break;
 800e242:	e002      	b.n	800e24a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e244:	2303      	movs	r3, #3
 800e246:	75fb      	strb	r3, [r7, #23]
    break;
 800e248:	bf00      	nop
  }
  return usb_status;
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3718      	adds	r7, #24
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	460b      	mov	r3, r1
 800e25e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e266:	78fa      	ldrb	r2, [r7, #3]
 800e268:	4611      	mov	r1, r2
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7f5 fefa 	bl	8004064 <HAL_PCD_EP_GetRxCount>
 800e270:	4603      	mov	r3, r0
}
 800e272:	4618      	mov	r0, r3
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
	...

0800e27c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e288:	78fb      	ldrb	r3, [r7, #3]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d002      	beq.n	800e294 <HAL_PCDEx_LPM_Callback+0x18>
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d01f      	beq.n	800e2d2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e292:	e03b      	b.n	800e30c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6a1b      	ldr	r3, [r3, #32]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d007      	beq.n	800e2ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e29c:	f000 f854 	bl	800e348 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2a0:	4b1c      	ldr	r3, [pc, #112]	; (800e314 <HAL_PCDEx_LPM_Callback+0x98>)
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	4a1b      	ldr	r2, [pc, #108]	; (800e314 <HAL_PCDEx_LPM_Callback+0x98>)
 800e2a6:	f023 0306 	bic.w	r3, r3, #6
 800e2aa:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	6812      	ldr	r2, [r2, #0]
 800e2ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e2be:	f023 0301 	bic.w	r3, r3, #1
 800e2c2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fe faae 	bl	800c82c <USBD_LL_Resume>
    break;
 800e2d0:	e01c      	b.n	800e30c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	6812      	ldr	r2, [r2, #0]
 800e2e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e2e4:	f043 0301 	orr.w	r3, r3, #1
 800e2e8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe fa85 	bl	800c800 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6a1b      	ldr	r3, [r3, #32]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d005      	beq.n	800e30a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2fe:	4b05      	ldr	r3, [pc, #20]	; (800e314 <HAL_PCDEx_LPM_Callback+0x98>)
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	4a04      	ldr	r2, [pc, #16]	; (800e314 <HAL_PCDEx_LPM_Callback+0x98>)
 800e304:	f043 0306 	orr.w	r3, r3, #6
 800e308:	6113      	str	r3, [r2, #16]
    break;
 800e30a:	bf00      	nop
}
 800e30c:	bf00      	nop
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	e000ed00 	.word	0xe000ed00

0800e318 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e320:	4b03      	ldr	r3, [pc, #12]	; (800e330 <USBD_static_malloc+0x18>)
}
 800e322:	4618      	mov	r0, r3
 800e324:	370c      	adds	r7, #12
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop
 800e330:	200001f0 	.word	0x200001f0

0800e334 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]

}
 800e33c:	bf00      	nop
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e34c:	f7f1 ff7e 	bl	800024c <SystemClock_Config>
}
 800e350:	bf00      	nop
 800e352:	bd80      	pop	{r7, pc}

0800e354 <__libc_init_array>:
 800e354:	b570      	push	{r4, r5, r6, lr}
 800e356:	4d0d      	ldr	r5, [pc, #52]	; (800e38c <__libc_init_array+0x38>)
 800e358:	4c0d      	ldr	r4, [pc, #52]	; (800e390 <__libc_init_array+0x3c>)
 800e35a:	1b64      	subs	r4, r4, r5
 800e35c:	10a4      	asrs	r4, r4, #2
 800e35e:	2600      	movs	r6, #0
 800e360:	42a6      	cmp	r6, r4
 800e362:	d109      	bne.n	800e378 <__libc_init_array+0x24>
 800e364:	4d0b      	ldr	r5, [pc, #44]	; (800e394 <__libc_init_array+0x40>)
 800e366:	4c0c      	ldr	r4, [pc, #48]	; (800e398 <__libc_init_array+0x44>)
 800e368:	f000 f820 	bl	800e3ac <_init>
 800e36c:	1b64      	subs	r4, r4, r5
 800e36e:	10a4      	asrs	r4, r4, #2
 800e370:	2600      	movs	r6, #0
 800e372:	42a6      	cmp	r6, r4
 800e374:	d105      	bne.n	800e382 <__libc_init_array+0x2e>
 800e376:	bd70      	pop	{r4, r5, r6, pc}
 800e378:	f855 3b04 	ldr.w	r3, [r5], #4
 800e37c:	4798      	blx	r3
 800e37e:	3601      	adds	r6, #1
 800e380:	e7ee      	b.n	800e360 <__libc_init_array+0xc>
 800e382:	f855 3b04 	ldr.w	r3, [r5], #4
 800e386:	4798      	blx	r3
 800e388:	3601      	adds	r6, #1
 800e38a:	e7f2      	b.n	800e372 <__libc_init_array+0x1e>
 800e38c:	0800e468 	.word	0x0800e468
 800e390:	0800e468 	.word	0x0800e468
 800e394:	0800e468 	.word	0x0800e468
 800e398:	0800e46c 	.word	0x0800e46c

0800e39c <memset>:
 800e39c:	4402      	add	r2, r0
 800e39e:	4603      	mov	r3, r0
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d100      	bne.n	800e3a6 <memset+0xa>
 800e3a4:	4770      	bx	lr
 800e3a6:	f803 1b01 	strb.w	r1, [r3], #1
 800e3aa:	e7f9      	b.n	800e3a0 <memset+0x4>

0800e3ac <_init>:
 800e3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ae:	bf00      	nop
 800e3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3b2:	bc08      	pop	{r3}
 800e3b4:	469e      	mov	lr, r3
 800e3b6:	4770      	bx	lr

0800e3b8 <_fini>:
 800e3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ba:	bf00      	nop
 800e3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3be:	bc08      	pop	{r3}
 800e3c0:	469e      	mov	lr, r3
 800e3c2:	4770      	bx	lr
