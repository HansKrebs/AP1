
AP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011378  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08011538  08011538  00021538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011624  08011624  00030194  2**0
                  CONTENTS
  4 .ARM          00000000  08011624  08011624  00030194  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011624  08011624  00030194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011624  08011624  00021624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011628  08011628  00021628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0801162c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003dc0  20000194  080117c0  00030194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003f54  080117c0  00033f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fe5a  00000000  00000000  000301c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000071b7  00000000  00000000  0007001e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ca8  00000000  00000000  000771d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000029b0  00000000  00000000  00079e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b0b6  00000000  00000000  0007c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035b5b  00000000  00000000  000878e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00155f8c  00000000  00000000  000bd441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002133cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd40  00000000  00000000  00213420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000194 	.word	0x20000194
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08011520 	.word	0x08011520

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000198 	.word	0x20000198
 80001fc:	08011520 	.word	0x08011520

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f001 fa47 	bl	8001696 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f832 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 fc3a 	bl	8000a84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000210:	f000 fc0e 	bl	8000a30 <MX_DMA_Init>
  MX_ADC1_Init();
 8000214:	f000 f8d2 	bl	80003bc <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000218:	f000 f934 	bl	8000484 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800021c:	f000 f996 	bl	800054c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000220:	f000 f9d4 	bl	80005cc <MX_I2C3_Init>
  MX_RTC_Init();
 8000224:	f000 fa12 	bl	800064c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000228:	f000 fa6c 	bl	8000704 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800022c:	f000 fa8c 	bl	8000748 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000230:	f000 fac8 	bl	80007c4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000234:	f000 fb04 	bl	8000840 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000238:	f000 fb40 	bl	80008bc <MX_TIM2_Init>
  MX_TIM6_Init();
 800023c:	f000 fb8c 	bl	8000958 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000240:	f000 fbc0 	bl	80009c4 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000244:	f00b fc1e 	bl	800ba84 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000248:	f00d fba6 	bl	800d998 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800024c:	4a05      	ldr	r2, [pc, #20]	; (8000264 <main+0x64>)
 800024e:	2100      	movs	r1, #0
 8000250:	4805      	ldr	r0, [pc, #20]	; (8000268 <main+0x68>)
 8000252:	f00d fc22 	bl	800da9a <osThreadNew>
 8000256:	4603      	mov	r3, r0
 8000258:	4a04      	ldr	r2, [pc, #16]	; (800026c <main+0x6c>)
 800025a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800025c:	f00d fbe2 	bl	800da24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000260:	e7fe      	b.n	8000260 <main+0x60>
 8000262:	bf00      	nop
 8000264:	080115a4 	.word	0x080115a4
 8000268:	08000d5d 	.word	0x08000d5d
 800026c:	20001cd8 	.word	0x20001cd8

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b0be      	sub	sp, #248	; 0xf8
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800027a:	2244      	movs	r2, #68	; 0x44
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f011 f946 	bl	8011510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	229c      	movs	r2, #156	; 0x9c
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f011 f938 	bl	8011510 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80002a0:	2000      	movs	r0, #0
 80002a2:	f004 f9d7 	bl	8004654 <HAL_PWREx_ControlVoltageScaling>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80002ac:	f000 fd7a 	bl	8000da4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002b0:	f004 f9a0 	bl	80045f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002b4:	4b3f      	ldr	r3, [pc, #252]	; (80003b4 <SystemClock_Config+0x144>)
 80002b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002ba:	4a3e      	ldr	r2, [pc, #248]	; (80003b4 <SystemClock_Config+0x144>)
 80002bc:	f023 0318 	bic.w	r3, r3, #24
 80002c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80002c4:	2325      	movs	r3, #37	; 0x25
 80002c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002de:	2302      	movs	r3, #2
 80002e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e4:	2303      	movs	r3, #3
 80002e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 4;
 80002ea:	2304      	movs	r3, #4
 80002ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 80002f0:	233c      	movs	r3, #60	; 0x3c
 80002f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80002f6:	2305      	movs	r3, #5
 80002f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002fc:	2302      	movs	r3, #2
 80002fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000302:	2302      	movs	r3, #2
 8000304:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000308:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800030c:	4618      	mov	r0, r3
 800030e:	f004 fa65 	bl	80047dc <HAL_RCC_OscConfig>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000318:	f000 fd44 	bl	8000da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	230f      	movs	r3, #15
 800031e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2303      	movs	r3, #3
 8000324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800033a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800033e:	2105      	movs	r1, #5
 8000340:	4618      	mov	r0, r3
 8000342:	f004 fe71 	bl	8005028 <HAL_RCC_ClockConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800034c:	f000 fd2a 	bl	8000da4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <SystemClock_Config+0x148>)
 8000352:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000354:	2300      	movs	r3, #0
 8000356:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000358:	2300      	movs	r3, #0
 800035a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800035c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000364:	2300      	movs	r3, #0
 8000366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800036a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800036e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000372:	2300      	movs	r3, #0
 8000374:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800037a:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800037c:	2303      	movs	r3, #3
 800037e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000380:	2305      	movs	r3, #5
 8000382:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8000384:	2360      	movs	r3, #96	; 0x60
 8000386:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000388:	2302      	movs	r3, #2
 800038a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800038c:	2304      	movs	r3, #4
 800038e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000390:	2304      	movs	r3, #4
 8000392:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000398:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4618      	mov	r0, r3
 800039e:	f005 f923 	bl	80055e8 <HAL_RCCEx_PeriphCLKConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80003a8:	f000 fcfc 	bl	8000da4 <Error_Handler>
  }
}
 80003ac:	bf00      	nop
 80003ae:	37f8      	adds	r7, #248	; 0xf8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40021000 	.word	0x40021000
 80003b8:	000b6140 	.word	0x000b6140

080003bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c2:	463b      	mov	r3, r7
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003d2:	4b29      	ldr	r3, [pc, #164]	; (8000478 <MX_ADC1_Init+0xbc>)
 80003d4:	4a29      	ldr	r2, [pc, #164]	; (800047c <MX_ADC1_Init+0xc0>)
 80003d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003d8:	4b27      	ldr	r3, [pc, #156]	; (8000478 <MX_ADC1_Init+0xbc>)
 80003da:	2200      	movs	r2, #0
 80003dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003de:	4b26      	ldr	r3, [pc, #152]	; (8000478 <MX_ADC1_Init+0xbc>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e4:	4b24      	ldr	r3, [pc, #144]	; (8000478 <MX_ADC1_Init+0xbc>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ea:	4b23      	ldr	r3, [pc, #140]	; (8000478 <MX_ADC1_Init+0xbc>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f0:	4b21      	ldr	r3, [pc, #132]	; (8000478 <MX_ADC1_Init+0xbc>)
 80003f2:	2204      	movs	r2, #4
 80003f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003f6:	4b20      	ldr	r3, [pc, #128]	; (8000478 <MX_ADC1_Init+0xbc>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003fc:	4b1e      	ldr	r3, [pc, #120]	; (8000478 <MX_ADC1_Init+0xbc>)
 80003fe:	2201      	movs	r2, #1
 8000400:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000402:	4b1d      	ldr	r3, [pc, #116]	; (8000478 <MX_ADC1_Init+0xbc>)
 8000404:	2201      	movs	r2, #1
 8000406:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_ADC1_Init+0xbc>)
 800040a:	2200      	movs	r2, #0
 800040c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <MX_ADC1_Init+0xbc>)
 8000412:	2200      	movs	r2, #0
 8000414:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000416:	4b18      	ldr	r3, [pc, #96]	; (8000478 <MX_ADC1_Init+0xbc>)
 8000418:	2200      	movs	r2, #0
 800041a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <MX_ADC1_Init+0xbc>)
 800041e:	2200      	movs	r2, #0
 8000420:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <MX_ADC1_Init+0xbc>)
 8000426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800042a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <MX_ADC1_Init+0xbc>)
 800042e:	2200      	movs	r2, #0
 8000430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000434:	4810      	ldr	r0, [pc, #64]	; (8000478 <MX_ADC1_Init+0xbc>)
 8000436:	f001 fb2b 	bl	8001a90 <HAL_ADC_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000440:	f000 fcb0 	bl	8000da4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_ADC1_Init+0xc4>)
 8000446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000448:	2306      	movs	r3, #6
 800044a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800044c:	2302      	movs	r3, #2
 800044e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000450:	237f      	movs	r3, #127	; 0x7f
 8000452:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000454:	2304      	movs	r3, #4
 8000456:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800045c:	463b      	mov	r3, r7
 800045e:	4619      	mov	r1, r3
 8000460:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_ADC1_Init+0xbc>)
 8000462:	f001 fc61 	bl	8001d28 <HAL_ADC_ConfigChannel>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800046c:	f000 fc9a 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20001f10 	.word	0x20001f10
 800047c:	50040000 	.word	0x50040000
 8000480:	21800100 	.word	0x21800100

08000484 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000488:	4b2c      	ldr	r3, [pc, #176]	; (800053c <MX_DFSDM1_Init+0xb8>)
 800048a:	4a2d      	ldr	r2, [pc, #180]	; (8000540 <MX_DFSDM1_Init+0xbc>)
 800048c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800048e:	4b2b      	ldr	r3, [pc, #172]	; (800053c <MX_DFSDM1_Init+0xb8>)
 8000490:	2200      	movs	r2, #0
 8000492:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000494:	4b29      	ldr	r3, [pc, #164]	; (800053c <MX_DFSDM1_Init+0xb8>)
 8000496:	2201      	movs	r2, #1
 8000498:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800049a:	4b28      	ldr	r3, [pc, #160]	; (800053c <MX_DFSDM1_Init+0xb8>)
 800049c:	2201      	movs	r2, #1
 800049e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 80004a0:	4b26      	ldr	r3, [pc, #152]	; (800053c <MX_DFSDM1_Init+0xb8>)
 80004a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 80004a8:	4b24      	ldr	r3, [pc, #144]	; (800053c <MX_DFSDM1_Init+0xb8>)
 80004aa:	22c0      	movs	r2, #192	; 0xc0
 80004ac:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80004ae:	4b23      	ldr	r3, [pc, #140]	; (800053c <MX_DFSDM1_Init+0xb8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80004b4:	4821      	ldr	r0, [pc, #132]	; (800053c <MX_DFSDM1_Init+0xb8>)
 80004b6:	f002 f9d5 	bl	8002864 <HAL_DFSDM_FilterInit>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80004c0:	f000 fc70 	bl	8000da4 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80004c4:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 80004c6:	4a20      	ldr	r2, [pc, #128]	; (8000548 <MX_DFSDM1_Init+0xc4>)
 80004c8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 80004d8:	2202      	movs	r2, #2
 80004da:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 80004de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004e2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80004ea:	4b16      	ldr	r3, [pc, #88]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 8000504:	2201      	movs	r2, #1
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 800050a:	2200      	movs	r2, #0
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 8000510:	2207      	movs	r2, #7
 8000512:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000514:	480b      	ldr	r0, [pc, #44]	; (8000544 <MX_DFSDM1_Init+0xc0>)
 8000516:	f002 f8e5 	bl	80026e4 <HAL_DFSDM_ChannelInit>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 8000520:	f000 fc40 	bl	8000da4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000524:	2201      	movs	r2, #1
 8000526:	2101      	movs	r1, #1
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <MX_DFSDM1_Init+0xb8>)
 800052a:	f002 fa75 	bl	8002a18 <HAL_DFSDM_FilterConfigRegChannel>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8000534:	f000 fc36 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20001dd8 	.word	0x20001dd8
 8000540:	40016100 	.word	0x40016100
 8000544:	20002048 	.word	0x20002048
 8000548:	40016000 	.word	0x40016000

0800054c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <MX_I2C1_Init+0x78>)
 8000554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000558:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <MX_I2C1_Init+0x7c>)
 800055a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_I2C1_Init+0x74>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000564:	2201      	movs	r2, #1
 8000566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000570:	2200      	movs	r2, #0
 8000572:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_I2C1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000586:	480e      	ldr	r0, [pc, #56]	; (80005c0 <MX_I2C1_Init+0x74>)
 8000588:	f002 fe6e 	bl	8003268 <HAL_I2C_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000592:	f000 fc07 	bl	8000da4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000596:	2100      	movs	r1, #0
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <MX_I2C1_Init+0x74>)
 800059a:	f002 fef4 	bl	8003386 <HAL_I2CEx_ConfigAnalogFilter>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005a4:	f000 fbfe 	bl	8000da4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005a8:	2100      	movs	r1, #0
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <MX_I2C1_Init+0x74>)
 80005ac:	f002 ff36 	bl	800341c <HAL_I2CEx_ConfigDigitalFilter>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005b6:	f000 fbf5 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20001d8c 	.word	0x20001d8c
 80005c4:	40005400 	.word	0x40005400
 80005c8:	00b03fdb 	.word	0x00b03fdb

080005cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_I2C3_Init+0x74>)
 80005d2:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <MX_I2C3_Init+0x78>)
 80005d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_I2C3_Init+0x74>)
 80005d8:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <MX_I2C3_Init+0x7c>)
 80005da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_I2C3_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_I2C3_Init+0x74>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_I2C3_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_I2C3_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C3_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C3_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_I2C3_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000606:	480e      	ldr	r0, [pc, #56]	; (8000640 <MX_I2C3_Init+0x74>)
 8000608:	f002 fe2e 	bl	8003268 <HAL_I2C_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000612:	f000 fbc7 	bl	8000da4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000616:	2100      	movs	r1, #0
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <MX_I2C3_Init+0x74>)
 800061a:	f002 feb4 	bl	8003386 <HAL_I2CEx_ConfigAnalogFilter>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000624:	f000 fbbe 	bl	8000da4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000628:	2100      	movs	r1, #0
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_I2C3_Init+0x74>)
 800062c:	f002 fef6 	bl	800341c <HAL_I2CEx_ConfigDigitalFilter>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000636:	f000 fbb5 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20001cdc 	.word	0x20001cdc
 8000644:	40005c00 	.word	0x40005c00
 8000648:	00b03fdb 	.word	0x00b03fdb

0800064c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <MX_RTC_Init+0xb0>)
 8000666:	4a26      	ldr	r2, [pc, #152]	; (8000700 <MX_RTC_Init+0xb4>)
 8000668:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <MX_RTC_Init+0xb0>)
 800066c:	2200      	movs	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <MX_RTC_Init+0xb0>)
 8000672:	227f      	movs	r2, #127	; 0x7f
 8000674:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_RTC_Init+0xb0>)
 8000678:	22ff      	movs	r2, #255	; 0xff
 800067a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_RTC_Init+0xb0>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_RTC_Init+0xb0>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_RTC_Init+0xb0>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_RTC_Init+0xb0>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000694:	4819      	ldr	r0, [pc, #100]	; (80006fc <MX_RTC_Init+0xb0>)
 8000696:	f006 fd4d 	bl	8007134 <HAL_RTC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80006a0:	f000 fb80 	bl	8000da4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <MX_RTC_Init+0xb0>)
 80006c0:	f006 fdb3 	bl	800722a <HAL_RTC_SetTime>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80006ca:	f000 fb6b 	bl	8000da4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80006ce:	2302      	movs	r3, #2
 80006d0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80006d2:	2304      	movs	r3, #4
 80006d4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 80006d6:	2303      	movs	r3, #3
 80006d8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 80006da:	2314      	movs	r3, #20
 80006dc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_RTC_Init+0xb0>)
 80006e6:	f006 fe3d 	bl	8007364 <HAL_RTC_SetDate>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80006f0:	f000 fb58 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20001fd8 	.word	0x20001fd8
 8000700:	40002800 	.word	0x40002800

08000704 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MX_SDMMC1_SD_Init+0x3c>)
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <MX_SDMMC1_SD_Init+0x40>)
 800070c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_SDMMC1_SD_Init+0x3c>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_SDMMC1_SD_Init+0x3c>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_SDMMC1_SD_Init+0x3c>)
 800071c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000720:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_SDMMC1_SD_Init+0x3c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MX_SDMMC1_SD_Init+0x3c>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <MX_SDMMC1_SD_Init+0x3c>)
 8000730:	2201      	movs	r2, #1
 8000732:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20001e2c 	.word	0x20001e2c
 8000744:	50062400 	.word	0x50062400

08000748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_SPI1_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <MX_SPI1_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_SPI1_Init+0x74>)
 8000754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_SPI1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_SPI1_Init+0x74>)
 8000762:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000766:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_SPI1_Init+0x74>)
 800076a:	2202      	movs	r2, #2
 800076c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_SPI1_Init+0x74>)
 8000770:	2201      	movs	r2, #1
 8000772:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_SPI1_Init+0x74>)
 8000776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_SPI1_Init+0x74>)
 800077e:	2218      	movs	r2, #24
 8000780:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_SPI1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_SPI1_Init+0x74>)
 8000796:	2207      	movs	r2, #7
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_SPI1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_SPI1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_SPI1_Init+0x74>)
 80007a8:	f008 fc1f 	bl	8008fea <HAL_SPI_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 faf7 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20002080 	.word	0x20002080
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_SPI2_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_SPI2_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_SPI2_Init+0x74>)
 80007d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_SPI2_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_SPI2_Init+0x74>)
 80007de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_SPI2_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_SPI2_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_SPI2_Init+0x74>)
 80007f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_SPI2_Init+0x74>)
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_SPI2_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_SPI2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_SPI2_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_SPI2_Init+0x74>)
 8000812:	2207      	movs	r2, #7
 8000814:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_SPI2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_SPI2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_SPI2_Init+0x74>)
 8000824:	f008 fbe1 	bl	8008fea <HAL_SPI_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fab9 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20001d28 	.word	0x20001d28
 800083c:	40003800 	.word	0x40003800

08000840 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_SPI3_Init+0x74>)
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <MX_SPI3_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_SPI3_Init+0x74>)
 800084c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000850:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_SPI3_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI3_Init+0x74>)
 800085a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800085e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI3_Init+0x74>)
 8000862:	2202      	movs	r2, #2
 8000864:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_SPI3_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI3_Init+0x74>)
 800086e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000872:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI3_Init+0x74>)
 8000876:	2218      	movs	r2, #24
 8000878:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI3_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI3_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_SPI3_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI3_Init+0x74>)
 800088e:	2207      	movs	r2, #7
 8000890:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_SPI3_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI3_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_SPI3_Init+0x74>)
 80008a0:	f008 fba3 	bl	8008fea <HAL_SPI_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 fa7b 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20001eac 	.word	0x20001eac
 80008b8:	40003c00 	.word	0x40003c00

080008bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008da:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_TIM2_Init+0x98>)
 80008dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_TIM2_Init+0x98>)
 80008e4:	2277      	movs	r2, #119	; 0x77
 80008e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_TIM2_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_TIM2_Init+0x98>)
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295
 80008f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_TIM2_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_TIM2_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000902:	4814      	ldr	r0, [pc, #80]	; (8000954 <MX_TIM2_Init+0x98>)
 8000904:	f008 fc14 	bl	8009130 <HAL_TIM_Base_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800090e:	f000 fa49 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000916:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <MX_TIM2_Init+0x98>)
 8000920:	f008 fded 	bl	80094fe <HAL_TIM_ConfigClockSource>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800092a:	f000 fa3b 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_TIM2_Init+0x98>)
 800093c:	f009 f802 	bl	8009944 <HAL_TIMEx_MasterConfigSynchronization>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000946:	f000 fa2d 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3720      	adds	r7, #32
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200020e4 	.word	0x200020e4

08000958 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_TIM6_Init+0x64>)
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <MX_TIM6_Init+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_TIM6_Init+0x64>)
 8000970:	2277      	movs	r2, #119	; 0x77
 8000972:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_TIM6_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_TIM6_Init+0x64>)
 800097c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000980:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_TIM6_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <MX_TIM6_Init+0x64>)
 800098a:	f008 fbd1 	bl	8009130 <HAL_TIM_Base_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000994:	f000 fa06 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_TIM6_Init+0x64>)
 80009a6:	f008 ffcd 	bl	8009944 <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f000 f9f8 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20001ffc 	.word	0x20001ffc
 80009c0:	40001000 	.word	0x40001000

080009c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_TIM7_Init+0x64>)
 80009d6:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <MX_TIM7_Init+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_TIM7_Init+0x64>)
 80009dc:	2277      	movs	r2, #119	; 0x77
 80009de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_TIM7_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_TIM7_Init+0x64>)
 80009e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009ec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_TIM7_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_TIM7_Init+0x64>)
 80009f6:	f008 fb9b 	bl	8009130 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a00:	f000 f9d0 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_TIM7_Init+0x64>)
 8000a12:	f008 ff97 	bl	8009944 <HAL_TIMEx_MasterConfigSynchronization>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a1c:	f000 f9c2 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20002130 	.word	0x20002130
 8000a2c:	40001400 	.word	0x40001400

08000a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_DMA_Init+0x50>)
 8000a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a3a:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <MX_DMA_Init+0x50>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6493      	str	r3, [r2, #72]	; 0x48
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_DMA_Init+0x50>)
 8000a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_DMA_Init+0x50>)
 8000a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <MX_DMA_Init+0x50>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6493      	str	r3, [r2, #72]	; 0x48
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_DMA_Init+0x50>)
 8000a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2105      	movs	r1, #5
 8000a6a:	200e      	movs	r0, #14
 8000a6c:	f001 fe10 	bl	8002690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000a70:	200e      	movs	r0, #14
 8000a72:	f001 fe29 	bl	80026c8 <HAL_NVIC_EnableIRQ>

}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4ba7      	ldr	r3, [pc, #668]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4aa6      	ldr	r2, [pc, #664]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4ba4      	ldr	r3, [pc, #656]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	623b      	str	r3, [r7, #32]
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	4ba1      	ldr	r3, [pc, #644]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4aa0      	ldr	r2, [pc, #640]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b9e      	ldr	r3, [pc, #632]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b9b      	ldr	r3, [pc, #620]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a9a      	ldr	r2, [pc, #616]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b98      	ldr	r3, [pc, #608]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae2:	4b95      	ldr	r3, [pc, #596]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a94      	ldr	r2, [pc, #592]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000ae8:	f043 0310 	orr.w	r3, r3, #16
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b92      	ldr	r3, [pc, #584]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0310 	and.w	r3, r3, #16
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b8f      	ldr	r3, [pc, #572]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a8e      	ldr	r2, [pc, #568]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b8c      	ldr	r3, [pc, #560]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b12:	4b89      	ldr	r3, [pc, #548]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a88      	ldr	r2, [pc, #544]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b18:	f043 0320 	orr.w	r3, r3, #32
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b86      	ldr	r3, [pc, #536]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0320 	and.w	r3, r3, #32
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	4b83      	ldr	r3, [pc, #524]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a82      	ldr	r2, [pc, #520]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b80      	ldr	r3, [pc, #512]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b42:	f003 fe3b 	bl	80047bc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	4b7c      	ldr	r3, [pc, #496]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4a:	4a7b      	ldr	r2, [pc, #492]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b52:	4b79      	ldr	r3, [pc, #484]	; (8000d38 <MX_GPIO_Init+0x2b4>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f002 fb4c 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f641 4130 	movw	r1, #7216	; 0x1c30
 8000b72:	4872      	ldr	r0, [pc, #456]	; (8000d3c <MX_GPIO_Init+0x2b8>)
 8000b74:	f002 fb46 	bl	8003204 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2105      	movs	r1, #5
 8000b7c:	4870      	ldr	r0, [pc, #448]	; (8000d40 <MX_GPIO_Init+0x2bc>)
 8000b7e:	f002 fb41 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b88:	486e      	ldr	r0, [pc, #440]	; (8000d44 <MX_GPIO_Init+0x2c0>)
 8000b8a:	f002 fb3b 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	486b      	ldr	r0, [pc, #428]	; (8000d40 <MX_GPIO_Init+0x2bc>)
 8000b94:	f002 fb36 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	4869      	ldr	r0, [pc, #420]	; (8000d44 <MX_GPIO_Init+0x2c0>)
 8000b9e:	f002 fb31 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba8:	4867      	ldr	r0, [pc, #412]	; (8000d48 <MX_GPIO_Init+0x2c4>)
 8000baa:	f002 fb2b 	bl	8003204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 8000bae:	2348      	movs	r3, #72	; 0x48
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb2:	4b66      	ldr	r3, [pc, #408]	; (8000d4c <MX_GPIO_Init+0x2c8>)
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	485e      	ldr	r0, [pc, #376]	; (8000d3c <MX_GPIO_Init+0x2b8>)
 8000bc2:	f002 f975 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8000bc6:	2360      	movs	r3, #96	; 0x60
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	485b      	ldr	r0, [pc, #364]	; (8000d50 <MX_GPIO_Init+0x2cc>)
 8000be2:	f002 f965 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 8000be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bec:	2311      	movs	r3, #17
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f002 f955 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 8000c06:	2330      	movs	r3, #48	; 0x30
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4847      	ldr	r0, [pc, #284]	; (8000d3c <MX_GPIO_Init+0x2b8>)
 8000c1e:	f002 f947 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 8000c22:	2385      	movs	r3, #133	; 0x85
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4841      	ldr	r0, [pc, #260]	; (8000d40 <MX_GPIO_Init+0x2bc>)
 8000c3a:	f002 f939 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 8000c3e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	483b      	ldr	r0, [pc, #236]	; (8000d44 <MX_GPIO_Init+0x2c0>)
 8000c58:	f002 f92a 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4835      	ldr	r0, [pc, #212]	; (8000d44 <MX_GPIO_Init+0x2c0>)
 8000c70:	f002 f91e 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8000c74:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7a:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <MX_GPIO_Init+0x2c8>)
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4831      	ldr	r0, [pc, #196]	; (8000d50 <MX_GPIO_Init+0x2cc>)
 8000c8a:	f002 f911 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8000c8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c94:	2311      	movs	r3, #17
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4825      	ldr	r0, [pc, #148]	; (8000d3c <MX_GPIO_Init+0x2b8>)
 8000ca8:	f002 f902 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8000cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4820      	ldr	r0, [pc, #128]	; (8000d48 <MX_GPIO_Init+0x2c4>)
 8000cc6:	f002 f8f3 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_GPIO_Init+0x2c8>)
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	481d      	ldr	r0, [pc, #116]	; (8000d54 <MX_GPIO_Init+0x2d0>)
 8000cde:	f002 f8e7 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_GPIO_Init+0x2c8>)
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f002 f8da 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_GPIO_Init+0x2c4>)
 8000d12:	f002 f8cd 	bl	8002eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 8000d16:	2302      	movs	r3, #2
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_GPIO_Init+0x2d4>)
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_GPIO_Init+0x2c0>)
 8000d2a:	f002 f8c1 	bl	8002eb0 <HAL_GPIO_Init>

}
 8000d2e:	bf00      	nop
 8000d30:	3738      	adds	r7, #56	; 0x38
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48001000 	.word	0x48001000
 8000d40:	48001400 	.word	0x48001400
 8000d44:	48001800 	.word	0x48001800
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	10110000 	.word	0x10110000
 8000d50:	48000c00 	.word	0x48000c00
 8000d54:	48000800 	.word	0x48000800
 8000d58:	10210000 	.word	0x10210000

08000d5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d64:	f00f fd9a 	bl	801089c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6c:	f00c ff27 	bl	800dbbe <osDelay>
	HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
 8000d70:	2104      	movs	r1, #4
 8000d72:	4802      	ldr	r0, [pc, #8]	; (8000d7c <StartDefaultTask+0x20>)
 8000d74:	f002 fa5e 	bl	8003234 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000d78:	e7f6      	b.n	8000d68 <StartDefaultTask+0xc>
 8000d7a:	bf00      	nop
 8000d7c:	48001400 	.word	0x48001400

08000d80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d92:	f000 fc99 	bl	80016c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40000400 	.word	0x40000400

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>
	...

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <HAL_MspInit+0x4c>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	4a10      	ldr	r2, [pc, #64]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <HAL_MspInit+0x4c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_MspInit+0x4c>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	210f      	movs	r1, #15
 8000dea:	f06f 0001 	mvn.w	r0, #1
 8000dee:	f001 fc4f 	bl	8002690 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <HAL_ADC_MspInit+0xa4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d13c      	bne.n	8000e9c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e22:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <HAL_ADC_MspInit+0xa8>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <HAL_ADC_MspInit+0xa8>)
 8000e28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <HAL_ADC_MspInit+0xa8>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <HAL_ADC_MspInit+0xa8>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a1a      	ldr	r2, [pc, #104]	; (8000ea8 <HAL_ADC_MspInit+0xa8>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_ADC_MspInit+0xa8>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_ADC_MspInit+0xa8>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_ADC_MspInit+0xa8>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_ADC_MspInit+0xa8>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e6e:	230b      	movs	r3, #11
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <HAL_ADC_MspInit+0xac>)
 8000e7e:	f002 f817 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8000e82:	2308      	movs	r3, #8
 8000e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e86:	230b      	movs	r3, #11
 8000e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f002 f80a 	bl	8002eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	; 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	50040000 	.word	0x50040000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000800 	.word	0x48000800

08000eb0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <HAL_DFSDM_FilterMspInit+0xbc>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d119      	bne.n	8000ef4 <HAL_DFSDM_FilterMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <HAL_DFSDM_FilterMspInit+0xc0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a2a      	ldr	r2, [pc, #168]	; (8000f70 <HAL_DFSDM_FilterMspInit+0xc0>)
 8000ec8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <HAL_DFSDM_FilterMspInit+0xc0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d10b      	bne.n	8000eea <HAL_DFSDM_FilterMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ed2:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000edc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_DFSDM_FilterMspInit+0xbc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <HAL_DFSDM_FilterMspInit+0xbc>)
 8000ef2:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <HAL_DFSDM_FilterMspInit+0xc8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d131      	bne.n	8000f62 <HAL_DFSDM_FilterMspInit+0xb2>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f00:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_DFSDM_FilterMspInit+0xd0>)
 8000f02:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f06:	2256      	movs	r2, #86	; 0x56
 8000f08:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f18:	2280      	movs	r2, #128	; 0x80
 8000f1a:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f22:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f2a:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f2e:	2220      	movs	r2, #32
 8000f30:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000f3a:	4810      	ldr	r0, [pc, #64]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f3c:	f001 fdfe 	bl	8002b3c <HAL_DMA_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_DFSDM_FilterMspInit+0x9a>
    {
      Error_Handler();
 8000f46:	f7ff ff2d 	bl	8000da4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200001b4 	.word	0x200001b4
 8000f70:	200001b0 	.word	0x200001b0
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40016100 	.word	0x40016100
 8000f7c:	20001f78 	.word	0x20001f78
 8000f80:	40020044 	.word	0x40020044

08000f84 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d119      	bne.n	8000fc8 <HAL_DFSDM_ChannelMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000f9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d10b      	bne.n	8000fbe <HAL_DFSDM_ChannelMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_DFSDM_ChannelMspInit+0x58>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <HAL_DFSDM_ChannelMspInit+0x58>)
 8000fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_DFSDM_ChannelMspInit+0x58>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a03      	ldr	r2, [pc, #12]	; (8000fd4 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000fc6:	6013      	str	r3, [r2, #0]
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	200001b4 	.word	0x200001b4
 8000fd8:	200001b0 	.word	0x200001b0
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <HAL_I2C_MspInit+0xdc>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d128      	bne.n	8001054 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b2c      	ldr	r3, [pc, #176]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 800101a:	23c0      	movs	r3, #192	; 0xc0
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102a:	2304      	movs	r3, #4
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	4823      	ldr	r0, [pc, #140]	; (80010c4 <HAL_I2C_MspInit+0xe4>)
 8001036:	f001 ff3b 	bl	8002eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001044:	6593      	str	r3, [r2, #88]	; 0x58
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001052:	e02f      	b.n	80010b4 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C3)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <HAL_I2C_MspInit+0xe8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d12a      	bne.n	80010b4 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 8001064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001076:	f003 fba1 	bl	80047bc <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 800107a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800107e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001080:	2312      	movs	r3, #18
 8001082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001084:	2301      	movs	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800108c:	2304      	movs	r3, #4
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <HAL_I2C_MspInit+0xec>)
 8001098:	f001 ff0a 	bl	8002eb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 80010a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010a6:	6593      	str	r3, [r2, #88]	; 0x58
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_I2C_MspInit+0xe0>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3730      	adds	r7, #48	; 0x30
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40005400 	.word	0x40005400
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48000400 	.word	0x48000400
 80010c8:	40005c00 	.word	0x40005c00
 80010cc:	48001800 	.word	0x48001800

080010d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_RTC_MspInit+0x30>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d107      	bne.n	80010f2 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_RTC_MspInit+0x34>)
 80010e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_RTC_MspInit+0x34>)
 80010ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40002800 	.word	0x40002800
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a40      	ldr	r2, [pc, #256]	; (8001228 <HAL_SD_MspInit+0x120>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d179      	bne.n	800121e <HAL_SD_MspInit+0x116>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800112a:	4b40      	ldr	r3, [pc, #256]	; (800122c <HAL_SD_MspInit+0x124>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a3f      	ldr	r2, [pc, #252]	; (800122c <HAL_SD_MspInit+0x124>)
 8001130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <HAL_SD_MspInit+0x124>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800113e:	61bb      	str	r3, [r7, #24]
 8001140:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b3a      	ldr	r3, [pc, #232]	; (800122c <HAL_SD_MspInit+0x124>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a39      	ldr	r2, [pc, #228]	; (800122c <HAL_SD_MspInit+0x124>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b37      	ldr	r3, [pc, #220]	; (800122c <HAL_SD_MspInit+0x124>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b34      	ldr	r3, [pc, #208]	; (800122c <HAL_SD_MspInit+0x124>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a33      	ldr	r2, [pc, #204]	; (800122c <HAL_SD_MspInit+0x124>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b31      	ldr	r3, [pc, #196]	; (800122c <HAL_SD_MspInit+0x124>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <HAL_SD_MspInit+0x124>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	4a2d      	ldr	r2, [pc, #180]	; (800122c <HAL_SD_MspInit+0x124>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117e:	4b2b      	ldr	r3, [pc, #172]	; (800122c <HAL_SD_MspInit+0x124>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 800118a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 800119c:	2308      	movs	r3, #8
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4822      	ldr	r0, [pc, #136]	; (8001230 <HAL_SD_MspInit+0x128>)
 80011a8:	f001 fe82 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 80011ac:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011b0:	61fb      	str	r3, [r7, #28]
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011be:	230c      	movs	r3, #12
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	481a      	ldr	r0, [pc, #104]	; (8001234 <HAL_SD_MspInit+0x12c>)
 80011ca:	f001 fe71 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 80011ce:	2304      	movs	r3, #4
 80011d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011de:	230c      	movs	r3, #12
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4813      	ldr	r0, [pc, #76]	; (8001238 <HAL_SD_MspInit+0x130>)
 80011ea:	f001 fe61 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 80011ee:	23c0      	movs	r3, #192	; 0xc0
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fa:	2303      	movs	r3, #3
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 80011fe:	2308      	movs	r3, #8
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	480a      	ldr	r0, [pc, #40]	; (8001234 <HAL_SD_MspInit+0x12c>)
 800120a:	f001 fe51 	bl	8002eb0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2105      	movs	r1, #5
 8001212:	2031      	movs	r0, #49	; 0x31
 8001214:	f001 fa3c 	bl	8002690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001218:	2031      	movs	r0, #49	; 0x31
 800121a:	f001 fa55 	bl	80026c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3730      	adds	r7, #48	; 0x30
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	50062400 	.word	0x50062400
 800122c:	40021000 	.word	0x40021000
 8001230:	48000400 	.word	0x48000400
 8001234:	48000800 	.word	0x48000800
 8001238:	48000c00 	.word	0x48000c00

0800123c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a64      	ldr	r2, [pc, #400]	; (80013ec <HAL_SPI_MspInit+0x1b0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d13a      	bne.n	80012d4 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800125e:	4b64      	ldr	r3, [pc, #400]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	4a63      	ldr	r2, [pc, #396]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001268:	6613      	str	r3, [r2, #96]	; 0x60
 800126a:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001272:	623b      	str	r3, [r7, #32]
 8001274:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001276:	4b5e      	ldr	r3, [pc, #376]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a5d      	ldr	r2, [pc, #372]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 800128e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001298:	2301      	movs	r3, #1
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012a0:	2305      	movs	r3, #5
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4852      	ldr	r0, [pc, #328]	; (80013f4 <HAL_SPI_MspInit+0x1b8>)
 80012ac:	f001 fe00 	bl	8002eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 80012b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012c2:	2305      	movs	r3, #5
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	4849      	ldr	r0, [pc, #292]	; (80013f4 <HAL_SPI_MspInit+0x1b8>)
 80012ce:	f001 fdef 	bl	8002eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012d2:	e086      	b.n	80013e2 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a47      	ldr	r2, [pc, #284]	; (80013f8 <HAL_SPI_MspInit+0x1bc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d144      	bne.n	8001368 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	4a43      	ldr	r2, [pc, #268]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ea:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	61bb      	str	r3, [r7, #24]
 80012f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	4b3e      	ldr	r3, [pc, #248]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a37      	ldr	r2, [pc, #220]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 8001326:	230a      	movs	r3, #10
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001336:	2305      	movs	r3, #5
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	482e      	ldr	r0, [pc, #184]	; (80013fc <HAL_SPI_MspInit+0x1c0>)
 8001342:	f001 fdb5 	bl	8002eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001346:	2308      	movs	r3, #8
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001356:	2305      	movs	r3, #5
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	4827      	ldr	r0, [pc, #156]	; (8001400 <HAL_SPI_MspInit+0x1c4>)
 8001362:	f001 fda5 	bl	8002eb0 <HAL_GPIO_Init>
}
 8001366:	e03c      	b.n	80013e2 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a25      	ldr	r2, [pc, #148]	; (8001404 <HAL_SPI_MspInit+0x1c8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d137      	bne.n	80013e2 <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001376:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137c:	6593      	str	r3, [r2, #88]	; 0x58
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_SPI_MspInit+0x1b4>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 80013a2:	2330      	movs	r3, #48	; 0x30
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013b2:	2306      	movs	r3, #6
 80013b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	4619      	mov	r1, r3
 80013bc:	4812      	ldr	r0, [pc, #72]	; (8001408 <HAL_SPI_MspInit+0x1cc>)
 80013be:	f001 fd77 	bl	8002eb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 80013c2:	2308      	movs	r3, #8
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d2:	2306      	movs	r3, #6
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <HAL_SPI_MspInit+0x1cc>)
 80013de:	f001 fd67 	bl	8002eb0 <HAL_GPIO_Init>
}
 80013e2:	bf00      	nop
 80013e4:	3738      	adds	r7, #56	; 0x38
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40013000 	.word	0x40013000
 80013f0:	40021000 	.word	0x40021000
 80013f4:	48001000 	.word	0x48001000
 80013f8:	40003800 	.word	0x40003800
 80013fc:	48000c00 	.word	0x48000c00
 8001400:	48000800 	.word	0x48000800
 8001404:	40003c00 	.word	0x40003c00
 8001408:	48000400 	.word	0x48000400

0800140c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800141c:	d10c      	bne.n	8001438 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <HAL_TIM_Base_MspInit+0x8c>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_TIM_Base_MspInit+0x8c>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6593      	str	r3, [r2, #88]	; 0x58
 800142a:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_TIM_Base_MspInit+0x8c>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001436:	e02a      	b.n	800148e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_TIM_Base_MspInit+0x90>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d114      	bne.n	800146c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_TIM_Base_MspInit+0x8c>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <HAL_TIM_Base_MspInit+0x8c>)
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	6593      	str	r3, [r2, #88]	; 0x58
 800144e:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_TIM_Base_MspInit+0x8c>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2105      	movs	r1, #5
 800145e:	2036      	movs	r0, #54	; 0x36
 8001460:	f001 f916 	bl	8002690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001464:	2036      	movs	r0, #54	; 0x36
 8001466:	f001 f92f 	bl	80026c8 <HAL_NVIC_EnableIRQ>
}
 800146a:	e010      	b.n	800148e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_TIM_Base_MspInit+0x94>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10b      	bne.n	800148e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_TIM_Base_MspInit+0x8c>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_TIM_Base_MspInit+0x8c>)
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	6593      	str	r3, [r2, #88]	; 0x58
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_TIM_Base_MspInit+0x8c>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40001000 	.word	0x40001000
 80014a0:	40001400 	.word	0x40001400

080014a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	201d      	movs	r0, #29
 80014ba:	f001 f8e9 	bl	8002690 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014be:	201d      	movs	r0, #29
 80014c0:	f001 f902 	bl	80026c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_InitTick+0x9c>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_InitTick+0x9c>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	6593      	str	r3, [r2, #88]	; 0x58
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_InitTick+0x9c>)
 80014d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014dc:	f107 0210 	add.w	r2, r7, #16
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 ff8c 	bl	8005404 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014ec:	f003 ff5e 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 80014f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_InitTick+0xa0>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	0c9b      	lsrs	r3, r3, #18
 80014fc:	3b01      	subs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_InitTick+0xa4>)
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <HAL_InitTick+0xa8>)
 8001504:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <HAL_InitTick+0xa4>)
 8001508:	f240 32e7 	movw	r2, #999	; 0x3e7
 800150c:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_InitTick+0xa4>)
 8001510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001512:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_InitTick+0xa4>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_InitTick+0xa4>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_InitTick+0xa4>)
 8001522:	f007 fe05 	bl	8009130 <HAL_TIM_Base_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d104      	bne.n	8001536 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <HAL_InitTick+0xa4>)
 800152e:	f007 fe57 	bl	80091e0 <HAL_TIM_Base_Start_IT>
 8001532:	4603      	mov	r3, r0
 8001534:	e000      	b.n	8001538 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
}
 8001538:	4618      	mov	r0, r3
 800153a:	3730      	adds	r7, #48	; 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	431bde83 	.word	0x431bde83
 8001548:	2000217c 	.word	0x2000217c
 800154c:	40000400 	.word	0x40000400

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <NMI_Handler+0x4>

08001556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <MemManage_Handler+0x4>

08001562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <UsageFault_Handler+0x4>

0800156e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <DMA1_Channel4_IRQHandler+0x10>)
 8001582:	f001 fb83 	bl	8002c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20001f78 	.word	0x20001f78

08001590 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM3_IRQHandler+0x10>)
 8001596:	f007 fe93 	bl	80092c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000217c 	.word	0x2000217c

080015a4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <SDMMC1_IRQHandler+0x10>)
 80015aa:	f006 faa3 	bl	8007af4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20001e2c 	.word	0x20001e2c

080015b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <TIM6_DAC_IRQHandler+0x10>)
 80015be:	f007 fe7f 	bl	80092c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20001ffc 	.word	0x20001ffc

080015cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <OTG_FS_IRQHandler+0x10>)
 80015d2:	f002 f8c2 	bl	800375a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20003b4c 	.word	0x20003b4c

080015e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <SystemInit+0x5c>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <SystemInit+0x5c>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <SystemInit+0x60>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a11      	ldr	r2, [pc, #68]	; (8001640 <SystemInit+0x60>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <SystemInit+0x60>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <SystemInit+0x60>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <SystemInit+0x60>)
 800160c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001610:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001614:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <SystemInit+0x60>)
 8001618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800161c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <SystemInit+0x60>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <SystemInit+0x60>)
 8001624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SystemInit+0x60>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	40021000 	.word	0x40021000

08001644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001648:	f7ff ffca 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800164c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800164e:	e003      	b.n	8001658 <LoopCopyDataInit>

08001650 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001652:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001654:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001656:	3104      	adds	r1, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001658:	480a      	ldr	r0, [pc, #40]	; (8001684 <LoopForever+0xa>)
	ldr	r3, =_edata
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <LoopForever+0xe>)
	adds	r2, r0, r1
 800165c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800165e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001660:	d3f6      	bcc.n	8001650 <CopyDataInit>
	ldr	r2, =_sbss
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001664:	e002      	b.n	800166c <LoopFillZerobss>

08001666 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001666:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001668:	f842 3b04 	str.w	r3, [r2], #4

0800166c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <LoopForever+0x16>)
	cmp	r2, r3
 800166e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001670:	d3f9      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001672:	f00f ff1b 	bl	80114ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001676:	f7fe fdc3 	bl	8000200 <main>

0800167a <LoopForever>:

LoopForever:
    b LoopForever
 800167a:	e7fe      	b.n	800167a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800167c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001680:	0801162c 	.word	0x0801162c
	ldr	r0, =_sdata
 8001684:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001688:	20000194 	.word	0x20000194
	ldr	r2, =_sbss
 800168c:	20000194 	.word	0x20000194
	ldr	r3, = _ebss
 8001690:	20003f54 	.word	0x20003f54

08001694 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC1_IRQHandler>

08001696 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f000 ffea 	bl	800267a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fefc 	bl	80014a4 <HAL_InitTick>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	e001      	b.n	80016bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b8:	f7ff fb7a 	bl	8000db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016bc:	79fb      	ldrb	r3, [r7, #7]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008
 80016ec:	200021c8 	.word	0x200021c8

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200021c8 	.word	0x200021c8

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff ffee 	bl	80016f0 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffde 	bl	80016f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008

08001750 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	609a      	str	r2, [r3, #8]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3360      	adds	r3, #96	; 0x60
 80017ca:	461a      	mov	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <LL_ADC_SetOffset+0x44>)
 80017da:	4013      	ands	r3, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	4313      	orrs	r3, r2
 80017e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017f0:	bf00      	nop
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	03fff000 	.word	0x03fff000

08001800 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3360      	adds	r3, #96	; 0x60
 800180e:	461a      	mov	r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3360      	adds	r3, #96	; 0x60
 800183c:	461a      	mov	r2, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	431a      	orrs	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001856:	bf00      	nop
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	615a      	str	r2, [r3, #20]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3330      	adds	r3, #48	; 0x30
 8001898:	461a      	mov	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	211f      	movs	r1, #31
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	0e9b      	lsrs	r3, r3, #26
 80018c0:	f003 011f 	and.w	r1, r3, #31
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f003 031f 	and.w	r3, r3, #31
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	3314      	adds	r3, #20
 80018f0:	461a      	mov	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	0e5b      	lsrs	r3, r3, #25
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	0d1b      	lsrs	r3, r3, #20
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2107      	movs	r1, #7
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	401a      	ands	r2, r3
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	0d1b      	lsrs	r3, r3, #20
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001950:	43db      	mvns	r3, r3
 8001952:	401a      	ands	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0318 	and.w	r3, r3, #24
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <LL_ADC_SetChannelSingleDiff+0x44>)
 800195c:	40d9      	lsrs	r1, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	400b      	ands	r3, r1
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	431a      	orrs	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	0007ffff 	.word	0x0007ffff

08001980 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6093      	str	r3, [r2, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019b8:	d101      	bne.n	80019be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80019dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a08:	d101      	bne.n	8001a0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <LL_ADC_IsEnabled+0x18>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <LL_ADC_IsEnabled+0x1a>
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d101      	bne.n	8001a5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d101      	bne.n	8001a80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e12f      	b.n	8001d0a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff f9a1 	bl	8000e00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff67 	bl	80019a4 <LL_ADC_IsDeepPowerDownEnabled>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d004      	beq.n	8001ae6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff4d 	bl	8001980 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff82 	bl	80019f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d115      	bne.n	8001b22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff66 	bl	80019cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b00:	4b84      	ldr	r3, [pc, #528]	; (8001d14 <HAL_ADC_Init+0x284>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	099b      	lsrs	r3, r3, #6
 8001b06:	4a84      	ldr	r2, [pc, #528]	; (8001d18 <HAL_ADC_Init+0x288>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	099b      	lsrs	r3, r3, #6
 8001b0e:	3301      	adds	r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b14:	e002      	b.n	8001b1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f9      	bne.n	8001b16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff64 	bl	80019f4 <LL_ADC_IsInternalRegulatorEnabled>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10d      	bne.n	8001b4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	f043 0210 	orr.w	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff75 	bl	8001a42 <LL_ADC_REG_IsConversionOngoing>
 8001b58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 80c8 	bne.w	8001cf8 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 80c4 	bne.w	8001cf8 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b78:	f043 0202 	orr.w	r2, r3, #2
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff49 	bl	8001a1c <LL_ADC_IsEnabled>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b90:	4862      	ldr	r0, [pc, #392]	; (8001d1c <HAL_ADC_Init+0x28c>)
 8001b92:	f7ff ff43 	bl	8001a1c <LL_ADC_IsEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	485f      	ldr	r0, [pc, #380]	; (8001d20 <HAL_ADC_Init+0x290>)
 8001ba4:	f7ff fdd4 	bl	8001750 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7e5b      	ldrb	r3, [r3, #25]
 8001bac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bb2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001bb8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001bbe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d106      	bne.n	8001be4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	045b      	lsls	r3, r3, #17
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_ADC_Init+0x294>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6812      	ldr	r2, [r2, #0]
 8001c0e:	69b9      	ldr	r1, [r7, #24]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff12 	bl	8001a42 <LL_ADC_REG_IsConversionOngoing>
 8001c1e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff1f 	bl	8001a68 <LL_ADC_INJ_IsConversionOngoing>
 8001c2a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d140      	bne.n	8001cb4 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d13d      	bne.n	8001cb4 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7e1b      	ldrb	r3, [r3, #24]
 8001c40:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c42:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c4a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c5a:	f023 0306 	bic.w	r3, r3, #6
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	69b9      	ldr	r1, [r7, #24]
 8001c64:	430b      	orrs	r3, r1
 8001c66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d118      	bne.n	8001ca4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c88:	4311      	orrs	r1, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c94:	430a      	orrs	r2, r1
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	e007      	b.n	8001cb4 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d10c      	bne.n	8001cd6 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f023 010f 	bic.w	r1, r3, #15
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	1e5a      	subs	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd4:	e007      	b.n	8001ce6 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 020f 	bic.w	r2, r2, #15
 8001ce4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	659a      	str	r2, [r3, #88]	; 0x58
 8001cf6:	e007      	b.n	8001d08 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfc:	f043 0210 	orr.w	r2, r3, #16
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d08:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000
 8001d18:	053e2d63 	.word	0x053e2d63
 8001d1c:	50040000 	.word	0x50040000
 8001d20:	50040300 	.word	0x50040300
 8001d24:	fff0c007 	.word	0xfff0c007

08001d28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0b6      	sub	sp, #216	; 0xd8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d101      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x22>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e3d5      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x7ce>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fe73 	bl	8001a42 <LL_ADC_REG_IsConversionOngoing>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 83ba 	bne.w	80024d8 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d824      	bhi.n	8001db6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	3b02      	subs	r3, #2
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d81b      	bhi.n	8001dae <HAL_ADC_ConfigChannel+0x86>
 8001d76:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <HAL_ADC_ConfigChannel+0x54>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001d8d 	.word	0x08001d8d
 8001d80:	08001d95 	.word	0x08001d95
 8001d84:	08001d9d 	.word	0x08001d9d
 8001d88:	08001da5 	.word	0x08001da5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	220c      	movs	r2, #12
 8001d90:	605a      	str	r2, [r3, #4]
          break;
 8001d92:	e011      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2212      	movs	r2, #18
 8001d98:	605a      	str	r2, [r3, #4]
          break;
 8001d9a:	e00d      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2218      	movs	r2, #24
 8001da0:	605a      	str	r2, [r3, #4]
          break;
 8001da2:	e009      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001daa:	605a      	str	r2, [r3, #4]
          break;
 8001dac:	e004      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2206      	movs	r2, #6
 8001db2:	605a      	str	r2, [r3, #4]
          break;
 8001db4:	e000      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001db6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f7ff fd5f 	bl	8001888 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fe37 	bl	8001a42 <LL_ADC_REG_IsConversionOngoing>
 8001dd4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fe43 	bl	8001a68 <LL_ADC_INJ_IsConversionOngoing>
 8001de2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001de6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 81c1 	bne.w	8002172 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f040 81bc 	bne.w	8002172 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e02:	d10f      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7ff fd66 	bl	80018e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fd20 	bl	8001862 <LL_ADC_SetSamplingTimeCommonConfig>
 8001e22:	e00e      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6819      	ldr	r1, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	461a      	mov	r2, r3
 8001e32:	f7ff fd55 	bl	80018e0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fd10 	bl	8001862 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d00a      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6919      	ldr	r1, [r3, #16]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e74:	f7ff fca0 	bl	80017b8 <LL_ADC_SetOffset>
 8001e78:	e17b      	b.n	8002172 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fcbd 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x17e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fcb2 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	0e9b      	lsrs	r3, r3, #26
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	e01e      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x1bc>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fca7 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ec4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ecc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e004      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x1d4>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	e018      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x206>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001f20:	2320      	movs	r3, #32
 8001f22:	e004      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d106      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fc76 	bl	800182c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2101      	movs	r1, #1
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fc5a 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10a      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x244>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fc4f 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	0e9b      	lsrs	r3, r3, #26
 8001f66:	f003 021f 	and.w	r2, r3, #31
 8001f6a:	e01e      	b.n	8001faa <HAL_ADC_ConfigChannel+0x282>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fc44 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e004      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001f9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x29a>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0e9b      	lsrs	r3, r3, #26
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	e018      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x2cc>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001fde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e004      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d106      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2101      	movs	r1, #1
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fc13 	bl	800182c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2102      	movs	r1, #2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fbf7 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002012:	4603      	mov	r3, r0
 8002014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10a      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x30a>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2102      	movs	r1, #2
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fbec 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	0e9b      	lsrs	r3, r3, #26
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	e01e      	b.n	8002070 <HAL_ADC_ConfigChannel+0x348>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2102      	movs	r1, #2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fbe1 	bl	8001800 <LL_ADC_GetOffsetChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002054:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002058:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e004      	b.n	800206e <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002064:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x360>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	e016      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x38e>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800209a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800209c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e004      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80020ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d106      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2200      	movs	r2, #0
 80020c0:	2102      	movs	r1, #2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fbb2 	bl	800182c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2103      	movs	r1, #3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fb96 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x3cc>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2103      	movs	r1, #3
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fb8b 	bl	8001800 <LL_ADC_GetOffsetChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	0e9b      	lsrs	r3, r3, #26
 80020ee:	f003 021f 	and.w	r2, r3, #31
 80020f2:	e017      	b.n	8002124 <HAL_ADC_ConfigChannel+0x3fc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2103      	movs	r1, #3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fb80 	bl	8001800 <LL_ADC_GetOffsetChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800210c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800210e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002116:	2320      	movs	r3, #32
 8002118:	e003      	b.n	8002122 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800211a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <HAL_ADC_ConfigChannel+0x414>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	0e9b      	lsrs	r3, r3, #26
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	e011      	b.n	8002160 <HAL_ADC_ConfigChannel+0x438>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800214a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800214c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800214e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e003      	b.n	8002160 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002160:	429a      	cmp	r2, r3
 8002162:	d106      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2200      	movs	r2, #0
 800216a:	2103      	movs	r1, #3
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fb5d 	bl	800182c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fc50 	bl	8001a1c <LL_ADC_IsEnabled>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 8140 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	461a      	mov	r2, r3
 8002192:	f7ff fbd1 	bl	8001938 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4a8f      	ldr	r2, [pc, #572]	; (80023d8 <HAL_ADC_ConfigChannel+0x6b0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	f040 8131 	bne.w	8002404 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10b      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x4a2>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	3301      	adds	r3, #1
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	2b09      	cmp	r3, #9
 80021c0:	bf94      	ite	ls
 80021c2:	2301      	movls	r3, #1
 80021c4:	2300      	movhi	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	e019      	b.n	80021fe <HAL_ADC_ConfigChannel+0x4d6>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021da:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e003      	b.n	80021ee <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80021e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3301      	adds	r3, #1
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2b09      	cmp	r3, #9
 80021f6:	bf94      	ite	ls
 80021f8:	2301      	movls	r3, #1
 80021fa:	2300      	movhi	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d079      	beq.n	80022f6 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_ADC_ConfigChannel+0x4f6>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0e9b      	lsrs	r3, r3, #26
 8002214:	3301      	adds	r3, #1
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800221c:	e015      	b.n	800224a <HAL_ADC_ConfigChannel+0x522>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800222c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e003      	b.n	8002242 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800223a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3301      	adds	r3, #1
 8002244:	069b      	lsls	r3, r3, #26
 8002246:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_ADC_ConfigChannel+0x542>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	0e9b      	lsrs	r3, r3, #26
 800225c:	3301      	adds	r3, #1
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	e017      	b.n	800229a <HAL_ADC_ConfigChannel+0x572>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800227a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800227c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002282:	2320      	movs	r3, #32
 8002284:	e003      	b.n	800228e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	3301      	adds	r3, #1
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	2101      	movs	r1, #1
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	ea42 0103 	orr.w	r1, r2, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10a      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x598>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0e9b      	lsrs	r3, r3, #26
 80022b0:	3301      	adds	r3, #1
 80022b2:	f003 021f 	and.w	r2, r3, #31
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	051b      	lsls	r3, r3, #20
 80022be:	e018      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x5ca>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e003      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80022dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f003 021f 	and.w	r2, r3, #31
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f2:	430b      	orrs	r3, r1
 80022f4:	e081      	b.n	80023fa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d107      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x5ea>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	0e9b      	lsrs	r3, r3, #26
 8002308:	3301      	adds	r3, #1
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002310:	e015      	b.n	800233e <HAL_ADC_ConfigChannel+0x616>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e003      	b.n	8002336 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	3301      	adds	r3, #1
 8002338:	069b      	lsls	r3, r3, #26
 800233a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_ADC_ConfigChannel+0x636>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	3301      	adds	r3, #1
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	e017      	b.n	800238e <HAL_ADC_ConfigChannel+0x666>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	61fb      	str	r3, [r7, #28]
  return result;
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e003      	b.n	8002382 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	ea42 0103 	orr.w	r1, r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10d      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x692>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0e9b      	lsrs	r3, r3, #26
 80023a4:	3301      	adds	r3, #1
 80023a6:	f003 021f 	and.w	r2, r3, #31
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	051b      	lsls	r3, r3, #20
 80023b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023b8:	e01e      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x6d0>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	613b      	str	r3, [r7, #16]
  return result;
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d104      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80023d2:	2320      	movs	r3, #32
 80023d4:	e006      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x6bc>
 80023d6:	bf00      	nop
 80023d8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3301      	adds	r3, #1
 80023e6:	f003 021f 	and.w	r2, r3, #31
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	3b1e      	subs	r3, #30
 80023f2:	051b      	lsls	r3, r3, #20
 80023f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023f8:	430b      	orrs	r3, r1
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	6892      	ldr	r2, [r2, #8]
 80023fe:	4619      	mov	r1, r3
 8002400:	f7ff fa6e 	bl	80018e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_ADC_ConfigChannel+0x7d8>)
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d06c      	beq.n	80024ea <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002410:	483c      	ldr	r0, [pc, #240]	; (8002504 <HAL_ADC_ConfigChannel+0x7dc>)
 8002412:	f7ff f9c3 	bl	800179c <LL_ADC_GetCommonPathInternalCh>
 8002416:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a3a      	ldr	r2, [pc, #232]	; (8002508 <HAL_ADC_ConfigChannel+0x7e0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d127      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002428:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d121      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a35      	ldr	r2, [pc, #212]	; (800250c <HAL_ADC_ConfigChannel+0x7e4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d157      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800243a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800243e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002442:	4619      	mov	r1, r3
 8002444:	482f      	ldr	r0, [pc, #188]	; (8002504 <HAL_ADC_ConfigChannel+0x7dc>)
 8002446:	f7ff f996 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244a:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_ADC_ConfigChannel+0x7e8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	099b      	lsrs	r3, r3, #6
 8002450:	4a30      	ldr	r2, [pc, #192]	; (8002514 <HAL_ADC_ConfigChannel+0x7ec>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002464:	e002      	b.n	800246c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b01      	subs	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f9      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002472:	e03a      	b.n	80024ea <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a27      	ldr	r2, [pc, #156]	; (8002518 <HAL_ADC_ConfigChannel+0x7f0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d113      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x77e>
 800247e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10d      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <HAL_ADC_ConfigChannel+0x7e4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d12a      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249c:	4619      	mov	r1, r3
 800249e:	4819      	ldr	r0, [pc, #100]	; (8002504 <HAL_ADC_ConfigChannel+0x7dc>)
 80024a0:	f7ff f969 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024a4:	e021      	b.n	80024ea <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <HAL_ADC_ConfigChannel+0x7f4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d11c      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d116      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_ADC_ConfigChannel+0x7e4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d111      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ce:	4619      	mov	r1, r3
 80024d0:	480c      	ldr	r0, [pc, #48]	; (8002504 <HAL_ADC_ConfigChannel+0x7dc>)
 80024d2:	f7ff f950 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
 80024d6:	e008      	b.n	80024ea <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80024f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	37d8      	adds	r7, #216	; 0xd8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	80080000 	.word	0x80080000
 8002504:	50040300 	.word	0x50040300
 8002508:	c7520000 	.word	0xc7520000
 800250c:	50040000 	.word	0x50040000
 8002510:	20000000 	.word	0x20000000
 8002514:	053e2d63 	.word	0x053e2d63
 8002518:	cb840000 	.word	0xcb840000
 800251c:	80000001 	.word	0x80000001

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002548:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800254c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002552:	4a04      	ldr	r2, [pc, #16]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	60d3      	str	r3, [r2, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff4c 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026a2:	f7ff ff61 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	6978      	ldr	r0, [r7, #20]
 80026ae:	f7ff ffb1 	bl	8002614 <NVIC_EncodePriority>
 80026b2:	4602      	mov	r2, r0
 80026b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff80 	bl	80025c0 <__NVIC_SetPriority>
}
 80026c0:	bf00      	nop
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ff54 	bl	8002584 <__NVIC_EnableIRQ>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0ac      	b.n	8002850 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f9d2 	bl	8002aa4 <DFSDM_GetChannelFromInstance>
 8002700:	4603      	mov	r3, r0
 8002702:	4a55      	ldr	r2, [pc, #340]	; (8002858 <HAL_DFSDM_ChannelInit+0x174>)
 8002704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e09f      	b.n	8002850 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7fe fc37 	bl	8000f84 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <HAL_DFSDM_ChannelInit+0x178>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <HAL_DFSDM_ChannelInit+0x178>)
 800271e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002720:	4b4e      	ldr	r3, [pc, #312]	; (800285c <HAL_DFSDM_ChannelInit+0x178>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d125      	bne.n	8002774 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002728:	4b4d      	ldr	r3, [pc, #308]	; (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4c      	ldr	r2, [pc, #304]	; (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 800272e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002732:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002734:	4b4a      	ldr	r3, [pc, #296]	; (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4948      	ldr	r1, [pc, #288]	; (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a46      	ldr	r2, [pc, #280]	; (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 8002748:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800274c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	791b      	ldrb	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002756:	4b42      	ldr	r3, [pc, #264]	; (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	3b01      	subs	r3, #1
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	493f      	ldr	r1, [pc, #252]	; (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 8002764:	4313      	orrs	r3, r2
 8002766:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002768:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a3c      	ldr	r2, [pc, #240]	; (8002860 <HAL_DFSDM_ChannelInit+0x17c>)
 800276e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002772:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002782:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6819      	ldr	r1, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002792:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002798:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 020f 	bic.w	r2, r2, #15
 80027b0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80027d8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6899      	ldr	r1, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f002 0207 	and.w	r2, r2, #7
 8002804:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6859      	ldr	r1, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002830:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 f930 	bl	8002aa4 <DFSDM_GetChannelFromInstance>
 8002844:	4602      	mov	r2, r0
 8002846:	4904      	ldr	r1, [pc, #16]	; (8002858 <HAL_DFSDM_ChannelInit+0x174>)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	200001bc 	.word	0x200001bc
 800285c:	200001b8 	.word	0x200001b8
 8002860:	40016000 	.word	0x40016000

08002864 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0ca      	b.n	8002a0c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a66      	ldr	r2, [pc, #408]	; (8002a14 <HAL_DFSDM_FilterInit+0x1b0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d109      	bne.n	8002894 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002884:	2b01      	cmp	r3, #1
 8002886:	d003      	beq.n	8002890 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0bb      	b.n	8002a0c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7fe faff 	bl	8000eb0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80028c0:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7a1b      	ldrb	r3, [r3, #8]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d108      	bne.n	80028dc <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e007      	b.n	80028ec <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80028ea:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7a5b      	ldrb	r3, [r3, #9]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d108      	bne.n	8002906 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e007      	b.n	8002916 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002924:	f023 0308 	bic.w	r3, r3, #8
 8002928:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d108      	bne.n	8002944 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7c1b      	ldrb	r3, [r3, #16]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d108      	bne.n	800295e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0210 	orr.w	r2, r2, #16
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	e007      	b.n	800296e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0210 	bic.w	r2, r2, #16
 800296c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7c5b      	ldrb	r3, [r3, #17]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d108      	bne.n	8002988 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0220 	orr.w	r2, r2, #32
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e007      	b.n	8002998 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0220 	bic.w	r2, r2, #32
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80029a6:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80029aa:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6959      	ldr	r1, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029be:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80029c6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7c1a      	ldrb	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 0201 	orr.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40016100 	.word	0x40016100

08002a18 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d02e      	beq.n	8002a90 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a38:	2bff      	cmp	r3, #255	; 0xff
 8002a3a:	d029      	beq.n	8002a90 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d10d      	bne.n	8002a72 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e00a      	b.n	8002a88 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6819      	ldr	r1, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8e:	e001      	b.n	8002a94 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <DFSDM_GetChannelFromInstance+0x7c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d102      	bne.n	8002aba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e02b      	b.n	8002b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <DFSDM_GetChannelFromInstance+0x80>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d102      	bne.n	8002ac8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	e024      	b.n	8002b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <DFSDM_GetChannelFromInstance+0x84>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d102      	bne.n	8002ad6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	e01d      	b.n	8002b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <DFSDM_GetChannelFromInstance+0x88>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d102      	bne.n	8002ae4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002ade:	2304      	movs	r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	e016      	b.n	8002b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <DFSDM_GetChannelFromInstance+0x8c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d102      	bne.n	8002af2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002aec:	2305      	movs	r3, #5
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e00f      	b.n	8002b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <DFSDM_GetChannelFromInstance+0x90>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d102      	bne.n	8002b00 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002afa:	2306      	movs	r3, #6
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	e008      	b.n	8002b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <DFSDM_GetChannelFromInstance+0x94>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d102      	bne.n	8002b0e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002b08:	2307      	movs	r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e001      	b.n	8002b12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40016000 	.word	0x40016000
 8002b24:	40016020 	.word	0x40016020
 8002b28:	40016040 	.word	0x40016040
 8002b2c:	40016080 	.word	0x40016080
 8002b30:	400160a0 	.word	0x400160a0
 8002b34:	400160c0 	.word	0x400160c0
 8002b38:	400160e0 	.word	0x400160e0

08002b3c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e08d      	b.n	8002c6a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b47      	ldr	r3, [pc, #284]	; (8002c74 <HAL_DMA_Init+0x138>)
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d80f      	bhi.n	8002b7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b45      	ldr	r3, [pc, #276]	; (8002c78 <HAL_DMA_Init+0x13c>)
 8002b62:	4413      	add	r3, r2
 8002b64:	4a45      	ldr	r2, [pc, #276]	; (8002c7c <HAL_DMA_Init+0x140>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	009a      	lsls	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a42      	ldr	r2, [pc, #264]	; (8002c80 <HAL_DMA_Init+0x144>)
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
 8002b78:	e00e      	b.n	8002b98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <HAL_DMA_Init+0x148>)
 8002b82:	4413      	add	r3, r2
 8002b84:	4a3d      	ldr	r2, [pc, #244]	; (8002c7c <HAL_DMA_Init+0x140>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	009a      	lsls	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a3c      	ldr	r2, [pc, #240]	; (8002c88 <HAL_DMA_Init+0x14c>)
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8fe 	bl	8002dec <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bf8:	d102      	bne.n	8002c00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c14:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d010      	beq.n	8002c40 <HAL_DMA_Init+0x104>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d80c      	bhi.n	8002c40 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f91e 	bl	8002e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	e008      	b.n	8002c52 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40020407 	.word	0x40020407
 8002c78:	bffdfff8 	.word	0xbffdfff8
 8002c7c:	cccccccd 	.word	0xcccccccd
 8002c80:	40020000 	.word	0x40020000
 8002c84:	bffdfbf8 	.word	0xbffdfbf8
 8002c88:	40020400 	.word	0x40020400

08002c8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca8:	f003 031c 	and.w	r3, r3, #28
 8002cac:	2204      	movs	r2, #4
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d026      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x7a>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d021      	beq.n	8002d06 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0204 	bic.w	r2, r2, #4
 8002cde:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	f003 021c 	and.w	r2, r3, #28
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2104      	movs	r1, #4
 8002cee:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d071      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002d04:	e06c      	b.n	8002de0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f003 031c 	and.w	r3, r3, #28
 8002d0e:	2202      	movs	r2, #2
 8002d10:	409a      	lsls	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d02e      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xec>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d029      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 020a 	bic.w	r2, r2, #10
 8002d40:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f003 021c 	and.w	r2, r3, #28
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2102      	movs	r1, #2
 8002d58:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d038      	beq.n	8002de0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d76:	e033      	b.n	8002de0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	f003 031c 	and.w	r3, r3, #28
 8002d80:	2208      	movs	r2, #8
 8002d82:	409a      	lsls	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02a      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x156>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d025      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 020e 	bic.w	r2, r2, #14
 8002da4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f003 021c 	and.w	r2, r3, #28
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2101      	movs	r1, #1
 8002db4:	fa01 f202 	lsl.w	r2, r1, r2
 8002db8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
}
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d80a      	bhi.n	8002e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e0c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6493      	str	r3, [r2, #72]	; 0x48
 8002e14:	e007      	b.n	8002e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	009a      	lsls	r2, r3, #2
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e20:	4413      	add	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3b08      	subs	r3, #8
 8002e2e:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2201      	movs	r2, #1
 8002e46:	409a      	lsls	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40020407 	.word	0x40020407
 8002e5c:	4002081c 	.word	0x4002081c
 8002e60:	cccccccd 	.word	0xcccccccd
 8002e64:	40020880 	.word	0x40020880

08002e68 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	461a      	mov	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e8a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2201      	movs	r2, #1
 8002e96:	409a      	lsls	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	1000823f 	.word	0x1000823f
 8002eac:	40020940 	.word	0x40020940

08002eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ebe:	e166      	b.n	800318e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8158 	beq.w	8003188 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d00b      	beq.n	8002ef8 <HAL_GPIO_Init+0x48>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d007      	beq.n	8002ef8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eec:	2b11      	cmp	r3, #17
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b12      	cmp	r3, #18
 8002ef6:	d130      	bne.n	8002f5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f2e:	2201      	movs	r2, #1
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	f003 0201 	and.w	r2, r3, #1
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	2203      	movs	r2, #3
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0xea>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b12      	cmp	r3, #18
 8002f98:	d123      	bne.n	8002fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	08da      	lsrs	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3208      	adds	r2, #8
 8002fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	08da      	lsrs	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3208      	adds	r2, #8
 8002fdc:	6939      	ldr	r1, [r7, #16]
 8002fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	2203      	movs	r2, #3
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0203 	and.w	r2, r3, #3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80b2 	beq.w	8003188 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003024:	4b61      	ldr	r3, [pc, #388]	; (80031ac <HAL_GPIO_Init+0x2fc>)
 8003026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003028:	4a60      	ldr	r2, [pc, #384]	; (80031ac <HAL_GPIO_Init+0x2fc>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6613      	str	r3, [r2, #96]	; 0x60
 8003030:	4b5e      	ldr	r3, [pc, #376]	; (80031ac <HAL_GPIO_Init+0x2fc>)
 8003032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800303c:	4a5c      	ldr	r2, [pc, #368]	; (80031b0 <HAL_GPIO_Init+0x300>)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	3302      	adds	r3, #2
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003066:	d02b      	beq.n	80030c0 <HAL_GPIO_Init+0x210>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a52      	ldr	r2, [pc, #328]	; (80031b4 <HAL_GPIO_Init+0x304>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d025      	beq.n	80030bc <HAL_GPIO_Init+0x20c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a51      	ldr	r2, [pc, #324]	; (80031b8 <HAL_GPIO_Init+0x308>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d01f      	beq.n	80030b8 <HAL_GPIO_Init+0x208>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a50      	ldr	r2, [pc, #320]	; (80031bc <HAL_GPIO_Init+0x30c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d019      	beq.n	80030b4 <HAL_GPIO_Init+0x204>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a4f      	ldr	r2, [pc, #316]	; (80031c0 <HAL_GPIO_Init+0x310>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d013      	beq.n	80030b0 <HAL_GPIO_Init+0x200>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a4e      	ldr	r2, [pc, #312]	; (80031c4 <HAL_GPIO_Init+0x314>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00d      	beq.n	80030ac <HAL_GPIO_Init+0x1fc>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a4d      	ldr	r2, [pc, #308]	; (80031c8 <HAL_GPIO_Init+0x318>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d007      	beq.n	80030a8 <HAL_GPIO_Init+0x1f8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a4c      	ldr	r2, [pc, #304]	; (80031cc <HAL_GPIO_Init+0x31c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d101      	bne.n	80030a4 <HAL_GPIO_Init+0x1f4>
 80030a0:	2307      	movs	r3, #7
 80030a2:	e00e      	b.n	80030c2 <HAL_GPIO_Init+0x212>
 80030a4:	2308      	movs	r3, #8
 80030a6:	e00c      	b.n	80030c2 <HAL_GPIO_Init+0x212>
 80030a8:	2306      	movs	r3, #6
 80030aa:	e00a      	b.n	80030c2 <HAL_GPIO_Init+0x212>
 80030ac:	2305      	movs	r3, #5
 80030ae:	e008      	b.n	80030c2 <HAL_GPIO_Init+0x212>
 80030b0:	2304      	movs	r3, #4
 80030b2:	e006      	b.n	80030c2 <HAL_GPIO_Init+0x212>
 80030b4:	2303      	movs	r3, #3
 80030b6:	e004      	b.n	80030c2 <HAL_GPIO_Init+0x212>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e002      	b.n	80030c2 <HAL_GPIO_Init+0x212>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <HAL_GPIO_Init+0x212>
 80030c0:	2300      	movs	r3, #0
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	f002 0203 	and.w	r2, r2, #3
 80030c8:	0092      	lsls	r2, r2, #2
 80030ca:	4093      	lsls	r3, r2
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030d2:	4937      	ldr	r1, [pc, #220]	; (80031b0 <HAL_GPIO_Init+0x300>)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	3302      	adds	r3, #2
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_GPIO_Init+0x320>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4313      	orrs	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003104:	4a32      	ldr	r2, [pc, #200]	; (80031d0 <HAL_GPIO_Init+0x320>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_GPIO_Init+0x320>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800312e:	4a28      	ldr	r2, [pc, #160]	; (80031d0 <HAL_GPIO_Init+0x320>)
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003134:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <HAL_GPIO_Init+0x320>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <HAL_GPIO_Init+0x320>)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800315e:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <HAL_GPIO_Init+0x320>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003182:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <HAL_GPIO_Init+0x320>)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3301      	adds	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	f47f ae91 	bne.w	8002ec0 <HAL_GPIO_Init+0x10>
  }
}
 800319e:	bf00      	nop
 80031a0:	bf00      	nop
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40010000 	.word	0x40010000
 80031b4:	48000400 	.word	0x48000400
 80031b8:	48000800 	.word	0x48000800
 80031bc:	48000c00 	.word	0x48000c00
 80031c0:	48001000 	.word	0x48001000
 80031c4:	48001400 	.word	0x48001400
 80031c8:	48001800 	.word	0x48001800
 80031cc:	48001c00 	.word	0x48001c00
 80031d0:	40010400 	.word	0x40010400

080031d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	887b      	ldrh	r3, [r7, #2]
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e001      	b.n	80031f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	807b      	strh	r3, [r7, #2]
 8003210:	4613      	mov	r3, r2
 8003212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003214:	787b      	ldrb	r3, [r7, #1]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003220:	e002      	b.n	8003228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4013      	ands	r3, r2
 800324c:	041a      	lsls	r2, r3, #16
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	43d9      	mvns	r1, r3
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	400b      	ands	r3, r1
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	619a      	str	r2, [r3, #24]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e081      	b.n	800337e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fea6 	bl	8000fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	; 0x24
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d107      	bne.n	80032e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	e006      	b.n	80032f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d104      	bne.n	8003302 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003300:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003314:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003324:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	ea42 0103 	orr.w	r1, r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	021a      	lsls	r2, r3, #8
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69d9      	ldr	r1, [r3, #28]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1a      	ldr	r2, [r3, #32]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b20      	cmp	r3, #32
 800339a:	d138      	bne.n	800340e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e032      	b.n	8003410 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2224      	movs	r2, #36	; 0x24
 80033b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	e000      	b.n	8003410 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800340e:	2302      	movs	r3, #2
  }
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b20      	cmp	r3, #32
 8003430:	d139      	bne.n	80034a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800343c:	2302      	movs	r3, #2
 800343e:	e033      	b.n	80034a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800346e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4313      	orrs	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e000      	b.n	80034a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
  }
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b6:	b08f      	sub	sp, #60	; 0x3c
 80034b8:	af0a      	add	r7, sp, #40	; 0x28
 80034ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e116      	b.n	80036f4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f00d fbcd 	bl	8010c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2203      	movs	r2, #3
 80034ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f007 f982 	bl	800a80e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	687e      	ldr	r6, [r7, #4]
 8003512:	466d      	mov	r5, sp
 8003514:	f106 0410 	add.w	r4, r6, #16
 8003518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800351a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800351c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800351e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003520:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003524:	e885 0003 	stmia.w	r5, {r0, r1}
 8003528:	1d33      	adds	r3, r6, #4
 800352a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800352c:	6838      	ldr	r0, [r7, #0]
 800352e:	f007 f895 	bl	800a65c <USB_CoreInit>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0d7      	b.n	80036f4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f007 f970 	bl	800a830 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]
 8003554:	e04a      	b.n	80035ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	333d      	adds	r3, #61	; 0x3d
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	333c      	adds	r3, #60	; 0x3c
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	b298      	uxth	r0, r3
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3342      	adds	r3, #66	; 0x42
 8003592:	4602      	mov	r2, r0
 8003594:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003596:	7bfa      	ldrb	r2, [r7, #15]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	333f      	adds	r3, #63	; 0x3f
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3344      	adds	r3, #68	; 0x44
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	3348      	adds	r3, #72	; 0x48
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3350      	adds	r3, #80	; 0x50
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	3301      	adds	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d3af      	bcc.n	8003556 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]
 80035fa:	e044      	b.n	8003686 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035fc:	7bfa      	ldrb	r2, [r7, #15]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003624:	7bfa      	ldrb	r2, [r7, #15]
 8003626:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003654:	7bfa      	ldrb	r2, [r7, #15]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800366a:	7bfa      	ldrb	r2, [r7, #15]
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	3301      	adds	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d3b5      	bcc.n	80035fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	687e      	ldr	r6, [r7, #4]
 8003698:	466d      	mov	r5, sp
 800369a:	f106 0410 	add.w	r4, r6, #16
 800369e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ae:	1d33      	adds	r3, r6, #4
 80036b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b2:	6838      	ldr	r0, [r7, #0]
 80036b4:	f007 f8e6 	bl	800a884 <USB_DevInit>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e014      	b.n	80036f4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d102      	bne.n	80036e8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 ff62 	bl	80045ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f008 f868 	bl	800b7c2 <USB_DevDisconnect>

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_PCD_Start+0x1c>
 8003714:	2302      	movs	r3, #2
 8003716:	e01c      	b.n	8003752 <HAL_PCD_Start+0x56>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f007 f857 	bl	800a7ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f008 f81c 	bl	800b780 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800375a:	b590      	push	{r4, r7, lr}
 800375c:	b08d      	sub	sp, #52	; 0x34
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f008 f8da 	bl	800b92a <USB_GetMode>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 838f 	bne.w	8003e9c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f008 f83e 	bl	800b804 <USB_ReadInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8385 	beq.w	8003e9a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f008 f835 	bl	800b804 <USB_ReadInterrupts>
 800379a:	4603      	mov	r3, r0
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d107      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f002 0202 	and.w	r2, r2, #2
 80037b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f008 f823 	bl	800b804 <USB_ReadInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d161      	bne.n	800388c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0210 	bic.w	r2, r2, #16
 80037d6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	f003 020f 	and.w	r2, r3, #15
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	3304      	adds	r3, #4
 80037f6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	0c5b      	lsrs	r3, r3, #17
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	2b02      	cmp	r3, #2
 8003802:	d124      	bne.n	800384e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d035      	beq.n	800387c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800381a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800381e:	b29b      	uxth	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	6a38      	ldr	r0, [r7, #32]
 8003824:	f007 fe89 	bl	800b53a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003834:	441a      	add	r2, r3
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003846:	441a      	add	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	619a      	str	r2, [r3, #24]
 800384c:	e016      	b.n	800387c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	0c5b      	lsrs	r3, r3, #17
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	2b06      	cmp	r3, #6
 8003858:	d110      	bne.n	800387c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003860:	2208      	movs	r2, #8
 8003862:	4619      	mov	r1, r3
 8003864:	6a38      	ldr	r0, [r7, #32]
 8003866:	f007 fe68 	bl	800b53a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003876:	441a      	add	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0210 	orr.w	r2, r2, #16
 800388a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f007 ffb7 	bl	800b804 <USB_ReadInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800389c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038a0:	d16e      	bne.n	8003980 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f007 ffbd 	bl	800b82a <USB_ReadDevAllOutEpInterrupt>
 80038b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80038b2:	e062      	b.n	800397a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80038b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d057      	beq.n	800396e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f007 ffe2 	bl	800b892 <USB_ReadDevOutEPInterrupt>
 80038ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e6:	461a      	mov	r2, r3
 80038e8:	2301      	movs	r3, #1
 80038ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fd82 	bl	80043f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	461a      	mov	r2, r3
 800390c:	2308      	movs	r3, #8
 800390e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fdbe 	bl	8004494 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392e:	461a      	mov	r2, r3
 8003930:	2310      	movs	r3, #16
 8003932:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394a:	461a      	mov	r2, r3
 800394c:	2320      	movs	r3, #32
 800394e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003966:	461a      	mov	r2, r3
 8003968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800396c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	3301      	adds	r3, #1
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	085b      	lsrs	r3, r3, #1
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d199      	bne.n	80038b4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f007 ff3d 	bl	800b804 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003990:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003994:	f040 8087 	bne.w	8003aa6 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f007 ff5e 	bl	800b85e <USB_ReadDevAllInEpInterrupt>
 80039a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80039a8:	e07a      	b.n	8003aa0 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d06f      	beq.n	8003a94 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f007 ff85 	bl	800b8ce <USB_ReadDevInEPInterrupt>
 80039c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	2201      	movs	r2, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69f9      	ldr	r1, [r7, #28]
 80039ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039f0:	4013      	ands	r3, r2
 80039f2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a00:	461a      	mov	r2, r3
 8003a02:	2301      	movs	r3, #1
 8003a04:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f00d f9ca 	bl	8010da6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a44:	461a      	mov	r2, r3
 8003a46:	2310      	movs	r3, #16
 8003a48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a60:	461a      	mov	r2, r3
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2302      	movs	r3, #2
 8003a80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fc29 	bl	80042e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	3301      	adds	r3, #1
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d181      	bne.n	80039aa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f007 feaa 	bl	800b804 <USB_ReadInterrupts>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aba:	d122      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d108      	bne.n	8003aec <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f00d fc75 	bl	80113d4 <HAL_PCDEx_LPM_Callback>
 8003aea:	e002      	b.n	8003af2 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f00d f9c7 	bl	8010e80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f007 fe7c 	bl	800b804 <USB_ReadInterrupts>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b16:	d112      	bne.n	8003b3e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f00d f983 	bl	8010e34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f007 fe5e 	bl	800b804 <USB_ReadInterrupts>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b52:	d121      	bne.n	8003b98 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003b62:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d111      	bne.n	8003b92 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	f003 020f 	and.w	r2, r3, #15
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b88:	2101      	movs	r1, #1
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f00d fc22 	bl	80113d4 <HAL_PCDEx_LPM_Callback>
 8003b90:	e002      	b.n	8003b98 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f00d f94e 	bl	8010e34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f007 fe31 	bl	800b804 <USB_ReadInterrupts>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bac:	f040 80c5 	bne.w	8003d3a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2110      	movs	r1, #16
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f006 ffa6 	bl	800ab1c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd4:	e056      	b.n	8003c84 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be2:	461a      	mov	r2, r3
 8003be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003be8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfa:	0151      	lsls	r1, r2, #5
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	440a      	add	r2, r1
 8003c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c08:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c1a:	0151      	lsls	r1, r2, #5
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	440a      	add	r2, r1
 8003c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c36:	461a      	mov	r2, r3
 8003c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	3301      	adds	r3, #1
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3a3      	bcc.n	8003bd6 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ca0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cba:	f043 030b 	orr.w	r3, r3, #11
 8003cbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd0:	f043 030b 	orr.w	r3, r3, #11
 8003cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd6:	e015      	b.n	8003d04 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003cee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cfe:	f043 030b 	orr.w	r3, r3, #11
 8003d02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f007 fe31 	bl	800b98c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f007 fd60 	bl	800b804 <USB_ReadInterrupts>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4e:	d124      	bne.n	8003d9a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f007 fdf6 	bl	800b946 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f006 ff3d 	bl	800abde <USB_GetDevSpeed>
 8003d64:	4603      	mov	r3, r0
 8003d66:	461a      	mov	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681c      	ldr	r4, [r3, #0]
 8003d70:	f001 fb10 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 8003d74:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f006 fc98 	bl	800a6b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f00d f836 	bl	8010df6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f007 fd30 	bl	800b804 <USB_ReadInterrupts>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d10a      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f00d f813 	bl	8010dda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f002 0208 	and.w	r2, r2, #8
 8003dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f007 fd1b 	bl	800b804 <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dd8:	d10f      	bne.n	8003dfa <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f00d f885 	bl	8010ef4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003df8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f007 fd00 	bl	800b804 <USB_ReadInterrupts>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e0e:	d10f      	bne.n	8003e30 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f00d f858 	bl	8010ed0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f007 fce5 	bl	800b804 <USB_ReadInterrupts>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e44:	d10a      	bne.n	8003e5c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f00d f866 	bl	8010f18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f007 fccf 	bl	800b804 <USB_ReadInterrupts>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d115      	bne.n	8003e9c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f00d f856 	bl	8010f34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6859      	ldr	r1, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	e000      	b.n	8003e9c <HAL_PCD_IRQHandler+0x742>
      return;
 8003e9a:	bf00      	nop
    }
  }
}
 8003e9c:	3734      	adds	r7, #52	; 0x34
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd90      	pop	{r4, r7, pc}

08003ea2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_PCD_SetAddress+0x1a>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e013      	b.n	8003ee4 <HAL_PCD_SetAddress+0x42>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f007 fc2d 	bl	800b734 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	70fb      	strb	r3, [r7, #3]
 8003efe:	460b      	mov	r3, r1
 8003f00:	803b      	strh	r3, [r7, #0]
 8003f02:	4613      	mov	r3, r2
 8003f04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	da0f      	bge.n	8003f32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	3338      	adds	r3, #56	; 0x38
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	705a      	strb	r2, [r3, #1]
 8003f30:	e00f      	b.n	8003f52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 020f 	and.w	r2, r3, #15
 8003f38:	4613      	mov	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4413      	add	r3, r2
 8003f48:	3304      	adds	r3, #4
 8003f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f5e:	883a      	ldrh	r2, [r7, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	78ba      	ldrb	r2, [r7, #2]
 8003f68:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	785b      	ldrb	r3, [r3, #1]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d004      	beq.n	8003f7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f7c:	78bb      	ldrb	r3, [r7, #2]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d102      	bne.n	8003f88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_PCD_EP_Open+0xaa>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e00e      	b.n	8003fb4 <HAL_PCD_EP_Open+0xc8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68f9      	ldr	r1, [r7, #12]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f006 fe39 	bl	800ac1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003fb2:	7afb      	ldrb	r3, [r7, #11]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	da0f      	bge.n	8003ff0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	3338      	adds	r3, #56	; 0x38
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	705a      	strb	r2, [r3, #1]
 8003fee:	e00f      	b.n	8004010 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 020f 	and.w	r2, r3, #15
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	3304      	adds	r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_PCD_EP_Close+0x6e>
 8004026:	2302      	movs	r3, #2
 8004028:	e00e      	b.n	8004048 <HAL_PCD_EP_Close+0x8c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68f9      	ldr	r1, [r7, #12]
 8004038:	4618      	mov	r0, r3
 800403a:	f006 fe77 	bl	800ad2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	460b      	mov	r3, r1
 800405e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004060:	7afb      	ldrb	r3, [r7, #11]
 8004062:	f003 020f 	and.w	r2, r3, #15
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	3304      	adds	r3, #4
 8004078:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2200      	movs	r2, #0
 800408a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2200      	movs	r2, #0
 8004090:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004092:	7afb      	ldrb	r3, [r7, #11]
 8004094:	f003 030f 	and.w	r3, r3, #15
 8004098:	b2da      	uxtb	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6979      	ldr	r1, [r7, #20]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f007 f8f4 	bl	800b29c <USB_EP0StartXfer>
 80040b4:	e005      	b.n	80040c2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	4618      	mov	r0, r3
 80040be:	f006 ff11 	bl	800aee4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	460b      	mov	r3, r1
 800410a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800410c:	7afb      	ldrb	r3, [r7, #11]
 800410e:	f003 020f 	and.w	r2, r3, #15
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	3338      	adds	r3, #56	; 0x38
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	3304      	adds	r3, #4
 8004122:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2200      	movs	r2, #0
 8004134:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2201      	movs	r2, #1
 800413a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800413c:	7afb      	ldrb	r3, [r7, #11]
 800413e:	f003 030f 	and.w	r3, r3, #15
 8004142:	b2da      	uxtb	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004148:	7afb      	ldrb	r3, [r7, #11]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6979      	ldr	r1, [r7, #20]
 8004158:	4618      	mov	r0, r3
 800415a:	f007 f89f 	bl	800b29c <USB_EP0StartXfer>
 800415e:	e005      	b.n	800416c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6979      	ldr	r1, [r7, #20]
 8004166:	4618      	mov	r0, r3
 8004168:	f006 febc 	bl	800aee4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	460b      	mov	r3, r1
 8004180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 020f 	and.w	r2, r3, #15
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	d901      	bls.n	8004194 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e04e      	b.n	8004232 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004198:	2b00      	cmp	r3, #0
 800419a:	da0f      	bge.n	80041bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	f003 020f 	and.w	r2, r3, #15
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	3338      	adds	r3, #56	; 0x38
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4413      	add	r3, r2
 80041b0:	3304      	adds	r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	705a      	strb	r2, [r3, #1]
 80041ba:	e00d      	b.n	80041d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	4613      	mov	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	3304      	adds	r3, #4
 80041d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_PCD_EP_SetStall+0x82>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e01c      	b.n	8004232 <HAL_PCD_EP_SetStall+0xbc>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68f9      	ldr	r1, [r7, #12]
 8004206:	4618      	mov	r0, r3
 8004208:	f007 f9c0 	bl	800b58c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	2b00      	cmp	r3, #0
 8004214:	d108      	bne.n	8004228 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f007 fbb2 	bl	800b98c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d901      	bls.n	8004258 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e042      	b.n	80042de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800425c:	2b00      	cmp	r3, #0
 800425e:	da0f      	bge.n	8004280 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	3338      	adds	r3, #56	; 0x38
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	3304      	adds	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	705a      	strb	r2, [r3, #1]
 800427e:	e00f      	b.n	80042a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	f003 020f 	and.w	r2, r3, #15
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	3304      	adds	r3, #4
 8004298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_PCD_EP_ClrStall+0x86>
 80042bc:	2302      	movs	r3, #2
 80042be:	e00e      	b.n	80042de <HAL_PCD_EP_ClrStall+0xa4>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f007 f9ca 	bl	800b668 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b088      	sub	sp, #32
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	3338      	adds	r3, #56	; 0x38
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	3304      	adds	r3, #4
 800430c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	429a      	cmp	r2, r3
 8004318:	d901      	bls.n	800431e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e067      	b.n	80043ee <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	429a      	cmp	r2, r3
 8004332:	d902      	bls.n	800433a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3303      	adds	r3, #3
 800433e:	089b      	lsrs	r3, r3, #2
 8004340:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004342:	e026      	b.n	8004392 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	429a      	cmp	r2, r3
 8004358:	d902      	bls.n	8004360 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	3303      	adds	r3, #3
 8004364:	089b      	lsrs	r3, r3, #2
 8004366:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68d9      	ldr	r1, [r3, #12]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	b29b      	uxth	r3, r3
 8004374:	6978      	ldr	r0, [r7, #20]
 8004376:	f007 f8af 	bl	800b4d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	441a      	add	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	441a      	add	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d809      	bhi.n	80043bc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	699a      	ldr	r2, [r3, #24]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d203      	bcs.n	80043bc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1c3      	bne.n	8004344 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d811      	bhi.n	80043ec <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	2201      	movs	r2, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	6939      	ldr	r1, [r7, #16]
 80043e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e8:	4013      	ands	r3, r2
 80043ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	333c      	adds	r3, #60	; 0x3c
 8004410:	3304      	adds	r3, #4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a19      	ldr	r2, [pc, #100]	; (8004490 <PCD_EP_OutXfrComplete_int+0x98>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d124      	bne.n	8004478 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444a:	6093      	str	r3, [r2, #8]
 800444c:	e01a      	b.n	8004484 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004464:	461a      	mov	r2, r3
 8004466:	2320      	movs	r3, #32
 8004468:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f00c fc7d 	bl	8010d70 <HAL_PCD_DataOutStageCallback>
 8004476:	e005      	b.n	8004484 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f00c fc76 	bl	8010d70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	4f54310a 	.word	0x4f54310a

08004494 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	333c      	adds	r3, #60	; 0x3c
 80044ac:	3304      	adds	r3, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a0c      	ldr	r2, [pc, #48]	; (80044f8 <PCD_EP_OutSetupPacket_int+0x64>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d90e      	bls.n	80044e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f00c fc2f 	bl	8010d4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	4f54300a 	.word	0x4f54300a

080044fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	70fb      	strb	r3, [r7, #3]
 8004508:	4613      	mov	r3, r2
 800450a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d107      	bne.n	800452a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800451a:	883b      	ldrh	r3, [r7, #0]
 800451c:	0419      	lsls	r1, r3, #16
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	430a      	orrs	r2, r1
 8004526:	629a      	str	r2, [r3, #40]	; 0x28
 8004528:	e028      	b.n	800457c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4413      	add	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	e00d      	b.n	800455a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	3340      	adds	r3, #64	; 0x40
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	3301      	adds	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	7bfa      	ldrb	r2, [r7, #15]
 800455c:	78fb      	ldrb	r3, [r7, #3]
 800455e:	3b01      	subs	r3, #1
 8004560:	429a      	cmp	r2, r3
 8004562:	d3ec      	bcc.n	800453e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004564:	883b      	ldrh	r3, [r7, #0]
 8004566:	0418      	lsls	r0, r3, #16
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6819      	ldr	r1, [r3, #0]
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	3b01      	subs	r3, #1
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	4302      	orrs	r2, r0
 8004574:	3340      	adds	r3, #64	; 0x40
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	887a      	ldrh	r2, [r7, #2]
 800459c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045de:	f043 0303 	orr.w	r3, r3, #3
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045f8:	4b05      	ldr	r3, [pc, #20]	; (8004610 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a04      	ldr	r2, [pc, #16]	; (8004610 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004602:	6013      	str	r3, [r2, #0]
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40007000 	.word	0x40007000

08004614 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <HAL_PWREx_GetVoltageRange+0x3c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004624:	d102      	bne.n	800462c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462a:	e00b      	b.n	8004644 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_PWREx_GetVoltageRange+0x3c>)
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463a:	d102      	bne.n	8004642 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800463c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004640:	e000      	b.n	8004644 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004642:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40007000 	.word	0x40007000

08004654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d141      	bne.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004662:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800466a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466e:	d131      	bne.n	80046d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004670:	4b47      	ldr	r3, [pc, #284]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004676:	4a46      	ldr	r2, [pc, #280]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800467c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004680:	4b43      	ldr	r3, [pc, #268]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004688:	4a41      	ldr	r2, [pc, #260]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800468a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800468e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004690:	4b40      	ldr	r3, [pc, #256]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2232      	movs	r2, #50	; 0x32
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	4a3f      	ldr	r2, [pc, #252]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	0c9b      	lsrs	r3, r3, #18
 80046a2:	3301      	adds	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046a6:	e002      	b.n	80046ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ae:	4b38      	ldr	r3, [pc, #224]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ba:	d102      	bne.n	80046c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f2      	bne.n	80046a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046c2:	4b33      	ldr	r3, [pc, #204]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ce:	d158      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e057      	b.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046d4:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046da:	4a2d      	ldr	r2, [pc, #180]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046e4:	e04d      	b.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ec:	d141      	bne.n	8004772 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ee:	4b28      	ldr	r3, [pc, #160]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fa:	d131      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046fc:	4b24      	ldr	r3, [pc, #144]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004702:	4a23      	ldr	r2, [pc, #140]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800470c:	4b20      	ldr	r3, [pc, #128]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004714:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800471a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800471c:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2232      	movs	r2, #50	; 0x32
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	4a1c      	ldr	r2, [pc, #112]	; (8004798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	0c9b      	lsrs	r3, r3, #18
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004732:	e002      	b.n	800473a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3b01      	subs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d102      	bne.n	800474e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f2      	bne.n	8004734 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d112      	bne.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e011      	b.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004770:	e007      	b.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004772:	4b07      	ldr	r3, [pc, #28]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800477a:	4a05      	ldr	r2, [pc, #20]	; (8004790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004780:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40007000 	.word	0x40007000
 8004794:	20000000 	.word	0x20000000
 8004798:	431bde83 	.word	0x431bde83

0800479c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80047a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047aa:	6053      	str	r3, [r2, #4]
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40007000 	.word	0x40007000

080047bc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ca:	6053      	str	r3, [r2, #4]
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40007000 	.word	0x40007000

080047dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f000 bc16 	b.w	800501c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047f0:	4ba0      	ldr	r3, [pc, #640]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047fa:	4b9e      	ldr	r3, [pc, #632]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80e4 	beq.w	80049da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <HAL_RCC_OscConfig+0x4c>
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	f040 808b 	bne.w	8004936 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b01      	cmp	r3, #1
 8004824:	f040 8087 	bne.w	8004936 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004828:	4b92      	ldr	r3, [pc, #584]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_OscConfig+0x64>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e3ed      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1a      	ldr	r2, [r3, #32]
 8004844:	4b8b      	ldr	r3, [pc, #556]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <HAL_RCC_OscConfig+0x7e>
 8004850:	4b88      	ldr	r3, [pc, #544]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004858:	e005      	b.n	8004866 <HAL_RCC_OscConfig+0x8a>
 800485a:	4b86      	ldr	r3, [pc, #536]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 800485c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004866:	4293      	cmp	r3, r2
 8004868:	d223      	bcs.n	80048b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fdfa 	bl	8005468 <RCC_SetFlashLatencyFromMSIRange>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e3ce      	b.n	800501c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800487e:	4b7d      	ldr	r3, [pc, #500]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a7c      	ldr	r2, [pc, #496]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004884:	f043 0308 	orr.w	r3, r3, #8
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	4b7a      	ldr	r3, [pc, #488]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	4977      	ldr	r1, [pc, #476]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800489c:	4b75      	ldr	r3, [pc, #468]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	4972      	ldr	r1, [pc, #456]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
 80048b0:	e025      	b.n	80048fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b2:	4b70      	ldr	r3, [pc, #448]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a6f      	ldr	r2, [pc, #444]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80048b8:	f043 0308 	orr.w	r3, r3, #8
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	4b6d      	ldr	r3, [pc, #436]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	496a      	ldr	r1, [pc, #424]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048d0:	4b68      	ldr	r3, [pc, #416]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	4965      	ldr	r1, [pc, #404]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fdba 	bl	8005468 <RCC_SetFlashLatencyFromMSIRange>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e38e      	b.n	800501c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048fe:	f000 fcbf 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8004902:	4602      	mov	r2, r0
 8004904:	4b5b      	ldr	r3, [pc, #364]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	495a      	ldr	r1, [pc, #360]	; (8004a78 <HAL_RCC_OscConfig+0x29c>)
 8004910:	5ccb      	ldrb	r3, [r1, r3]
 8004912:	f003 031f 	and.w	r3, r3, #31
 8004916:	fa22 f303 	lsr.w	r3, r2, r3
 800491a:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <HAL_RCC_OscConfig+0x2a0>)
 800491c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800491e:	4b58      	ldr	r3, [pc, #352]	; (8004a80 <HAL_RCC_OscConfig+0x2a4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fc fdbe 	bl	80014a4 <HAL_InitTick>
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d052      	beq.n	80049d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	e372      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d032      	beq.n	80049a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800493e:	4b4d      	ldr	r3, [pc, #308]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a4c      	ldr	r2, [pc, #304]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800494a:	f7fc fed1 	bl	80016f0 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004952:	f7fc fecd 	bl	80016f0 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e35b      	b.n	800501c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004964:	4b43      	ldr	r3, [pc, #268]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004970:	4b40      	ldr	r3, [pc, #256]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3f      	ldr	r2, [pc, #252]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004976:	f043 0308 	orr.w	r3, r3, #8
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	4b3d      	ldr	r3, [pc, #244]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	493a      	ldr	r1, [pc, #232]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800498e:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	4935      	ldr	r1, [pc, #212]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	604b      	str	r3, [r1, #4]
 80049a2:	e01a      	b.n	80049da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049a4:	4b33      	ldr	r3, [pc, #204]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a32      	ldr	r2, [pc, #200]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049b0:	f7fc fe9e 	bl	80016f0 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049b8:	f7fc fe9a 	bl	80016f0 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e328      	b.n	800501c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ca:	4b2a      	ldr	r3, [pc, #168]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x1dc>
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d073      	beq.n	8004ace <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_OscConfig+0x21c>
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b0c      	cmp	r3, #12
 80049f0:	d10e      	bne.n	8004a10 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d10b      	bne.n	8004a10 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f8:	4b1e      	ldr	r3, [pc, #120]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d063      	beq.n	8004acc <HAL_RCC_OscConfig+0x2f0>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d15f      	bne.n	8004acc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e305      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a18:	d106      	bne.n	8004a28 <HAL_RCC_OscConfig+0x24c>
 8004a1a:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a15      	ldr	r2, [pc, #84]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e01d      	b.n	8004a64 <HAL_RCC_OscConfig+0x288>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x270>
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a0f      	ldr	r2, [pc, #60]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a0c      	ldr	r2, [pc, #48]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCC_OscConfig+0x288>
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a05      	ldr	r2, [pc, #20]	; (8004a74 <HAL_RCC_OscConfig+0x298>)
 8004a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fc fe40 	bl	80016f0 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a72:	e010      	b.n	8004a96 <HAL_RCC_OscConfig+0x2ba>
 8004a74:	40021000 	.word	0x40021000
 8004a78:	080115c8 	.word	0x080115c8
 8004a7c:	20000000 	.word	0x20000000
 8004a80:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fc fe34 	bl	80016f0 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	; 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e2c2      	b.n	800501c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a96:	4baf      	ldr	r3, [pc, #700]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0x2a8>
 8004aa2:	e014      	b.n	8004ace <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fc fe24 	bl	80016f0 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fc fe20 	bl	80016f0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e2ae      	b.n	800501c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004abe:	4ba5      	ldr	r3, [pc, #660]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x2d0>
 8004aca:	e000      	b.n	8004ace <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d060      	beq.n	8004b9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_OscConfig+0x310>
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b0c      	cmp	r3, #12
 8004ae4:	d119      	bne.n	8004b1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d116      	bne.n	8004b1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aec:	4b99      	ldr	r3, [pc, #612]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_OscConfig+0x328>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e28b      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b04:	4b93      	ldr	r3, [pc, #588]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	061b      	lsls	r3, r3, #24
 8004b12:	4990      	ldr	r1, [pc, #576]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b18:	e040      	b.n	8004b9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d023      	beq.n	8004b6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b22:	4b8c      	ldr	r3, [pc, #560]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a8b      	ldr	r2, [pc, #556]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2e:	f7fc fddf 	bl	80016f0 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b36:	f7fc fddb 	bl	80016f0 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e269      	b.n	800501c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b48:	4b82      	ldr	r3, [pc, #520]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b54:	4b7f      	ldr	r3, [pc, #508]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	497c      	ldr	r1, [pc, #496]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
 8004b68:	e018      	b.n	8004b9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b6a:	4b7a      	ldr	r3, [pc, #488]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a79      	ldr	r2, [pc, #484]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fc fdbb 	bl	80016f0 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b7e:	f7fc fdb7 	bl	80016f0 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e245      	b.n	800501c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b90:	4b70      	ldr	r3, [pc, #448]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f0      	bne.n	8004b7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d03c      	beq.n	8004c22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01c      	beq.n	8004bea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bb0:	4b68      	ldr	r3, [pc, #416]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb6:	4a67      	ldr	r2, [pc, #412]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc0:	f7fc fd96 	bl	80016f0 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bc8:	f7fc fd92 	bl	80016f0 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e220      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bda:	4b5e      	ldr	r3, [pc, #376]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ef      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x3ec>
 8004be8:	e01b      	b.n	8004c22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bea:	4b5a      	ldr	r3, [pc, #360]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf0:	4a58      	ldr	r2, [pc, #352]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bfa:	f7fc fd79 	bl	80016f0 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c02:	f7fc fd75 	bl	80016f0 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e203      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c14:	4b4f      	ldr	r3, [pc, #316]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1ef      	bne.n	8004c02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 80a6 	beq.w	8004d7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c30:	2300      	movs	r3, #0
 8004c32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c34:	4b47      	ldr	r3, [pc, #284]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10d      	bne.n	8004c5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c40:	4b44      	ldr	r3, [pc, #272]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c44:	4a43      	ldr	r2, [pc, #268]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c4c:	4b41      	ldr	r3, [pc, #260]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5c:	4b3e      	ldr	r3, [pc, #248]	; (8004d58 <HAL_RCC_OscConfig+0x57c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d118      	bne.n	8004c9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c68:	4b3b      	ldr	r3, [pc, #236]	; (8004d58 <HAL_RCC_OscConfig+0x57c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3a      	ldr	r2, [pc, #232]	; (8004d58 <HAL_RCC_OscConfig+0x57c>)
 8004c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c74:	f7fc fd3c 	bl	80016f0 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7c:	f7fc fd38 	bl	80016f0 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e1c6      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c8e:	4b32      	ldr	r3, [pc, #200]	; (8004d58 <HAL_RCC_OscConfig+0x57c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d108      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x4d8>
 8004ca2:	4b2c      	ldr	r3, [pc, #176]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	4a2a      	ldr	r2, [pc, #168]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cb2:	e024      	b.n	8004cfe <HAL_RCC_OscConfig+0x522>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b05      	cmp	r3, #5
 8004cba:	d110      	bne.n	8004cde <HAL_RCC_OscConfig+0x502>
 8004cbc:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004cc4:	f043 0304 	orr.w	r3, r3, #4
 8004cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ccc:	4b21      	ldr	r3, [pc, #132]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd2:	4a20      	ldr	r2, [pc, #128]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cdc:	e00f      	b.n	8004cfe <HAL_RCC_OscConfig+0x522>
 8004cde:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004ce6:	f023 0301 	bic.w	r3, r3, #1
 8004cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cee:	4b19      	ldr	r3, [pc, #100]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf4:	4a17      	ldr	r2, [pc, #92]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004cf6:	f023 0304 	bic.w	r3, r3, #4
 8004cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d016      	beq.n	8004d34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fc fcf3 	bl	80016f0 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fc fcef 	bl	80016f0 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e17b      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <HAL_RCC_OscConfig+0x578>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0ed      	beq.n	8004d0e <HAL_RCC_OscConfig+0x532>
 8004d32:	e01a      	b.n	8004d6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d34:	f7fc fcdc 	bl	80016f0 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d3a:	e00f      	b.n	8004d5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3c:	f7fc fcd8 	bl	80016f0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d906      	bls.n	8004d5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e164      	b.n	800501c <HAL_RCC_OscConfig+0x840>
 8004d52:	bf00      	nop
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d5c:	4ba8      	ldr	r3, [pc, #672]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e8      	bne.n	8004d3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d6a:	7ffb      	ldrb	r3, [r7, #31]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d105      	bne.n	8004d7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d70:	4ba3      	ldr	r3, [pc, #652]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d74:	4aa2      	ldr	r2, [pc, #648]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d03c      	beq.n	8004e02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01c      	beq.n	8004dca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d90:	4b9b      	ldr	r3, [pc, #620]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d96:	4a9a      	ldr	r2, [pc, #616]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da0:	f7fc fca6 	bl	80016f0 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004da8:	f7fc fca2 	bl	80016f0 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e130      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dba:	4b91      	ldr	r3, [pc, #580]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0ef      	beq.n	8004da8 <HAL_RCC_OscConfig+0x5cc>
 8004dc8:	e01b      	b.n	8004e02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dca:	4b8d      	ldr	r3, [pc, #564]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dd0:	4a8b      	ldr	r2, [pc, #556]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dda:	f7fc fc89 	bl	80016f0 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004de2:	f7fc fc85 	bl	80016f0 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e113      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004df4:	4b82      	ldr	r3, [pc, #520]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1ef      	bne.n	8004de2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f000 8107 	beq.w	800501a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	f040 80cb 	bne.w	8004fac <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e16:	4b7a      	ldr	r3, [pc, #488]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f003 0203 	and.w	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d12c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	3b01      	subs	r3, #1
 8004e36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d123      	bne.n	8004e84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d11b      	bne.n	8004e84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d113      	bne.n	8004e84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d109      	bne.n	8004e84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d06d      	beq.n	8004f60 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b0c      	cmp	r3, #12
 8004e88:	d068      	beq.n	8004f5c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e8a:	4b5d      	ldr	r3, [pc, #372]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e96:	4b5a      	ldr	r3, [pc, #360]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e0ba      	b.n	800501c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ea6:	4b56      	ldr	r3, [pc, #344]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a55      	ldr	r2, [pc, #340]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eb0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004eb2:	f7fc fc1d 	bl	80016f0 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eba:	f7fc fc19 	bl	80016f0 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0a7      	b.n	800501c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ecc:	4b4c      	ldr	r3, [pc, #304]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f0      	bne.n	8004eba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed8:	4b49      	ldr	r3, [pc, #292]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	4b49      	ldr	r3, [pc, #292]	; (8005004 <HAL_RCC_OscConfig+0x828>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ee8:	3a01      	subs	r2, #1
 8004eea:	0112      	lsls	r2, r2, #4
 8004eec:	4311      	orrs	r1, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ef2:	0212      	lsls	r2, r2, #8
 8004ef4:	4311      	orrs	r1, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004efa:	0852      	lsrs	r2, r2, #1
 8004efc:	3a01      	subs	r2, #1
 8004efe:	0552      	lsls	r2, r2, #21
 8004f00:	4311      	orrs	r1, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f06:	0852      	lsrs	r2, r2, #1
 8004f08:	3a01      	subs	r2, #1
 8004f0a:	0652      	lsls	r2, r2, #25
 8004f0c:	4311      	orrs	r1, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f12:	06d2      	lsls	r2, r2, #27
 8004f14:	430a      	orrs	r2, r1
 8004f16:	493a      	ldr	r1, [pc, #232]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f1c:	4b38      	ldr	r3, [pc, #224]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a37      	ldr	r2, [pc, #220]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f28:	4b35      	ldr	r3, [pc, #212]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a34      	ldr	r2, [pc, #208]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f34:	f7fc fbdc 	bl	80016f0 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3c:	f7fc fbd8 	bl	80016f0 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e066      	b.n	800501c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4e:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f5a:	e05e      	b.n	800501a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e05d      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f60:	4b27      	ldr	r3, [pc, #156]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d156      	bne.n	800501a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b24      	ldr	r3, [pc, #144]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a23      	ldr	r2, [pc, #140]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f78:	4b21      	ldr	r3, [pc, #132]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a20      	ldr	r2, [pc, #128]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f84:	f7fc fbb4 	bl	80016f0 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fc fbb0 	bl	80016f0 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e03e      	b.n	800501c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x7b0>
 8004faa:	e036      	b.n	800501a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d031      	beq.n	8005016 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb2:	4b13      	ldr	r3, [pc, #76]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a12      	ldr	r2, [pc, #72]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004fb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fbc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d105      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	4a0c      	ldr	r2, [pc, #48]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004fd0:	f023 0303 	bic.w	r3, r3, #3
 8004fd4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fd6:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	4a09      	ldr	r2, [pc, #36]	; (8005000 <HAL_RCC_OscConfig+0x824>)
 8004fdc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe6:	f7fc fb83 	bl	80016f0 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fec:	e00c      	b.n	8005008 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fee:	f7fc fb7f 	bl	80016f0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d905      	bls.n	8005008 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e00d      	b.n	800501c <HAL_RCC_OscConfig+0x840>
 8005000:	40021000 	.word	0x40021000
 8005004:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005008:	4b06      	ldr	r3, [pc, #24]	; (8005024 <HAL_RCC_OscConfig+0x848>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1ec      	bne.n	8004fee <HAL_RCC_OscConfig+0x812>
 8005014:	e001      	b.n	800501a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	40021000 	.word	0x40021000

08005028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e10f      	b.n	8005260 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005040:	4b89      	ldr	r3, [pc, #548]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d910      	bls.n	8005070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b86      	ldr	r3, [pc, #536]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 020f 	bic.w	r2, r3, #15
 8005056:	4984      	ldr	r1, [pc, #528]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b82      	ldr	r3, [pc, #520]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0f7      	b.n	8005260 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 8089 	beq.w	8005190 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b03      	cmp	r3, #3
 8005084:	d133      	bne.n	80050ee <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005086:	4b79      	ldr	r3, [pc, #484]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e0e4      	b.n	8005260 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005096:	f000 fa41 	bl	800551c <RCC_GetSysClockFreqFromPLLSource>
 800509a:	4603      	mov	r3, r0
 800509c:	4a74      	ldr	r2, [pc, #464]	; (8005270 <HAL_RCC_ClockConfig+0x248>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d955      	bls.n	800514e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80050a2:	4b72      	ldr	r3, [pc, #456]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10a      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050ae:	4b6f      	ldr	r3, [pc, #444]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b6:	4a6d      	ldr	r2, [pc, #436]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 80050b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050be:	2380      	movs	r3, #128	; 0x80
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e044      	b.n	800514e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d03e      	beq.n	800514e <HAL_RCC_ClockConfig+0x126>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d13a      	bne.n	800514e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050d8:	4b64      	ldr	r3, [pc, #400]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e0:	4a62      	ldr	r2, [pc, #392]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 80050e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	617b      	str	r3, [r7, #20]
 80050ec:	e02f      	b.n	800514e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d107      	bne.n	8005106 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f6:	4b5d      	ldr	r3, [pc, #372]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d115      	bne.n	800512e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e0ac      	b.n	8005260 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d107      	bne.n	800511e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800510e:	4b57      	ldr	r3, [pc, #348]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e0a0      	b.n	8005260 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800511e:	4b53      	ldr	r3, [pc, #332]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e098      	b.n	8005260 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800512e:	f000 f8a7 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8005132:	4603      	mov	r3, r0
 8005134:	4a4e      	ldr	r2, [pc, #312]	; (8005270 <HAL_RCC_ClockConfig+0x248>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d909      	bls.n	800514e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800513a:	4b4c      	ldr	r3, [pc, #304]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005142:	4a4a      	ldr	r2, [pc, #296]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 8005144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005148:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800514e:	4b47      	ldr	r3, [pc, #284]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f023 0203 	bic.w	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	4944      	ldr	r1, [pc, #272]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 800515c:	4313      	orrs	r3, r2
 800515e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005160:	f7fc fac6 	bl	80016f0 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	e00a      	b.n	800517e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005168:	f7fc fac2 	bl	80016f0 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e070      	b.n	8005260 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517e:	4b3b      	ldr	r3, [pc, #236]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 020c 	and.w	r2, r3, #12
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	429a      	cmp	r2, r3
 800518e:	d1eb      	bne.n	8005168 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800519c:	4b33      	ldr	r3, [pc, #204]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4930      	ldr	r1, [pc, #192]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	608b      	str	r3, [r1, #8]
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d105      	bne.n	80051c2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051b6:	4b2d      	ldr	r3, [pc, #180]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	4a2c      	ldr	r2, [pc, #176]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 80051bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051c2:	4b29      	ldr	r3, [pc, #164]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d210      	bcs.n	80051f2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d0:	4b25      	ldr	r3, [pc, #148]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f023 020f 	bic.w	r2, r3, #15
 80051d8:	4923      	ldr	r1, [pc, #140]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	4313      	orrs	r3, r2
 80051de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e0:	4b21      	ldr	r3, [pc, #132]	; (8005268 <HAL_RCC_ClockConfig+0x240>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d001      	beq.n	80051f2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e036      	b.n	8005260 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0304 	and.w	r3, r3, #4
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051fe:	4b1b      	ldr	r3, [pc, #108]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	4918      	ldr	r1, [pc, #96]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 800520c:	4313      	orrs	r3, r2
 800520e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4910      	ldr	r1, [pc, #64]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 800522c:	4313      	orrs	r3, r2
 800522e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005230:	f000 f826 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8005234:	4602      	mov	r2, r0
 8005236:	4b0d      	ldr	r3, [pc, #52]	; (800526c <HAL_RCC_ClockConfig+0x244>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	091b      	lsrs	r3, r3, #4
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	490c      	ldr	r1, [pc, #48]	; (8005274 <HAL_RCC_ClockConfig+0x24c>)
 8005242:	5ccb      	ldrb	r3, [r1, r3]
 8005244:	f003 031f 	and.w	r3, r3, #31
 8005248:	fa22 f303 	lsr.w	r3, r2, r3
 800524c:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <HAL_RCC_ClockConfig+0x250>)
 800524e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <HAL_RCC_ClockConfig+0x254>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f7fc f925 	bl	80014a4 <HAL_InitTick>
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]

  return status;
 800525e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40022000 	.word	0x40022000
 800526c:	40021000 	.word	0x40021000
 8005270:	04c4b400 	.word	0x04c4b400
 8005274:	080115c8 	.word	0x080115c8
 8005278:	20000000 	.word	0x20000000
 800527c:	20000004 	.word	0x20000004

08005280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005280:	b480      	push	{r7}
 8005282:	b089      	sub	sp, #36	; 0x24
 8005284:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	2300      	movs	r3, #0
 800528c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528e:	4b3e      	ldr	r3, [pc, #248]	; (8005388 <HAL_RCC_GetSysClockFreq+0x108>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
 8005296:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005298:	4b3b      	ldr	r3, [pc, #236]	; (8005388 <HAL_RCC_GetSysClockFreq+0x108>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x34>
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b0c      	cmp	r3, #12
 80052ac:	d121      	bne.n	80052f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d11e      	bne.n	80052f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052b4:	4b34      	ldr	r3, [pc, #208]	; (8005388 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052c0:	4b31      	ldr	r3, [pc, #196]	; (8005388 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	e005      	b.n	80052dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052d0:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052dc:	4a2b      	ldr	r2, [pc, #172]	; (800538c <HAL_RCC_GetSysClockFreq+0x10c>)
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10d      	bne.n	8005308 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d102      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052f8:	4b25      	ldr	r3, [pc, #148]	; (8005390 <HAL_RCC_GetSysClockFreq+0x110>)
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	e004      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d101      	bne.n	8005308 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005304:	4b22      	ldr	r3, [pc, #136]	; (8005390 <HAL_RCC_GetSysClockFreq+0x110>)
 8005306:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	2b0c      	cmp	r3, #12
 800530c:	d134      	bne.n	8005378 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800530e:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_RCC_GetSysClockFreq+0x108>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d003      	beq.n	8005326 <HAL_RCC_GetSysClockFreq+0xa6>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b03      	cmp	r3, #3
 8005322:	d003      	beq.n	800532c <HAL_RCC_GetSysClockFreq+0xac>
 8005324:	e005      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <HAL_RCC_GetSysClockFreq+0x110>)
 8005328:	617b      	str	r3, [r7, #20]
      break;
 800532a:	e005      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800532c:	4b18      	ldr	r3, [pc, #96]	; (8005390 <HAL_RCC_GetSysClockFreq+0x110>)
 800532e:	617b      	str	r3, [r7, #20]
      break;
 8005330:	e002      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	617b      	str	r3, [r7, #20]
      break;
 8005336:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005338:	4b13      	ldr	r3, [pc, #76]	; (8005388 <HAL_RCC_GetSysClockFreq+0x108>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	3301      	adds	r3, #1
 8005344:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCC_GetSysClockFreq+0x108>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	fb02 f203 	mul.w	r2, r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	fbb2 f3f3 	udiv	r3, r2, r3
 800535c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800535e:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <HAL_RCC_GetSysClockFreq+0x108>)
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	0e5b      	lsrs	r3, r3, #25
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	3301      	adds	r3, #1
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005378:	69bb      	ldr	r3, [r7, #24]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3724      	adds	r7, #36	; 0x24
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	080115e0 	.word	0x080115e0
 8005390:	00f42400 	.word	0x00f42400

08005394 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800539a:	681b      	ldr	r3, [r3, #0]
}
 800539c:	4618      	mov	r0, r3
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000000 	.word	0x20000000

080053ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053b0:	f7ff fff0 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 80053b4:	4602      	mov	r2, r0
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	0a1b      	lsrs	r3, r3, #8
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	4904      	ldr	r1, [pc, #16]	; (80053d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053c2:	5ccb      	ldrb	r3, [r1, r3]
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40021000 	.word	0x40021000
 80053d4:	080115d8 	.word	0x080115d8

080053d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053dc:	f7ff ffda 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 80053e0:	4602      	mov	r2, r0
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	0adb      	lsrs	r3, r3, #11
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	4904      	ldr	r1, [pc, #16]	; (8005400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ee:	5ccb      	ldrb	r3, [r1, r3]
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40021000 	.word	0x40021000
 8005400:	080115d8 	.word	0x080115d8

08005404 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	220f      	movs	r2, #15
 8005412:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005414:	4b12      	ldr	r3, [pc, #72]	; (8005460 <HAL_RCC_GetClockConfig+0x5c>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0203 	and.w	r2, r3, #3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005420:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <HAL_RCC_GetClockConfig+0x5c>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <HAL_RCC_GetClockConfig+0x5c>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <HAL_RCC_GetClockConfig+0x5c>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	08db      	lsrs	r3, r3, #3
 800543e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005446:	4b07      	ldr	r3, [pc, #28]	; (8005464 <HAL_RCC_GetClockConfig+0x60>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 020f 	and.w	r2, r3, #15
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	601a      	str	r2, [r3, #0]
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40021000 	.word	0x40021000
 8005464:	40022000 	.word	0x40022000

08005468 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005474:	4b27      	ldr	r3, [pc, #156]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005480:	f7ff f8c8 	bl	8004614 <HAL_PWREx_GetVoltageRange>
 8005484:	6178      	str	r0, [r7, #20]
 8005486:	e014      	b.n	80054b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005488:	4b22      	ldr	r3, [pc, #136]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	4a21      	ldr	r2, [pc, #132]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	6593      	str	r3, [r2, #88]	; 0x58
 8005494:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054a0:	f7ff f8b8 	bl	8004614 <HAL_PWREx_GetVoltageRange>
 80054a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054a6:	4b1b      	ldr	r3, [pc, #108]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054aa:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b8:	d10b      	bne.n	80054d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d913      	bls.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2ba0      	cmp	r3, #160	; 0xa0
 80054c4:	d902      	bls.n	80054cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054c6:	2302      	movs	r3, #2
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	e00d      	b.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054cc:	2301      	movs	r3, #1
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	e00a      	b.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b7f      	cmp	r3, #127	; 0x7f
 80054d6:	d902      	bls.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80054d8:	2302      	movs	r3, #2
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	e004      	b.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b70      	cmp	r3, #112	; 0x70
 80054e2:	d101      	bne.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054e4:	2301      	movs	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f023 020f 	bic.w	r2, r3, #15
 80054f0:	4909      	ldr	r1, [pc, #36]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	429a      	cmp	r2, r3
 8005504:	d001      	beq.n	800550a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	40022000 	.word	0x40022000

0800551c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005526:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b01      	cmp	r3, #1
 8005530:	d118      	bne.n	8005564 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005532:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d107      	bne.n	800554e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800553e:	4b27      	ldr	r3, [pc, #156]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	e005      	b.n	800555a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800554e:	4b23      	ldr	r3, [pc, #140]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	091b      	lsrs	r3, r3, #4
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800555a:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005562:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d003      	beq.n	800557c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b03      	cmp	r3, #3
 8005578:	d003      	beq.n	8005582 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800557a:	e005      	b.n	8005588 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800557c:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800557e:	613b      	str	r3, [r7, #16]
    break;
 8005580:	e005      	b.n	800558e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005582:	4b18      	ldr	r3, [pc, #96]	; (80055e4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005584:	613b      	str	r3, [r7, #16]
    break;
 8005586:	e002      	b.n	800558e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	613b      	str	r3, [r7, #16]
    break;
 800558c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800558e:	4b13      	ldr	r3, [pc, #76]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	091b      	lsrs	r3, r3, #4
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	3301      	adds	r3, #1
 800559a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800559c:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	0a1b      	lsrs	r3, r3, #8
 80055a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	fb02 f203 	mul.w	r2, r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055b4:	4b09      	ldr	r3, [pc, #36]	; (80055dc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	0e5b      	lsrs	r3, r3, #25
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	3301      	adds	r3, #1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80055ce:	683b      	ldr	r3, [r7, #0]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40021000 	.word	0x40021000
 80055e0:	080115e0 	.word	0x080115e0
 80055e4:	00f42400 	.word	0x00f42400

080055e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055f0:	2300      	movs	r3, #0
 80055f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055f4:	2300      	movs	r3, #0
 80055f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005600:	2b00      	cmp	r3, #0
 8005602:	d040      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005608:	2b80      	cmp	r3, #128	; 0x80
 800560a:	d02a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800560c:	2b80      	cmp	r3, #128	; 0x80
 800560e:	d825      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005610:	2b60      	cmp	r3, #96	; 0x60
 8005612:	d026      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005614:	2b60      	cmp	r3, #96	; 0x60
 8005616:	d821      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d006      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d81d      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d009      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005624:	2b20      	cmp	r3, #32
 8005626:	d010      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005628:	e018      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800562a:	4b89      	ldr	r3, [pc, #548]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	4a88      	ldr	r2, [pc, #544]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005634:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005636:	e015      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3304      	adds	r3, #4
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f001 fa7e 	bl	8006b40 <RCCEx_PLLSAI1_Config>
 8005644:	4603      	mov	r3, r0
 8005646:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005648:	e00c      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3320      	adds	r3, #32
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f001 fb69 	bl	8006d28 <RCCEx_PLLSAI2_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	74fb      	strb	r3, [r7, #19]
      break;
 8005660:	e000      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800566a:	4b79      	ldr	r3, [pc, #484]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800566c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005670:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005678:	4975      	ldr	r1, [pc, #468]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005680:	e001      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005682:	7cfb      	ldrb	r3, [r7, #19]
 8005684:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d047      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569a:	d030      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 800569c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a0:	d82a      	bhi.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056a6:	d02a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ac:	d824      	bhi.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b2:	d008      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80056b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b8:	d81e      	bhi.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80056be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c2:	d010      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80056c4:	e018      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056c6:	4b62      	ldr	r3, [pc, #392]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	4a61      	ldr	r2, [pc, #388]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056d2:	e015      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3304      	adds	r3, #4
 80056d8:	2100      	movs	r1, #0
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 fa30 	bl	8006b40 <RCCEx_PLLSAI1_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056e4:	e00c      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3320      	adds	r3, #32
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fb1b 	bl	8006d28 <RCCEx_PLLSAI2_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056f6:	e003      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	74fb      	strb	r3, [r7, #19]
      break;
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80056fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005700:	7cfb      	ldrb	r3, [r7, #19]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005706:	4b52      	ldr	r3, [pc, #328]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005708:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800570c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	494e      	ldr	r1, [pc, #312]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800571c:	e001      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 809f 	beq.w	800586e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005730:	2300      	movs	r3, #0
 8005732:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005734:	4b46      	ldr	r3, [pc, #280]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005744:	2300      	movs	r3, #0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00d      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800574a:	4b41      	ldr	r3, [pc, #260]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574e:	4a40      	ldr	r2, [pc, #256]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005754:	6593      	str	r3, [r2, #88]	; 0x58
 8005756:	4b3e      	ldr	r3, [pc, #248]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005762:	2301      	movs	r3, #1
 8005764:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005766:	4b3b      	ldr	r3, [pc, #236]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3a      	ldr	r2, [pc, #232]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800576c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005770:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005772:	f7fb ffbd 	bl	80016f0 <HAL_GetTick>
 8005776:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005778:	e009      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800577a:	f7fb ffb9 	bl	80016f0 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d902      	bls.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	74fb      	strb	r3, [r7, #19]
        break;
 800578c:	e005      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0ef      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d15b      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057a0:	4b2b      	ldr	r3, [pc, #172]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057aa:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01f      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d019      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057be:	4b24      	ldr	r3, [pc, #144]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057ca:	4b21      	ldr	r3, [pc, #132]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057da:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057ea:	4a19      	ldr	r2, [pc, #100]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d016      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fc:	f7fb ff78 	bl	80016f0 <HAL_GetTick>
 8005800:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005802:	e00b      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005804:	f7fb ff74 	bl	80016f0 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005812:	4293      	cmp	r3, r2
 8005814:	d902      	bls.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	74fb      	strb	r3, [r7, #19]
            break;
 800581a:	e006      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800581c:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0ec      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10c      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005836:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005840:	4903      	ldr	r1, [pc, #12]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005848:	e008      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	74bb      	strb	r3, [r7, #18]
 800584e:	e005      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005850:	40021000 	.word	0x40021000
 8005854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800585c:	7c7b      	ldrb	r3, [r7, #17]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d105      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005862:	4ba0      	ldr	r3, [pc, #640]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005866:	4a9f      	ldr	r2, [pc, #636]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800587a:	4b9a      	ldr	r3, [pc, #616]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005880:	f023 0203 	bic.w	r2, r3, #3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005888:	4996      	ldr	r1, [pc, #600]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800589c:	4b91      	ldr	r3, [pc, #580]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	f023 020c 	bic.w	r2, r3, #12
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	498e      	ldr	r1, [pc, #568]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058be:	4b89      	ldr	r3, [pc, #548]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058cc:	4985      	ldr	r1, [pc, #532]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058e0:	4b80      	ldr	r3, [pc, #512]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ee:	497d      	ldr	r1, [pc, #500]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005902:	4b78      	ldr	r3, [pc, #480]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005910:	4974      	ldr	r1, [pc, #464]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005924:	4b6f      	ldr	r3, [pc, #444]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005932:	496c      	ldr	r1, [pc, #432]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005946:	4b67      	ldr	r3, [pc, #412]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005954:	4963      	ldr	r1, [pc, #396]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005968:	4b5e      	ldr	r3, [pc, #376]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005976:	495b      	ldr	r1, [pc, #364]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800598a:	4b56      	ldr	r3, [pc, #344]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	4952      	ldr	r1, [pc, #328]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059ac:	4b4d      	ldr	r3, [pc, #308]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	494a      	ldr	r1, [pc, #296]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059ce:	4b45      	ldr	r3, [pc, #276]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059dc:	4941      	ldr	r1, [pc, #260]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059f0:	4b3c      	ldr	r3, [pc, #240]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059f6:	f023 0203 	bic.w	r2, r3, #3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fe:	4939      	ldr	r1, [pc, #228]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d028      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a12:	4b34      	ldr	r3, [pc, #208]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a20:	4930      	ldr	r1, [pc, #192]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a30:	d106      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a32:	4b2c      	ldr	r3, [pc, #176]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a3c:	60d3      	str	r3, [r2, #12]
 8005a3e:	e011      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 f875 	bl	8006b40 <RCCEx_PLLSAI1_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d04d      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a78:	d108      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005a7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a80:	4a18      	ldr	r2, [pc, #96]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a8a:	e012      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005a8c:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a92:	4a14      	ldr	r2, [pc, #80]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a9c:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aaa:	490e      	ldr	r1, [pc, #56]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aba:	d106      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005abc:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4a08      	ldr	r2, [pc, #32]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ac6:	60d3      	str	r3, [r2, #12]
 8005ac8:	e020      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ad2:	d109      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ad4:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4a02      	ldr	r2, [pc, #8]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ade:	60d3      	str	r3, [r2, #12]
 8005ae0:	e014      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ae2:	bf00      	nop
 8005ae4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3304      	adds	r3, #4
 8005af6:	2101      	movs	r1, #1
 8005af8:	4618      	mov	r0, r3
 8005afa:	f001 f821 	bl	8006b40 <RCCEx_PLLSAI1_Config>
 8005afe:	4603      	mov	r3, r0
 8005b00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b02:	7cfb      	ldrb	r3, [r7, #19]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d028      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b18:	4b7a      	ldr	r3, [pc, #488]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b26:	4977      	ldr	r1, [pc, #476]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b36:	d106      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b38:	4b72      	ldr	r3, [pc, #456]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	4a71      	ldr	r2, [pc, #452]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b42:	60d3      	str	r3, [r2, #12]
 8005b44:	e011      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b4e:	d10c      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3304      	adds	r3, #4
 8005b54:	2101      	movs	r1, #1
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fff2 	bl	8006b40 <RCCEx_PLLSAI1_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b60:	7cfb      	ldrb	r3, [r7, #19]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005b66:	7cfb      	ldrb	r3, [r7, #19]
 8005b68:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01e      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b76:	4b63      	ldr	r3, [pc, #396]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b86:	495f      	ldr	r1, [pc, #380]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b98:	d10c      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 ffcd 	bl	8006b40 <RCCEx_PLLSAI1_Config>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005bb0:	7cfb      	ldrb	r3, [r7, #19]
 8005bb2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bc0:	4b50      	ldr	r3, [pc, #320]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bc6:	f023 0204 	bic.w	r2, r3, #4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd0:	494c      	ldr	r1, [pc, #304]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00b      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005be4:	4b47      	ldr	r3, [pc, #284]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bea:	f023 0218 	bic.w	r2, r3, #24
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf4:	4943      	ldr	r1, [pc, #268]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d035      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005c08:	4b3e      	ldr	r3, [pc, #248]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a3d      	ldr	r2, [pc, #244]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c14:	f7fb fd6c 	bl	80016f0 <HAL_GetTick>
 8005c18:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c1a:	e009      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c1c:	f7fb fd68 	bl	80016f0 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d902      	bls.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	74fb      	strb	r3, [r7, #19]
        break;
 8005c2e:	e005      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005c30:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1ef      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005c3c:	7cfb      	ldrb	r3, [r7, #19]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d113      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005c42:	4b30      	ldr	r3, [pc, #192]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c52:	492c      	ldr	r1, [pc, #176]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3320      	adds	r3, #32
 8005c5e:	2102      	movs	r1, #2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f001 f861 	bl	8006d28 <RCCEx_PLLSAI2_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005c6a:	7cfb      	ldrb	r3, [r7, #19]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01e      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005c80:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c90:	491c      	ldr	r1, [pc, #112]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca2:	d10c      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3320      	adds	r3, #32
 8005ca8:	2101      	movs	r1, #1
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 f83c 	bl	8006d28 <RCCEx_PLLSAI2_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cb4:	7cfb      	ldrb	r3, [r7, #19]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005cba:	7cfb      	ldrb	r3, [r7, #19]
 8005cbc:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d017      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ccc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cda:	490a      	ldr	r1, [pc, #40]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cec:	d105      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cee:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cf8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005cfa:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40021000 	.word	0x40021000

08005d08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d1a:	d13e      	bne.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d1c:	4bbd      	ldr	r3, [pc, #756]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d2e:	d028      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d36:	f200 86ec 	bhi.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d40:	d005      	beq.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d48:	d00e      	beq.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005d4a:	f000 bee2 	b.w	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d4e:	4bb1      	ldr	r3, [pc, #708]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	f040 86e3 	bne.w	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
        frequency = LSE_VALUE;
 8005d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d62:	61fb      	str	r3, [r7, #28]
      break;
 8005d64:	f000 bede 	b.w	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005d68:	4baa      	ldr	r3, [pc, #680]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	f040 86d8 	bne.w	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
          frequency = LSI_VALUE;
 8005d78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d7c:	61fb      	str	r3, [r7, #28]
      break;
 8005d7e:	f000 bed3 	b.w	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d82:	4ba4      	ldr	r3, [pc, #656]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d8e:	f040 86cd 	bne.w	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
        frequency = HSE_VALUE / 32U;
 8005d92:	4ba1      	ldr	r3, [pc, #644]	; (8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8005d94:	61fb      	str	r3, [r7, #28]
      break;
 8005d96:	f000 bec9 	b.w	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d9a:	4b9e      	ldr	r3, [pc, #632]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d036      	beq.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d840      	bhi.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d003      	beq.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d020      	beq.n	8005dfe <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005dbc:	e039      	b.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005dbe:	4b95      	ldr	r3, [pc, #596]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d116      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005dca:	4b92      	ldr	r3, [pc, #584]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005dd6:	4b8f      	ldr	r3, [pc, #572]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	091b      	lsrs	r3, r3, #4
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	e005      	b.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005de2:	4b8c      	ldr	r3, [pc, #560]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	4a8b      	ldr	r2, [pc, #556]	; (800601c <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8005df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005df6:	e01f      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	61bb      	str	r3, [r7, #24]
      break;
 8005dfc:	e01c      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005dfe:	4b85      	ldr	r3, [pc, #532]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0a:	d102      	bne.n	8005e12 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005e0c:	4b84      	ldr	r3, [pc, #528]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8005e0e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e10:	e012      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
      break;
 8005e16:	e00f      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e18:	4b7e      	ldr	r3, [pc, #504]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e24:	d102      	bne.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005e26:	4b7e      	ldr	r3, [pc, #504]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8005e28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005e2a:	e005      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61bb      	str	r3, [r7, #24]
      break;
 8005e30:	e002      	b.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	61bb      	str	r3, [r7, #24]
      break;
 8005e36:	bf00      	nop
    }

    switch(PeriphClk)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e3e:	f000 85fe 	beq.w	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e48:	f200 8672 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e52:	f000 8466 	beq.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e5c:	f200 8668 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e66:	f000 852d 	beq.w	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e70:	f200 865e 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e7a:	f000 8183 	beq.w	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e84:	f200 8654 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e8e:	f000 80c9 	beq.w	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e98:	f200 864a 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea2:	f000 842d 	beq.w	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eac:	f200 8640 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eb6:	f000 83e1 	beq.w	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec0:	f200 8636 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eca:	f000 80ab 	beq.w	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed4:	f200 862c 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ede:	f000 8091 	beq.w	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee8:	f200 8622 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef2:	d07f      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efa:	f200 8619 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f04:	f000 8551 	beq.w	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0e:	f200 860f 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f18:	f000 84fd 	beq.w	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f22:	f200 8605 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f2c:	f000 849e 	beq.w	800686c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f36:	f200 85fb 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	f000 8463 	beq.w	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	f200 85f3 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d84b      	bhi.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 85ec 	beq.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	2b1f      	cmp	r3, #31
 8005f5e:	f200 85e7 	bhi.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08006377 	.word	0x08006377
 8005f6c:	080063e7 	.word	0x080063e7
 8005f70:	08006b31 	.word	0x08006b31
 8005f74:	0800647b 	.word	0x0800647b
 8005f78:	08006b31 	.word	0x08006b31
 8005f7c:	08006b31 	.word	0x08006b31
 8005f80:	08006b31 	.word	0x08006b31
 8005f84:	080064f3 	.word	0x080064f3
 8005f88:	08006b31 	.word	0x08006b31
 8005f8c:	08006b31 	.word	0x08006b31
 8005f90:	08006b31 	.word	0x08006b31
 8005f94:	08006b31 	.word	0x08006b31
 8005f98:	08006b31 	.word	0x08006b31
 8005f9c:	08006b31 	.word	0x08006b31
 8005fa0:	08006b31 	.word	0x08006b31
 8005fa4:	0800656b 	.word	0x0800656b
 8005fa8:	08006b31 	.word	0x08006b31
 8005fac:	08006b31 	.word	0x08006b31
 8005fb0:	08006b31 	.word	0x08006b31
 8005fb4:	08006b31 	.word	0x08006b31
 8005fb8:	08006b31 	.word	0x08006b31
 8005fbc:	08006b31 	.word	0x08006b31
 8005fc0:	08006b31 	.word	0x08006b31
 8005fc4:	08006b31 	.word	0x08006b31
 8005fc8:	08006b31 	.word	0x08006b31
 8005fcc:	08006b31 	.word	0x08006b31
 8005fd0:	08006b31 	.word	0x08006b31
 8005fd4:	08006b31 	.word	0x08006b31
 8005fd8:	08006b31 	.word	0x08006b31
 8005fdc:	08006b31 	.word	0x08006b31
 8005fe0:	08006b31 	.word	0x08006b31
 8005fe4:	080065fb 	.word	0x080065fb
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	f000 83e0 	beq.w	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005ff0:	f000 bd9e 	b.w	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005ff4:	69b9      	ldr	r1, [r7, #24]
 8005ff6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005ffa:	f000 ff89 	bl	8006f10 <RCCEx_GetSAIxPeriphCLKFreq>
 8005ffe:	61f8      	str	r0, [r7, #28]
      break;
 8006000:	f000 bd99 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006004:	69b9      	ldr	r1, [r7, #24]
 8006006:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800600a:	f000 ff81 	bl	8006f10 <RCCEx_GetSAIxPeriphCLKFreq>
 800600e:	61f8      	str	r0, [r7, #28]
      break;
 8006010:	f000 bd91 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006014:	40021000 	.word	0x40021000
 8006018:	0007a120 	.word	0x0007a120
 800601c:	080115e0 	.word	0x080115e0
 8006020:	00f42400 	.word	0x00f42400
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006024:	4bb0      	ldr	r3, [pc, #704]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006036:	d015      	beq.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800603e:	f200 8092 	bhi.w	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006048:	d029      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006050:	f200 8089 	bhi.w	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d07b      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006060:	d04a      	beq.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
          break;
 8006062:	e080      	b.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006064:	4ba0      	ldr	r3, [pc, #640]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b02      	cmp	r3, #2
 800606e:	d17d      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006070:	4b9d      	ldr	r3, [pc, #628]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0308 	and.w	r3, r3, #8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 800607c:	4b9a      	ldr	r3, [pc, #616]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	091b      	lsrs	r3, r3, #4
 8006082:	f003 030f 	and.w	r3, r3, #15
 8006086:	e005      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 8006088:	4b97      	ldr	r3, [pc, #604]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800608a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608e:	0a1b      	lsrs	r3, r3, #8
 8006090:	f003 030f 	and.w	r3, r3, #15
 8006094:	4a95      	ldr	r2, [pc, #596]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800609a:	61fb      	str	r3, [r7, #28]
          break;
 800609c:	e066      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800609e:	4b92      	ldr	r3, [pc, #584]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060aa:	d162      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80060ac:	4b8e      	ldr	r3, [pc, #568]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b8:	d15b      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060ba:	4b8b      	ldr	r3, [pc, #556]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	0a1b      	lsrs	r3, r3, #8
 80060c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	fb02 f203 	mul.w	r2, r2, r3
 80060ce:	4b86      	ldr	r3, [pc, #536]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	091b      	lsrs	r3, r3, #4
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	3301      	adds	r3, #1
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80060e0:	4b81      	ldr	r3, [pc, #516]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	0d5b      	lsrs	r3, r3, #21
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	3301      	adds	r3, #1
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	61fb      	str	r3, [r7, #28]
          break;
 80060f6:	e03c      	b.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80060f8:	4b7b      	ldr	r3, [pc, #492]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006104:	d138      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006106:	4b78      	ldr	r3, [pc, #480]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800610e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006112:	d131      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006114:	4b74      	ldr	r3, [pc, #464]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	0a1b      	lsrs	r3, r3, #8
 800611a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800611e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	fb02 f203 	mul.w	r2, r2, r3
 8006128:	4b6f      	ldr	r3, [pc, #444]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	3301      	adds	r3, #1
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800613a:	4b6b      	ldr	r3, [pc, #428]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	0d5b      	lsrs	r3, r3, #21
 8006140:	f003 0303 	and.w	r3, r3, #3
 8006144:	3301      	adds	r3, #1
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	fbb2 f3f3 	udiv	r3, r2, r3
 800614e:	61fb      	str	r3, [r7, #28]
          break;
 8006150:	e012      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006152:	4b65      	ldr	r3, [pc, #404]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b02      	cmp	r3, #2
 800615e:	d10e      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
            frequency = HSI48_VALUE;
 8006160:	4b63      	ldr	r3, [pc, #396]	; (80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8006162:	61fb      	str	r3, [r7, #28]
          break;
 8006164:	e00b      	b.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
          break;
 8006166:	bf00      	nop
 8006168:	f000 bce5 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800616c:	bf00      	nop
 800616e:	f000 bce2 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006172:	bf00      	nop
 8006174:	f000 bcdf 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006178:	bf00      	nop
 800617a:	f000 bcdc 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800617e:	bf00      	nop
        break;
 8006180:	f000 bcd9 	b.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006184:	4b58      	ldr	r3, [pc, #352]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006186:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800618a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800618e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006192:	d13d      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006194:	4b54      	ldr	r3, [pc, #336]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061a0:	f040 84c8 	bne.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80061a4:	4b50      	ldr	r3, [pc, #320]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b0:	f040 84c0 	bne.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061b4:	4b4c      	ldr	r3, [pc, #304]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	0a1b      	lsrs	r3, r3, #8
 80061ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061be:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	fb02 f203 	mul.w	r2, r2, r3
 80061c8:	4b47      	ldr	r3, [pc, #284]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	091b      	lsrs	r3, r3, #4
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	3301      	adds	r3, #1
 80061d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d8:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80061da:	4b43      	ldr	r3, [pc, #268]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	0edb      	lsrs	r3, r3, #27
 80061e0:	f003 031f 	and.w	r3, r3, #31
 80061e4:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80061ec:	4b3e      	ldr	r3, [pc, #248]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
                pllp = 17U;
 80061f8:	2311      	movs	r3, #17
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	e001      	b.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 7U;
 80061fe:	2307      	movs	r3, #7
 8006200:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	61fb      	str	r3, [r7, #28]
      break;
 800620c:	f000 bc92 	b.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006210:	4b35      	ldr	r3, [pc, #212]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006216:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006222:	d016      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800622a:	f200 809a 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006234:	d02b      	beq.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800623c:	f200 8091 	bhi.w	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 8083 	beq.w	800634e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800624e:	d051      	beq.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 8006250:	e087      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006252:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b02      	cmp	r3, #2
 800625c:	f040 8083 	bne.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006260:	4b21      	ldr	r3, [pc, #132]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
 800626c:	4b1e      	ldr	r3, [pc, #120]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	091b      	lsrs	r3, r3, #4
 8006272:	f003 030f 	and.w	r3, r3, #15
 8006276:	e005      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8006278:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800627a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800627e:	0a1b      	lsrs	r3, r3, #8
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	4a19      	ldr	r2, [pc, #100]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800628a:	61fb      	str	r3, [r7, #28]
          break;
 800628c:	e06b      	b.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800628e:	4b16      	ldr	r3, [pc, #88]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800629a:	d166      	bne.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800629c:	4b12      	ldr	r3, [pc, #72]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a8:	d15f      	bne.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062aa:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	0a1b      	lsrs	r3, r3, #8
 80062b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062b4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	fb02 f203 	mul.w	r2, r2, r3
 80062be:	4b0a      	ldr	r3, [pc, #40]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	091b      	lsrs	r3, r3, #4
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	3301      	adds	r3, #1
 80062ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ce:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	0d5b      	lsrs	r3, r3, #21
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	3301      	adds	r3, #1
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	61fb      	str	r3, [r7, #28]
          break;
 80062e6:	e040      	b.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80062e8:	40021000 	.word	0x40021000
 80062ec:	080115e0 	.word	0x080115e0
 80062f0:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80062f4:	4bae      	ldr	r3, [pc, #696]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006300:	d135      	bne.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006302:	4bab      	ldr	r3, [pc, #684]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800630a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630e:	d12e      	bne.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006310:	4ba7      	ldr	r3, [pc, #668]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	0a1b      	lsrs	r3, r3, #8
 8006316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800631a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	fb02 f203 	mul.w	r2, r2, r3
 8006324:	4ba2      	ldr	r3, [pc, #648]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	f003 030f 	and.w	r3, r3, #15
 800632e:	3301      	adds	r3, #1
 8006330:	fbb2 f3f3 	udiv	r3, r2, r3
 8006334:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006336:	4b9e      	ldr	r3, [pc, #632]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	0d5b      	lsrs	r3, r3, #21
 800633c:	f003 0303 	and.w	r3, r3, #3
 8006340:	3301      	adds	r3, #1
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	fbb2 f3f3 	udiv	r3, r2, r3
 800634a:	61fb      	str	r3, [r7, #28]
          break;
 800634c:	e00f      	b.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800634e:	4b98      	ldr	r3, [pc, #608]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006350:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b02      	cmp	r3, #2
 800635a:	d10a      	bne.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
            frequency = HSI48_VALUE;
 800635c:	4b95      	ldr	r3, [pc, #596]	; (80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 800635e:	61fb      	str	r3, [r7, #28]
          break;
 8006360:	e007      	b.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
          break;
 8006362:	bf00      	nop
 8006364:	e3e6      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006366:	bf00      	nop
 8006368:	e3e4      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800636a:	bf00      	nop
 800636c:	e3e2      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800636e:	bf00      	nop
 8006370:	e3e0      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8006372:	bf00      	nop
      break;
 8006374:	e3de      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006376:	4b8e      	ldr	r3, [pc, #568]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b03      	cmp	r3, #3
 8006386:	d828      	bhi.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006388:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063a1 	.word	0x080063a1
 8006394:	080063a9 	.word	0x080063a9
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063c5 	.word	0x080063c5
          frequency = HAL_RCC_GetPCLK2Freq();
 80063a0:	f7ff f81a 	bl	80053d8 <HAL_RCC_GetPCLK2Freq>
 80063a4:	61f8      	str	r0, [r7, #28]
          break;
 80063a6:	e01d      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetSysClockFreq();
 80063a8:	f7fe ff6a 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 80063ac:	61f8      	str	r0, [r7, #28]
          break;
 80063ae:	e019      	b.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063b0:	4b7f      	ldr	r3, [pc, #508]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063bc:	d10f      	bne.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
            frequency = HSI_VALUE;
 80063be:	4b7e      	ldr	r3, [pc, #504]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80063c0:	61fb      	str	r3, [r7, #28]
          break;
 80063c2:	e00c      	b.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063c4:	4b7a      	ldr	r3, [pc, #488]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d107      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = LSE_VALUE;
 80063d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d6:	61fb      	str	r3, [r7, #28]
          break;
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          break;
 80063da:	bf00      	nop
 80063dc:	e3ab      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063de:	bf00      	nop
 80063e0:	e3a9      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063e2:	bf00      	nop
        break;
 80063e4:	e3a7      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80063e6:	4b72      	ldr	r3, [pc, #456]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ec:	f003 030c 	and.w	r3, r3, #12
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b0c      	cmp	r3, #12
 80063f6:	d83a      	bhi.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 80063f8:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006435 	.word	0x08006435
 8006404:	0800646f 	.word	0x0800646f
 8006408:	0800646f 	.word	0x0800646f
 800640c:	0800646f 	.word	0x0800646f
 8006410:	0800643d 	.word	0x0800643d
 8006414:	0800646f 	.word	0x0800646f
 8006418:	0800646f 	.word	0x0800646f
 800641c:	0800646f 	.word	0x0800646f
 8006420:	08006445 	.word	0x08006445
 8006424:	0800646f 	.word	0x0800646f
 8006428:	0800646f 	.word	0x0800646f
 800642c:	0800646f 	.word	0x0800646f
 8006430:	08006459 	.word	0x08006459
          frequency = HAL_RCC_GetPCLK1Freq();
 8006434:	f7fe ffba 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 8006438:	61f8      	str	r0, [r7, #28]
          break;
 800643a:	e01d      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          frequency = HAL_RCC_GetSysClockFreq();
 800643c:	f7fe ff20 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8006440:	61f8      	str	r0, [r7, #28]
          break;
 8006442:	e019      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006444:	4b5a      	ldr	r3, [pc, #360]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800644c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006450:	d10f      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
            frequency = HSI_VALUE;
 8006452:	4b59      	ldr	r3, [pc, #356]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8006454:	61fb      	str	r3, [r7, #28]
          break;
 8006456:	e00c      	b.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006458:	4b55      	ldr	r3, [pc, #340]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800645a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b02      	cmp	r3, #2
 8006464:	d107      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = LSE_VALUE;
 8006466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646a:	61fb      	str	r3, [r7, #28]
          break;
 800646c:	e003      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          break;
 800646e:	bf00      	nop
 8006470:	e361      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006472:	bf00      	nop
 8006474:	e35f      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006476:	bf00      	nop
        break;
 8006478:	e35d      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800647a:	4b4d      	ldr	r3, [pc, #308]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800647c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006480:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b30      	cmp	r3, #48	; 0x30
 800648a:	d021      	beq.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b30      	cmp	r3, #48	; 0x30
 8006490:	d829      	bhi.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b20      	cmp	r3, #32
 8006496:	d011      	beq.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b20      	cmp	r3, #32
 800649c:	d823      	bhi.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d004      	beq.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          break;
 80064aa:	e01c      	b.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064ac:	f7fe ff7e 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 80064b0:	61f8      	str	r0, [r7, #28]
          break;
 80064b2:	e01d      	b.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          frequency = HAL_RCC_GetSysClockFreq();
 80064b4:	f7fe fee4 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 80064b8:	61f8      	str	r0, [r7, #28]
          break;
 80064ba:	e019      	b.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064bc:	4b3c      	ldr	r3, [pc, #240]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c8:	d10f      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 80064ca:	4b3b      	ldr	r3, [pc, #236]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80064cc:	61fb      	str	r3, [r7, #28]
          break;
 80064ce:	e00c      	b.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064d0:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d107      	bne.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e2:	61fb      	str	r3, [r7, #28]
          break;
 80064e4:	e003      	b.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          break;
 80064e6:	bf00      	nop
 80064e8:	e325      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80064ea:	bf00      	nop
 80064ec:	e323      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80064ee:	bf00      	nop
        break;
 80064f0:	e321      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80064f2:	4b2f      	ldr	r3, [pc, #188]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2bc0      	cmp	r3, #192	; 0xc0
 8006502:	d021      	beq.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2bc0      	cmp	r3, #192	; 0xc0
 8006508:	d829      	bhi.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b80      	cmp	r3, #128	; 0x80
 800650e:	d011      	beq.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b80      	cmp	r3, #128	; 0x80
 8006514:	d823      	bhi.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d004      	beq.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          break;
 8006522:	e01c      	b.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006524:	f7fe ff42 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 8006528:	61f8      	str	r0, [r7, #28]
          break;
 800652a:	e01d      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          frequency = HAL_RCC_GetSysClockFreq();
 800652c:	f7fe fea8 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8006530:	61f8      	str	r0, [r7, #28]
          break;
 8006532:	e019      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006534:	4b1e      	ldr	r3, [pc, #120]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800653c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006540:	d10f      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            frequency = HSI_VALUE;
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8006544:	61fb      	str	r3, [r7, #28]
          break;
 8006546:	e00c      	b.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006548:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d107      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = LSE_VALUE;
 8006556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800655a:	61fb      	str	r3, [r7, #28]
          break;
 800655c:	e003      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          break;
 800655e:	bf00      	nop
 8006560:	e2e9      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006562:	bf00      	nop
 8006564:	e2e7      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006566:	bf00      	nop
        break;
 8006568:	e2e5      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800656a:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800656c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800657c:	d02c      	beq.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006584:	d833      	bhi.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800658c:	d01a      	beq.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006594:	d82b      	bhi.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065a2:	d00b      	beq.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          break;
 80065a4:	e023      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065a6:	f7fe ff01 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 80065aa:	61f8      	str	r0, [r7, #28]
          break;
 80065ac:	e024      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 80065ae:	bf00      	nop
 80065b0:	40021000 	.word	0x40021000
 80065b4:	02dc6c00 	.word	0x02dc6c00
 80065b8:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetSysClockFreq();
 80065bc:	f7fe fe60 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 80065c0:	61f8      	str	r0, [r7, #28]
          break;
 80065c2:	e019      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c4:	4ba6      	ldr	r3, [pc, #664]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065d0:	d10f      	bne.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 80065d2:	4ba4      	ldr	r3, [pc, #656]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80065d4:	61fb      	str	r3, [r7, #28]
          break;
 80065d6:	e00c      	b.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065d8:	4ba1      	ldr	r3, [pc, #644]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d107      	bne.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = LSE_VALUE;
 80065e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ea:	61fb      	str	r3, [r7, #28]
          break;
 80065ec:	e003      	b.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80065ee:	bf00      	nop
 80065f0:	e2a1      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80065f2:	bf00      	nop
 80065f4:	e29f      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80065f6:	bf00      	nop
        break;
 80065f8:	e29d      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80065fa:	4b99      	ldr	r3, [pc, #612]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800660c:	d025      	beq.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006614:	d82c      	bhi.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661c:	d013      	beq.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006624:	d824      	bhi.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d004      	beq.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006632:	d004      	beq.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          break;
 8006634:	e01c      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006636:	f7fe feb9 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 800663a:	61f8      	str	r0, [r7, #28]
          break;
 800663c:	e01d      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = HAL_RCC_GetSysClockFreq();
 800663e:	f7fe fe1f 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8006642:	61f8      	str	r0, [r7, #28]
          break;
 8006644:	e019      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006646:	4b86      	ldr	r3, [pc, #536]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006652:	d10f      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            frequency = HSI_VALUE;
 8006654:	4b83      	ldr	r3, [pc, #524]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006656:	61fb      	str	r3, [r7, #28]
          break;
 8006658:	e00c      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800665a:	4b81      	ldr	r3, [pc, #516]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b02      	cmp	r3, #2
 8006666:	d107      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
            frequency = LSE_VALUE;
 8006668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800666c:	61fb      	str	r3, [r7, #28]
          break;
 800666e:	e003      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          break;
 8006670:	bf00      	nop
 8006672:	e260      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006674:	bf00      	nop
 8006676:	e25e      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006678:	bf00      	nop
        break;
 800667a:	e25c      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800667c:	4b78      	ldr	r3, [pc, #480]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006682:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800668e:	d007      	beq.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006696:	d12f      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006698:	f7fe fdf2 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800669c:	61f8      	str	r0, [r7, #28]
          break;
 800669e:	e02e      	b.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80066a0:	4b6f      	ldr	r3, [pc, #444]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ac:	d126      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80066ae:	4b6c      	ldr	r3, [pc, #432]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d020      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80066ba:	4b69      	ldr	r3, [pc, #420]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c4:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	fb02 f203 	mul.w	r2, r2, r3
 80066ce:	4b64      	ldr	r3, [pc, #400]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	091b      	lsrs	r3, r3, #4
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	3301      	adds	r3, #1
 80066da:	fbb2 f3f3 	udiv	r3, r2, r3
 80066de:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80066e0:	4b5f      	ldr	r3, [pc, #380]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	0e5b      	lsrs	r3, r3, #25
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	3301      	adds	r3, #1
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f4:	61fb      	str	r3, [r7, #28]
          break;
 80066f6:	e001      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
          break;
 80066f8:	bf00      	nop
 80066fa:	e21c      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80066fc:	bf00      	nop
        break;
 80066fe:	e21a      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006700:	4b57      	ldr	r3, [pc, #348]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d103      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006712:	f7fe fe61 	bl	80053d8 <HAL_RCC_GetPCLK2Freq>
 8006716:	61f8      	str	r0, [r7, #28]
        break;
 8006718:	e20d      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          frequency = HAL_RCC_GetSysClockFreq();
 800671a:	f7fe fdb1 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800671e:	61f8      	str	r0, [r7, #28]
        break;
 8006720:	e209      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006722:	4b4f      	ldr	r3, [pc, #316]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006724:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006728:	f003 0318 	and.w	r3, r3, #24
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b10      	cmp	r3, #16
 8006732:	d010      	beq.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b10      	cmp	r3, #16
 8006738:	d834      	bhi.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b08      	cmp	r3, #8
 8006744:	d024      	beq.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
          break;
 8006746:	e02d      	b.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006748:	69b9      	ldr	r1, [r7, #24]
 800674a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800674e:	f000 fbdf 	bl	8006f10 <RCCEx_GetSAIxPeriphCLKFreq>
 8006752:	61f8      	str	r0, [r7, #28]
          break;
 8006754:	e02b      	b.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006756:	4b42      	ldr	r3, [pc, #264]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b02      	cmp	r3, #2
 8006760:	d122      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006762:	4b3f      	ldr	r3, [pc, #252]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800676e:	4b3c      	ldr	r3, [pc, #240]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	091b      	lsrs	r3, r3, #4
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	e005      	b.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 800677a:	4b39      	ldr	r3, [pc, #228]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800677c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006780:	0a1b      	lsrs	r3, r3, #8
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	4a38      	ldr	r2, [pc, #224]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 8006788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800678c:	61fb      	str	r3, [r7, #28]
          break;
 800678e:	e00b      	b.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006790:	4b33      	ldr	r3, [pc, #204]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679c:	d106      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = HSI_VALUE;
 800679e:	4b31      	ldr	r3, [pc, #196]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80067a0:	61fb      	str	r3, [r7, #28]
          break;
 80067a2:	e003      	b.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          break;
 80067a4:	bf00      	nop
 80067a6:	e1c6      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80067a8:	bf00      	nop
 80067aa:	e1c4      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80067ac:	bf00      	nop
        break;
 80067ae:	e1c2      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80067b0:	4b2b      	ldr	r3, [pc, #172]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c2:	d013      	beq.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ca:	d819      	bhi.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d004      	beq.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d8:	d004      	beq.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
          break;
 80067da:	e011      	b.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067dc:	f7fe fde6 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 80067e0:	61f8      	str	r0, [r7, #28]
          break;
 80067e2:	e010      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          frequency = HAL_RCC_GetSysClockFreq();
 80067e4:	f7fe fd4c 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 80067e8:	61f8      	str	r0, [r7, #28]
          break;
 80067ea:	e00c      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067ec:	4b1c      	ldr	r3, [pc, #112]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f8:	d104      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
            frequency = HSI_VALUE;
 80067fa:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80067fc:	61fb      	str	r3, [r7, #28]
          break;
 80067fe:	e001      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
          break;
 8006800:	bf00      	nop
 8006802:	e198      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006804:	bf00      	nop
        break;
 8006806:	e196      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006808:	4b15      	ldr	r3, [pc, #84]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681a:	d013      	beq.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006822:	d819      	bhi.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006830:	d004      	beq.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8006832:	e011      	b.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006834:	f7fe fdba 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 8006838:	61f8      	str	r0, [r7, #28]
          break;
 800683a:	e010      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = HAL_RCC_GetSysClockFreq();
 800683c:	f7fe fd20 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8006840:	61f8      	str	r0, [r7, #28]
          break;
 8006842:	e00c      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006844:	4b06      	ldr	r3, [pc, #24]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800684c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006850:	d104      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
            frequency = HSI_VALUE;
 8006852:	4b04      	ldr	r3, [pc, #16]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006854:	61fb      	str	r3, [r7, #28]
          break;
 8006856:	e001      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
          break;
 8006858:	bf00      	nop
 800685a:	e16c      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800685c:	bf00      	nop
        break;
 800685e:	e16a      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006860:	40021000 	.word	0x40021000
 8006864:	00f42400 	.word	0x00f42400
 8006868:	080115e0 	.word	0x080115e0
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800686c:	4baa      	ldr	r3, [pc, #680]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800687e:	d013      	beq.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006886:	d819      	bhi.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006894:	d004      	beq.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
          break;
 8006896:	e011      	b.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006898:	f7fe fd88 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 800689c:	61f8      	str	r0, [r7, #28]
          break;
 800689e:	e010      	b.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = HAL_RCC_GetSysClockFreq();
 80068a0:	f7fe fcee 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 80068a4:	61f8      	str	r0, [r7, #28]
          break;
 80068a6:	e00c      	b.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068a8:	4b9b      	ldr	r3, [pc, #620]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b4:	d104      	bne.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
            frequency = HSI_VALUE;
 80068b6:	4b99      	ldr	r3, [pc, #612]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80068b8:	61fb      	str	r3, [r7, #28]
          break;
 80068ba:	e001      	b.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          break;
 80068bc:	bf00      	nop
 80068be:	e13a      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80068c0:	bf00      	nop
        break;
 80068c2:	e138      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80068c4:	4b94      	ldr	r3, [pc, #592]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80068c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d011      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d818      	bhi.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d004      	beq.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 80068e8:	e011      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068ea:	f7fe fd5f 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 80068ee:	61f8      	str	r0, [r7, #28]
          break;
 80068f0:	e010      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          frequency = HAL_RCC_GetSysClockFreq();
 80068f2:	f7fe fcc5 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 80068f6:	61f8      	str	r0, [r7, #28]
          break;
 80068f8:	e00c      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068fa:	4b87      	ldr	r3, [pc, #540]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006906:	d104      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
            frequency = HSI_VALUE;
 8006908:	4b84      	ldr	r3, [pc, #528]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 800690a:	61fb      	str	r3, [r7, #28]
          break;
 800690c:	e001      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          break;
 800690e:	bf00      	nop
 8006910:	e111      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006912:	bf00      	nop
        break;
 8006914:	e10f      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006916:	4b80      	ldr	r3, [pc, #512]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006928:	d02c      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006930:	d833      	bhi.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006938:	d01a      	beq.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006940:	d82b      	bhi.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d004      	beq.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800694e:	d004      	beq.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          break;
 8006950:	e023      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006952:	f7fe fd2b 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 8006956:	61f8      	str	r0, [r7, #28]
          break;
 8006958:	e026      	b.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0xca0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800695a:	4b6f      	ldr	r3, [pc, #444]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 800695c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b02      	cmp	r3, #2
 8006966:	d11a      	bne.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
              frequency = LSI_VALUE;
 8006968:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800696c:	61fb      	str	r3, [r7, #28]
          break;
 800696e:	e016      	b.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006970:	4b69      	ldr	r3, [pc, #420]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697c:	d111      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
            frequency = HSI_VALUE;
 800697e:	4b67      	ldr	r3, [pc, #412]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006980:	61fb      	str	r3, [r7, #28]
          break;
 8006982:	e00e      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006984:	4b64      	ldr	r3, [pc, #400]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b02      	cmp	r3, #2
 8006990:	d109      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = LSE_VALUE;
 8006992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006996:	61fb      	str	r3, [r7, #28]
          break;
 8006998:	e005      	b.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          break;
 800699a:	bf00      	nop
 800699c:	e0cb      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800699e:	bf00      	nop
 80069a0:	e0c9      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069a2:	bf00      	nop
 80069a4:	e0c7      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069a6:	bf00      	nop
        break;
 80069a8:	e0c5      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80069aa:	4b5b      	ldr	r3, [pc, #364]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069bc:	d02c      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069c4:	d833      	bhi.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069cc:	d01a      	beq.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069d4:	d82b      	bhi.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069e2:	d004      	beq.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
          break;
 80069e4:	e023      	b.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
          frequency = HAL_RCC_GetPCLK1Freq();
 80069e6:	f7fe fce1 	bl	80053ac <HAL_RCC_GetPCLK1Freq>
 80069ea:	61f8      	str	r0, [r7, #28]
          break;
 80069ec:	e026      	b.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80069ee:	4b4a      	ldr	r3, [pc, #296]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d11a      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
              frequency = LSI_VALUE;
 80069fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a00:	61fb      	str	r3, [r7, #28]
          break;
 8006a02:	e016      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a04:	4b44      	ldr	r3, [pc, #272]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a10:	d111      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = HSI_VALUE;
 8006a12:	4b42      	ldr	r3, [pc, #264]	; (8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006a14:	61fb      	str	r3, [r7, #28]
          break;
 8006a16:	e00e      	b.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a18:	4b3f      	ldr	r3, [pc, #252]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d109      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
            frequency = LSE_VALUE;
 8006a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2a:	61fb      	str	r3, [r7, #28]
          break;
 8006a2c:	e005      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          break;
 8006a2e:	bf00      	nop
 8006a30:	e081      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a32:	bf00      	nop
 8006a34:	e07f      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a36:	bf00      	nop
 8006a38:	e07d      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a3a:	bf00      	nop
        break;
 8006a3c:	e07b      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006a3e:	4b36      	ldr	r3, [pc, #216]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a44:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a50:	d02c      	beq.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a58:	d855      	bhi.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d004      	beq.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a66:	d004      	beq.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
          break;
 8006a68:	e04d      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a6a:	f7fe fc09 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 8006a6e:	61f8      	str	r0, [r7, #28]
          break;
 8006a70:	e04e      	b.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006a72:	4b29      	ldr	r3, [pc, #164]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d145      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006a7e:	4b26      	ldr	r3, [pc, #152]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006a8a:	4b23      	ldr	r3, [pc, #140]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	091b      	lsrs	r3, r3, #4
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	e005      	b.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8006a96:	4b20      	ldr	r3, [pc, #128]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a9c:	0a1b      	lsrs	r3, r3, #8
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xe18>)
 8006aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa8:	61fb      	str	r3, [r7, #28]
          break;
 8006aaa:	e02e      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006aac:	4b1a      	ldr	r3, [pc, #104]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ab8:	d129      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006aba:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac6:	d122      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006ac8:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	0a1b      	lsrs	r3, r3, #8
 8006ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	fb02 f203 	mul.w	r2, r2, r3
 8006adc:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	091b      	lsrs	r3, r3, #4
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aec:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006aee:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	0d5b      	lsrs	r3, r3, #21
 8006af4:	f003 0303 	and.w	r3, r3, #3
 8006af8:	3301      	adds	r3, #1
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b02:	61fb      	str	r3, [r7, #28]
          break;
 8006b04:	e003      	b.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
          break;
 8006b06:	bf00      	nop
 8006b08:	e015      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006b0a:	bf00      	nop
 8006b0c:	e013      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006b0e:	bf00      	nop
        break;
 8006b10:	e011      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006b12:	bf00      	nop
 8006b14:	e00f      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006b16:	bf00      	nop
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	00f42400 	.word	0x00f42400
 8006b20:	080115e0 	.word	0x080115e0
      break;
 8006b24:	bf00      	nop
 8006b26:	e006      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006b28:	bf00      	nop
 8006b2a:	e004      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006b2c:	bf00      	nop
 8006b2e:	e002      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006b30:	bf00      	nop
 8006b32:	e000      	b.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006b34:	bf00      	nop
    }
  }

  return(frequency);
 8006b36:	69fb      	ldr	r3, [r7, #28]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3720      	adds	r7, #32
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b4e:	4b72      	ldr	r3, [pc, #456]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00e      	beq.n	8006b78 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b5a:	4b6f      	ldr	r3, [pc, #444]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0203 	and.w	r2, r3, #3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d103      	bne.n	8006b72 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
       ||
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d142      	bne.n	8006bf8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	73fb      	strb	r3, [r7, #15]
 8006b76:	e03f      	b.n	8006bf8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d018      	beq.n	8006bb2 <RCCEx_PLLSAI1_Config+0x72>
 8006b80:	2b03      	cmp	r3, #3
 8006b82:	d825      	bhi.n	8006bd0 <RCCEx_PLLSAI1_Config+0x90>
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d002      	beq.n	8006b8e <RCCEx_PLLSAI1_Config+0x4e>
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d009      	beq.n	8006ba0 <RCCEx_PLLSAI1_Config+0x60>
 8006b8c:	e020      	b.n	8006bd0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b8e:	4b62      	ldr	r3, [pc, #392]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d11d      	bne.n	8006bd6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b9e:	e01a      	b.n	8006bd6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ba0:	4b5d      	ldr	r3, [pc, #372]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d116      	bne.n	8006bda <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bb0:	e013      	b.n	8006bda <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006bb2:	4b59      	ldr	r3, [pc, #356]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10f      	bne.n	8006bde <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bbe:	4b56      	ldr	r3, [pc, #344]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bce:	e006      	b.n	8006bde <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd4:	e004      	b.n	8006be0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bd6:	bf00      	nop
 8006bd8:	e002      	b.n	8006be0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bda:	bf00      	nop
 8006bdc:	e000      	b.n	8006be0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bde:	bf00      	nop
    }

    if(status == HAL_OK)
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d108      	bne.n	8006bf8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006be6:	4b4c      	ldr	r3, [pc, #304]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f023 0203 	bic.w	r2, r3, #3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4949      	ldr	r1, [pc, #292]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f040 8086 	bne.w	8006d0c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c00:	4b45      	ldr	r3, [pc, #276]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a44      	ldr	r2, [pc, #272]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c0c:	f7fa fd70 	bl	80016f0 <HAL_GetTick>
 8006c10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c12:	e009      	b.n	8006c28 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c14:	f7fa fd6c 	bl	80016f0 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d902      	bls.n	8006c28 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	73fb      	strb	r3, [r7, #15]
        break;
 8006c26:	e005      	b.n	8006c34 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c28:	4b3b      	ldr	r3, [pc, #236]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1ef      	bne.n	8006c14 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d168      	bne.n	8006d0c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d113      	bne.n	8006c68 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c40:	4b35      	ldr	r3, [pc, #212]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	4b35      	ldr	r3, [pc, #212]	; (8006d1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6892      	ldr	r2, [r2, #8]
 8006c4c:	0211      	lsls	r1, r2, #8
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	68d2      	ldr	r2, [r2, #12]
 8006c52:	06d2      	lsls	r2, r2, #27
 8006c54:	4311      	orrs	r1, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6852      	ldr	r2, [r2, #4]
 8006c5a:	3a01      	subs	r2, #1
 8006c5c:	0112      	lsls	r2, r2, #4
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	492d      	ldr	r1, [pc, #180]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	610b      	str	r3, [r1, #16]
 8006c66:	e02d      	b.n	8006cc4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d115      	bne.n	8006c9a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c6e:	4b2a      	ldr	r3, [pc, #168]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	4b2b      	ldr	r3, [pc, #172]	; (8006d20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6892      	ldr	r2, [r2, #8]
 8006c7a:	0211      	lsls	r1, r2, #8
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6912      	ldr	r2, [r2, #16]
 8006c80:	0852      	lsrs	r2, r2, #1
 8006c82:	3a01      	subs	r2, #1
 8006c84:	0552      	lsls	r2, r2, #21
 8006c86:	4311      	orrs	r1, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6852      	ldr	r2, [r2, #4]
 8006c8c:	3a01      	subs	r2, #1
 8006c8e:	0112      	lsls	r2, r2, #4
 8006c90:	430a      	orrs	r2, r1
 8006c92:	4921      	ldr	r1, [pc, #132]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	610b      	str	r3, [r1, #16]
 8006c98:	e014      	b.n	8006cc4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c9a:	4b1f      	ldr	r3, [pc, #124]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c9c:	691a      	ldr	r2, [r3, #16]
 8006c9e:	4b21      	ldr	r3, [pc, #132]	; (8006d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6892      	ldr	r2, [r2, #8]
 8006ca6:	0211      	lsls	r1, r2, #8
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6952      	ldr	r2, [r2, #20]
 8006cac:	0852      	lsrs	r2, r2, #1
 8006cae:	3a01      	subs	r2, #1
 8006cb0:	0652      	lsls	r2, r2, #25
 8006cb2:	4311      	orrs	r1, r2
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6852      	ldr	r2, [r2, #4]
 8006cb8:	3a01      	subs	r2, #1
 8006cba:	0112      	lsls	r2, r2, #4
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	4916      	ldr	r1, [pc, #88]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006cc4:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a13      	ldr	r2, [pc, #76]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd0:	f7fa fd0e 	bl	80016f0 <HAL_GetTick>
 8006cd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cd6:	e009      	b.n	8006cec <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cd8:	f7fa fd0a 	bl	80016f0 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d902      	bls.n	8006cec <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	73fb      	strb	r3, [r7, #15]
          break;
 8006cea:	e005      	b.n	8006cf8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0ef      	beq.n	8006cd8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d00:	691a      	ldr	r2, [r3, #16]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	4904      	ldr	r1, [pc, #16]	; (8006d18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	07ff800f 	.word	0x07ff800f
 8006d20:	ff9f800f 	.word	0xff9f800f
 8006d24:	f9ff800f 	.word	0xf9ff800f

08006d28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d36:	4b72      	ldr	r3, [pc, #456]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00e      	beq.n	8006d60 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d42:	4b6f      	ldr	r3, [pc, #444]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	f003 0203 	and.w	r2, r3, #3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d103      	bne.n	8006d5a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
       ||
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d142      	bne.n	8006de0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	73fb      	strb	r3, [r7, #15]
 8006d5e:	e03f      	b.n	8006de0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d018      	beq.n	8006d9a <RCCEx_PLLSAI2_Config+0x72>
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d825      	bhi.n	8006db8 <RCCEx_PLLSAI2_Config+0x90>
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d002      	beq.n	8006d76 <RCCEx_PLLSAI2_Config+0x4e>
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d009      	beq.n	8006d88 <RCCEx_PLLSAI2_Config+0x60>
 8006d74:	e020      	b.n	8006db8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d76:	4b62      	ldr	r3, [pc, #392]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d11d      	bne.n	8006dbe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d86:	e01a      	b.n	8006dbe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d88:	4b5d      	ldr	r3, [pc, #372]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d116      	bne.n	8006dc2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d98:	e013      	b.n	8006dc2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d9a:	4b59      	ldr	r3, [pc, #356]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10f      	bne.n	8006dc6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006da6:	4b56      	ldr	r3, [pc, #344]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006db6:	e006      	b.n	8006dc6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	73fb      	strb	r3, [r7, #15]
      break;
 8006dbc:	e004      	b.n	8006dc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006dbe:	bf00      	nop
 8006dc0:	e002      	b.n	8006dc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006dc2:	bf00      	nop
 8006dc4:	e000      	b.n	8006dc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d108      	bne.n	8006de0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006dce:	4b4c      	ldr	r3, [pc, #304]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f023 0203 	bic.w	r2, r3, #3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4949      	ldr	r1, [pc, #292]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 8086 	bne.w	8006ef4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006de8:	4b45      	ldr	r3, [pc, #276]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a44      	ldr	r2, [pc, #272]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006df4:	f7fa fc7c 	bl	80016f0 <HAL_GetTick>
 8006df8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006dfa:	e009      	b.n	8006e10 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006dfc:	f7fa fc78 	bl	80016f0 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d902      	bls.n	8006e10 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8006e0e:	e005      	b.n	8006e1c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e10:	4b3b      	ldr	r3, [pc, #236]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1ef      	bne.n	8006dfc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d168      	bne.n	8006ef4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d113      	bne.n	8006e50 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e28:	4b35      	ldr	r3, [pc, #212]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	4b35      	ldr	r3, [pc, #212]	; (8006f04 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006e2e:	4013      	ands	r3, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6892      	ldr	r2, [r2, #8]
 8006e34:	0211      	lsls	r1, r2, #8
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	68d2      	ldr	r2, [r2, #12]
 8006e3a:	06d2      	lsls	r2, r2, #27
 8006e3c:	4311      	orrs	r1, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6852      	ldr	r2, [r2, #4]
 8006e42:	3a01      	subs	r2, #1
 8006e44:	0112      	lsls	r2, r2, #4
 8006e46:	430a      	orrs	r2, r1
 8006e48:	492d      	ldr	r1, [pc, #180]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	614b      	str	r3, [r1, #20]
 8006e4e:	e02d      	b.n	8006eac <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d115      	bne.n	8006e82 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e56:	4b2a      	ldr	r3, [pc, #168]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e58:	695a      	ldr	r2, [r3, #20]
 8006e5a:	4b2b      	ldr	r3, [pc, #172]	; (8006f08 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6892      	ldr	r2, [r2, #8]
 8006e62:	0211      	lsls	r1, r2, #8
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6912      	ldr	r2, [r2, #16]
 8006e68:	0852      	lsrs	r2, r2, #1
 8006e6a:	3a01      	subs	r2, #1
 8006e6c:	0552      	lsls	r2, r2, #21
 8006e6e:	4311      	orrs	r1, r2
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6852      	ldr	r2, [r2, #4]
 8006e74:	3a01      	subs	r2, #1
 8006e76:	0112      	lsls	r2, r2, #4
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	4921      	ldr	r1, [pc, #132]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	614b      	str	r3, [r1, #20]
 8006e80:	e014      	b.n	8006eac <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e82:	4b1f      	ldr	r3, [pc, #124]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e84:	695a      	ldr	r2, [r3, #20]
 8006e86:	4b21      	ldr	r3, [pc, #132]	; (8006f0c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006e88:	4013      	ands	r3, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6892      	ldr	r2, [r2, #8]
 8006e8e:	0211      	lsls	r1, r2, #8
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6952      	ldr	r2, [r2, #20]
 8006e94:	0852      	lsrs	r2, r2, #1
 8006e96:	3a01      	subs	r2, #1
 8006e98:	0652      	lsls	r2, r2, #25
 8006e9a:	4311      	orrs	r1, r2
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6852      	ldr	r2, [r2, #4]
 8006ea0:	3a01      	subs	r2, #1
 8006ea2:	0112      	lsls	r2, r2, #4
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	4916      	ldr	r1, [pc, #88]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006eac:	4b14      	ldr	r3, [pc, #80]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a13      	ldr	r2, [pc, #76]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb8:	f7fa fc1a 	bl	80016f0 <HAL_GetTick>
 8006ebc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ebe:	e009      	b.n	8006ed4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006ec0:	f7fa fc16 	bl	80016f0 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d902      	bls.n	8006ed4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	73fb      	strb	r3, [r7, #15]
          break;
 8006ed2:	e005      	b.n	8006ee0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0ef      	beq.n	8006ec0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ee6:	4b06      	ldr	r3, [pc, #24]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ee8:	695a      	ldr	r2, [r3, #20]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	4904      	ldr	r1, [pc, #16]	; (8006f00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40021000 	.word	0x40021000
 8006f04:	07ff800f 	.word	0x07ff800f
 8006f08:	ff9f800f 	.word	0xff9f800f
 8006f0c:	f9ff800f 	.word	0xf9ff800f

08006f10 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b089      	sub	sp, #36	; 0x24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2c:	d10b      	bne.n	8006f46 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006f2e:	4b7e      	ldr	r3, [pc, #504]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f34:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006f38:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b60      	cmp	r3, #96	; 0x60
 8006f3e:	d112      	bne.n	8006f66 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f40:	4b7a      	ldr	r3, [pc, #488]	; (800712c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	e00f      	b.n	8006f66 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4c:	d10b      	bne.n	8006f66 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006f4e:	4b76      	ldr	r3, [pc, #472]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f58:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f60:	d101      	bne.n	8006f66 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006f62:	4b72      	ldr	r3, [pc, #456]	; (800712c <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006f64:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 80d6 	bne.w	800711a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b40      	cmp	r3, #64	; 0x40
 8006f76:	d003      	beq.n	8006f80 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7e:	d13b      	bne.n	8006ff8 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f80:	4b69      	ldr	r3, [pc, #420]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f8c:	f040 80c4 	bne.w	8007118 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006f90:	4b65      	ldr	r3, [pc, #404]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 80bd 	beq.w	8007118 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006f9e:	4b62      	ldr	r3, [pc, #392]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	091b      	lsrs	r3, r3, #4
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	3301      	adds	r3, #1
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006fb2:	4b5d      	ldr	r3, [pc, #372]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	0a1b      	lsrs	r3, r3, #8
 8006fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fbc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006fbe:	4b5a      	ldr	r3, [pc, #360]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	0edb      	lsrs	r3, r3, #27
 8006fc4:	f003 031f 	and.w	r3, r3, #31
 8006fc8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d10a      	bne.n	8006fe6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006fd0:	4b55      	ldr	r3, [pc, #340]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006fdc:	2311      	movs	r3, #17
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	e001      	b.n	8006fe6 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006fe2:	2307      	movs	r3, #7
 8006fe4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	fb02 f203 	mul.w	r2, r2, r3
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006ff6:	e08f      	b.n	8007118 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d13a      	bne.n	8007074 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006ffe:	4b4a      	ldr	r3, [pc, #296]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800700a:	f040 8086 	bne.w	800711a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800700e:	4b46      	ldr	r3, [pc, #280]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d07f      	beq.n	800711a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800701a:	4b43      	ldr	r3, [pc, #268]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	091b      	lsrs	r3, r3, #4
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	3301      	adds	r3, #1
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	fbb2 f3f3 	udiv	r3, r2, r3
 800702c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800702e:	4b3e      	ldr	r3, [pc, #248]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007038:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800703a:	4b3b      	ldr	r3, [pc, #236]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	0edb      	lsrs	r3, r3, #27
 8007040:	f003 031f 	and.w	r3, r3, #31
 8007044:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800704c:	4b36      	ldr	r3, [pc, #216]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8007058:	2311      	movs	r3, #17
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	e001      	b.n	8007062 <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800705e:	2307      	movs	r3, #7
 8007060:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	fb02 f203 	mul.w	r2, r2, r3
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007070:	61fb      	str	r3, [r7, #28]
 8007072:	e052      	b.n	800711a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b80      	cmp	r3, #128	; 0x80
 8007078:	d003      	beq.n	8007082 <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007080:	d109      	bne.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007082:	4b29      	ldr	r3, [pc, #164]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800708a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708e:	d144      	bne.n	800711a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8007090:	4b27      	ldr	r3, [pc, #156]	; (8007130 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8007092:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007094:	e041      	b.n	800711a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	2b20      	cmp	r3, #32
 800709a:	d003      	beq.n	80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a2:	d13a      	bne.n	800711a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80070a4:	4b20      	ldr	r3, [pc, #128]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b0:	d133      	bne.n	800711a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80070b2:	4b1d      	ldr	r3, [pc, #116]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d02d      	beq.n	800711a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80070be:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	091b      	lsrs	r3, r3, #4
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	3301      	adds	r3, #1
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d0:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070dc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80070de:	4b12      	ldr	r3, [pc, #72]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	0edb      	lsrs	r3, r3, #27
 80070e4:	f003 031f 	and.w	r3, r3, #31
 80070e8:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80070f0:	4b0d      	ldr	r3, [pc, #52]	; (8007128 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80070fc:	2311      	movs	r3, #17
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	e001      	b.n	8007106 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8007102:	2307      	movs	r3, #7
 8007104:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	fb02 f203 	mul.w	r2, r2, r3
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	fbb2 f3f3 	udiv	r3, r2, r3
 8007114:	61fb      	str	r3, [r7, #28]
 8007116:	e000      	b.n	800711a <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007118:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800711a:	69fb      	ldr	r3, [r7, #28]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3724      	adds	r7, #36	; 0x24
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	40021000 	.word	0x40021000
 800712c:	001fff68 	.word	0x001fff68
 8007130:	00f42400 	.word	0x00f42400

08007134 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d06c      	beq.n	8007220 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7f9 ffb8 	bl	80010d0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	22ca      	movs	r2, #202	; 0xca
 800716e:	625a      	str	r2, [r3, #36]	; 0x24
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2253      	movs	r2, #83	; 0x53
 8007176:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f9a0 	bl	80074be <RTC_EnterInitMode>
 800717e:	4603      	mov	r3, r0
 8007180:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d14b      	bne.n	8007220 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6899      	ldr	r1, [r3, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	431a      	orrs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	68d2      	ldr	r2, [r2, #12]
 80071c2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6919      	ldr	r1, [r3, #16]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	041a      	lsls	r2, r3, #16
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f9a3 	bl	8007524 <RTC_ExitInitMode>
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d11b      	bne.n	8007220 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0203 	bic.w	r2, r2, #3
 80071f6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69da      	ldr	r2, [r3, #28]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	22ff      	movs	r2, #255	; 0xff
 8007216:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800722a:	b590      	push	{r4, r7, lr}
 800722c:	b087      	sub	sp, #28
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_RTC_SetTime+0x1a>
 8007240:	2302      	movs	r3, #2
 8007242:	e08b      	b.n	800735c <HAL_RTC_SetTime+0x132>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	22ca      	movs	r2, #202	; 0xca
 800725a:	625a      	str	r2, [r3, #36]	; 0x24
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2253      	movs	r2, #83	; 0x53
 8007262:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f92a 	bl	80074be <RTC_EnterInitMode>
 800726a:	4603      	mov	r3, r0
 800726c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800726e:	7cfb      	ldrb	r3, [r7, #19]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d163      	bne.n	800733c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d126      	bne.n	80072c8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	d102      	bne.n	800728e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2200      	movs	r2, #0
 800728c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f984 	bl	80075a0 <RTC_ByteToBcd2>
 8007298:	4603      	mov	r3, r0
 800729a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 f97d 	bl	80075a0 <RTC_ByteToBcd2>
 80072a6:	4603      	mov	r3, r0
 80072a8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072aa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	789b      	ldrb	r3, [r3, #2]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 f975 	bl	80075a0 <RTC_ByteToBcd2>
 80072b6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072b8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	78db      	ldrb	r3, [r3, #3]
 80072c0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	e018      	b.n	80072fa <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d102      	bne.n	80072dc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2200      	movs	r2, #0
 80072da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	785b      	ldrb	r3, [r3, #1]
 80072e6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072e8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80072ee:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	78db      	ldrb	r3, [r3, #3]
 80072f4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80072f6:	4313      	orrs	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007304:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007308:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007318:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6899      	ldr	r1, [r3, #8]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	431a      	orrs	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f8f6 	bl	8007524 <RTC_ExitInitMode>
 8007338:	4603      	mov	r3, r0
 800733a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	22ff      	movs	r2, #255	; 0xff
 8007342:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007344:	7cfb      	ldrb	r3, [r7, #19]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d103      	bne.n	8007352 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800735a:	7cfb      	ldrb	r3, [r7, #19]
}
 800735c:	4618      	mov	r0, r3
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	bd90      	pop	{r4, r7, pc}

08007364 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007364:	b590      	push	{r4, r7, lr}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_RTC_SetDate+0x1a>
 800737a:	2302      	movs	r3, #2
 800737c:	e075      	b.n	800746a <HAL_RTC_SetDate+0x106>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2202      	movs	r2, #2
 800738a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10e      	bne.n	80073b2 <HAL_RTC_SetDate+0x4e>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	785b      	ldrb	r3, [r3, #1]
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	f023 0310 	bic.w	r3, r3, #16
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	330a      	adds	r3, #10
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d11c      	bne.n	80073f2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	78db      	ldrb	r3, [r3, #3]
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 f8ef 	bl	80075a0 <RTC_ByteToBcd2>
 80073c2:	4603      	mov	r3, r0
 80073c4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 f8e8 	bl	80075a0 <RTC_ByteToBcd2>
 80073d0:	4603      	mov	r3, r0
 80073d2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80073d4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	789b      	ldrb	r3, [r3, #2]
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 f8e0 	bl	80075a0 <RTC_ByteToBcd2>
 80073e0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80073e2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	e00e      	b.n	8007410 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	78db      	ldrb	r3, [r3, #3]
 80073f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073fe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007404:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	22ca      	movs	r2, #202	; 0xca
 8007416:	625a      	str	r2, [r3, #36]	; 0x24
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2253      	movs	r2, #83	; 0x53
 800741e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f84c 	bl	80074be <RTC_EnterInitMode>
 8007426:	4603      	mov	r3, r0
 8007428:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800742a:	7cfb      	ldrb	r3, [r7, #19]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10c      	bne.n	800744a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800743a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800743e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f86f 	bl	8007524 <RTC_ExitInitMode>
 8007446:	4603      	mov	r3, r0
 8007448:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	22ff      	movs	r2, #255	; 0xff
 8007450:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007452:	7cfb      	ldrb	r3, [r7, #19]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d103      	bne.n	8007460 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007468:	7cfb      	ldrb	r3, [r7, #19]
}
 800746a:	4618      	mov	r0, r3
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	bd90      	pop	{r4, r7, pc}

08007472 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007488:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800748a:	f7fa f931 	bl	80016f0 <HAL_GetTick>
 800748e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007490:	e009      	b.n	80074a6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007492:	f7fa f92d 	bl	80016f0 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074a0:	d901      	bls.n	80074a6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e007      	b.n	80074b6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0ee      	beq.n	8007492 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d120      	bne.n	800751a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f04f 32ff 	mov.w	r2, #4294967295
 80074e0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80074e2:	f7fa f905 	bl	80016f0 <HAL_GetTick>
 80074e6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80074e8:	e00d      	b.n	8007506 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80074ea:	f7fa f901 	bl	80016f0 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074f8:	d905      	bls.n	8007506 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2203      	movs	r2, #3
 8007502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <RTC_EnterInitMode+0x5c>
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	2b03      	cmp	r3, #3
 8007518:	d1e7      	bne.n	80074ea <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007530:	4b1a      	ldr	r3, [pc, #104]	; (800759c <RTC_ExitInitMode+0x78>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	4a19      	ldr	r2, [pc, #100]	; (800759c <RTC_ExitInitMode+0x78>)
 8007536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800753a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800753c:	4b17      	ldr	r3, [pc, #92]	; (800759c <RTC_ExitInitMode+0x78>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10c      	bne.n	8007562 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff ff92 	bl	8007472 <HAL_RTC_WaitForSynchro>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01e      	beq.n	8007592 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2203      	movs	r2, #3
 8007558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	73fb      	strb	r3, [r7, #15]
 8007560:	e017      	b.n	8007592 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007562:	4b0e      	ldr	r3, [pc, #56]	; (800759c <RTC_ExitInitMode+0x78>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	4a0d      	ldr	r2, [pc, #52]	; (800759c <RTC_ExitInitMode+0x78>)
 8007568:	f023 0320 	bic.w	r3, r3, #32
 800756c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff ff7f 	bl	8007472 <HAL_RTC_WaitForSynchro>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2203      	movs	r2, #3
 800757e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <RTC_ExitInitMode+0x78>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	4a04      	ldr	r2, [pc, #16]	; (800759c <RTC_ExitInitMode+0x78>)
 800758c:	f043 0320 	orr.w	r3, r3, #32
 8007590:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40002800 	.word	0x40002800

080075a0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80075b2:	e005      	b.n	80075c0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80075ba:	7afb      	ldrb	r3, [r7, #11]
 80075bc:	3b0a      	subs	r3, #10
 80075be:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80075c0:	7afb      	ldrb	r3, [r7, #11]
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d8f6      	bhi.n	80075b4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	011b      	lsls	r3, r3, #4
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	7afb      	ldrb	r3, [r7, #11]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	b2db      	uxtb	r3, r3
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	; 0x28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e078      	b.n	80076e4 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d105      	bne.n	800760a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7f9 fd7f 	bl	8001108 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2203      	movs	r2, #3
 800760e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f86a 	bl	80076ec <HAL_SD_InitCard>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e060      	b.n	80076e4 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007622:	f107 0308 	add.w	r3, r7, #8
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fdc7 	bl	80081bc <HAL_SD_GetCardStatus>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e055      	b.n	80076e4 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007638:	7e3b      	ldrb	r3, [r7, #24]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800763e:	7e7b      	ldrb	r3, [r7, #25]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007648:	2b01      	cmp	r3, #1
 800764a:	d10a      	bne.n	8007662 <HAL_SD_Init+0x82>
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <HAL_SD_Init+0x78>
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800765e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007660:	e00b      	b.n	800767a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007666:	2b01      	cmp	r3, #1
 8007668:	d104      	bne.n	8007674 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007670:	65da      	str	r2, [r3, #92]	; 0x5c
 8007672:	e002      	b.n	800767a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	4619      	mov	r1, r3
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fe7d 	bl	8008380 <HAL_SD_ConfigWideBusOperation>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e029      	b.n	80076e4 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007690:	f7fa f82e 	bl	80016f0 <HAL_GetTick>
 8007694:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007696:	e014      	b.n	80076c2 <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007698:	f7fa f82a 	bl	80016f0 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a6:	d10c      	bne.n	80076c2 <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e010      	b.n	80076e4 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 ff70 	bl	80085a8 <HAL_SD_GetCardState>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d1e4      	bne.n	8007698 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3728      	adds	r7, #40	; 0x28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076ec:	b5b0      	push	{r4, r5, r7, lr}
 80076ee:	b090      	sub	sp, #64	; 0x40
 80076f0:	af04      	add	r7, sp, #16
 80076f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80076f8:	2300      	movs	r3, #0
 80076fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80076fc:	2300      	movs	r3, #0
 80076fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007700:	2300      	movs	r3, #0
 8007702:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007708:	f7fe fafe 	bl	8005d08 <HAL_RCCEx_GetPeriphCLKFreq>
 800770c:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d109      	bne.n	8007728 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e08b      	b.n	8007840 <HAL_SD_InitCard+0x154>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	0a1b      	lsrs	r3, r3, #8
 800772c:	4a46      	ldr	r2, [pc, #280]	; (8007848 <HAL_SD_InitCard+0x15c>)
 800772e:	fba2 2303 	umull	r2, r3, r2, r3
 8007732:	091b      	lsrs	r3, r3, #4
 8007734:	61fb      	str	r3, [r7, #28]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	623b      	str	r3, [r7, #32]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d107      	bne.n	8007754 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0210 	orr.w	r2, r2, #16
 8007752:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681d      	ldr	r5, [r3, #0]
 8007758:	466c      	mov	r4, sp
 800775a:	f107 0318 	add.w	r3, r7, #24
 800775e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007766:	f107 030c 	add.w	r3, r7, #12
 800776a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800776c:	4628      	mov	r0, r5
 800776e:	f002 f98f 	bl	8009a90 <SDMMC_Init>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8007778:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <HAL_SD_InitCard+0x98>
  {
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e05d      	b.n	8007840 <HAL_SD_InitCard+0x154>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f002 f9c9 	bl	8009b20 <SDMMC_PowerState_ON>
 800778e:	4603      	mov	r3, r0
 8007790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8007794:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <HAL_SD_InitCard+0xb4>
  {
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e04f      	b.n	8007840 <HAL_SD_InitCard+0x154>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077aa:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80077ac:	4a27      	ldr	r2, [pc, #156]	; (800784c <HAL_SD_InitCard+0x160>)
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b4:	3301      	adds	r3, #1
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7f9 ffa6 	bl	8001708 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 ffd1 	bl	8008764 <SD_PowerON>
 80077c2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00b      	beq.n	80077e2 <HAL_SD_InitCard+0xf6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e02e      	b.n	8007840 <HAL_SD_InitCard+0x154>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 ff00 	bl	80085e8 <SD_InitCard>
 80077e8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <HAL_SD_InitCard+0x11c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e01b      	b.n	8007840 <HAL_SD_InitCard+0x154>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007810:	4618      	mov	r0, r3
 8007812:	f002 fa1b 	bl	8009c4c <SDMMC_CmdBlockLength>
 8007816:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00f      	beq.n	800783e <HAL_SD_InitCard+0x152>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a0b      	ldr	r2, [pc, #44]	; (8007850 <HAL_SD_InitCard+0x164>)
 8007824:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	431a      	orrs	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e000      	b.n	8007840 <HAL_SD_InitCard+0x154>
  }

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3730      	adds	r7, #48	; 0x30
 8007844:	46bd      	mov	sp, r7
 8007846:	bdb0      	pop	{r4, r5, r7, pc}
 8007848:	014f8b59 	.word	0x014f8b59
 800784c:	00012110 	.word	0x00012110
 8007850:	1fe00fff 	.word	0x1fe00fff

08007854 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08c      	sub	sp, #48	; 0x30
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d107      	bne.n	800787c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e08d      	b.n	8007998 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b01      	cmp	r3, #1
 8007886:	f040 8086 	bne.w	8007996 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	441a      	add	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	429a      	cmp	r2, r3
 800789c:	d907      	bls.n	80078ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e074      	b.n	8007998 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2203      	movs	r2, #3
 80078b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2200      	movs	r2, #0
 80078bc:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	025a      	lsls	r2, r3, #9
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d002      	beq.n	80078da <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	025b      	lsls	r3, r3, #9
 80078d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80078da:	f04f 33ff 	mov.w	r3, #4294967295
 80078de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	025b      	lsls	r3, r3, #9
 80078e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80078e6:	2390      	movs	r3, #144	; 0x90
 80078e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80078ea:	2302      	movs	r3, #2
 80078ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f107 0210 	add.w	r2, r7, #16
 80078fe:	4611      	mov	r1, r2
 8007900:	4618      	mov	r0, r3
 8007902:	f002 f977 	bl	8009bf4 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007914:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2201      	movs	r2, #1
 8007924:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d90a      	bls.n	8007942 <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2282      	movs	r2, #130	; 0x82
 8007930:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007938:	4618      	mov	r0, r3
 800793a:	f002 f9cd 	bl	8009cd8 <SDMMC_CmdReadMultiBlock>
 800793e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007940:	e009      	b.n	8007956 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2281      	movs	r2, #129	; 0x81
 8007946:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800794e:	4618      	mov	r0, r3
 8007950:	f002 f99f 	bl	8009c92 <SDMMC_CmdReadSingleBlock>
 8007954:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d012      	beq.n	8007982 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007962:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796a:	431a      	orrs	r2, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e00a      	b.n	8007998 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007990:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	e000      	b.n	8007998 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007996:	2302      	movs	r3, #2
  }
}
 8007998:	4618      	mov	r0, r3
 800799a:	3730      	adds	r7, #48	; 0x30
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	1fe00fff 	.word	0x1fe00fff

080079a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08c      	sub	sp, #48	; 0x30
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d107      	bne.n	80079cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e08d      	b.n	8007ae8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	f040 8086 	bne.w	8007ae6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80079e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	441a      	add	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d907      	bls.n	80079fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e074      	b.n	8007ae8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2203      	movs	r2, #3
 8007a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	025a      	lsls	r2, r3, #9
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d002      	beq.n	8007a2a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	025b      	lsls	r3, r3, #9
 8007a28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	025b      	lsls	r3, r3, #9
 8007a34:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007a36:	2390      	movs	r3, #144	; 0x90
 8007a38:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f107 0210 	add.w	r2, r7, #16
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f002 f8cf 	bl	8009bf4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a64:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2201      	movs	r2, #1
 8007a74:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d90a      	bls.n	8007a92 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	22a0      	movs	r2, #160	; 0xa0
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f002 f96b 	bl	8009d64 <SDMMC_CmdWriteMultiBlock>
 8007a8e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007a90:	e009      	b.n	8007aa6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2290      	movs	r2, #144	; 0x90
 8007a96:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f002 f93d 	bl	8009d1e <SDMMC_CmdWriteSingleBlock>
 8007aa4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d012      	beq.n	8007ad2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a0f      	ldr	r2, [pc, #60]	; (8007af0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	431a      	orrs	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e00a      	b.n	8007ae8 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007ae0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e000      	b.n	8007ae8 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007ae6:	2302      	movs	r3, #2
  }
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3730      	adds	r7, #48	; 0x30
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	1fe00fff 	.word	0x1fe00fff

08007af4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d008      	beq.n	8007b22 <HAL_SD_IRQHandler+0x2e>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 f98c 	bl	8008e38 <SD_Read_IT>
 8007b20:	e199      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 80ae 	beq.w	8007c8e <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6812      	ldr	r2, [r2, #0]
 8007b46:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007b4a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007b4e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b6e:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f003 0308 	and.w	r3, r3, #8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d038      	beq.n	8007bec <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d104      	bne.n	8007b8e <HAL_SD_IRQHandler+0x9a>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0320 	and.w	r3, r3, #32
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d011      	beq.n	8007bb2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f002 f90a 	bl	8009dac <SDMMC_CmdStopTransfer>
 8007b98:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d008      	beq.n	8007bb2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f957 	bl	8007e60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4aa0      	ldr	r2, [pc, #640]	; (8007e38 <HAL_SD_IRQHandler+0x344>)
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d104      	bne.n	8007bdc <HAL_SD_IRQHandler+0xe8>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d003      	beq.n	8007be4 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f003 ffe5 	bl	800bbac <HAL_SD_RxCpltCallback>
 8007be2:	e138      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f003 ffd7 	bl	800bb98 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007bea:	e134      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 812f 	beq.w	8007e56 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2200      	movs	r2, #0
 8007c06:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <HAL_SD_IRQHandler+0x130>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d011      	beq.n	8007c48 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f002 f8bf 	bl	8009dac <SDMMC_CmdStopTransfer>
 8007c2e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f90c 	bl	8007e60 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <HAL_SD_IRQHandler+0x176>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f003 ff94 	bl	800bb98 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <HAL_SD_IRQHandler+0x192>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80e8 	beq.w	8007e56 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f003 ff90 	bl	800bbac <HAL_SD_RxCpltCallback>
}
 8007c8c:	e0e3      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d008      	beq.n	8007cae <HAL_SD_IRQHandler+0x1ba>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 f917 	bl	8008eda <SD_Write_IT>
 8007cac:	e0d3      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 809d 	beq.w	8007df8 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	f043 0202 	orr.w	r2, r3, #2
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	f043 0208 	orr.w	r2, r3, #8
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf8:	f003 0320 	and.w	r3, r3, #32
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	f043 0220 	orr.w	r2, r3, #32
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d12:	f003 0310 	and.w	r3, r3, #16
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d005      	beq.n	8007d26 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1e:	f043 0210 	orr.w	r2, r3, #16
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a43      	ldr	r2, [pc, #268]	; (8007e38 <HAL_SD_IRQHandler+0x344>)
 8007d2c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007d3c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d4c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d6c:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f002 f81a 	bl	8009dac <SDMMC_CmdStopTransfer>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d92:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d9c:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f852 	bl	8007e60 <HAL_SD_ErrorCallback>
}
 8007dbc:	e04b      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d046      	beq.n	8007e56 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d042      	beq.n	8007e56 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007dde:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2200      	movs	r2, #0
 8007de6:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f835 	bl	8007e60 <HAL_SD_ErrorCallback>
}
 8007df6:	e02e      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d027      	beq.n	8007e56 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e0e:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10e      	bne.n	8007e3c <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f003 0320 	and.w	r3, r3, #32
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f001 f8d4 	bl	8008fd6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8007e2e:	e012      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 f8bc 	bl	8008fae <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8007e36:	e00e      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
 8007e38:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 f8bb 	bl	8008fc2 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8007e4c:	e003      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 f8a3 	bl	8008f9a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8007e54:	e7ff      	b.n	8007e56 <HAL_SD_IRQHandler+0x362>
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop

08007e60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e82:	0f9b      	lsrs	r3, r3, #30
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8e:	0e9b      	lsrs	r3, r3, #26
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea0:	0e1b      	lsrs	r3, r3, #24
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb2:	0c1b      	lsrs	r3, r3, #16
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ebe:	0a1b      	lsrs	r3, r3, #8
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed4:	0d1b      	lsrs	r3, r3, #20
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	f003 030f 	and.w	r3, r3, #15
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ef2:	0bdb      	lsrs	r3, r3, #15
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f04:	0b9b      	lsrs	r3, r3, #14
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f16:	0b5b      	lsrs	r3, r3, #13
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f28:	0b1b      	lsrs	r3, r3, #12
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d163      	bne.n	800800c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f48:	009a      	lsls	r2, r3, #2
 8007f4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f4e:	4013      	ands	r3, r2
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f54:	0f92      	lsrs	r2, r2, #30
 8007f56:	431a      	orrs	r2, r3
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f60:	0edb      	lsrs	r3, r3, #27
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f72:	0e1b      	lsrs	r3, r3, #24
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f84:	0d5b      	lsrs	r3, r3, #21
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f96:	0c9b      	lsrs	r3, r3, #18
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fa8:	0bdb      	lsrs	r3, r3, #15
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	1c5a      	adds	r2, r3, #1
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	7e1b      	ldrb	r3, [r3, #24]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	3302      	adds	r3, #2
 8007fcc:	2201      	movs	r2, #1
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007fd6:	fb02 f203 	mul.w	r2, r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	7a1b      	ldrb	r3, [r3, #8]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	2201      	movs	r2, #1
 8007fea:	409a      	lsls	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007ff8:	0a52      	lsrs	r2, r2, #9
 8007ffa:	fb02 f203 	mul.w	r2, r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008008:	659a      	str	r2, [r3, #88]	; 0x58
 800800a:	e031      	b.n	8008070 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d11d      	bne.n	8008050 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008022:	0c1b      	lsrs	r3, r3, #16
 8008024:	431a      	orrs	r2, r3
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	3301      	adds	r3, #1
 8008030:	029a      	lsls	r2, r3, #10
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008044:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	659a      	str	r2, [r3, #88]	; 0x58
 800804e:	e00f      	b.n	8008070 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a58      	ldr	r2, [pc, #352]	; (80081b8 <HAL_SD_GetCardCSD+0x344>)
 8008056:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e09d      	b.n	80081ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008074:	0b9b      	lsrs	r3, r3, #14
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	b2da      	uxtb	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008086:	09db      	lsrs	r3, r3, #7
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808e:	b2da      	uxtb	r2, r3
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a8:	0fdb      	lsrs	r3, r3, #31
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b4:	0f5b      	lsrs	r3, r3, #29
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f003 0303 	and.w	r3, r3, #3
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c6:	0e9b      	lsrs	r3, r3, #26
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d8:	0d9b      	lsrs	r3, r3, #22
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	f003 030f 	and.w	r3, r3, #15
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ea:	0d5b      	lsrs	r3, r3, #21
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008106:	0c1b      	lsrs	r3, r3, #16
 8008108:	b2db      	uxtb	r3, r3
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800811a:	0bdb      	lsrs	r3, r3, #15
 800811c:	b2db      	uxtb	r3, r3
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	b2da      	uxtb	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800812e:	0b9b      	lsrs	r3, r3, #14
 8008130:	b2db      	uxtb	r3, r3
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	b2da      	uxtb	r2, r3
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008142:	0b5b      	lsrs	r3, r3, #13
 8008144:	b2db      	uxtb	r3, r3
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	b2da      	uxtb	r2, r3
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008156:	0b1b      	lsrs	r3, r3, #12
 8008158:	b2db      	uxtb	r3, r3
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	b2da      	uxtb	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800816a:	0a9b      	lsrs	r3, r3, #10
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	b2da      	uxtb	r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008192:	085b      	lsrs	r3, r3, #1
 8008194:	b2db      	uxtb	r3, r3
 8008196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819a:	b2da      	uxtb	r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	1fe00fff 	.word	0x1fe00fff

080081bc <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b094      	sub	sp, #80	; 0x50
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80081cc:	f107 0308 	add.w	r3, r7, #8
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fbd2 	bl	800897c <SD_SendSDStatus>
 80081d8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80081da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d011      	beq.n	8008204 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a4f      	ldr	r2, [pc, #316]	; (8008324 <HAL_SD_GetCardStatus+0x168>)
 80081e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008202:	e070      	b.n	80082e6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	099b      	lsrs	r3, r3, #6
 8008208:	b2db      	uxtb	r3, r3
 800820a:	f003 0303 	and.w	r3, r3, #3
 800820e:	b2da      	uxtb	r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	095b      	lsrs	r3, r3, #5
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	b2da      	uxtb	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	0a1b      	lsrs	r3, r3, #8
 8008228:	b29b      	uxth	r3, r3
 800822a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800822e:	b29a      	uxth	r2, r3
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	0e1b      	lsrs	r3, r3, #24
 8008234:	b29b      	uxth	r3, r3
 8008236:	4313      	orrs	r3, r2
 8008238:	b29a      	uxth	r2, r3
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	061a      	lsls	r2, r3, #24
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800824a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	0a1b      	lsrs	r3, r3, #8
 8008250:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008254:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	0e1b      	lsrs	r3, r3, #24
 800825a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	b2da      	uxtb	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	0a1b      	lsrs	r3, r3, #8
 800826c:	b2da      	uxtb	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	0d1b      	lsrs	r3, r3, #20
 8008276:	b2db      	uxtb	r3, r3
 8008278:	f003 030f 	and.w	r3, r3, #15
 800827c:	b2da      	uxtb	r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	0c1b      	lsrs	r3, r3, #16
 8008286:	b29b      	uxth	r3, r3
 8008288:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800828c:	b29a      	uxth	r2, r3
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	b29b      	uxth	r3, r3
 8008292:	b2db      	uxtb	r3, r3
 8008294:	b29b      	uxth	r3, r3
 8008296:	4313      	orrs	r3, r2
 8008298:	b29a      	uxth	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	0a9b      	lsrs	r3, r3, #10
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	0a1b      	lsrs	r3, r3, #8
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f003 0303 	and.w	r3, r3, #3
 80082b8:	b2da      	uxtb	r2, r3
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	091b      	lsrs	r3, r3, #4
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	0e1b      	lsrs	r3, r3, #24
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082ee:	4618      	mov	r0, r3
 80082f0:	f001 fcac 	bl	8009c4c <SDMMC_CmdBlockLength>
 80082f4:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80082f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00d      	beq.n	8008318 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a08      	ldr	r2, [pc, #32]	; (8008324 <HAL_SD_GetCardStatus+0x168>)
 8008302:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008308:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008318:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800831c:	4618      	mov	r0, r3
 800831e:	3750      	adds	r7, #80	; 0x50
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	1fe00fff 	.word	0x1fe00fff

08008328 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008380:	b5b0      	push	{r4, r5, r7, lr}
 8008382:	b090      	sub	sp, #64	; 0x40
 8008384:	af04      	add	r7, sp, #16
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2203      	movs	r2, #3
 8008394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839c:	2b03      	cmp	r3, #3
 800839e:	d02e      	beq.n	80083fe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083a6:	d106      	bne.n	80083b6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	639a      	str	r2, [r3, #56]	; 0x38
 80083b4:	e029      	b.n	800840a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083bc:	d10a      	bne.n	80083d4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fbd4 	bl	8008b6c <SD_WideBus_Enable>
 80083c4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	639a      	str	r2, [r3, #56]	; 0x38
 80083d2:	e01a      	b.n	800840a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fc11 	bl	8008c02 <SD_WideBus_Disable>
 80083e0:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	639a      	str	r2, [r3, #56]	; 0x38
 80083ee:	e00c      	b.n	800840a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	639a      	str	r2, [r3, #56]	; 0x38
 80083fc:	e005      	b.n	800840a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008402:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	2b00      	cmp	r3, #0
 8008410:	d007      	beq.n	8008422 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a60      	ldr	r2, [pc, #384]	; (8008598 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008418:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008420:	e097      	b.n	8008552 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008422:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008426:	f7fd fc6f 	bl	8005d08 <HAL_RCCEx_GetPeriphCLKFreq>
 800842a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 8086 	beq.w	8008540 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695a      	ldr	r2, [r3, #20]
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	4952      	ldr	r1, [pc, #328]	; (800859c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008452:	fba1 1303 	umull	r1, r3, r1, r3
 8008456:	0e1b      	lsrs	r3, r3, #24
 8008458:	429a      	cmp	r2, r3
 800845a:	d303      	bcc.n	8008464 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	61fb      	str	r3, [r7, #28]
 8008462:	e05a      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800846c:	d103      	bne.n	8008476 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	e051      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800847a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847e:	d126      	bne.n	80084ce <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	695b      	ldr	r3, [r3, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10e      	bne.n	80084a6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	4a45      	ldr	r2, [pc, #276]	; (80085a0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d906      	bls.n	800849e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	4a42      	ldr	r2, [pc, #264]	; (800859c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008494:	fba2 2303 	umull	r2, r3, r2, r3
 8008498:	0e5b      	lsrs	r3, r3, #25
 800849a:	61fb      	str	r3, [r7, #28]
 800849c:	e03d      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	e039      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b2:	4a3b      	ldr	r2, [pc, #236]	; (80085a0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d906      	bls.n	80084c6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	4a38      	ldr	r2, [pc, #224]	; (800859c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	0e5b      	lsrs	r3, r3, #25
 80084c2:	61fb      	str	r3, [r7, #28]
 80084c4:	e029      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	61fb      	str	r3, [r7, #28]
 80084cc:	e025      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10e      	bne.n	80084f4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	4a32      	ldr	r2, [pc, #200]	; (80085a4 <HAL_SD_ConfigWideBusOperation+0x224>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d906      	bls.n	80084ec <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	4a2e      	ldr	r2, [pc, #184]	; (800859c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80084e2:	fba2 2303 	umull	r2, r3, r2, r3
 80084e6:	0e1b      	lsrs	r3, r3, #24
 80084e8:	61fb      	str	r3, [r7, #28]
 80084ea:	e016      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	61fb      	str	r3, [r7, #28]
 80084f2:	e012      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008500:	4a28      	ldr	r2, [pc, #160]	; (80085a4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d906      	bls.n	8008514 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	4a24      	ldr	r2, [pc, #144]	; (800859c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800850a:	fba2 2303 	umull	r2, r3, r2, r3
 800850e:	0e1b      	lsrs	r3, r3, #24
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	e002      	b.n	800851a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681d      	ldr	r5, [r3, #0]
 8008524:	466c      	mov	r4, sp
 8008526:	f107 0318 	add.w	r3, r7, #24
 800852a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800852e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008532:	f107 030c 	add.w	r3, r7, #12
 8008536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008538:	4628      	mov	r0, r5
 800853a:	f001 faa9 	bl	8009a90 <SDMMC_Init>
 800853e:	e008      	b.n	8008552 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800855a:	4618      	mov	r0, r3
 800855c:	f001 fb76 	bl	8009c4c <SDMMC_CmdBlockLength>
 8008560:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00c      	beq.n	8008582 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a0a      	ldr	r2, [pc, #40]	; (8008598 <HAL_SD_ConfigWideBusOperation+0x218>)
 800856e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800858a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800858e:	4618      	mov	r0, r3
 8008590:	3730      	adds	r7, #48	; 0x30
 8008592:	46bd      	mov	sp, r7
 8008594:	bdb0      	pop	{r4, r5, r7, pc}
 8008596:	bf00      	nop
 8008598:	1fe00fff 	.word	0x1fe00fff
 800859c:	55e63b89 	.word	0x55e63b89
 80085a0:	02faf080 	.word	0x02faf080
 80085a4:	017d7840 	.word	0x017d7840

080085a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80085b4:	f107 030c 	add.w	r3, r7, #12
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 faae 	bl	8008b1c <SD_SendStatus>
 80085c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	0a5b      	lsrs	r3, r3, #9
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80085de:	693b      	ldr	r3, [r7, #16]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b090      	sub	sp, #64	; 0x40
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80085f0:	2301      	movs	r3, #1
 80085f2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 faa3 	bl	8009b44 <SDMMC_GetPowerState>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d102      	bne.n	800860a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008604:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008608:	e0a7      	b.n	800875a <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860e:	2b03      	cmp	r3, #3
 8008610:	d02e      	beq.n	8008670 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4618      	mov	r0, r3
 8008618:	f001 fce8 	bl	8009fec <SDMMC_CmdSendCID>
 800861c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800861e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <SD_InitCard+0x40>
    {
      return errorstate;
 8008624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008626:	e098      	b.n	800875a <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f001 facd 	bl	8009bce <SDMMC_GetResponse>
 8008634:	4602      	mov	r2, r0
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2104      	movs	r1, #4
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fac4 	bl	8009bce <SDMMC_GetResponse>
 8008646:	4602      	mov	r2, r0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2108      	movs	r1, #8
 8008652:	4618      	mov	r0, r3
 8008654:	f001 fabb 	bl	8009bce <SDMMC_GetResponse>
 8008658:	4602      	mov	r2, r0
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	210c      	movs	r1, #12
 8008664:	4618      	mov	r0, r3
 8008666:	f001 fab2 	bl	8009bce <SDMMC_GetResponse>
 800866a:	4602      	mov	r2, r0
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008674:	2b03      	cmp	r3, #3
 8008676:	d00d      	beq.n	8008694 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f107 020e 	add.w	r2, r7, #14
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f001 fcf1 	bl	800a06a <SDMMC_CmdSetRelAdd>
 8008688:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800868a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <SD_InitCard+0xac>
    {
      return errorstate;
 8008690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008692:	e062      	b.n	800875a <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008698:	2b03      	cmp	r3, #3
 800869a:	d036      	beq.n	800870a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800869c:	89fb      	ldrh	r3, [r7, #14]
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ac:	041b      	lsls	r3, r3, #16
 80086ae:	4619      	mov	r1, r3
 80086b0:	4610      	mov	r0, r2
 80086b2:	f001 fcba 	bl	800a02a <SDMMC_CmdSendCSD>
 80086b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80086b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <SD_InitCard+0xda>
    {
      return errorstate;
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	e04b      	b.n	800875a <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2100      	movs	r1, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 fa80 	bl	8009bce <SDMMC_GetResponse>
 80086ce:	4602      	mov	r2, r0
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2104      	movs	r1, #4
 80086da:	4618      	mov	r0, r3
 80086dc:	f001 fa77 	bl	8009bce <SDMMC_GetResponse>
 80086e0:	4602      	mov	r2, r0
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2108      	movs	r1, #8
 80086ec:	4618      	mov	r0, r3
 80086ee:	f001 fa6e 	bl	8009bce <SDMMC_GetResponse>
 80086f2:	4602      	mov	r2, r0
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	210c      	movs	r1, #12
 80086fe:	4618      	mov	r0, r3
 8008700:	f001 fa65 	bl	8009bce <SDMMC_GetResponse>
 8008704:	4602      	mov	r2, r0
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2104      	movs	r1, #4
 8008710:	4618      	mov	r0, r3
 8008712:	f001 fa5c 	bl	8009bce <SDMMC_GetResponse>
 8008716:	4603      	mov	r3, r0
 8008718:	0d1a      	lsrs	r2, r3, #20
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800871e:	f107 0310 	add.w	r3, r7, #16
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff fba5 	bl	8007e74 <HAL_SD_GetCardCSD>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008734:	e011      	b.n	800875a <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6819      	ldr	r1, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800873e:	041b      	lsls	r3, r3, #16
 8008740:	461a      	mov	r2, r3
 8008742:	f04f 0300 	mov.w	r3, #0
 8008746:	4608      	mov	r0, r1
 8008748:	f001 fb66 	bl	8009e18 <SDMMC_CmdSelDesel>
 800874c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800874e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <SD_InitCard+0x170>
  {
    return errorstate;
 8008754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008756:	e000      	b.n	800875a <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3740      	adds	r7, #64	; 0x40
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
	...

08008764 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	61fb      	str	r3, [r7, #28]
 8008774:	2300      	movs	r3, #0
 8008776:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 8008778:	f7f8 ffba 	bl	80016f0 <HAL_GetTick>
 800877c:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4618      	mov	r0, r3
 8008784:	f001 fb6c 	bl	8009e60 <SDMMC_CmdGoIdleState>
 8008788:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <SD_PowerON+0x30>
  {
    return errorstate;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	e0ed      	b.n	8008970 <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4618      	mov	r0, r3
 800879a:	f001 fb7f 	bl	8009e9c <SDMMC_CmdOperCond>
 800879e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00d      	beq.n	80087c2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 fb55 	bl	8009e60 <SDMMC_CmdGoIdleState>
 80087b6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d004      	beq.n	80087c8 <SD_PowerON+0x64>
    {
      return errorstate;
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	e0d6      	b.n	8008970 <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d137      	bne.n	8008840 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f001 fb80 	bl	8009edc <SDMMC_CmdAppCommand>
 80087dc:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d02d      	beq.n	8008840 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087e8:	e0c2      	b.n	8008970 <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2100      	movs	r1, #0
 80087f0:	4618      	mov	r0, r3
 80087f2:	f001 fb73 	bl	8009edc <SDMMC_CmdAppCommand>
 80087f6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d001      	beq.n	8008802 <SD_PowerON+0x9e>
    {
      return errorstate;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	e0b6      	b.n	8008970 <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	495c      	ldr	r1, [pc, #368]	; (8008978 <SD_PowerON+0x214>)
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fb8a 	bl	8009f22 <SDMMC_CmdAppOperCommand>
 800880e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008816:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800881a:	e0a9      	b.n	8008970 <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2100      	movs	r1, #0
 8008822:	4618      	mov	r0, r3
 8008824:	f001 f9d3 	bl	8009bce <SDMMC_GetResponse>
 8008828:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	0fdb      	lsrs	r3, r3, #31
 800882e:	2b01      	cmp	r3, #1
 8008830:	d101      	bne.n	8008836 <SD_PowerON+0xd2>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <SD_PowerON+0xd4>
 8008836:	2300      	movs	r3, #0
 8008838:	61bb      	str	r3, [r7, #24]

    count++;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3301      	adds	r3, #1
 800883e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008846:	4293      	cmp	r3, r2
 8008848:	d802      	bhi.n	8008850 <SD_PowerON+0xec>
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0cc      	beq.n	80087ea <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008856:	4293      	cmp	r3, r2
 8008858:	d902      	bls.n	8008860 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800885a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800885e:	e087      	b.n	8008970 <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d07e      	beq.n	8008968 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d17a      	bne.n	800896e <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d075      	beq.n	800896e <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008888:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f042 0208 	orr.w	r2, r2, #8
 8008898:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 fc4a 	bl	800a138 <SDMMC_CmdVoltageSwitch>
 80088a4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00c      	beq.n	80088c6 <SD_PowerON+0x162>
        {
          return errorstate;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	e05f      	b.n	8008970 <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80088b0:	f7f8 ff1e 	bl	80016f0 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d102      	bne.n	80088c6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80088c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088c4:	e054      	b.n	8008970 <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088d4:	d1ec      	bne.n	80088b0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80088de:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ee:	d002      	beq.n	80088f6 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80088f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088f4:	e03c      	b.n	8008970 <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80088f6:	2001      	movs	r0, #1
 80088f8:	f000 fb44 	bl	8008f84 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0204 	orr.w	r2, r2, #4
 800890a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800890c:	e00a      	b.n	8008924 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800890e:	f7f8 feef 	bl	80016f0 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891c:	d102      	bne.n	8008924 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800891e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008922:	e025      	b.n	8008970 <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800892e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008932:	d1ec      	bne.n	800890e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800893c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800894c:	d102      	bne.n	8008954 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800894e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008952:	e00d      	b.n	8008970 <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2213      	movs	r2, #19
 800895a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f04f 32ff 	mov.w	r2, #4294967295
 8008964:	639a      	str	r2, [r3, #56]	; 0x38
 8008966:	e002      	b.n	800896e <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3720      	adds	r7, #32
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	c1100000 	.word	0xc1100000

0800897c <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08c      	sub	sp, #48	; 0x30
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008986:	f7f8 feb3 	bl	80016f0 <HAL_GetTick>
 800898a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2100      	movs	r1, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f001 f919 	bl	8009bce <SDMMC_GetResponse>
 800899c:	4603      	mov	r3, r0
 800899e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089a6:	d102      	bne.n	80089ae <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80089a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089ac:	e0b0      	b.n	8008b10 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2140      	movs	r1, #64	; 0x40
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 f949 	bl	8009c4c <SDMMC_CmdBlockLength>
 80089ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d005      	beq.n	80089ce <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	e0a0      	b.n	8008b10 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d6:	041b      	lsls	r3, r3, #16
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	f001 fa7e 	bl	8009edc <SDMMC_CmdAppCommand>
 80089e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	e08d      	b.n	8008b10 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089f4:	f04f 33ff 	mov.w	r3, #4294967295
 80089f8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80089fa:	2340      	movs	r3, #64	; 0x40
 80089fc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80089fe:	2360      	movs	r3, #96	; 0x60
 8008a00:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a02:	2302      	movs	r3, #2
 8008a04:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f107 0208 	add.w	r2, r7, #8
 8008a16:	4611      	mov	r1, r2
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 f8eb 	bl	8009bf4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f001 fb66 	bl	800a0f4 <SDMMC_CmdStatusRegister>
 8008a28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d02b      	beq.n	8008a88 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	e069      	b.n	8008b10 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d013      	beq.n	8008a72 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a4e:	e00d      	b.n	8008a6c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f001 f845 	bl	8009ae4 <SDMMC_ReadFIFO>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	601a      	str	r2, [r3, #0]
        pData++;
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	3304      	adds	r3, #4
 8008a64:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8008a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a68:	3301      	adds	r3, #1
 8008a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6e:	2b07      	cmp	r3, #7
 8008a70:	d9ee      	bls.n	8008a50 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a72:	f7f8 fe3d 	bl	80016f0 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d102      	bne.n	8008a88 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a86:	e043      	b.n	8008b10 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0d2      	beq.n	8008a3c <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008aa4:	2308      	movs	r3, #8
 8008aa6:	e033      	b.n	8008b10 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aae:	f003 0302 	and.w	r3, r3, #2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	e02a      	b.n	8008b10 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac0:	f003 0320 	and.w	r3, r3, #32
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d017      	beq.n	8008af8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008ac8:	2320      	movs	r3, #32
 8008aca:	e021      	b.n	8008b10 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 f807 	bl	8009ae4 <SDMMC_ReadFIFO>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	601a      	str	r2, [r3, #0]
    pData++;
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	3304      	adds	r3, #4
 8008ae0:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ae2:	f7f8 fe05 	bl	80016f0 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d102      	bne.n	8008af8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008af2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008af6:	e00b      	b.n	8008b10 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e2      	bne.n	8008acc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a03      	ldr	r2, [pc, #12]	; (8008b18 <SD_SendSDStatus+0x19c>)
 8008b0c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3730      	adds	r7, #48	; 0x30
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	18000f3a 	.word	0x18000f3a

08008b1c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d102      	bne.n	8008b32 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008b2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b30:	e018      	b.n	8008b64 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b3a:	041b      	lsls	r3, r3, #16
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4610      	mov	r0, r2
 8008b40:	f001 fab5 	bl	800a0ae <SDMMC_CmdSendStatus>
 8008b44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d001      	beq.n	8008b50 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	e009      	b.n	8008b64 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 f839 	bl	8009bce <SDMMC_GetResponse>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2100      	movs	r1, #0
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 f823 	bl	8009bce <SDMMC_GetResponse>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b92:	d102      	bne.n	8008b9a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b98:	e02f      	b.n	8008bfa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b9a:	f107 030c 	add.w	r3, r7, #12
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f879 	bl	8008c98 <SD_FindSCR>
 8008ba6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	e023      	b.n	8008bfa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d01c      	beq.n	8008bf6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bc4:	041b      	lsls	r3, r3, #16
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4610      	mov	r0, r2
 8008bca:	f001 f987 	bl	8009edc <SDMMC_CmdAppCommand>
 8008bce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	e00f      	b.n	8008bfa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2102      	movs	r1, #2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 f9be 	bl	8009f62 <SDMMC_CmdBusWidth>
 8008be6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	e003      	b.n	8008bfa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e001      	b.n	8008bfa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bf6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b086      	sub	sp, #24
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60fb      	str	r3, [r7, #12]
 8008c0e:	2300      	movs	r3, #0
 8008c10:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2100      	movs	r1, #0
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 ffd8 	bl	8009bce <SDMMC_GetResponse>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c28:	d102      	bne.n	8008c30 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c2e:	e02f      	b.n	8008c90 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c30:	f107 030c 	add.w	r3, r7, #12
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f82e 	bl	8008c98 <SD_FindSCR>
 8008c3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	e023      	b.n	8008c90 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d01c      	beq.n	8008c8c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c5a:	041b      	lsls	r3, r3, #16
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4610      	mov	r0, r2
 8008c60:	f001 f93c 	bl	8009edc <SDMMC_CmdAppCommand>
 8008c64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	e00f      	b.n	8008c90 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f001 f973 	bl	8009f62 <SDMMC_CmdBusWidth>
 8008c7c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	e003      	b.n	8008c90 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e001      	b.n	8008c90 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08e      	sub	sp, #56	; 0x38
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ca2:	f7f8 fd25 	bl	80016f0 <HAL_GetTick>
 8008ca6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008cac:	2300      	movs	r3, #0
 8008cae:	60bb      	str	r3, [r7, #8]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2108      	movs	r1, #8
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 ffc4 	bl	8009c4c <SDMMC_CmdBlockLength>
 8008cc4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	e0ad      	b.n	8008e2c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cd8:	041b      	lsls	r3, r3, #16
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f001 f8fd 	bl	8009edc <SDMMC_CmdAppCommand>
 8008ce2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d001      	beq.n	8008cee <SD_FindSCR+0x56>
  {
    return errorstate;
 8008cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cec:	e09e      	b.n	8008e2c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cee:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008cf4:	2308      	movs	r3, #8
 8008cf6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008cf8:	2330      	movs	r3, #48	; 0x30
 8008cfa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f107 0210 	add.w	r2, r7, #16
 8008d10:	4611      	mov	r1, r2
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 ff6e 	bl	8009bf4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 f943 	bl	8009fa8 <SDMMC_CmdSendSCR>
 8008d22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d027      	beq.n	8008d7a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	e07e      	b.n	8008e2c <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d113      	bne.n	8008d64 <SD_FindSCR+0xcc>
 8008d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d110      	bne.n	8008d64 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 fecc 	bl	8009ae4 <SDMMC_ReadFIFO>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 fec5 	bl	8009ae4 <SDMMC_ReadFIFO>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	60fb      	str	r3, [r7, #12]
      index++;
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d60:	3301      	adds	r3, #1
 8008d62:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d64:	f7f8 fcc4 	bl	80016f0 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d72:	d102      	bne.n	8008d7a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d78:	e058      	b.n	8008e2c <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d80:	f240 532a 	movw	r3, #1322	; 0x52a
 8008d84:	4013      	ands	r3, r2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0d1      	beq.n	8008d2e <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	f003 0308 	and.w	r3, r3, #8
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d005      	beq.n	8008da4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008da0:	2308      	movs	r3, #8
 8008da2:	e043      	b.n	8008e2c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2202      	movs	r2, #2
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008dba:	2302      	movs	r3, #2
 8008dbc:	e036      	b.n	8008e2c <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc4:	f003 0320 	and.w	r3, r3, #32
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d005      	beq.n	8008dd8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008dd4:	2320      	movs	r3, #32
 8008dd6:	e029      	b.n	8008e2c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a15      	ldr	r2, [pc, #84]	; (8008e34 <SD_FindSCR+0x19c>)
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	061a      	lsls	r2, r3, #24
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	021b      	lsls	r3, r3, #8
 8008de8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008dec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	0a1b      	lsrs	r3, r3, #8
 8008df2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008df6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	0e1b      	lsrs	r3, r3, #24
 8008dfc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e00:	601a      	str	r2, [r3, #0]
    scr++;
 8008e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e04:	3304      	adds	r3, #4
 8008e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	061a      	lsls	r2, r3, #24
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	021b      	lsls	r3, r3, #8
 8008e10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e14:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	0a1b      	lsrs	r3, r3, #8
 8008e1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e1e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	0e1b      	lsrs	r3, r3, #24
 8008e24:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3738      	adds	r7, #56	; 0x38
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	18000f3a 	.word	0x18000f3a

08008e38 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e44:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d03f      	beq.n	8008ed2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	e033      	b.n	8008ec0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 fe41 	bl	8009ae4 <SDMMC_ReadFIFO>
 8008e62:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	3301      	adds	r3, #1
 8008e86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	0c1b      	lsrs	r3, r3, #16
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	0e1b      	lsrs	r3, r3, #24
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	617b      	str	r3, [r7, #20]
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2b07      	cmp	r3, #7
 8008ec4:	d9c8      	bls.n	8008e58 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008ed2:	bf00      	nop
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b086      	sub	sp, #24
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d043      	beq.n	8008f7c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	e037      	b.n	8008f6a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3301      	adds	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	021a      	lsls	r2, r3, #8
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	041a      	lsls	r2, r3, #16
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	3301      	adds	r3, #1
 8008f34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	061a      	lsls	r2, r3, #24
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f107 0208 	add.w	r2, r7, #8
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fdcd 	bl	8009afe <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	3301      	adds	r3, #1
 8008f68:	617b      	str	r3, [r7, #20]
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b07      	cmp	r3, #7
 8008f6e:	d9c4      	bls.n	8008efa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b083      	sub	sp, #12
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008fa2:	bf00      	nop
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8008fb6:	bf00      	nop
 8008fb8:	370c      	adds	r7, #12
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b083      	sub	sp, #12
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b083      	sub	sp, #12
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008fde:	bf00      	nop
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e095      	b.n	8009128 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	2b00      	cmp	r3, #0
 8009002:	d108      	bne.n	8009016 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800900c:	d009      	beq.n	8009022 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	61da      	str	r2, [r3, #28]
 8009014:	e005      	b.n	8009022 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d106      	bne.n	8009042 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7f8 f8fd 	bl	800123c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2202      	movs	r2, #2
 8009046:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009058:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009062:	d902      	bls.n	800906a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	e002      	b.n	8009070 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800906a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800906e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009078:	d007      	beq.n	800908a <HAL_SPI_Init+0xa0>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009082:	d002      	beq.n	800908a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800909a:	431a      	orrs	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	f003 0302 	and.w	r3, r3, #2
 80090a4:	431a      	orrs	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	431a      	orrs	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090c2:	431a      	orrs	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090cc:	ea42 0103 	orr.w	r1, r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	0c1b      	lsrs	r3, r3, #16
 80090e6:	f003 0204 	and.w	r2, r3, #4
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ee:	f003 0310 	and.w	r3, r3, #16
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f8:	f003 0308 	and.w	r3, r3, #8
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009106:	ea42 0103 	orr.w	r1, r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e049      	b.n	80091d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	d106      	bne.n	800915c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7f8 f958 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	3304      	adds	r3, #4
 800916c:	4619      	mov	r1, r3
 800916e:	4610      	mov	r0, r2
 8009170:	f000 fab4 	bl	80096dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d001      	beq.n	80091f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e04f      	b.n	8009298 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68da      	ldr	r2, [r3, #12]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0201 	orr.w	r2, r2, #1
 800920e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a23      	ldr	r2, [pc, #140]	; (80092a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d01d      	beq.n	8009256 <HAL_TIM_Base_Start_IT+0x76>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009222:	d018      	beq.n	8009256 <HAL_TIM_Base_Start_IT+0x76>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1f      	ldr	r2, [pc, #124]	; (80092a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d013      	beq.n	8009256 <HAL_TIM_Base_Start_IT+0x76>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1e      	ldr	r2, [pc, #120]	; (80092ac <HAL_TIM_Base_Start_IT+0xcc>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00e      	beq.n	8009256 <HAL_TIM_Base_Start_IT+0x76>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1c      	ldr	r2, [pc, #112]	; (80092b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d009      	beq.n	8009256 <HAL_TIM_Base_Start_IT+0x76>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a1b      	ldr	r2, [pc, #108]	; (80092b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d004      	beq.n	8009256 <HAL_TIM_Base_Start_IT+0x76>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a19      	ldr	r2, [pc, #100]	; (80092b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d115      	bne.n	8009282 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	4b17      	ldr	r3, [pc, #92]	; (80092bc <HAL_TIM_Base_Start_IT+0xdc>)
 800925e:	4013      	ands	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b06      	cmp	r3, #6
 8009266:	d015      	beq.n	8009294 <HAL_TIM_Base_Start_IT+0xb4>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800926e:	d011      	beq.n	8009294 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0201 	orr.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009280:	e008      	b.n	8009294 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0201 	orr.w	r2, r2, #1
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	e000      	b.n	8009296 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009294:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	40012c00 	.word	0x40012c00
 80092a8:	40000400 	.word	0x40000400
 80092ac:	40000800 	.word	0x40000800
 80092b0:	40000c00 	.word	0x40000c00
 80092b4:	40013400 	.word	0x40013400
 80092b8:	40014000 	.word	0x40014000
 80092bc:	00010007 	.word	0x00010007

080092c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d122      	bne.n	800931c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d11b      	bne.n	800931c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f06f 0202 	mvn.w	r2, #2
 80092ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	f003 0303 	and.w	r3, r3, #3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f9cb 	bl	800969e <HAL_TIM_IC_CaptureCallback>
 8009308:	e005      	b.n	8009316 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f9bd 	bl	800968a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f9ce 	bl	80096b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	f003 0304 	and.w	r3, r3, #4
 8009326:	2b04      	cmp	r3, #4
 8009328:	d122      	bne.n	8009370 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f003 0304 	and.w	r3, r3, #4
 8009334:	2b04      	cmp	r3, #4
 8009336:	d11b      	bne.n	8009370 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f06f 0204 	mvn.w	r2, #4
 8009340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2202      	movs	r2, #2
 8009346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f9a1 	bl	800969e <HAL_TIM_IC_CaptureCallback>
 800935c:	e005      	b.n	800936a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f993 	bl	800968a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f9a4 	bl	80096b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f003 0308 	and.w	r3, r3, #8
 800937a:	2b08      	cmp	r3, #8
 800937c:	d122      	bne.n	80093c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f003 0308 	and.w	r3, r3, #8
 8009388:	2b08      	cmp	r3, #8
 800938a:	d11b      	bne.n	80093c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f06f 0208 	mvn.w	r2, #8
 8009394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2204      	movs	r2, #4
 800939a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	f003 0303 	and.w	r3, r3, #3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f977 	bl	800969e <HAL_TIM_IC_CaptureCallback>
 80093b0:	e005      	b.n	80093be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f969 	bl	800968a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f97a 	bl	80096b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0310 	and.w	r3, r3, #16
 80093ce:	2b10      	cmp	r3, #16
 80093d0:	d122      	bne.n	8009418 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f003 0310 	and.w	r3, r3, #16
 80093dc:	2b10      	cmp	r3, #16
 80093de:	d11b      	bne.n	8009418 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f06f 0210 	mvn.w	r2, #16
 80093e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2208      	movs	r2, #8
 80093ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f94d 	bl	800969e <HAL_TIM_IC_CaptureCallback>
 8009404:	e005      	b.n	8009412 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f93f 	bl	800968a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f950 	bl	80096b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	2b01      	cmp	r3, #1
 8009424:	d10e      	bne.n	8009444 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b01      	cmp	r3, #1
 8009432:	d107      	bne.n	8009444 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f06f 0201 	mvn.w	r2, #1
 800943c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7f7 fc9e 	bl	8000d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944e:	2b80      	cmp	r3, #128	; 0x80
 8009450:	d10e      	bne.n	8009470 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945c:	2b80      	cmp	r3, #128	; 0x80
 800945e:	d107      	bne.n	8009470 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fafc 	bl	8009a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800947a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800947e:	d10e      	bne.n	800949e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948a:	2b80      	cmp	r3, #128	; 0x80
 800948c:	d107      	bne.n	800949e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 faef 	bl	8009a7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a8:	2b40      	cmp	r3, #64	; 0x40
 80094aa:	d10e      	bne.n	80094ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b40      	cmp	r3, #64	; 0x40
 80094b8:	d107      	bne.n	80094ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f8fe 	bl	80096c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	2b20      	cmp	r3, #32
 80094d6:	d10e      	bne.n	80094f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b20      	cmp	r3, #32
 80094e4:	d107      	bne.n	80094f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f06f 0220 	mvn.w	r2, #32
 80094ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 faaf 	bl	8009a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094f6:	bf00      	nop
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800950e:	2b01      	cmp	r3, #1
 8009510:	d101      	bne.n	8009516 <HAL_TIM_ConfigClockSource+0x18>
 8009512:	2302      	movs	r3, #2
 8009514:	e0b5      	b.n	8009682 <HAL_TIM_ConfigClockSource+0x184>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2202      	movs	r2, #2
 8009522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009534:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009538:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009540:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009552:	d03e      	beq.n	80095d2 <HAL_TIM_ConfigClockSource+0xd4>
 8009554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009558:	f200 8087 	bhi.w	800966a <HAL_TIM_ConfigClockSource+0x16c>
 800955c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009560:	f000 8085 	beq.w	800966e <HAL_TIM_ConfigClockSource+0x170>
 8009564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009568:	d87f      	bhi.n	800966a <HAL_TIM_ConfigClockSource+0x16c>
 800956a:	2b70      	cmp	r3, #112	; 0x70
 800956c:	d01a      	beq.n	80095a4 <HAL_TIM_ConfigClockSource+0xa6>
 800956e:	2b70      	cmp	r3, #112	; 0x70
 8009570:	d87b      	bhi.n	800966a <HAL_TIM_ConfigClockSource+0x16c>
 8009572:	2b60      	cmp	r3, #96	; 0x60
 8009574:	d050      	beq.n	8009618 <HAL_TIM_ConfigClockSource+0x11a>
 8009576:	2b60      	cmp	r3, #96	; 0x60
 8009578:	d877      	bhi.n	800966a <HAL_TIM_ConfigClockSource+0x16c>
 800957a:	2b50      	cmp	r3, #80	; 0x50
 800957c:	d03c      	beq.n	80095f8 <HAL_TIM_ConfigClockSource+0xfa>
 800957e:	2b50      	cmp	r3, #80	; 0x50
 8009580:	d873      	bhi.n	800966a <HAL_TIM_ConfigClockSource+0x16c>
 8009582:	2b40      	cmp	r3, #64	; 0x40
 8009584:	d058      	beq.n	8009638 <HAL_TIM_ConfigClockSource+0x13a>
 8009586:	2b40      	cmp	r3, #64	; 0x40
 8009588:	d86f      	bhi.n	800966a <HAL_TIM_ConfigClockSource+0x16c>
 800958a:	2b30      	cmp	r3, #48	; 0x30
 800958c:	d064      	beq.n	8009658 <HAL_TIM_ConfigClockSource+0x15a>
 800958e:	2b30      	cmp	r3, #48	; 0x30
 8009590:	d86b      	bhi.n	800966a <HAL_TIM_ConfigClockSource+0x16c>
 8009592:	2b20      	cmp	r3, #32
 8009594:	d060      	beq.n	8009658 <HAL_TIM_ConfigClockSource+0x15a>
 8009596:	2b20      	cmp	r3, #32
 8009598:	d867      	bhi.n	800966a <HAL_TIM_ConfigClockSource+0x16c>
 800959a:	2b00      	cmp	r3, #0
 800959c:	d05c      	beq.n	8009658 <HAL_TIM_ConfigClockSource+0x15a>
 800959e:	2b10      	cmp	r3, #16
 80095a0:	d05a      	beq.n	8009658 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80095a2:	e062      	b.n	800966a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6818      	ldr	r0, [r3, #0]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	6899      	ldr	r1, [r3, #8]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f000 f9a6 	bl	8009904 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80095c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	609a      	str	r2, [r3, #8]
      break;
 80095d0:	e04e      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	6899      	ldr	r1, [r3, #8]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685a      	ldr	r2, [r3, #4]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f000 f98f 	bl	8009904 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095f4:	609a      	str	r2, [r3, #8]
      break;
 80095f6:	e03b      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6818      	ldr	r0, [r3, #0]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	6859      	ldr	r1, [r3, #4]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	461a      	mov	r2, r3
 8009606:	f000 f903 	bl	8009810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2150      	movs	r1, #80	; 0x50
 8009610:	4618      	mov	r0, r3
 8009612:	f000 f95c 	bl	80098ce <TIM_ITRx_SetConfig>
      break;
 8009616:	e02b      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6818      	ldr	r0, [r3, #0]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	6859      	ldr	r1, [r3, #4]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	461a      	mov	r2, r3
 8009626:	f000 f922 	bl	800986e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2160      	movs	r1, #96	; 0x60
 8009630:	4618      	mov	r0, r3
 8009632:	f000 f94c 	bl	80098ce <TIM_ITRx_SetConfig>
      break;
 8009636:	e01b      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6818      	ldr	r0, [r3, #0]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	6859      	ldr	r1, [r3, #4]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	461a      	mov	r2, r3
 8009646:	f000 f8e3 	bl	8009810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2140      	movs	r1, #64	; 0x40
 8009650:	4618      	mov	r0, r3
 8009652:	f000 f93c 	bl	80098ce <TIM_ITRx_SetConfig>
      break;
 8009656:	e00b      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4619      	mov	r1, r3
 8009662:	4610      	mov	r0, r2
 8009664:	f000 f933 	bl	80098ce <TIM_ITRx_SetConfig>
        break;
 8009668:	e002      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800966a:	bf00      	nop
 800966c:	e000      	b.n	8009670 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800966e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096ba:	bf00      	nop
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
	...

080096dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a40      	ldr	r2, [pc, #256]	; (80097f0 <TIM_Base_SetConfig+0x114>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d013      	beq.n	800971c <TIM_Base_SetConfig+0x40>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096fa:	d00f      	beq.n	800971c <TIM_Base_SetConfig+0x40>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a3d      	ldr	r2, [pc, #244]	; (80097f4 <TIM_Base_SetConfig+0x118>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d00b      	beq.n	800971c <TIM_Base_SetConfig+0x40>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a3c      	ldr	r2, [pc, #240]	; (80097f8 <TIM_Base_SetConfig+0x11c>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d007      	beq.n	800971c <TIM_Base_SetConfig+0x40>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a3b      	ldr	r2, [pc, #236]	; (80097fc <TIM_Base_SetConfig+0x120>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d003      	beq.n	800971c <TIM_Base_SetConfig+0x40>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a3a      	ldr	r2, [pc, #232]	; (8009800 <TIM_Base_SetConfig+0x124>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d108      	bne.n	800972e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a2f      	ldr	r2, [pc, #188]	; (80097f0 <TIM_Base_SetConfig+0x114>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d01f      	beq.n	8009776 <TIM_Base_SetConfig+0x9a>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800973c:	d01b      	beq.n	8009776 <TIM_Base_SetConfig+0x9a>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a2c      	ldr	r2, [pc, #176]	; (80097f4 <TIM_Base_SetConfig+0x118>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d017      	beq.n	8009776 <TIM_Base_SetConfig+0x9a>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a2b      	ldr	r2, [pc, #172]	; (80097f8 <TIM_Base_SetConfig+0x11c>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d013      	beq.n	8009776 <TIM_Base_SetConfig+0x9a>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a2a      	ldr	r2, [pc, #168]	; (80097fc <TIM_Base_SetConfig+0x120>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d00f      	beq.n	8009776 <TIM_Base_SetConfig+0x9a>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a29      	ldr	r2, [pc, #164]	; (8009800 <TIM_Base_SetConfig+0x124>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d00b      	beq.n	8009776 <TIM_Base_SetConfig+0x9a>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a28      	ldr	r2, [pc, #160]	; (8009804 <TIM_Base_SetConfig+0x128>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d007      	beq.n	8009776 <TIM_Base_SetConfig+0x9a>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a27      	ldr	r2, [pc, #156]	; (8009808 <TIM_Base_SetConfig+0x12c>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d003      	beq.n	8009776 <TIM_Base_SetConfig+0x9a>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a26      	ldr	r2, [pc, #152]	; (800980c <TIM_Base_SetConfig+0x130>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d108      	bne.n	8009788 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800977c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	4313      	orrs	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a10      	ldr	r2, [pc, #64]	; (80097f0 <TIM_Base_SetConfig+0x114>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d00f      	beq.n	80097d4 <TIM_Base_SetConfig+0xf8>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a12      	ldr	r2, [pc, #72]	; (8009800 <TIM_Base_SetConfig+0x124>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d00b      	beq.n	80097d4 <TIM_Base_SetConfig+0xf8>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a11      	ldr	r2, [pc, #68]	; (8009804 <TIM_Base_SetConfig+0x128>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d007      	beq.n	80097d4 <TIM_Base_SetConfig+0xf8>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a10      	ldr	r2, [pc, #64]	; (8009808 <TIM_Base_SetConfig+0x12c>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d003      	beq.n	80097d4 <TIM_Base_SetConfig+0xf8>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a0f      	ldr	r2, [pc, #60]	; (800980c <TIM_Base_SetConfig+0x130>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d103      	bne.n	80097dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	691a      	ldr	r2, [r3, #16]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	615a      	str	r2, [r3, #20]
}
 80097e2:	bf00      	nop
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	40012c00 	.word	0x40012c00
 80097f4:	40000400 	.word	0x40000400
 80097f8:	40000800 	.word	0x40000800
 80097fc:	40000c00 	.word	0x40000c00
 8009800:	40013400 	.word	0x40013400
 8009804:	40014000 	.word	0x40014000
 8009808:	40014400 	.word	0x40014400
 800980c:	40014800 	.word	0x40014800

08009810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	f023 0201 	bic.w	r2, r3, #1
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800983a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	4313      	orrs	r3, r2
 8009844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f023 030a 	bic.w	r3, r3, #10
 800984c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	4313      	orrs	r3, r2
 8009854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	621a      	str	r2, [r3, #32]
}
 8009862:	bf00      	nop
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800986e:	b480      	push	{r7}
 8009870:	b087      	sub	sp, #28
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	f023 0210 	bic.w	r2, r3, #16
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	031b      	lsls	r3, r3, #12
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	621a      	str	r2, [r3, #32]
}
 80098c2:	bf00      	nop
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b085      	sub	sp, #20
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	f043 0307 	orr.w	r3, r3, #7
 80098f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	609a      	str	r2, [r3, #8]
}
 80098f8:	bf00      	nop
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]
 8009910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800991e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	021a      	lsls	r2, r3, #8
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	431a      	orrs	r2, r3
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	4313      	orrs	r3, r2
 800992c:	697a      	ldr	r2, [r7, #20]
 800992e:	4313      	orrs	r3, r2
 8009930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	609a      	str	r2, [r3, #8]
}
 8009938:	bf00      	nop
 800993a:	371c      	adds	r7, #28
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009954:	2b01      	cmp	r3, #1
 8009956:	d101      	bne.n	800995c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009958:	2302      	movs	r3, #2
 800995a:	e068      	b.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a2e      	ldr	r2, [pc, #184]	; (8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d004      	beq.n	8009990 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a2d      	ldr	r2, [pc, #180]	; (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d108      	bne.n	80099a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009996:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a1e      	ldr	r2, [pc, #120]	; (8009a3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d01d      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ce:	d018      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a1b      	ldr	r2, [pc, #108]	; (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d013      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a1a      	ldr	r2, [pc, #104]	; (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d00e      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a18      	ldr	r2, [pc, #96]	; (8009a4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d009      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a13      	ldr	r2, [pc, #76]	; (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d004      	beq.n	8009a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a14      	ldr	r2, [pc, #80]	; (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d10c      	bne.n	8009a1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	40012c00 	.word	0x40012c00
 8009a40:	40013400 	.word	0x40013400
 8009a44:	40000400 	.word	0x40000400
 8009a48:	40000800 	.word	0x40000800
 8009a4c:	40000c00 	.word	0x40000c00
 8009a50:	40014000 	.word	0x40014000

08009a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009a90:	b084      	sub	sp, #16
 8009a92:	b480      	push	{r7}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	f107 001c 	add.w	r0, r7, #28
 8009a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009aa6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009aaa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8009aae:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8009ab2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8009ab6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	4b07      	ldr	r3, [pc, #28]	; (8009ae0 <SDMMC_Init+0x50>)
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	b004      	add	sp, #16
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	ffc02c00 	.word	0xffc02c00

08009ae4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f043 0203 	orr.w	r2, r3, #3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009b34:	2002      	movs	r0, #2
 8009b36:	f7f7 fde7 	bl	8001708 <HAL_Delay>

  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0303 	and.w	r3, r3, #3
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b7e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009b84:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009b8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68da      	ldr	r2, [r3, #12]
 8009b96:	4b06      	ldr	r3, [pc, #24]	; (8009bb0 <SDMMC_SendCommand+0x50>)
 8009b98:	4013      	ands	r3, r2
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	431a      	orrs	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	fffee0c0 	.word	0xfffee0c0

08009bb4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	b2db      	uxtb	r3, r3
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b085      	sub	sp, #20
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	3314      	adds	r3, #20
 8009bdc:	461a      	mov	r2, r3
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	4413      	add	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c1a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009c20:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009c26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0

}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b088      	sub	sp, #32
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009c5a:	2310      	movs	r3, #16
 8009c5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c64:	2300      	movs	r3, #0
 8009c66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c6e:	f107 0308 	add.w	r3, r7, #8
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff ff73 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c7e:	2110      	movs	r1, #16
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fa7b 	bl	800a17c <SDMMC_GetCmdResp1>
 8009c86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c88:	69fb      	ldr	r3, [r7, #28]
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3720      	adds	r7, #32
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b088      	sub	sp, #32
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009ca0:	2311      	movs	r3, #17
 8009ca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009caa:	2300      	movs	r3, #0
 8009cac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cb4:	f107 0308 	add.w	r3, r7, #8
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff ff50 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc4:	2111      	movs	r1, #17
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fa58 	bl	800a17c <SDMMC_GetCmdResp1>
 8009ccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cce:	69fb      	ldr	r3, [r7, #28]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3720      	adds	r7, #32
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009ce6:	2312      	movs	r3, #18
 8009ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cfa:	f107 0308 	add.w	r3, r7, #8
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7ff ff2d 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d0a:	2112      	movs	r1, #18
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fa35 	bl	800a17c <SDMMC_GetCmdResp1>
 8009d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d14:	69fb      	ldr	r3, [r7, #28]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3720      	adds	r7, #32
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b088      	sub	sp, #32
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009d2c:	2318      	movs	r3, #24
 8009d2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d36:	2300      	movs	r3, #0
 8009d38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d40:	f107 0308 	add.w	r3, r7, #8
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff ff0a 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d50:	2118      	movs	r1, #24
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fa12 	bl	800a17c <SDMMC_GetCmdResp1>
 8009d58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d5a:	69fb      	ldr	r3, [r7, #28]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3720      	adds	r7, #32
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009d72:	2319      	movs	r3, #25
 8009d74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d86:	f107 0308 	add.w	r3, r7, #8
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f7ff fee7 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d96:	2119      	movs	r1, #25
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f9ef 	bl	800a17c <SDMMC_GetCmdResp1>
 8009d9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009da0:	69fb      	ldr	r3, [r7, #28]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3720      	adds	r7, #32
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
	...

08009dac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009db8:	230c      	movs	r3, #12
 8009dba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dca:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009de4:	f107 0308 	add.w	r3, r7, #8
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f7ff feb8 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009df0:	4a08      	ldr	r2, [pc, #32]	; (8009e14 <SDMMC_CmdStopTransfer+0x68>)
 8009df2:	210c      	movs	r1, #12
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f9c1 	bl	800a17c <SDMMC_GetCmdResp1>
 8009dfa:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009e08:	69fb      	ldr	r3, [r7, #28]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3720      	adds	r7, #32
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	05f5e100 	.word	0x05f5e100

08009e18 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08a      	sub	sp, #40	; 0x28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009e28:	2307      	movs	r3, #7
 8009e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e30:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e32:	2300      	movs	r3, #0
 8009e34:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e3a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e3c:	f107 0310 	add.w	r3, r7, #16
 8009e40:	4619      	mov	r1, r3
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f7ff fe8c 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e4c:	2107      	movs	r1, #7
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f000 f994 	bl	800a17c <SDMMC_GetCmdResp1>
 8009e54:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3728      	adds	r7, #40	; 0x28
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009e70:	2300      	movs	r3, #0
 8009e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e74:	2300      	movs	r3, #0
 8009e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e7e:	f107 0308 	add.w	r3, r7, #8
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7ff fe6b 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fbb8 	bl	800a600 <SDMMC_GetCmdError>
 8009e90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e92:	69fb      	ldr	r3, [r7, #28]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3720      	adds	r7, #32
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009ea4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009eaa:	2308      	movs	r3, #8
 8009eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ebc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ebe:	f107 0308 	add.w	r3, r7, #8
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff fe4b 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fb4a 	bl	800a564 <SDMMC_GetCmdResp7>
 8009ed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ed2:	69fb      	ldr	r3, [r7, #28]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3720      	adds	r7, #32
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009eea:	2337      	movs	r3, #55	; 0x37
 8009eec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009efc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009efe:	f107 0308 	add.w	r3, r7, #8
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7ff fe2b 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f0e:	2137      	movs	r1, #55	; 0x37
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f933 	bl	800a17c <SDMMC_GetCmdResp1>
 8009f16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f18:	69fb      	ldr	r3, [r7, #28]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3720      	adds	r7, #32
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b088      	sub	sp, #32
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009f30:	2329      	movs	r3, #41	; 0x29
 8009f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f44:	f107 0308 	add.w	r3, r7, #8
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff fe08 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fa4f 	bl	800a3f4 <SDMMC_GetCmdResp3>
 8009f56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f58:	69fb      	ldr	r3, [r7, #28]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3720      	adds	r7, #32
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b088      	sub	sp, #32
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009f70:	2306      	movs	r3, #6
 8009f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f84:	f107 0308 	add.w	r3, r7, #8
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7ff fde8 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f94:	2106      	movs	r1, #6
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f8f0 	bl	800a17c <SDMMC_GetCmdResp1>
 8009f9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3720      	adds	r7, #32
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009fb4:	2333      	movs	r3, #51	; 0x33
 8009fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fc8:	f107 0308 	add.w	r3, r7, #8
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7ff fdc6 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fd8:	2133      	movs	r1, #51	; 0x33
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f8ce 	bl	800a17c <SDMMC_GetCmdResp1>
 8009fe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3720      	adds	r7, #32
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b088      	sub	sp, #32
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ffc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a002:	2300      	movs	r3, #0
 800a004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a00a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a00c:	f107 0308 	add.w	r3, r7, #8
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff fda4 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f9a1 	bl	800a360 <SDMMC_GetCmdResp2>
 800a01e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a020:	69fb      	ldr	r3, [r7, #28]
}
 800a022:	4618      	mov	r0, r3
 800a024:	3720      	adds	r7, #32
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b088      	sub	sp, #32
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a038:	2309      	movs	r3, #9
 800a03a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a03c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a04a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a04c:	f107 0308 	add.w	r3, r7, #8
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff fd84 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f981 	bl	800a360 <SDMMC_GetCmdResp2>
 800a05e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a060:	69fb      	ldr	r3, [r7, #28]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3720      	adds	r7, #32
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b088      	sub	sp, #32
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a078:	2303      	movs	r3, #3
 800a07a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a07c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a082:	2300      	movs	r3, #0
 800a084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a08a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a08c:	f107 0308 	add.w	r3, r7, #8
 800a090:	4619      	mov	r1, r3
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff fd64 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	2103      	movs	r1, #3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f9e9 	bl	800a474 <SDMMC_GetCmdResp6>
 800a0a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0a4:	69fb      	ldr	r3, [r7, #28]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3720      	adds	r7, #32
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b088      	sub	sp, #32
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a0bc:	230d      	movs	r3, #13
 800a0be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0d0:	f107 0308 	add.w	r3, r7, #8
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7ff fd42 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a0dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e0:	210d      	movs	r1, #13
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f84a 	bl	800a17c <SDMMC_GetCmdResp1>
 800a0e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ea:	69fb      	ldr	r3, [r7, #28]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3720      	adds	r7, #32
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a100:	230d      	movs	r3, #13
 800a102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a104:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a10a:	2300      	movs	r3, #0
 800a10c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a10e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a114:	f107 0308 	add.w	r3, r7, #8
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff fd20 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a120:	f241 3288 	movw	r2, #5000	; 0x1388
 800a124:	210d      	movs	r1, #13
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f828 	bl	800a17c <SDMMC_GetCmdResp1>
 800a12c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a12e:	69fb      	ldr	r3, [r7, #28]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3720      	adds	r7, #32
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800a140:	2300      	movs	r3, #0
 800a142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800a144:	230b      	movs	r3, #11
 800a146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a14e:	2300      	movs	r3, #0
 800a150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a156:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a158:	f107 0308 	add.w	r3, r7, #8
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff fcfe 	bl	8009b60 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800a164:	f241 3288 	movw	r2, #5000	; 0x1388
 800a168:	210b      	movs	r1, #11
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f806 	bl	800a17c <SDMMC_GetCmdResp1>
 800a170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a172:	69fb      	ldr	r3, [r7, #28]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3720      	adds	r7, #32
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	460b      	mov	r3, r1
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a18a:	4b70      	ldr	r3, [pc, #448]	; (800a34c <SDMMC_GetCmdResp1+0x1d0>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a70      	ldr	r2, [pc, #448]	; (800a350 <SDMMC_GetCmdResp1+0x1d4>)
 800a190:	fba2 2303 	umull	r2, r3, r2, r3
 800a194:	0a5a      	lsrs	r2, r3, #9
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	fb02 f303 	mul.w	r3, r2, r3
 800a19c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	1e5a      	subs	r2, r3, #1
 800a1a2:	61fa      	str	r2, [r7, #28]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d102      	bne.n	800a1ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1ac:	e0c9      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b2:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	4b67      	ldr	r3, [pc, #412]	; (800a354 <SDMMC_GetCmdResp1+0x1d8>)
 800a1b8:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0ef      	beq.n	800a19e <SDMMC_GetCmdResp1+0x22>
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1ea      	bne.n	800a19e <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1cc:	f003 0304 	and.w	r3, r3, #4
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d004      	beq.n	800a1de <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2204      	movs	r2, #4
 800a1d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1da:	2304      	movs	r3, #4
 800a1dc:	e0b1      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d004      	beq.n	800a1f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e0a6      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	4a58      	ldr	r2, [pc, #352]	; (800a358 <SDMMC_GetCmdResp1+0x1dc>)
 800a1f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff fcda 	bl	8009bb4 <SDMMC_GetCommandResponse>
 800a200:	4603      	mov	r3, r0
 800a202:	461a      	mov	r2, r3
 800a204:	7afb      	ldrb	r3, [r7, #11]
 800a206:	4293      	cmp	r3, r2
 800a208:	d001      	beq.n	800a20e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e099      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a20e:	2100      	movs	r1, #0
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f7ff fcdc 	bl	8009bce <SDMMC_GetResponse>
 800a216:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	4b50      	ldr	r3, [pc, #320]	; (800a35c <SDMMC_GetCmdResp1+0x1e0>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a222:	2300      	movs	r3, #0
 800a224:	e08d      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	da02      	bge.n	800a232 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a22c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a230:	e087      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a23c:	2340      	movs	r3, #64	; 0x40
 800a23e:	e080      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a24a:	2380      	movs	r3, #128	; 0x80
 800a24c:	e079      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a25c:	e071      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a26c:	e069      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a27c:	e061      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d002      	beq.n	800a28e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a28c:	e059      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a29c:	e051      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d002      	beq.n	800a2ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2ac:	e049      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a2b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2bc:	e041      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a2c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2cc:	e039      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a2d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a2dc:	e031      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d002      	beq.n	800a2ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a2e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a2ec:	e029      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a2f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a2fc:	e021      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a308:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a30c:	e019      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a318:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a31c:	e011      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d002      	beq.n	800a32e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a328:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a32c:	e009      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f003 0308 	and.w	r3, r3, #8
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a338:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a33c:	e001      	b.n	800a342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a33e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a342:	4618      	mov	r0, r3
 800a344:	3720      	adds	r7, #32
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20000000 	.word	0x20000000
 800a350:	10624dd3 	.word	0x10624dd3
 800a354:	00200045 	.word	0x00200045
 800a358:	002000c5 	.word	0x002000c5
 800a35c:	fdffe008 	.word	0xfdffe008

0800a360 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a368:	4b1f      	ldr	r3, [pc, #124]	; (800a3e8 <SDMMC_GetCmdResp2+0x88>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a1f      	ldr	r2, [pc, #124]	; (800a3ec <SDMMC_GetCmdResp2+0x8c>)
 800a36e:	fba2 2303 	umull	r2, r3, r2, r3
 800a372:	0a5b      	lsrs	r3, r3, #9
 800a374:	f241 3288 	movw	r2, #5000	; 0x1388
 800a378:	fb02 f303 	mul.w	r3, r2, r3
 800a37c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	1e5a      	subs	r2, r3, #1
 800a382:	60fa      	str	r2, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d102      	bne.n	800a38e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a38c:	e026      	b.n	800a3dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a392:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0ef      	beq.n	800a37e <SDMMC_GetCmdResp2+0x1e>
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1ea      	bne.n	800a37e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ac:	f003 0304 	and.w	r3, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d004      	beq.n	800a3be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2204      	movs	r2, #4
 800a3b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3ba:	2304      	movs	r3, #4
 800a3bc:	e00e      	b.n	800a3dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d004      	beq.n	800a3d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e003      	b.n	800a3dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a06      	ldr	r2, [pc, #24]	; (800a3f0 <SDMMC_GetCmdResp2+0x90>)
 800a3d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	20000000 	.word	0x20000000
 800a3ec:	10624dd3 	.word	0x10624dd3
 800a3f0:	002000c5 	.word	0x002000c5

0800a3f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3fc:	4b1a      	ldr	r3, [pc, #104]	; (800a468 <SDMMC_GetCmdResp3+0x74>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a1a      	ldr	r2, [pc, #104]	; (800a46c <SDMMC_GetCmdResp3+0x78>)
 800a402:	fba2 2303 	umull	r2, r3, r2, r3
 800a406:	0a5b      	lsrs	r3, r3, #9
 800a408:	f241 3288 	movw	r2, #5000	; 0x1388
 800a40c:	fb02 f303 	mul.w	r3, r2, r3
 800a410:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	1e5a      	subs	r2, r3, #1
 800a416:	60fa      	str	r2, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d102      	bne.n	800a422 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a41c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a420:	e01b      	b.n	800a45a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a426:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0ef      	beq.n	800a412 <SDMMC_GetCmdResp3+0x1e>
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1ea      	bne.n	800a412 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a440:	f003 0304 	and.w	r3, r3, #4
 800a444:	2b00      	cmp	r3, #0
 800a446:	d004      	beq.n	800a452 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2204      	movs	r2, #4
 800a44c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a44e:	2304      	movs	r3, #4
 800a450:	e003      	b.n	800a45a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a06      	ldr	r2, [pc, #24]	; (800a470 <SDMMC_GetCmdResp3+0x7c>)
 800a456:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	20000000 	.word	0x20000000
 800a46c:	10624dd3 	.word	0x10624dd3
 800a470:	002000c5 	.word	0x002000c5

0800a474 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	460b      	mov	r3, r1
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a482:	4b35      	ldr	r3, [pc, #212]	; (800a558 <SDMMC_GetCmdResp6+0xe4>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a35      	ldr	r2, [pc, #212]	; (800a55c <SDMMC_GetCmdResp6+0xe8>)
 800a488:	fba2 2303 	umull	r2, r3, r2, r3
 800a48c:	0a5b      	lsrs	r3, r3, #9
 800a48e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a492:	fb02 f303 	mul.w	r3, r2, r3
 800a496:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	1e5a      	subs	r2, r3, #1
 800a49c:	61fa      	str	r2, [r7, #28]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d102      	bne.n	800a4a8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4a6:	e052      	b.n	800a54e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d0ef      	beq.n	800a498 <SDMMC_GetCmdResp6+0x24>
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1ea      	bne.n	800a498 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c6:	f003 0304 	and.w	r3, r3, #4
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d004      	beq.n	800a4d8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2204      	movs	r2, #4
 800a4d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4d4:	2304      	movs	r3, #4
 800a4d6:	e03a      	b.n	800a54e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d004      	beq.n	800a4ee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e02f      	b.n	800a54e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f7ff fb60 	bl	8009bb4 <SDMMC_GetCommandResponse>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	7afb      	ldrb	r3, [r7, #11]
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d001      	beq.n	800a502 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4fe:	2301      	movs	r3, #1
 800a500:	e025      	b.n	800a54e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4a16      	ldr	r2, [pc, #88]	; (800a560 <SDMMC_GetCmdResp6+0xec>)
 800a506:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a508:	2100      	movs	r1, #0
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f7ff fb5f 	bl	8009bce <SDMMC_GetResponse>
 800a510:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d106      	bne.n	800a52a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	0c1b      	lsrs	r3, r3, #16
 800a520:	b29a      	uxth	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a526:	2300      	movs	r3, #0
 800a528:	e011      	b.n	800a54e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a538:	e009      	b.n	800a54e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a548:	e001      	b.n	800a54e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a54a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3720      	adds	r7, #32
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	20000000 	.word	0x20000000
 800a55c:	10624dd3 	.word	0x10624dd3
 800a560:	002000c5 	.word	0x002000c5

0800a564 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a56c:	4b22      	ldr	r3, [pc, #136]	; (800a5f8 <SDMMC_GetCmdResp7+0x94>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a22      	ldr	r2, [pc, #136]	; (800a5fc <SDMMC_GetCmdResp7+0x98>)
 800a572:	fba2 2303 	umull	r2, r3, r2, r3
 800a576:	0a5b      	lsrs	r3, r3, #9
 800a578:	f241 3288 	movw	r2, #5000	; 0x1388
 800a57c:	fb02 f303 	mul.w	r3, r2, r3
 800a580:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	60fa      	str	r2, [r7, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a58c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a590:	e02c      	b.n	800a5ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a596:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0ef      	beq.n	800a582 <SDMMC_GetCmdResp7+0x1e>
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1ea      	bne.n	800a582 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b0:	f003 0304 	and.w	r3, r3, #4
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d004      	beq.n	800a5c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2204      	movs	r2, #4
 800a5bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5be:	2304      	movs	r3, #4
 800a5c0:	e014      	b.n	800a5ec <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d004      	beq.n	800a5d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e009      	b.n	800a5ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2240      	movs	r2, #64	; 0x40
 800a5e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5ea:	2300      	movs	r3, #0

}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	20000000 	.word	0x20000000
 800a5fc:	10624dd3 	.word	0x10624dd3

0800a600 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a608:	4b11      	ldr	r3, [pc, #68]	; (800a650 <SDMMC_GetCmdError+0x50>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a11      	ldr	r2, [pc, #68]	; (800a654 <SDMMC_GetCmdError+0x54>)
 800a60e:	fba2 2303 	umull	r2, r3, r2, r3
 800a612:	0a5b      	lsrs	r3, r3, #9
 800a614:	f241 3288 	movw	r2, #5000	; 0x1388
 800a618:	fb02 f303 	mul.w	r3, r2, r3
 800a61c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	1e5a      	subs	r2, r3, #1
 800a622:	60fa      	str	r2, [r7, #12]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d102      	bne.n	800a62e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a62c:	e009      	b.n	800a642 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0f1      	beq.n	800a61e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a06      	ldr	r2, [pc, #24]	; (800a658 <SDMMC_GetCmdError+0x58>)
 800a63e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20000000 	.word	0x20000000
 800a654:	10624dd3 	.word	0x10624dd3
 800a658:	002000c5 	.word	0x002000c5

0800a65c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a65c:	b084      	sub	sp, #16
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	f107 001c 	add.w	r0, r7, #28
 800a66a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f001 f9ce 	bl	800ba1c <USB_CoreReset>
 800a680:	4603      	mov	r3, r0
 800a682:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	639a      	str	r2, [r3, #56]	; 0x38
 800a696:	e005      	b.n	800a6a4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6b0:	b004      	add	sp, #16
 800a6b2:	4770      	bx	lr

0800a6b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b087      	sub	sp, #28
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a6c2:	79fb      	ldrb	r3, [r7, #7]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d165      	bne.n	800a794 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	4a3e      	ldr	r2, [pc, #248]	; (800a7c4 <USB_SetTurnaroundTime+0x110>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d906      	bls.n	800a6de <USB_SetTurnaroundTime+0x2a>
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4a3d      	ldr	r2, [pc, #244]	; (800a7c8 <USB_SetTurnaroundTime+0x114>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d202      	bcs.n	800a6de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a6d8:	230f      	movs	r3, #15
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	e05c      	b.n	800a798 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4a39      	ldr	r2, [pc, #228]	; (800a7c8 <USB_SetTurnaroundTime+0x114>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d306      	bcc.n	800a6f4 <USB_SetTurnaroundTime+0x40>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	4a38      	ldr	r2, [pc, #224]	; (800a7cc <USB_SetTurnaroundTime+0x118>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d202      	bcs.n	800a6f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a6ee:	230e      	movs	r3, #14
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	e051      	b.n	800a798 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	4a35      	ldr	r2, [pc, #212]	; (800a7cc <USB_SetTurnaroundTime+0x118>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d306      	bcc.n	800a70a <USB_SetTurnaroundTime+0x56>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4a34      	ldr	r2, [pc, #208]	; (800a7d0 <USB_SetTurnaroundTime+0x11c>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d202      	bcs.n	800a70a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a704:	230d      	movs	r3, #13
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	e046      	b.n	800a798 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	4a30      	ldr	r2, [pc, #192]	; (800a7d0 <USB_SetTurnaroundTime+0x11c>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d306      	bcc.n	800a720 <USB_SetTurnaroundTime+0x6c>
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	4a2f      	ldr	r2, [pc, #188]	; (800a7d4 <USB_SetTurnaroundTime+0x120>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d802      	bhi.n	800a720 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a71a:	230c      	movs	r3, #12
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	e03b      	b.n	800a798 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4a2c      	ldr	r2, [pc, #176]	; (800a7d4 <USB_SetTurnaroundTime+0x120>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d906      	bls.n	800a736 <USB_SetTurnaroundTime+0x82>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	4a2b      	ldr	r2, [pc, #172]	; (800a7d8 <USB_SetTurnaroundTime+0x124>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d802      	bhi.n	800a736 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a730:	230b      	movs	r3, #11
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	e030      	b.n	800a798 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	4a27      	ldr	r2, [pc, #156]	; (800a7d8 <USB_SetTurnaroundTime+0x124>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d906      	bls.n	800a74c <USB_SetTurnaroundTime+0x98>
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	4a26      	ldr	r2, [pc, #152]	; (800a7dc <USB_SetTurnaroundTime+0x128>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d802      	bhi.n	800a74c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a746:	230a      	movs	r3, #10
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	e025      	b.n	800a798 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4a23      	ldr	r2, [pc, #140]	; (800a7dc <USB_SetTurnaroundTime+0x128>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d906      	bls.n	800a762 <USB_SetTurnaroundTime+0xae>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	4a22      	ldr	r2, [pc, #136]	; (800a7e0 <USB_SetTurnaroundTime+0x12c>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d202      	bcs.n	800a762 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a75c:	2309      	movs	r3, #9
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	e01a      	b.n	800a798 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	4a1e      	ldr	r2, [pc, #120]	; (800a7e0 <USB_SetTurnaroundTime+0x12c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d306      	bcc.n	800a778 <USB_SetTurnaroundTime+0xc4>
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	4a1d      	ldr	r2, [pc, #116]	; (800a7e4 <USB_SetTurnaroundTime+0x130>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d802      	bhi.n	800a778 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a772:	2308      	movs	r3, #8
 800a774:	617b      	str	r3, [r7, #20]
 800a776:	e00f      	b.n	800a798 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4a1a      	ldr	r2, [pc, #104]	; (800a7e4 <USB_SetTurnaroundTime+0x130>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d906      	bls.n	800a78e <USB_SetTurnaroundTime+0xda>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4a19      	ldr	r2, [pc, #100]	; (800a7e8 <USB_SetTurnaroundTime+0x134>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d202      	bcs.n	800a78e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a788:	2307      	movs	r3, #7
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	e004      	b.n	800a798 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a78e:	2306      	movs	r3, #6
 800a790:	617b      	str	r3, [r7, #20]
 800a792:	e001      	b.n	800a798 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a794:	2309      	movs	r3, #9
 800a796:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	029b      	lsls	r3, r3, #10
 800a7ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a7b0:	431a      	orrs	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	371c      	adds	r7, #28
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	00d8acbf 	.word	0x00d8acbf
 800a7c8:	00e4e1c0 	.word	0x00e4e1c0
 800a7cc:	00f42400 	.word	0x00f42400
 800a7d0:	01067380 	.word	0x01067380
 800a7d4:	011a499f 	.word	0x011a499f
 800a7d8:	01312cff 	.word	0x01312cff
 800a7dc:	014ca43f 	.word	0x014ca43f
 800a7e0:	016e3600 	.word	0x016e3600
 800a7e4:	01a6ab1f 	.word	0x01a6ab1f
 800a7e8:	01e84800 	.word	0x01e84800

0800a7ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	f043 0201 	orr.w	r2, r3, #1
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	f023 0201 	bic.w	r2, r3, #1
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a848:	78fb      	ldrb	r3, [r7, #3]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d106      	bne.n	800a85c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	60da      	str	r2, [r3, #12]
 800a85a:	e00b      	b.n	800a874 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d106      	bne.n	800a870 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	60da      	str	r2, [r3, #12]
 800a86e:	e001      	b.n	800a874 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e003      	b.n	800a87c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a874:	2032      	movs	r0, #50	; 0x32
 800a876:	f7f6 ff47 	bl	8001708 <HAL_Delay>

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a884:	b084      	sub	sp, #16
 800a886:	b580      	push	{r7, lr}
 800a888:	b086      	sub	sp, #24
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a892:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a89e:	2300      	movs	r3, #0
 800a8a0:	613b      	str	r3, [r7, #16]
 800a8a2:	e009      	b.n	800a8b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	3340      	adds	r3, #64	; 0x40
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	613b      	str	r3, [r7, #16]
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	2b0e      	cmp	r3, #14
 800a8bc:	d9f2      	bls.n	800a8a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d11c      	bne.n	800a8fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8d2:	f043 0302 	orr.w	r3, r3, #2
 800a8d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	601a      	str	r2, [r3, #0]
 800a8fc:	e005      	b.n	800a90a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a902:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a910:	461a      	mov	r2, r3
 800a912:	2300      	movs	r3, #0
 800a914:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a91c:	4619      	mov	r1, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a924:	461a      	mov	r2, r3
 800a926:	680b      	ldr	r3, [r1, #0]
 800a928:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a92a:	2103      	movs	r1, #3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 f93d 	bl	800abac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a932:	2110      	movs	r1, #16
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f8f1 	bl	800ab1c <USB_FlushTxFifo>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d001      	beq.n	800a944 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f90f 	bl	800ab68 <USB_FlushRxFifo>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a95a:	461a      	mov	r2, r3
 800a95c:	2300      	movs	r3, #0
 800a95e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a966:	461a      	mov	r2, r3
 800a968:	2300      	movs	r3, #0
 800a96a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a972:	461a      	mov	r2, r3
 800a974:	2300      	movs	r3, #0
 800a976:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a978:	2300      	movs	r3, #0
 800a97a:	613b      	str	r3, [r7, #16]
 800a97c:	e043      	b.n	800aa06 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	015a      	lsls	r2, r3, #5
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	4413      	add	r3, r2
 800a986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a994:	d118      	bne.n	800a9c8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10a      	bne.n	800a9b2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	e013      	b.n	800a9da <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9c4:	6013      	str	r3, [r2, #0]
 800a9c6:	e008      	b.n	800a9da <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	015a      	lsls	r2, r3, #5
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	015a      	lsls	r2, r3, #5
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3301      	adds	r3, #1
 800aa04:	613b      	str	r3, [r7, #16]
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d3b7      	bcc.n	800a97e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa0e:	2300      	movs	r3, #0
 800aa10:	613b      	str	r3, [r7, #16]
 800aa12:	e043      	b.n	800aa9c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa2a:	d118      	bne.n	800aa5e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d10a      	bne.n	800aa48 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	e013      	b.n	800aa70 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa54:	461a      	mov	r2, r3
 800aa56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	e008      	b.n	800aa70 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	2300      	movs	r3, #0
 800aa80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	015a      	lsls	r2, r3, #5
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	613b      	str	r3, [r7, #16]
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d3b7      	bcc.n	800aa14 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aab6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aac4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	f043 0210 	orr.w	r2, r3, #16
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	699a      	ldr	r2, [r3, #24]
 800aad6:	4b10      	ldr	r3, [pc, #64]	; (800ab18 <USB_DevInit+0x294>)
 800aad8:	4313      	orrs	r3, r2
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d005      	beq.n	800aaf0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	f043 0208 	orr.w	r2, r3, #8
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aaf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d107      	bne.n	800ab06 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	699b      	ldr	r3, [r3, #24]
 800aafa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aafe:	f043 0304 	orr.w	r3, r3, #4
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3718      	adds	r7, #24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab12:	b004      	add	sp, #16
 800ab14:	4770      	bx	lr
 800ab16:	bf00      	nop
 800ab18:	803c3800 	.word	0x803c3800

0800ab1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	019b      	lsls	r3, r3, #6
 800ab2e:	f043 0220 	orr.w	r2, r3, #32
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	60fb      	str	r3, [r7, #12]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	4a09      	ldr	r2, [pc, #36]	; (800ab64 <USB_FlushTxFifo+0x48>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d901      	bls.n	800ab48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ab44:	2303      	movs	r3, #3
 800ab46:	e006      	b.n	800ab56 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	f003 0320 	and.w	r3, r3, #32
 800ab50:	2b20      	cmp	r3, #32
 800ab52:	d0f0      	beq.n	800ab36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	00030d40 	.word	0x00030d40

0800ab68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2210      	movs	r2, #16
 800ab78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4a09      	ldr	r2, [pc, #36]	; (800aba8 <USB_FlushRxFifo+0x40>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d901      	bls.n	800ab8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e006      	b.n	800ab9a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	f003 0310 	and.w	r3, r3, #16
 800ab94:	2b10      	cmp	r3, #16
 800ab96:	d0f0      	beq.n	800ab7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	00030d40 	.word	0x00030d40

0800abac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	460b      	mov	r3, r1
 800abb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	68f9      	ldr	r1, [r7, #12]
 800abc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abcc:	4313      	orrs	r3, r2
 800abce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800abde:	b480      	push	{r7}
 800abe0:	b087      	sub	sp, #28
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	f003 0306 	and.w	r3, r3, #6
 800abf6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d002      	beq.n	800ac04 <USB_GetDevSpeed+0x26>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b06      	cmp	r3, #6
 800ac02:	d102      	bne.n	800ac0a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac04:	2302      	movs	r3, #2
 800ac06:	75fb      	strb	r3, [r7, #23]
 800ac08:	e001      	b.n	800ac0e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800ac0a:	230f      	movs	r3, #15
 800ac0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	371c      	adds	r7, #28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	785b      	ldrb	r3, [r3, #1]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d13a      	bne.n	800acae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac3e:	69da      	ldr	r2, [r3, #28]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	f003 030f 	and.w	r3, r3, #15
 800ac48:	2101      	movs	r1, #1
 800ac4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	68f9      	ldr	r1, [r7, #12]
 800ac52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac56:	4313      	orrs	r3, r2
 800ac58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	015a      	lsls	r2, r3, #5
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	4413      	add	r3, r2
 800ac62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d155      	bne.n	800ad1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	78db      	ldrb	r3, [r3, #3]
 800ac8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	059b      	lsls	r3, r3, #22
 800ac92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac94:	4313      	orrs	r3, r2
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	0151      	lsls	r1, r2, #5
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	440a      	add	r2, r1
 800ac9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acaa:	6013      	str	r3, [r2, #0]
 800acac:	e036      	b.n	800ad1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acb4:	69da      	ldr	r2, [r3, #28]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	f003 030f 	and.w	r3, r3, #15
 800acbe:	2101      	movs	r1, #1
 800acc0:	fa01 f303 	lsl.w	r3, r1, r3
 800acc4:	041b      	lsls	r3, r3, #16
 800acc6:	68f9      	ldr	r1, [r7, #12]
 800acc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800accc:	4313      	orrs	r3, r2
 800acce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	015a      	lsls	r2, r3, #5
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d11a      	bne.n	800ad1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	015a      	lsls	r2, r3, #5
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4413      	add	r3, r2
 800acee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	78db      	ldrb	r3, [r3, #3]
 800ad00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad02:	430b      	orrs	r3, r1
 800ad04:	4313      	orrs	r3, r2
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	0151      	lsls	r1, r2, #5
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	440a      	add	r2, r1
 800ad0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ad1c:	2300      	movs	r3, #0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3714      	adds	r7, #20
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
	...

0800ad2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	785b      	ldrb	r3, [r3, #1]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d161      	bne.n	800ae0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	015a      	lsls	r2, r3, #5
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	4413      	add	r3, r2
 800ad50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad5e:	d11f      	bne.n	800ada0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	015a      	lsls	r2, r3, #5
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	4413      	add	r3, r2
 800ad68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	0151      	lsls	r1, r2, #5
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	440a      	add	r2, r1
 800ad76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	0151      	lsls	r1, r2, #5
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	440a      	add	r2, r1
 800ad96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	f003 030f 	and.w	r3, r3, #15
 800adb0:	2101      	movs	r1, #1
 800adb2:	fa01 f303 	lsl.w	r3, r1, r3
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	43db      	mvns	r3, r3
 800adba:	68f9      	ldr	r1, [r7, #12]
 800adbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adc0:	4013      	ands	r3, r2
 800adc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adca:	69da      	ldr	r2, [r3, #28]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	f003 030f 	and.w	r3, r3, #15
 800add4:	2101      	movs	r1, #1
 800add6:	fa01 f303 	lsl.w	r3, r1, r3
 800adda:	b29b      	uxth	r3, r3
 800addc:	43db      	mvns	r3, r3
 800adde:	68f9      	ldr	r1, [r7, #12]
 800ade0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ade4:	4013      	ands	r3, r2
 800ade6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	0159      	lsls	r1, r3, #5
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	440b      	add	r3, r1
 800adfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae02:	4619      	mov	r1, r3
 800ae04:	4b35      	ldr	r3, [pc, #212]	; (800aedc <USB_DeactivateEndpoint+0x1b0>)
 800ae06:	4013      	ands	r3, r2
 800ae08:	600b      	str	r3, [r1, #0]
 800ae0a:	e060      	b.n	800aece <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	015a      	lsls	r2, r3, #5
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae22:	d11f      	bne.n	800ae64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	015a      	lsls	r2, r3, #5
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	4413      	add	r3, r2
 800ae2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	0151      	lsls	r1, r2, #5
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	440a      	add	r2, r1
 800ae3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	0151      	lsls	r1, r2, #5
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	440a      	add	r2, r1
 800ae5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	f003 030f 	and.w	r3, r3, #15
 800ae74:	2101      	movs	r1, #1
 800ae76:	fa01 f303 	lsl.w	r3, r1, r3
 800ae7a:	041b      	lsls	r3, r3, #16
 800ae7c:	43db      	mvns	r3, r3
 800ae7e:	68f9      	ldr	r1, [r7, #12]
 800ae80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae84:	4013      	ands	r3, r2
 800ae86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8e:	69da      	ldr	r2, [r3, #28]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	f003 030f 	and.w	r3, r3, #15
 800ae98:	2101      	movs	r1, #1
 800ae9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9e:	041b      	lsls	r3, r3, #16
 800aea0:	43db      	mvns	r3, r3
 800aea2:	68f9      	ldr	r1, [r7, #12]
 800aea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aea8:	4013      	ands	r3, r2
 800aeaa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	0159      	lsls	r1, r3, #5
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	440b      	add	r3, r1
 800aec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec6:	4619      	mov	r1, r3
 800aec8:	4b05      	ldr	r3, [pc, #20]	; (800aee0 <USB_DeactivateEndpoint+0x1b4>)
 800aeca:	4013      	ands	r3, r2
 800aecc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	ec337800 	.word	0xec337800
 800aee0:	eff37800 	.word	0xeff37800

0800aee4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	785b      	ldrb	r3, [r3, #1]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	f040 810a 	bne.w	800b116 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	695b      	ldr	r3, [r3, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d132      	bne.n	800af70 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	015a      	lsls	r2, r3, #5
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	4413      	add	r3, r2
 800af12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	0151      	lsls	r1, r2, #5
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	440a      	add	r2, r1
 800af20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	015a      	lsls	r2, r3, #5
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	4413      	add	r3, r2
 800af36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	0151      	lsls	r1, r2, #5
 800af40:	697a      	ldr	r2, [r7, #20]
 800af42:	440a      	add	r2, r1
 800af44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	015a      	lsls	r2, r3, #5
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	4413      	add	r3, r2
 800af56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	693a      	ldr	r2, [r7, #16]
 800af5e:	0151      	lsls	r1, r2, #5
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	440a      	add	r2, r1
 800af64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af68:	0cdb      	lsrs	r3, r3, #19
 800af6a:	04db      	lsls	r3, r3, #19
 800af6c:	6113      	str	r3, [r2, #16]
 800af6e:	e074      	b.n	800b05a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	0151      	lsls	r1, r2, #5
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	440a      	add	r2, r1
 800af86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af8a:	0cdb      	lsrs	r3, r3, #19
 800af8c:	04db      	lsls	r3, r3, #19
 800af8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	4413      	add	r3, r2
 800af98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	0151      	lsls	r1, r2, #5
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	440a      	add	r2, r1
 800afa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	015a      	lsls	r2, r3, #5
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	4413      	add	r3, r2
 800afbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc0:	691a      	ldr	r2, [r3, #16]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	6959      	ldr	r1, [r3, #20]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	440b      	add	r3, r1
 800afcc:	1e59      	subs	r1, r3, #1
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	fbb1 f3f3 	udiv	r3, r1, r3
 800afd6:	04d9      	lsls	r1, r3, #19
 800afd8:	4baf      	ldr	r3, [pc, #700]	; (800b298 <USB_EPStartXfer+0x3b4>)
 800afda:	400b      	ands	r3, r1
 800afdc:	6939      	ldr	r1, [r7, #16]
 800afde:	0148      	lsls	r0, r1, #5
 800afe0:	6979      	ldr	r1, [r7, #20]
 800afe2:	4401      	add	r1, r0
 800afe4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800afe8:	4313      	orrs	r3, r2
 800afea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aff8:	691a      	ldr	r2, [r3, #16]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b002:	6939      	ldr	r1, [r7, #16]
 800b004:	0148      	lsls	r0, r1, #5
 800b006:	6979      	ldr	r1, [r7, #20]
 800b008:	4401      	add	r1, r0
 800b00a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b00e:	4313      	orrs	r3, r2
 800b010:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	78db      	ldrb	r3, [r3, #3]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d11f      	bne.n	800b05a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	0151      	lsls	r1, r2, #5
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	440a      	add	r2, r1
 800b030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b034:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b038:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	4413      	add	r3, r2
 800b042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	0151      	lsls	r1, r2, #5
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	440a      	add	r2, r1
 800b050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b058:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	4413      	add	r3, r2
 800b062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	0151      	lsls	r1, r2, #5
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	440a      	add	r2, r1
 800b070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b074:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b078:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	78db      	ldrb	r3, [r3, #3]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d015      	beq.n	800b0ae <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	2b00      	cmp	r3, #0
 800b088:	f000 8100 	beq.w	800b28c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	f003 030f 	and.w	r3, r3, #15
 800b09c:	2101      	movs	r1, #1
 800b09e:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a2:	6979      	ldr	r1, [r7, #20]
 800b0a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	634b      	str	r3, [r1, #52]	; 0x34
 800b0ac:	e0ee      	b.n	800b28c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d110      	bne.n	800b0e0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	015a      	lsls	r2, r3, #5
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	0151      	lsls	r1, r2, #5
 800b0d0:	697a      	ldr	r2, [r7, #20]
 800b0d2:	440a      	add	r2, r1
 800b0d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0dc:	6013      	str	r3, [r2, #0]
 800b0de:	e00f      	b.n	800b100 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	0151      	lsls	r1, r2, #5
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	440a      	add	r2, r1
 800b0f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0fe:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	68d9      	ldr	r1, [r3, #12]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	781a      	ldrb	r2, [r3, #0]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f9e2 	bl	800b4d8 <USB_WritePacket>
 800b114:	e0ba      	b.n	800b28c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	015a      	lsls	r2, r3, #5
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	4413      	add	r3, r2
 800b11e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	0151      	lsls	r1, r2, #5
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	440a      	add	r2, r1
 800b12c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b130:	0cdb      	lsrs	r3, r3, #19
 800b132:	04db      	lsls	r3, r3, #19
 800b134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	015a      	lsls	r2, r3, #5
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	4413      	add	r3, r2
 800b13e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	693a      	ldr	r2, [r7, #16]
 800b146:	0151      	lsls	r1, r2, #5
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	440a      	add	r2, r1
 800b14c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b150:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b154:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b158:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d123      	bne.n	800b1aa <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	015a      	lsls	r2, r3, #5
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	4413      	add	r3, r2
 800b16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b16e:	691a      	ldr	r2, [r3, #16]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b178:	6939      	ldr	r1, [r7, #16]
 800b17a:	0148      	lsls	r0, r1, #5
 800b17c:	6979      	ldr	r1, [r7, #20]
 800b17e:	4401      	add	r1, r0
 800b180:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b184:	4313      	orrs	r3, r2
 800b186:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	693a      	ldr	r2, [r7, #16]
 800b198:	0151      	lsls	r1, r2, #5
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	440a      	add	r2, r1
 800b19e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1a6:	6113      	str	r3, [r2, #16]
 800b1a8:	e033      	b.n	800b212 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	695a      	ldr	r2, [r3, #20]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	1e5a      	subs	r2, r3, #1
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1be:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1cc:	691a      	ldr	r2, [r3, #16]
 800b1ce:	89fb      	ldrh	r3, [r7, #14]
 800b1d0:	04d9      	lsls	r1, r3, #19
 800b1d2:	4b31      	ldr	r3, [pc, #196]	; (800b298 <USB_EPStartXfer+0x3b4>)
 800b1d4:	400b      	ands	r3, r1
 800b1d6:	6939      	ldr	r1, [r7, #16]
 800b1d8:	0148      	lsls	r0, r1, #5
 800b1da:	6979      	ldr	r1, [r7, #20]
 800b1dc:	4401      	add	r1, r0
 800b1de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1f2:	691a      	ldr	r2, [r3, #16]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	89f9      	ldrh	r1, [r7, #14]
 800b1fa:	fb01 f303 	mul.w	r3, r1, r3
 800b1fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b202:	6939      	ldr	r1, [r7, #16]
 800b204:	0148      	lsls	r0, r1, #5
 800b206:	6979      	ldr	r1, [r7, #20]
 800b208:	4401      	add	r1, r0
 800b20a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b20e:	4313      	orrs	r3, r2
 800b210:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	78db      	ldrb	r3, [r3, #3]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d128      	bne.n	800b26c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b226:	2b00      	cmp	r3, #0
 800b228:	d110      	bne.n	800b24c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	697a      	ldr	r2, [r7, #20]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b244:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	e00f      	b.n	800b26c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	0151      	lsls	r1, r2, #5
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	440a      	add	r2, r1
 800b262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b26a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	015a      	lsls	r2, r3, #5
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	4413      	add	r3, r2
 800b274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	0151      	lsls	r1, r2, #5
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	440a      	add	r2, r1
 800b282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b286:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b28a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3718      	adds	r7, #24
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	1ff80000 	.word	0x1ff80000

0800b29c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b085      	sub	sp, #20
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	785b      	ldrb	r3, [r3, #1]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	f040 80ab 	bne.w	800b410 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d132      	bne.n	800b328 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	0151      	lsls	r1, r2, #5
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	440a      	add	r2, r1
 800b2d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	0151      	lsls	r1, r2, #5
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	440a      	add	r2, r1
 800b2fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b304:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	015a      	lsls	r2, r3, #5
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	4413      	add	r3, r2
 800b30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	0151      	lsls	r1, r2, #5
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	440a      	add	r2, r1
 800b31c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b320:	0cdb      	lsrs	r3, r3, #19
 800b322:	04db      	lsls	r3, r3, #19
 800b324:	6113      	str	r3, [r2, #16]
 800b326:	e04e      	b.n	800b3c6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	0151      	lsls	r1, r2, #5
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	440a      	add	r2, r1
 800b33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b342:	0cdb      	lsrs	r3, r3, #19
 800b344:	04db      	lsls	r3, r3, #19
 800b346:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	0151      	lsls	r1, r2, #5
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	440a      	add	r2, r1
 800b35e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b362:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b366:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b36a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	695a      	ldr	r2, [r3, #20]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	429a      	cmp	r2, r3
 800b376:	d903      	bls.n	800b380 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	689a      	ldr	r2, [r3, #8]
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	0151      	lsls	r1, r2, #5
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	440a      	add	r2, r1
 800b396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b39a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b39e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	015a      	lsls	r2, r3, #5
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ac:	691a      	ldr	r2, [r3, #16]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	0148      	lsls	r0, r1, #5
 800b3ba:	68f9      	ldr	r1, [r7, #12]
 800b3bc:	4401      	add	r1, r0
 800b3be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	0151      	lsls	r1, r2, #5
 800b3d8:	68fa      	ldr	r2, [r7, #12]
 800b3da:	440a      	add	r2, r1
 800b3dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3e4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d06d      	beq.n	800b4ca <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	2101      	movs	r1, #1
 800b400:	fa01 f303 	lsl.w	r3, r1, r3
 800b404:	68f9      	ldr	r1, [r7, #12]
 800b406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b40a:	4313      	orrs	r3, r2
 800b40c:	634b      	str	r3, [r1, #52]	; 0x34
 800b40e:	e05c      	b.n	800b4ca <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	0151      	lsls	r1, r2, #5
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	440a      	add	r2, r1
 800b426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b42a:	0cdb      	lsrs	r3, r3, #19
 800b42c:	04db      	lsls	r3, r3, #19
 800b42e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	0151      	lsls	r1, r2, #5
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	440a      	add	r2, r1
 800b446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b44a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b44e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b452:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	695b      	ldr	r3, [r3, #20]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	689a      	ldr	r2, [r3, #8]
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	0151      	lsls	r1, r2, #5
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	440a      	add	r2, r1
 800b47a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b47e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b482:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b490:	691a      	ldr	r2, [r3, #16]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b49a:	68b9      	ldr	r1, [r7, #8]
 800b49c:	0148      	lsls	r0, r1, #5
 800b49e:	68f9      	ldr	r1, [r7, #12]
 800b4a0:	4401      	add	r1, r0
 800b4a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	015a      	lsls	r2, r3, #5
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	0151      	lsls	r1, r2, #5
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	440a      	add	r2, r1
 800b4c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b089      	sub	sp, #36	; 0x24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	4611      	mov	r1, r2
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	71fb      	strb	r3, [r7, #7]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b4f6:	88bb      	ldrh	r3, [r7, #4]
 800b4f8:	3303      	adds	r3, #3
 800b4fa:	089b      	lsrs	r3, r3, #2
 800b4fc:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b4fe:	2300      	movs	r3, #0
 800b500:	61bb      	str	r3, [r7, #24]
 800b502:	e00f      	b.n	800b524 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	031a      	lsls	r2, r3, #12
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b510:	461a      	mov	r2, r3
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	3304      	adds	r3, #4
 800b51c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	3301      	adds	r3, #1
 800b522:	61bb      	str	r3, [r7, #24]
 800b524:	69ba      	ldr	r2, [r7, #24]
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d3eb      	bcc.n	800b504 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3724      	adds	r7, #36	; 0x24
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b089      	sub	sp, #36	; 0x24
 800b53e:	af00      	add	r7, sp, #0
 800b540:	60f8      	str	r0, [r7, #12]
 800b542:	60b9      	str	r1, [r7, #8]
 800b544:	4613      	mov	r3, r2
 800b546:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b550:	88fb      	ldrh	r3, [r7, #6]
 800b552:	3303      	adds	r3, #3
 800b554:	089b      	lsrs	r3, r3, #2
 800b556:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b558:	2300      	movs	r3, #0
 800b55a:	61bb      	str	r3, [r7, #24]
 800b55c:	e00b      	b.n	800b576 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	601a      	str	r2, [r3, #0]
    pDest++;
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	3304      	adds	r3, #4
 800b56e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	3301      	adds	r3, #1
 800b574:	61bb      	str	r3, [r7, #24]
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d3ef      	bcc.n	800b55e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b57e:	69fb      	ldr	r3, [r7, #28]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3724      	adds	r7, #36	; 0x24
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	785b      	ldrb	r3, [r3, #1]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d12c      	bne.n	800b602 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	015a      	lsls	r2, r3, #5
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	db12      	blt.n	800b5e0 <USB_EPSetStall+0x54>
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00f      	beq.n	800b5e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	015a      	lsls	r2, r3, #5
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	0151      	lsls	r1, r2, #5
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	440a      	add	r2, r1
 800b5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b5de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	015a      	lsls	r2, r3, #5
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	0151      	lsls	r1, r2, #5
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	440a      	add	r2, r1
 800b5f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b5fe:	6013      	str	r3, [r2, #0]
 800b600:	e02b      	b.n	800b65a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	db12      	blt.n	800b63a <USB_EPSetStall+0xae>
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00f      	beq.n	800b63a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	015a      	lsls	r2, r3, #5
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	4413      	add	r3, r2
 800b622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	0151      	lsls	r1, r2, #5
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	440a      	add	r2, r1
 800b630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b634:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b638:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	015a      	lsls	r2, r3, #5
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	4413      	add	r3, r2
 800b642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	0151      	lsls	r1, r2, #5
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	440a      	add	r2, r1
 800b650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b658:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	785b      	ldrb	r3, [r3, #1]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d128      	bne.n	800b6d6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	015a      	lsls	r2, r3, #5
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	4413      	add	r3, r2
 800b68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	0151      	lsls	r1, r2, #5
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	440a      	add	r2, r1
 800b69a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b69e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6a2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	78db      	ldrb	r3, [r3, #3]
 800b6a8:	2b03      	cmp	r3, #3
 800b6aa:	d003      	beq.n	800b6b4 <USB_EPClearStall+0x4c>
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	78db      	ldrb	r3, [r3, #3]
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d138      	bne.n	800b726 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	0151      	lsls	r1, r2, #5
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	440a      	add	r2, r1
 800b6ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	e027      	b.n	800b726 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	015a      	lsls	r2, r3, #5
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4413      	add	r3, r2
 800b6de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	0151      	lsls	r1, r2, #5
 800b6e8:	68fa      	ldr	r2, [r7, #12]
 800b6ea:	440a      	add	r2, r1
 800b6ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	78db      	ldrb	r3, [r3, #3]
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	d003      	beq.n	800b706 <USB_EPClearStall+0x9e>
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	78db      	ldrb	r3, [r3, #3]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d10f      	bne.n	800b726 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	015a      	lsls	r2, r3, #5
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	4413      	add	r3, r2
 800b70e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	0151      	lsls	r1, r2, #5
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	440a      	add	r2, r1
 800b71c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b724:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b752:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b756:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	78fb      	ldrb	r3, [r7, #3]
 800b762:	011b      	lsls	r3, r3, #4
 800b764:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b768:	68f9      	ldr	r1, [r7, #12]
 800b76a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b76e:	4313      	orrs	r3, r2
 800b770:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b79a:	f023 0303 	bic.w	r3, r3, #3
 800b79e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7ae:	f023 0302 	bic.w	r3, r3, #2
 800b7b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7dc:	f023 0303 	bic.w	r3, r3, #3
 800b7e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7f0:	f043 0302 	orr.w	r3, r3, #2
 800b7f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	695b      	ldr	r3, [r3, #20]
 800b810:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	699b      	ldr	r3, [r3, #24]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	4013      	ands	r3, r2
 800b81a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b81c:	68fb      	ldr	r3, [r7, #12]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3714      	adds	r7, #20
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b085      	sub	sp, #20
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b846:	69db      	ldr	r3, [r3, #28]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	4013      	ands	r3, r2
 800b84c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	0c1b      	lsrs	r3, r3, #16
}
 800b852:	4618      	mov	r0, r3
 800b854:	3714      	adds	r7, #20
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b85e:	b480      	push	{r7}
 800b860:	b085      	sub	sp, #20
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b87a:	69db      	ldr	r3, [r3, #28]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	4013      	ands	r3, r2
 800b880:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	b29b      	uxth	r3, r3
}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b892:	b480      	push	{r7}
 800b894:	b085      	sub	sp, #20
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
 800b89a:	460b      	mov	r3, r1
 800b89c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b8a2:	78fb      	ldrb	r3, [r7, #3]
 800b8a4:	015a      	lsls	r2, r3, #5
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	4013      	ands	r3, r2
 800b8be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b8c0:	68bb      	ldr	r3, [r7, #8]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3714      	adds	r7, #20
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b087      	sub	sp, #28
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b8f2:	78fb      	ldrb	r3, [r7, #3]
 800b8f4:	f003 030f 	and.w	r3, r3, #15
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b8fe:	01db      	lsls	r3, r3, #7
 800b900:	b2db      	uxtb	r3, r3
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	4313      	orrs	r3, r2
 800b906:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b908:	78fb      	ldrb	r3, [r7, #3]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	4013      	ands	r3, r2
 800b91a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b91c:	68bb      	ldr	r3, [r7, #8]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	371c      	adds	r7, #28
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b083      	sub	sp, #12
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	695b      	ldr	r3, [r3, #20]
 800b936:	f003 0301 	and.w	r3, r3, #1
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b946:	b480      	push	{r7}
 800b948:	b085      	sub	sp, #20
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b960:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b964:	f023 0307 	bic.w	r3, r3, #7
 800b968:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b97c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	333c      	adds	r3, #60	; 0x3c
 800b99e:	3304      	adds	r3, #4
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	4a1c      	ldr	r2, [pc, #112]	; (800ba18 <USB_EP0_OutStart+0x8c>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d90a      	bls.n	800b9c2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9bc:	d101      	bne.n	800b9c2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e024      	b.n	800ba0c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9f0:	f043 0318 	orr.w	r3, r3, #24
 800b9f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ba08:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ba0a:	2300      	movs	r3, #0
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr
 800ba18:	4f54300a 	.word	0x4f54300a

0800ba1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ba24:	2300      	movs	r3, #0
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	60fb      	str	r3, [r7, #12]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	4a13      	ldr	r2, [pc, #76]	; (800ba80 <USB_CoreReset+0x64>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d901      	bls.n	800ba3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ba36:	2303      	movs	r3, #3
 800ba38:	e01b      	b.n	800ba72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	daf2      	bge.n	800ba28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ba42:	2300      	movs	r3, #0
 800ba44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	f043 0201 	orr.w	r2, r3, #1
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3301      	adds	r3, #1
 800ba56:	60fb      	str	r3, [r7, #12]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <USB_CoreReset+0x64>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d901      	bls.n	800ba64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ba60:	2303      	movs	r3, #3
 800ba62:	e006      	b.n	800ba72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	f003 0301 	and.w	r3, r3, #1
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d0f0      	beq.n	800ba52 <USB_CoreReset+0x36>

  return HAL_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3714      	adds	r7, #20
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	00030d40 	.word	0x00030d40

0800ba84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ba88:	4904      	ldr	r1, [pc, #16]	; (800ba9c <MX_FATFS_Init+0x18>)
 800ba8a:	4805      	ldr	r0, [pc, #20]	; (800baa0 <MX_FATFS_Init+0x1c>)
 800ba8c:	f001 ff30 	bl	800d8f0 <FATFS_LinkDriver>
 800ba90:	4603      	mov	r3, r0
 800ba92:	461a      	mov	r2, r3
 800ba94:	4b03      	ldr	r3, [pc, #12]	; (800baa4 <MX_FATFS_Init+0x20>)
 800ba96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ba98:	bf00      	nop
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	200021d0 	.word	0x200021d0
 800baa0:	08011610 	.word	0x08011610
 800baa4:	200021cc 	.word	0x200021cc

0800baa8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bab2:	f000 f885 	bl	800bbc0 <BSP_SD_IsDetected>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d001      	beq.n	800bac0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800babc:	2302      	movs	r3, #2
 800babe:	e012      	b.n	800bae6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bac0:	480b      	ldr	r0, [pc, #44]	; (800baf0 <BSP_SD_Init+0x48>)
 800bac2:	f7fb fd8d 	bl	80075e0 <HAL_SD_Init>
 800bac6:	4603      	mov	r3, r0
 800bac8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800baca:	79fb      	ldrb	r3, [r7, #7]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d109      	bne.n	800bae4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bad4:	4806      	ldr	r0, [pc, #24]	; (800baf0 <BSP_SD_Init+0x48>)
 800bad6:	f7fc fc53 	bl	8008380 <HAL_SD_ConfigWideBusOperation>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d001      	beq.n	800bae4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bae4:	79fb      	ldrb	r3, [r7, #7]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3708      	adds	r7, #8
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	20001e2c 	.word	0x20001e2c

0800baf4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	68f9      	ldr	r1, [r7, #12]
 800bb0a:	4806      	ldr	r0, [pc, #24]	; (800bb24 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bb0c:	f7fb fea2 	bl	8007854 <HAL_SD_ReadBlocks_DMA>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d001      	beq.n	800bb1a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	20001e2c 	.word	0x20001e2c

0800bb28 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	68f9      	ldr	r1, [r7, #12]
 800bb3e:	4806      	ldr	r0, [pc, #24]	; (800bb58 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bb40:	f7fb ff30 	bl	80079a4 <HAL_SD_WriteBlocks_DMA>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3718      	adds	r7, #24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	20001e2c 	.word	0x20001e2c

0800bb5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bb60:	4805      	ldr	r0, [pc, #20]	; (800bb78 <BSP_SD_GetCardState+0x1c>)
 800bb62:	f7fc fd21 	bl	80085a8 <HAL_SD_GetCardState>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b04      	cmp	r3, #4
 800bb6a:	bf14      	ite	ne
 800bb6c:	2301      	movne	r3, #1
 800bb6e:	2300      	moveq	r3, #0
 800bb70:	b2db      	uxtb	r3, r3
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20001e2c 	.word	0x20001e2c

0800bb7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bb84:	6879      	ldr	r1, [r7, #4]
 800bb86:	4803      	ldr	r0, [pc, #12]	; (800bb94 <BSP_SD_GetCardInfo+0x18>)
 800bb88:	f7fc fbce 	bl	8008328 <HAL_SD_GetCardInfo>
}
 800bb8c:	bf00      	nop
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	20001e2c 	.word	0x20001e2c

0800bb98 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bba0:	f000 f9ac 	bl	800befc <BSP_SD_WriteCpltCallback>
}
 800bba4:	bf00      	nop
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bbb4:	f000 f9b4 	bl	800bf20 <BSP_SD_ReadCpltCallback>
}
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bbca:	f000 f80b 	bl	800bbe4 <BSP_PlatformIsDetected>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bbd8:	79fb      	ldrb	r3, [r7, #7]
 800bbda:	b2db      	uxtb	r3, r3
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bbea:	2301      	movs	r3, #1
 800bbec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bbee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bbf2:	4806      	ldr	r0, [pc, #24]	; (800bc0c <BSP_PlatformIsDetected+0x28>)
 800bbf4:	f7f7 faee 	bl	80031d4 <HAL_GPIO_ReadPin>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bc02:	79fb      	ldrb	r3, [r7, #7]
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}
 800bc0c:	48000400 	.word	0x48000400

0800bc10 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800bc18:	f001 ff2a 	bl	800da70 <osKernelGetTickCount>
 800bc1c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800bc1e:	e006      	b.n	800bc2e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc20:	f7ff ff9c 	bl	800bb5c <BSP_SD_GetCardState>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d101      	bne.n	800bc2e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	e009      	b.n	800bc42 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800bc2e:	f001 ff1f 	bl	800da70 <osKernelGetTickCount>
 800bc32:	4602      	mov	r2, r0
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d8f0      	bhi.n	800bc20 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bc3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
	...

0800bc4c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	4603      	mov	r3, r0
 800bc54:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bc56:	4b0b      	ldr	r3, [pc, #44]	; (800bc84 <SD_CheckStatus+0x38>)
 800bc58:	2201      	movs	r2, #1
 800bc5a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc5c:	f7ff ff7e 	bl	800bb5c <BSP_SD_GetCardState>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d107      	bne.n	800bc76 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bc66:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <SD_CheckStatus+0x38>)
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	f023 0301 	bic.w	r3, r3, #1
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	4b04      	ldr	r3, [pc, #16]	; (800bc84 <SD_CheckStatus+0x38>)
 800bc74:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bc76:	4b03      	ldr	r3, [pc, #12]	; (800bc84 <SD_CheckStatus+0x38>)
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	b2db      	uxtb	r3, r3
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}
 800bc84:	20000009 	.word	0x20000009

0800bc88 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bc92:	4b1c      	ldr	r3, [pc, #112]	; (800bd04 <SD_initialize+0x7c>)
 800bc94:	2201      	movs	r2, #1
 800bc96:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800bc98:	f001 fea2 	bl	800d9e0 <osKernelGetState>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d129      	bne.n	800bcf6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bca2:	f7ff ff01 	bl	800baa8 <BSP_SD_Init>
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d107      	bne.n	800bcbc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800bcac:	79fb      	ldrb	r3, [r7, #7]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff ffcc 	bl	800bc4c <SD_CheckStatus>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	4b12      	ldr	r3, [pc, #72]	; (800bd04 <SD_initialize+0x7c>)
 800bcba:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800bcbc:	4b11      	ldr	r3, [pc, #68]	; (800bd04 <SD_initialize+0x7c>)
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d017      	beq.n	800bcf6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800bcc6:	4b10      	ldr	r3, [pc, #64]	; (800bd08 <SD_initialize+0x80>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d107      	bne.n	800bcde <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800bcce:	2200      	movs	r2, #0
 800bcd0:	2102      	movs	r1, #2
 800bcd2:	200a      	movs	r0, #10
 800bcd4:	f001 ff8e 	bl	800dbf4 <osMessageQueueNew>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	4a0b      	ldr	r2, [pc, #44]	; (800bd08 <SD_initialize+0x80>)
 800bcdc:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800bcde:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <SD_initialize+0x80>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d107      	bne.n	800bcf6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800bce6:	4b07      	ldr	r3, [pc, #28]	; (800bd04 <SD_initialize+0x7c>)
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	f043 0301 	orr.w	r3, r3, #1
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	4b04      	ldr	r3, [pc, #16]	; (800bd04 <SD_initialize+0x7c>)
 800bcf4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bcf6:	4b03      	ldr	r3, [pc, #12]	; (800bd04 <SD_initialize+0x7c>)
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	b2db      	uxtb	r3, r3
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	20000009 	.word	0x20000009
 800bd08:	200001dc 	.word	0x200001dc

0800bd0c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bd16:	79fb      	ldrb	r3, [r7, #7]
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff ff97 	bl	800bc4c <SD_CheckStatus>
 800bd1e:	4603      	mov	r3, r0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b088      	sub	sp, #32
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60b9      	str	r1, [r7, #8]
 800bd30:	607a      	str	r2, [r7, #4]
 800bd32:	603b      	str	r3, [r7, #0]
 800bd34:	4603      	mov	r3, r0
 800bd36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bd3c:	f247 5030 	movw	r0, #30000	; 0x7530
 800bd40:	f7ff ff66 	bl	800bc10 <SD_CheckStatusWithTimeout>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	da01      	bge.n	800bd4e <SD_read+0x26>
  {
    return res;
 800bd4a:	7ffb      	ldrb	r3, [r7, #31]
 800bd4c:	e02f      	b.n	800bdae <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	68b8      	ldr	r0, [r7, #8]
 800bd54:	f7ff fece 	bl	800baf4 <BSP_SD_ReadBlocks_DMA>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800bd5c:	7fbb      	ldrb	r3, [r7, #30]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d124      	bne.n	800bdac <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bd62:	4b15      	ldr	r3, [pc, #84]	; (800bdb8 <SD_read+0x90>)
 800bd64:	6818      	ldr	r0, [r3, #0]
 800bd66:	f107 0112 	add.w	r1, r7, #18
 800bd6a:	f247 5330 	movw	r3, #30000	; 0x7530
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f002 f814 	bl	800dd9c <osMessageQueueGet>
 800bd74:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d117      	bne.n	800bdac <SD_read+0x84>
 800bd7c:	8a7b      	ldrh	r3, [r7, #18]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d114      	bne.n	800bdac <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800bd82:	f001 fe75 	bl	800da70 <osKernelGetTickCount>
 800bd86:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bd88:	e007      	b.n	800bd9a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd8a:	f7ff fee7 	bl	800bb5c <BSP_SD_GetCardState>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d102      	bne.n	800bd9a <SD_read+0x72>
              {
                res = RES_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bd98:	e008      	b.n	800bdac <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bd9a:	f001 fe69 	bl	800da70 <osKernelGetTickCount>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	f247 522f 	movw	r2, #29999	; 0x752f
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d9ee      	bls.n	800bd8a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bdac:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3720      	adds	r7, #32
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	200001dc 	.word	0x200001dc

0800bdbc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b088      	sub	sp, #32
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	607a      	str	r2, [r7, #4]
 800bdc6:	603b      	str	r3, [r7, #0]
 800bdc8:	4603      	mov	r3, r0
 800bdca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bdd0:	f247 5030 	movw	r0, #30000	; 0x7530
 800bdd4:	f7ff ff1c 	bl	800bc10 <SD_CheckStatusWithTimeout>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	da01      	bge.n	800bde2 <SD_write+0x26>
  {
    return res;
 800bdde:	7ffb      	ldrb	r3, [r7, #31]
 800bde0:	e02d      	b.n	800be3e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	6879      	ldr	r1, [r7, #4]
 800bde6:	68b8      	ldr	r0, [r7, #8]
 800bde8:	f7ff fe9e 	bl	800bb28 <BSP_SD_WriteBlocks_DMA>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d124      	bne.n	800be3c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bdf2:	4b15      	ldr	r3, [pc, #84]	; (800be48 <SD_write+0x8c>)
 800bdf4:	6818      	ldr	r0, [r3, #0]
 800bdf6:	f107 0112 	add.w	r1, r7, #18
 800bdfa:	f247 5330 	movw	r3, #30000	; 0x7530
 800bdfe:	2200      	movs	r2, #0
 800be00:	f001 ffcc 	bl	800dd9c <osMessageQueueGet>
 800be04:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d117      	bne.n	800be3c <SD_write+0x80>
 800be0c:	8a7b      	ldrh	r3, [r7, #18]
 800be0e:	2b02      	cmp	r3, #2
 800be10:	d114      	bne.n	800be3c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800be12:	f001 fe2d 	bl	800da70 <osKernelGetTickCount>
 800be16:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800be18:	e007      	b.n	800be2a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be1a:	f7ff fe9f 	bl	800bb5c <BSP_SD_GetCardState>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d102      	bne.n	800be2a <SD_write+0x6e>
          {
            res = RES_OK;
 800be24:	2300      	movs	r3, #0
 800be26:	77fb      	strb	r3, [r7, #31]
            break;
 800be28:	e008      	b.n	800be3c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800be2a:	f001 fe21 	bl	800da70 <osKernelGetTickCount>
 800be2e:	4602      	mov	r2, r0
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	f247 522f 	movw	r2, #29999	; 0x752f
 800be38:	4293      	cmp	r3, r2
 800be3a:	d9ee      	bls.n	800be1a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800be3c:	7ffb      	ldrb	r3, [r7, #31]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3720      	adds	r7, #32
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	200001dc 	.word	0x200001dc

0800be4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08c      	sub	sp, #48	; 0x30
 800be50:	af00      	add	r7, sp, #0
 800be52:	4603      	mov	r3, r0
 800be54:	603a      	str	r2, [r7, #0]
 800be56:	71fb      	strb	r3, [r7, #7]
 800be58:	460b      	mov	r3, r1
 800be5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be62:	4b25      	ldr	r3, [pc, #148]	; (800bef8 <SD_ioctl+0xac>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	b2db      	uxtb	r3, r3
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <SD_ioctl+0x28>
 800be70:	2303      	movs	r3, #3
 800be72:	e03c      	b.n	800beee <SD_ioctl+0xa2>

  switch (cmd)
 800be74:	79bb      	ldrb	r3, [r7, #6]
 800be76:	2b03      	cmp	r3, #3
 800be78:	d834      	bhi.n	800bee4 <SD_ioctl+0x98>
 800be7a:	a201      	add	r2, pc, #4	; (adr r2, 800be80 <SD_ioctl+0x34>)
 800be7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be80:	0800be91 	.word	0x0800be91
 800be84:	0800be99 	.word	0x0800be99
 800be88:	0800beb1 	.word	0x0800beb1
 800be8c:	0800becb 	.word	0x0800becb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800be90:	2300      	movs	r3, #0
 800be92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be96:	e028      	b.n	800beea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800be98:	f107 0308 	add.w	r3, r7, #8
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff fe6d 	bl	800bb7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bea2:	6a3a      	ldr	r2, [r7, #32]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bea8:	2300      	movs	r3, #0
 800beaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800beae:	e01c      	b.n	800beea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800beb0:	f107 0308 	add.w	r3, r7, #8
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7ff fe61 	bl	800bb7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bec8:	e00f      	b.n	800beea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800beca:	f107 0308 	add.w	r3, r7, #8
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff fe54 	bl	800bb7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	0a5a      	lsrs	r2, r3, #9
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bee2:	e002      	b.n	800beea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bee4:	2304      	movs	r3, #4
 800bee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800beea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3730      	adds	r7, #48	; 0x30
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	20000009 	.word	0x20000009

0800befc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800bf02:	2302      	movs	r3, #2
 800bf04:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800bf06:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <BSP_SD_WriteCpltCallback+0x20>)
 800bf08:	6818      	ldr	r0, [r3, #0]
 800bf0a:	1db9      	adds	r1, r7, #6
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f001 fee4 	bl	800dcdc <osMessageQueuePut>
#endif
}
 800bf14:	bf00      	nop
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	200001dc 	.word	0x200001dc

0800bf20 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800bf26:	2301      	movs	r3, #1
 800bf28:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800bf2a:	4b05      	ldr	r3, [pc, #20]	; (800bf40 <BSP_SD_ReadCpltCallback+0x20>)
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	1db9      	adds	r1, r7, #6
 800bf30:	2300      	movs	r3, #0
 800bf32:	2200      	movs	r2, #0
 800bf34:	f001 fed2 	bl	800dcdc <osMessageQueuePut>
#endif
}
 800bf38:	bf00      	nop
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	200001dc 	.word	0x200001dc

0800bf44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bf54:	f005 fa8c 	bl	8011470 <USBD_static_malloc>
 800bf58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d105      	bne.n	800bf6c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bf68:	2302      	movs	r3, #2
 800bf6a:	e066      	b.n	800c03a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	7c1b      	ldrb	r3, [r3, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d119      	bne.n	800bfb0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf80:	2202      	movs	r2, #2
 800bf82:	2181      	movs	r1, #129	; 0x81
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f005 f85f 	bl	8011048 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf94:	2202      	movs	r2, #2
 800bf96:	2101      	movs	r1, #1
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f005 f855 	bl	8011048 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2210      	movs	r2, #16
 800bfaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bfae:	e016      	b.n	800bfde <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bfb0:	2340      	movs	r3, #64	; 0x40
 800bfb2:	2202      	movs	r2, #2
 800bfb4:	2181      	movs	r1, #129	; 0x81
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f005 f846 	bl	8011048 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bfc2:	2340      	movs	r3, #64	; 0x40
 800bfc4:	2202      	movs	r2, #2
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f005 f83d 	bl	8011048 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2210      	movs	r2, #16
 800bfda:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bfde:	2308      	movs	r3, #8
 800bfe0:	2203      	movs	r2, #3
 800bfe2:	2182      	movs	r1, #130	; 0x82
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f005 f82f 	bl	8011048 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2201      	movs	r2, #1
 800bfee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	7c1b      	ldrb	r3, [r3, #16]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d109      	bne.n	800c028 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c01a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c01e:	2101      	movs	r1, #1
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f005 f98b 	bl	801133c <USBD_LL_PrepareReceive>
 800c026:	e007      	b.n	800c038 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c02e:	2340      	movs	r3, #64	; 0x40
 800c030:	2101      	movs	r1, #1
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f005 f982 	bl	801133c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	460b      	mov	r3, r1
 800c04c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c04e:	2181      	movs	r1, #129	; 0x81
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f005 f837 	bl	80110c4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c05c:	2101      	movs	r1, #1
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f005 f830 	bl	80110c4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c06c:	2182      	movs	r1, #130	; 0x82
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f005 f828 	bl	80110c4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00e      	beq.n	800c0ac <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f005 f9f4 	bl	801148c <USBD_static_free>
    pdev->pClassData = NULL;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d101      	bne.n	800c0e0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	e0af      	b.n	800c240 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d03f      	beq.n	800c16c <USBD_CDC_Setup+0xb4>
 800c0ec:	2b20      	cmp	r3, #32
 800c0ee:	f040 809f 	bne.w	800c230 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	88db      	ldrh	r3, [r3, #6]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d02e      	beq.n	800c158 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	b25b      	sxtb	r3, r3
 800c100:	2b00      	cmp	r3, #0
 800c102:	da16      	bge.n	800c132 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c110:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c112:	683a      	ldr	r2, [r7, #0]
 800c114:	88d2      	ldrh	r2, [r2, #6]
 800c116:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	88db      	ldrh	r3, [r3, #6]
 800c11c:	2b07      	cmp	r3, #7
 800c11e:	bf28      	it	cs
 800c120:	2307      	movcs	r3, #7
 800c122:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	89fa      	ldrh	r2, [r7, #14]
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f001 fb13 	bl	800d756 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c130:	e085      	b.n	800c23e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	785a      	ldrb	r2, [r3, #1]
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	88db      	ldrh	r3, [r3, #6]
 800c140:	b2da      	uxtb	r2, r3
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c148:	6939      	ldr	r1, [r7, #16]
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	88db      	ldrh	r3, [r3, #6]
 800c14e:	461a      	mov	r2, r3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f001 fb2c 	bl	800d7ae <USBD_CtlPrepareRx>
      break;
 800c156:	e072      	b.n	800c23e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	683a      	ldr	r2, [r7, #0]
 800c162:	7850      	ldrb	r0, [r2, #1]
 800c164:	2200      	movs	r2, #0
 800c166:	6839      	ldr	r1, [r7, #0]
 800c168:	4798      	blx	r3
      break;
 800c16a:	e068      	b.n	800c23e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	785b      	ldrb	r3, [r3, #1]
 800c170:	2b0b      	cmp	r3, #11
 800c172:	d852      	bhi.n	800c21a <USBD_CDC_Setup+0x162>
 800c174:	a201      	add	r2, pc, #4	; (adr r2, 800c17c <USBD_CDC_Setup+0xc4>)
 800c176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17a:	bf00      	nop
 800c17c:	0800c1ad 	.word	0x0800c1ad
 800c180:	0800c229 	.word	0x0800c229
 800c184:	0800c21b 	.word	0x0800c21b
 800c188:	0800c21b 	.word	0x0800c21b
 800c18c:	0800c21b 	.word	0x0800c21b
 800c190:	0800c21b 	.word	0x0800c21b
 800c194:	0800c21b 	.word	0x0800c21b
 800c198:	0800c21b 	.word	0x0800c21b
 800c19c:	0800c21b 	.word	0x0800c21b
 800c1a0:	0800c21b 	.word	0x0800c21b
 800c1a4:	0800c1d7 	.word	0x0800c1d7
 800c1a8:	0800c201 	.word	0x0800c201
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	2b03      	cmp	r3, #3
 800c1b6:	d107      	bne.n	800c1c8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c1b8:	f107 030a 	add.w	r3, r7, #10
 800c1bc:	2202      	movs	r2, #2
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 fac8 	bl	800d756 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1c6:	e032      	b.n	800c22e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f001 fa52 	bl	800d674 <USBD_CtlError>
            ret = USBD_FAIL;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	75fb      	strb	r3, [r7, #23]
          break;
 800c1d4:	e02b      	b.n	800c22e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d107      	bne.n	800c1f2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c1e2:	f107 030d 	add.w	r3, r7, #13
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f001 fab3 	bl	800d756 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1f0:	e01d      	b.n	800c22e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f001 fa3d 	bl	800d674 <USBD_CtlError>
            ret = USBD_FAIL;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	75fb      	strb	r3, [r7, #23]
          break;
 800c1fe:	e016      	b.n	800c22e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c206:	b2db      	uxtb	r3, r3
 800c208:	2b03      	cmp	r3, #3
 800c20a:	d00f      	beq.n	800c22c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f001 fa30 	bl	800d674 <USBD_CtlError>
            ret = USBD_FAIL;
 800c214:	2303      	movs	r3, #3
 800c216:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c218:	e008      	b.n	800c22c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f001 fa29 	bl	800d674 <USBD_CtlError>
          ret = USBD_FAIL;
 800c222:	2303      	movs	r3, #3
 800c224:	75fb      	strb	r3, [r7, #23]
          break;
 800c226:	e002      	b.n	800c22e <USBD_CDC_Setup+0x176>
          break;
 800c228:	bf00      	nop
 800c22a:	e008      	b.n	800c23e <USBD_CDC_Setup+0x186>
          break;
 800c22c:	bf00      	nop
      }
      break;
 800c22e:	e006      	b.n	800c23e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f001 fa1e 	bl	800d674 <USBD_CtlError>
      ret = USBD_FAIL;
 800c238:	2303      	movs	r3, #3
 800c23a:	75fb      	strb	r3, [r7, #23]
      break;
 800c23c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3718      	adds	r7, #24
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	460b      	mov	r3, r1
 800c252:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c25a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c266:	2303      	movs	r3, #3
 800c268:	e04f      	b.n	800c30a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c270:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c272:	78fa      	ldrb	r2, [r7, #3]
 800c274:	6879      	ldr	r1, [r7, #4]
 800c276:	4613      	mov	r3, r2
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4413      	add	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	440b      	add	r3, r1
 800c280:	3318      	adds	r3, #24
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d029      	beq.n	800c2dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c288:	78fa      	ldrb	r2, [r7, #3]
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	4613      	mov	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	440b      	add	r3, r1
 800c296:	3318      	adds	r3, #24
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	78f9      	ldrb	r1, [r7, #3]
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	460b      	mov	r3, r1
 800c2a0:	00db      	lsls	r3, r3, #3
 800c2a2:	1a5b      	subs	r3, r3, r1
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4403      	add	r3, r0
 800c2a8:	3344      	adds	r3, #68	; 0x44
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800c2b0:	fb03 f301 	mul.w	r3, r3, r1
 800c2b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d110      	bne.n	800c2dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c2ba:	78fa      	ldrb	r2, [r7, #3]
 800c2bc:	6879      	ldr	r1, [r7, #4]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	440b      	add	r3, r1
 800c2c8:	3318      	adds	r3, #24
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c2ce:	78f9      	ldrb	r1, [r7, #3]
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f004 fff9 	bl	80112cc <USBD_LL_Transmit>
 800c2da:	e015      	b.n	800c308 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00b      	beq.n	800c308 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c304:	78fa      	ldrb	r2, [r7, #3]
 800c306:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c308:	2300      	movs	r3, #0
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	460b      	mov	r3, r1
 800c31c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c324:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c330:	2303      	movs	r3, #3
 800c332:	e015      	b.n	800c360 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	4619      	mov	r1, r3
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f005 f837 	bl	80113ac <USBD_LL_GetRxDataSize>
 800c33e:	4602      	mov	r2, r0
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c35a:	4611      	mov	r1, r2
 800c35c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c35e:	2300      	movs	r3, #0
}
 800c360:	4618      	mov	r0, r3
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}

0800c368 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c376:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c37e:	2303      	movs	r3, #3
 800c380:	e01b      	b.n	800c3ba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d015      	beq.n	800c3b8 <USBD_CDC_EP0_RxReady+0x50>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c392:	2bff      	cmp	r3, #255	; 0xff
 800c394:	d010      	beq.n	800c3b8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c3a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c3ac:	b292      	uxth	r2, r2
 800c3ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	22ff      	movs	r2, #255	; 0xff
 800c3b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
	...

0800c3c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2243      	movs	r2, #67	; 0x43
 800c3d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c3d2:	4b03      	ldr	r3, [pc, #12]	; (800c3e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr
 800c3e0:	20000094 	.word	0x20000094

0800c3e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2243      	movs	r2, #67	; 0x43
 800c3f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c3f2:	4b03      	ldr	r3, [pc, #12]	; (800c400 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr
 800c400:	20000050 	.word	0x20000050

0800c404 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2243      	movs	r2, #67	; 0x43
 800c410:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c412:	4b03      	ldr	r3, [pc, #12]	; (800c420 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c414:	4618      	mov	r0, r3
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	200000d8 	.word	0x200000d8

0800c424 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	220a      	movs	r2, #10
 800c430:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c432:	4b03      	ldr	r3, [pc, #12]	; (800c440 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c434:	4618      	mov	r0, r3
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr
 800c440:	2000000c 	.word	0x2000000c

0800c444 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d101      	bne.n	800c458 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c454:	2303      	movs	r3, #3
 800c456:	e004      	b.n	800c462 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	683a      	ldr	r2, [r7, #0]
 800c45c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr

0800c46e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c46e:	b480      	push	{r7}
 800c470:	b087      	sub	sp, #28
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c480:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c488:	2303      	movs	r3, #3
 800c48a:	e008      	b.n	800c49e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	371c      	adds	r7, #28
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr

0800c4aa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c4aa:	b480      	push	{r7}
 800c4ac:	b085      	sub	sp, #20
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	e004      	b.n	800c4d0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	683a      	ldr	r2, [r7, #0]
 800c4ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d101      	bne.n	800c4fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e016      	b.n	800c528 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7c1b      	ldrb	r3, [r3, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d109      	bne.n	800c516 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c50c:	2101      	movs	r1, #1
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f004 ff14 	bl	801133c <USBD_LL_PrepareReceive>
 800c514:	e007      	b.n	800c526 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c51c:	2340      	movs	r3, #64	; 0x40
 800c51e:	2101      	movs	r1, #1
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f004 ff0b 	bl	801133c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c526:	2300      	movs	r3, #0
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	4613      	mov	r3, r2
 800c53c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c544:	2303      	movs	r3, #3
 800c546:	e01f      	b.n	800c588 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d003      	beq.n	800c56e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2201      	movs	r2, #1
 800c572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	79fa      	ldrb	r2, [r7, #7]
 800c57a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c57c:	68f8      	ldr	r0, [r7, #12]
 800c57e:	f004 fce7 	bl	8010f50 <USBD_LL_Init>
 800c582:	4603      	mov	r3, r0
 800c584:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c586:	7dfb      	ldrb	r3, [r7, #23]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3718      	adds	r7, #24
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c59a:	2300      	movs	r3, #0
 800c59c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e016      	b.n	800c5d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	683a      	ldr	r2, [r7, #0]
 800c5ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00b      	beq.n	800c5d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c4:	f107 020e 	add.w	r2, r7, #14
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	4798      	blx	r3
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b082      	sub	sp, #8
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f004 fcfc 	bl	8010fe4 <USBD_LL_Start>
 800c5ec:	4603      	mov	r3, r0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b083      	sub	sp, #12
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c5fe:	2300      	movs	r3, #0
}
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	460b      	mov	r3, r1
 800c616:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c618:	2303      	movs	r3, #3
 800c61a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c622:	2b00      	cmp	r3, #0
 800c624:	d009      	beq.n	800c63a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	78fa      	ldrb	r2, [r7, #3]
 800c630:	4611      	mov	r1, r2
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	4798      	blx	r3
 800c636:	4603      	mov	r3, r0
 800c638:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c63a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	460b      	mov	r3, r1
 800c64e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c656:	2b00      	cmp	r3, #0
 800c658:	d007      	beq.n	800c66a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	78fa      	ldrb	r2, [r7, #3]
 800c664:	4611      	mov	r1, r2
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	4798      	blx	r3
  }

  return USBD_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	4618      	mov	r0, r3
 800c688:	f000 ffba 	bl	800d600 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c69a:	461a      	mov	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c6a8:	f003 031f 	and.w	r3, r3, #31
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d01a      	beq.n	800c6e6 <USBD_LL_SetupStage+0x72>
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d822      	bhi.n	800c6fa <USBD_LL_SetupStage+0x86>
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d002      	beq.n	800c6be <USBD_LL_SetupStage+0x4a>
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d00a      	beq.n	800c6d2 <USBD_LL_SetupStage+0x5e>
 800c6bc:	e01d      	b.n	800c6fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 fa62 	bl	800cb90 <USBD_StdDevReq>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]
      break;
 800c6d0:	e020      	b.n	800c714 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fac6 	bl	800cc6c <USBD_StdItfReq>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c6e4:	e016      	b.n	800c714 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 fb05 	bl	800ccfe <USBD_StdEPReq>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6f8:	e00c      	b.n	800c714 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c700:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c704:	b2db      	uxtb	r3, r3
 800c706:	4619      	mov	r1, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f004 fd11 	bl	8011130 <USBD_LL_StallEP>
 800c70e:	4603      	mov	r3, r0
 800c710:	73fb      	strb	r3, [r7, #15]
      break;
 800c712:	bf00      	nop
  }

  return ret;
 800c714:	7bfb      	ldrb	r3, [r7, #15]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b086      	sub	sp, #24
 800c722:	af00      	add	r7, sp, #0
 800c724:	60f8      	str	r0, [r7, #12]
 800c726:	460b      	mov	r3, r1
 800c728:	607a      	str	r2, [r7, #4]
 800c72a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c72c:	7afb      	ldrb	r3, [r7, #11]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d138      	bne.n	800c7a4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c738:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c740:	2b03      	cmp	r3, #3
 800c742:	d14a      	bne.n	800c7da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	689a      	ldr	r2, [r3, #8]
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d913      	bls.n	800c778 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	689a      	ldr	r2, [r3, #8]
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	1ad2      	subs	r2, r2, r3
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	68da      	ldr	r2, [r3, #12]
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	4293      	cmp	r3, r2
 800c768:	bf28      	it	cs
 800c76a:	4613      	movcs	r3, r2
 800c76c:	461a      	mov	r2, r3
 800c76e:	6879      	ldr	r1, [r7, #4]
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f001 f839 	bl	800d7e8 <USBD_CtlContinueRx>
 800c776:	e030      	b.n	800c7da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	2b03      	cmp	r3, #3
 800c782:	d10b      	bne.n	800c79c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f001 f834 	bl	800d80a <USBD_CtlSendStatus>
 800c7a2:	e01a      	b.n	800c7da <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	2b03      	cmp	r3, #3
 800c7ae:	d114      	bne.n	800c7da <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00e      	beq.n	800c7da <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	7afa      	ldrb	r2, [r7, #11]
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	4798      	blx	r3
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c7d0:	7dfb      	ldrb	r3, [r7, #23]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d001      	beq.n	800c7da <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c7d6:	7dfb      	ldrb	r3, [r7, #23]
 800c7d8:	e000      	b.n	800c7dc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	607a      	str	r2, [r7, #4]
 800c7f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c7f2:	7afb      	ldrb	r3, [r7, #11]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d16b      	bne.n	800c8d0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	3314      	adds	r3, #20
 800c7fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c804:	2b02      	cmp	r3, #2
 800c806:	d156      	bne.n	800c8b6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	689a      	ldr	r2, [r3, #8]
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	429a      	cmp	r2, r3
 800c812:	d914      	bls.n	800c83e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	689a      	ldr	r2, [r3, #8]
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	1ad2      	subs	r2, r2, r3
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	461a      	mov	r2, r3
 800c828:	6879      	ldr	r1, [r7, #4]
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 ffae 	bl	800d78c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c830:	2300      	movs	r3, #0
 800c832:	2200      	movs	r2, #0
 800c834:	2100      	movs	r1, #0
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f004 fd80 	bl	801133c <USBD_LL_PrepareReceive>
 800c83c:	e03b      	b.n	800c8b6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	68da      	ldr	r2, [r3, #12]
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	429a      	cmp	r2, r3
 800c848:	d11c      	bne.n	800c884 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	685a      	ldr	r2, [r3, #4]
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c852:	429a      	cmp	r2, r3
 800c854:	d316      	bcc.n	800c884 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c860:	429a      	cmp	r2, r3
 800c862:	d20f      	bcs.n	800c884 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c864:	2200      	movs	r2, #0
 800c866:	2100      	movs	r1, #0
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f000 ff8f 	bl	800d78c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c876:	2300      	movs	r3, #0
 800c878:	2200      	movs	r2, #0
 800c87a:	2100      	movs	r1, #0
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f004 fd5d 	bl	801133c <USBD_LL_PrepareReceive>
 800c882:	e018      	b.n	800c8b6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	d10b      	bne.n	800c8a8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8a8:	2180      	movs	r1, #128	; 0x80
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f004 fc40 	bl	8011130 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f000 ffbd 	bl	800d830 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d122      	bne.n	800c906 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f7ff fe98 	bl	800c5f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c8ce:	e01a      	b.n	800c906 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	2b03      	cmp	r3, #3
 800c8da:	d114      	bne.n	800c906 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8e2:	695b      	ldr	r3, [r3, #20]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00e      	beq.n	800c906 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ee:	695b      	ldr	r3, [r3, #20]
 800c8f0:	7afa      	ldrb	r2, [r7, #11]
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	4798      	blx	r3
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c902:	7dfb      	ldrb	r3, [r7, #23]
 800c904:	e000      	b.n	800c908 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3718      	adds	r7, #24
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c940:	2303      	movs	r3, #3
 800c942:	e02f      	b.n	800c9a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00f      	beq.n	800c96e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d009      	beq.n	800c96e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	6852      	ldr	r2, [r2, #4]
 800c966:	b2d2      	uxtb	r2, r2
 800c968:	4611      	mov	r1, r2
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c96e:	2340      	movs	r3, #64	; 0x40
 800c970:	2200      	movs	r2, #0
 800c972:	2100      	movs	r1, #0
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f004 fb67 	bl	8011048 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2201      	movs	r2, #1
 800c97e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2240      	movs	r2, #64	; 0x40
 800c986:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c98a:	2340      	movs	r3, #64	; 0x40
 800c98c:	2200      	movs	r2, #0
 800c98e:	2180      	movs	r1, #128	; 0x80
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f004 fb59 	bl	8011048 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2201      	movs	r2, #1
 800c99a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2240      	movs	r2, #64	; 0x40
 800c9a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c9a2:	2300      	movs	r3, #0
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	78fa      	ldrb	r2, [r7, #3]
 800c9bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c9be:	2300      	movs	r3, #0
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9da:	b2da      	uxtb	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2204      	movs	r2, #4
 800c9e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b04      	cmp	r3, #4
 800ca0a:	d106      	bne.n	800ca1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ca1a:	2300      	movs	r3, #0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	e012      	b.n	800ca64 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	d10b      	bne.n	800ca62 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca50:	69db      	ldr	r3, [r3, #28]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d005      	beq.n	800ca62 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca5c:	69db      	ldr	r3, [r3, #28]
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	460b      	mov	r3, r1
 800ca76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d101      	bne.n	800ca86 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ca82:	2303      	movs	r3, #3
 800ca84:	e014      	b.n	800cab0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	2b03      	cmp	r3, #3
 800ca90:	d10d      	bne.n	800caae <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d007      	beq.n	800caae <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa4:	6a1b      	ldr	r3, [r3, #32]
 800caa6:	78fa      	ldrb	r2, [r7, #3]
 800caa8:	4611      	mov	r1, r2
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	460b      	mov	r3, r1
 800cac2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d101      	bne.n	800cad2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800cace:	2303      	movs	r3, #3
 800cad0:	e014      	b.n	800cafc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d10d      	bne.n	800cafa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d007      	beq.n	800cafa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf2:	78fa      	ldrb	r2, [r7, #3]
 800caf4:	4611      	mov	r1, r2
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2201      	movs	r2, #1
 800cb26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d009      	beq.n	800cb48 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	6852      	ldr	r2, [r2, #4]
 800cb40:	b2d2      	uxtb	r2, r2
 800cb42:	4611      	mov	r1, r2
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	4798      	blx	r3
  }

  return USBD_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb52:	b480      	push	{r7}
 800cb54:	b087      	sub	sp, #28
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	3301      	adds	r3, #1
 800cb68:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cb70:	8a3b      	ldrh	r3, [r7, #16]
 800cb72:	021b      	lsls	r3, r3, #8
 800cb74:	b21a      	sxth	r2, r3
 800cb76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	b21b      	sxth	r3, r3
 800cb7e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cb80:	89fb      	ldrh	r3, [r7, #14]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	371c      	adds	r7, #28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
	...

0800cb90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cba6:	2b40      	cmp	r3, #64	; 0x40
 800cba8:	d005      	beq.n	800cbb6 <USBD_StdDevReq+0x26>
 800cbaa:	2b40      	cmp	r3, #64	; 0x40
 800cbac:	d853      	bhi.n	800cc56 <USBD_StdDevReq+0xc6>
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00b      	beq.n	800cbca <USBD_StdDevReq+0x3a>
 800cbb2:	2b20      	cmp	r3, #32
 800cbb4:	d14f      	bne.n	800cc56 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	6839      	ldr	r1, [r7, #0]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	4798      	blx	r3
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]
      break;
 800cbc8:	e04a      	b.n	800cc60 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	785b      	ldrb	r3, [r3, #1]
 800cbce:	2b09      	cmp	r3, #9
 800cbd0:	d83b      	bhi.n	800cc4a <USBD_StdDevReq+0xba>
 800cbd2:	a201      	add	r2, pc, #4	; (adr r2, 800cbd8 <USBD_StdDevReq+0x48>)
 800cbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd8:	0800cc2d 	.word	0x0800cc2d
 800cbdc:	0800cc41 	.word	0x0800cc41
 800cbe0:	0800cc4b 	.word	0x0800cc4b
 800cbe4:	0800cc37 	.word	0x0800cc37
 800cbe8:	0800cc4b 	.word	0x0800cc4b
 800cbec:	0800cc0b 	.word	0x0800cc0b
 800cbf0:	0800cc01 	.word	0x0800cc01
 800cbf4:	0800cc4b 	.word	0x0800cc4b
 800cbf8:	0800cc23 	.word	0x0800cc23
 800cbfc:	0800cc15 	.word	0x0800cc15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 f9de 	bl	800cfc4 <USBD_GetDescriptor>
          break;
 800cc08:	e024      	b.n	800cc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cc0a:	6839      	ldr	r1, [r7, #0]
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fb6d 	bl	800d2ec <USBD_SetAddress>
          break;
 800cc12:	e01f      	b.n	800cc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fbac 	bl	800d374 <USBD_SetConfig>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73fb      	strb	r3, [r7, #15]
          break;
 800cc20:	e018      	b.n	800cc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc22:	6839      	ldr	r1, [r7, #0]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fc4b 	bl	800d4c0 <USBD_GetConfig>
          break;
 800cc2a:	e013      	b.n	800cc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fc7c 	bl	800d52c <USBD_GetStatus>
          break;
 800cc34:	e00e      	b.n	800cc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 fcab 	bl	800d594 <USBD_SetFeature>
          break;
 800cc3e:	e009      	b.n	800cc54 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fcba 	bl	800d5bc <USBD_ClrFeature>
          break;
 800cc48:	e004      	b.n	800cc54 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fd11 	bl	800d674 <USBD_CtlError>
          break;
 800cc52:	bf00      	nop
      }
      break;
 800cc54:	e004      	b.n	800cc60 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fd0b 	bl	800d674 <USBD_CtlError>
      break;
 800cc5e:	bf00      	nop
  }

  return ret;
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop

0800cc6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc82:	2b40      	cmp	r3, #64	; 0x40
 800cc84:	d005      	beq.n	800cc92 <USBD_StdItfReq+0x26>
 800cc86:	2b40      	cmp	r3, #64	; 0x40
 800cc88:	d82f      	bhi.n	800ccea <USBD_StdItfReq+0x7e>
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <USBD_StdItfReq+0x26>
 800cc8e:	2b20      	cmp	r3, #32
 800cc90:	d12b      	bne.n	800ccea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d81d      	bhi.n	800ccdc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	889b      	ldrh	r3, [r3, #4]
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d813      	bhi.n	800ccd2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	4798      	blx	r3
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	88db      	ldrh	r3, [r3, #6]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d110      	bne.n	800cce6 <USBD_StdItfReq+0x7a>
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d10d      	bne.n	800cce6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 fd9d 	bl	800d80a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ccd0:	e009      	b.n	800cce6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fccd 	bl	800d674 <USBD_CtlError>
          break;
 800ccda:	e004      	b.n	800cce6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 fcc8 	bl	800d674 <USBD_CtlError>
          break;
 800cce4:	e000      	b.n	800cce8 <USBD_StdItfReq+0x7c>
          break;
 800cce6:	bf00      	nop
      }
      break;
 800cce8:	e004      	b.n	800ccf4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ccea:	6839      	ldr	r1, [r7, #0]
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fcc1 	bl	800d674 <USBD_CtlError>
      break;
 800ccf2:	bf00      	nop
  }

  return ret;
 800ccf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3710      	adds	r7, #16
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b084      	sub	sp, #16
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
 800cd06:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	889b      	ldrh	r3, [r3, #4]
 800cd10:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd1a:	2b40      	cmp	r3, #64	; 0x40
 800cd1c:	d007      	beq.n	800cd2e <USBD_StdEPReq+0x30>
 800cd1e:	2b40      	cmp	r3, #64	; 0x40
 800cd20:	f200 8145 	bhi.w	800cfae <USBD_StdEPReq+0x2b0>
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d00c      	beq.n	800cd42 <USBD_StdEPReq+0x44>
 800cd28:	2b20      	cmp	r3, #32
 800cd2a:	f040 8140 	bne.w	800cfae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	6839      	ldr	r1, [r7, #0]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	4798      	blx	r3
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73fb      	strb	r3, [r7, #15]
      break;
 800cd40:	e13a      	b.n	800cfb8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	785b      	ldrb	r3, [r3, #1]
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d007      	beq.n	800cd5a <USBD_StdEPReq+0x5c>
 800cd4a:	2b03      	cmp	r3, #3
 800cd4c:	f300 8129 	bgt.w	800cfa2 <USBD_StdEPReq+0x2a4>
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d07f      	beq.n	800ce54 <USBD_StdEPReq+0x156>
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d03c      	beq.n	800cdd2 <USBD_StdEPReq+0xd4>
 800cd58:	e123      	b.n	800cfa2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	2b02      	cmp	r3, #2
 800cd64:	d002      	beq.n	800cd6c <USBD_StdEPReq+0x6e>
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d016      	beq.n	800cd98 <USBD_StdEPReq+0x9a>
 800cd6a:	e02c      	b.n	800cdc6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd6c:	7bbb      	ldrb	r3, [r7, #14]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00d      	beq.n	800cd8e <USBD_StdEPReq+0x90>
 800cd72:	7bbb      	ldrb	r3, [r7, #14]
 800cd74:	2b80      	cmp	r3, #128	; 0x80
 800cd76:	d00a      	beq.n	800cd8e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd78:	7bbb      	ldrb	r3, [r7, #14]
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f004 f9d7 	bl	8011130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd82:	2180      	movs	r1, #128	; 0x80
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f004 f9d3 	bl	8011130 <USBD_LL_StallEP>
 800cd8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd8c:	e020      	b.n	800cdd0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fc6f 	bl	800d674 <USBD_CtlError>
              break;
 800cd96:	e01b      	b.n	800cdd0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	885b      	ldrh	r3, [r3, #2]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10e      	bne.n	800cdbe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00b      	beq.n	800cdbe <USBD_StdEPReq+0xc0>
 800cda6:	7bbb      	ldrb	r3, [r7, #14]
 800cda8:	2b80      	cmp	r3, #128	; 0x80
 800cdaa:	d008      	beq.n	800cdbe <USBD_StdEPReq+0xc0>
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	88db      	ldrh	r3, [r3, #6]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d104      	bne.n	800cdbe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdb4:	7bbb      	ldrb	r3, [r7, #14]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f004 f9b9 	bl	8011130 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fd23 	bl	800d80a <USBD_CtlSendStatus>

              break;
 800cdc4:	e004      	b.n	800cdd0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cdc6:	6839      	ldr	r1, [r7, #0]
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 fc53 	bl	800d674 <USBD_CtlError>
              break;
 800cdce:	bf00      	nop
          }
          break;
 800cdd0:	e0ec      	b.n	800cfac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d002      	beq.n	800cde4 <USBD_StdEPReq+0xe6>
 800cdde:	2b03      	cmp	r3, #3
 800cde0:	d016      	beq.n	800ce10 <USBD_StdEPReq+0x112>
 800cde2:	e030      	b.n	800ce46 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cde4:	7bbb      	ldrb	r3, [r7, #14]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00d      	beq.n	800ce06 <USBD_StdEPReq+0x108>
 800cdea:	7bbb      	ldrb	r3, [r7, #14]
 800cdec:	2b80      	cmp	r3, #128	; 0x80
 800cdee:	d00a      	beq.n	800ce06 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdf0:	7bbb      	ldrb	r3, [r7, #14]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f004 f99b 	bl	8011130 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdfa:	2180      	movs	r1, #128	; 0x80
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f004 f997 	bl	8011130 <USBD_LL_StallEP>
 800ce02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce04:	e025      	b.n	800ce52 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 fc33 	bl	800d674 <USBD_CtlError>
              break;
 800ce0e:	e020      	b.n	800ce52 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	885b      	ldrh	r3, [r3, #2]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d11b      	bne.n	800ce50 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ce18:	7bbb      	ldrb	r3, [r7, #14]
 800ce1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d004      	beq.n	800ce2c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce22:	7bbb      	ldrb	r3, [r7, #14]
 800ce24:	4619      	mov	r1, r3
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f004 f9b8 	bl	801119c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fcec 	bl	800d80a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	4798      	blx	r3
 800ce40:	4603      	mov	r3, r0
 800ce42:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ce44:	e004      	b.n	800ce50 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 fc13 	bl	800d674 <USBD_CtlError>
              break;
 800ce4e:	e000      	b.n	800ce52 <USBD_StdEPReq+0x154>
              break;
 800ce50:	bf00      	nop
          }
          break;
 800ce52:	e0ab      	b.n	800cfac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d002      	beq.n	800ce66 <USBD_StdEPReq+0x168>
 800ce60:	2b03      	cmp	r3, #3
 800ce62:	d032      	beq.n	800ceca <USBD_StdEPReq+0x1cc>
 800ce64:	e097      	b.n	800cf96 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce66:	7bbb      	ldrb	r3, [r7, #14]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d007      	beq.n	800ce7c <USBD_StdEPReq+0x17e>
 800ce6c:	7bbb      	ldrb	r3, [r7, #14]
 800ce6e:	2b80      	cmp	r3, #128	; 0x80
 800ce70:	d004      	beq.n	800ce7c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 fbfd 	bl	800d674 <USBD_CtlError>
                break;
 800ce7a:	e091      	b.n	800cfa0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	da0b      	bge.n	800ce9c <USBD_StdEPReq+0x19e>
 800ce84:	7bbb      	ldrb	r3, [r7, #14]
 800ce86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	3310      	adds	r3, #16
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	4413      	add	r3, r2
 800ce98:	3304      	adds	r3, #4
 800ce9a:	e00b      	b.n	800ceb4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce9c:	7bbb      	ldrb	r3, [r7, #14]
 800ce9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cea2:	4613      	mov	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	4413      	add	r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	3304      	adds	r3, #4
 800ceb4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	2202      	movs	r2, #2
 800cec0:	4619      	mov	r1, r3
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fc47 	bl	800d756 <USBD_CtlSendData>
              break;
 800cec8:	e06a      	b.n	800cfa0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ceca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	da11      	bge.n	800cef6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ced2:	7bbb      	ldrb	r3, [r7, #14]
 800ced4:	f003 020f 	and.w	r2, r3, #15
 800ced8:	6879      	ldr	r1, [r7, #4]
 800ceda:	4613      	mov	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4413      	add	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	440b      	add	r3, r1
 800cee4:	3324      	adds	r3, #36	; 0x24
 800cee6:	881b      	ldrh	r3, [r3, #0]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d117      	bne.n	800cf1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ceec:	6839      	ldr	r1, [r7, #0]
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 fbc0 	bl	800d674 <USBD_CtlError>
                  break;
 800cef4:	e054      	b.n	800cfa0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cef6:	7bbb      	ldrb	r3, [r7, #14]
 800cef8:	f003 020f 	and.w	r2, r3, #15
 800cefc:	6879      	ldr	r1, [r7, #4]
 800cefe:	4613      	mov	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	440b      	add	r3, r1
 800cf08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d104      	bne.n	800cf1c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fbad 	bl	800d674 <USBD_CtlError>
                  break;
 800cf1a:	e041      	b.n	800cfa0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	da0b      	bge.n	800cf3c <USBD_StdEPReq+0x23e>
 800cf24:	7bbb      	ldrb	r3, [r7, #14]
 800cf26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	3310      	adds	r3, #16
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	4413      	add	r3, r2
 800cf38:	3304      	adds	r3, #4
 800cf3a:	e00b      	b.n	800cf54 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf3c:	7bbb      	ldrb	r3, [r7, #14]
 800cf3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf42:	4613      	mov	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4413      	add	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	4413      	add	r3, r2
 800cf52:	3304      	adds	r3, #4
 800cf54:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf56:	7bbb      	ldrb	r3, [r7, #14]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <USBD_StdEPReq+0x264>
 800cf5c:	7bbb      	ldrb	r3, [r7, #14]
 800cf5e:	2b80      	cmp	r3, #128	; 0x80
 800cf60:	d103      	bne.n	800cf6a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2200      	movs	r2, #0
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	e00e      	b.n	800cf88 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cf6a:	7bbb      	ldrb	r3, [r7, #14]
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f004 f94a 	bl	8011208 <USBD_LL_IsStallEP>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	601a      	str	r2, [r3, #0]
 800cf80:	e002      	b.n	800cf88 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2200      	movs	r2, #0
 800cf86:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 fbe1 	bl	800d756 <USBD_CtlSendData>
              break;
 800cf94:	e004      	b.n	800cfa0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cf96:	6839      	ldr	r1, [r7, #0]
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 fb6b 	bl	800d674 <USBD_CtlError>
              break;
 800cf9e:	bf00      	nop
          }
          break;
 800cfa0:	e004      	b.n	800cfac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cfa2:	6839      	ldr	r1, [r7, #0]
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fb65 	bl	800d674 <USBD_CtlError>
          break;
 800cfaa:	bf00      	nop
      }
      break;
 800cfac:	e004      	b.n	800cfb8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 fb5f 	bl	800d674 <USBD_CtlError>
      break;
 800cfb6:	bf00      	nop
  }

  return ret;
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
	...

0800cfc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	885b      	ldrh	r3, [r3, #2]
 800cfde:	0a1b      	lsrs	r3, r3, #8
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	2b0e      	cmp	r3, #14
 800cfe6:	f200 8152 	bhi.w	800d28e <USBD_GetDescriptor+0x2ca>
 800cfea:	a201      	add	r2, pc, #4	; (adr r2, 800cff0 <USBD_GetDescriptor+0x2c>)
 800cfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff0:	0800d061 	.word	0x0800d061
 800cff4:	0800d079 	.word	0x0800d079
 800cff8:	0800d0b9 	.word	0x0800d0b9
 800cffc:	0800d28f 	.word	0x0800d28f
 800d000:	0800d28f 	.word	0x0800d28f
 800d004:	0800d22f 	.word	0x0800d22f
 800d008:	0800d25b 	.word	0x0800d25b
 800d00c:	0800d28f 	.word	0x0800d28f
 800d010:	0800d28f 	.word	0x0800d28f
 800d014:	0800d28f 	.word	0x0800d28f
 800d018:	0800d28f 	.word	0x0800d28f
 800d01c:	0800d28f 	.word	0x0800d28f
 800d020:	0800d28f 	.word	0x0800d28f
 800d024:	0800d28f 	.word	0x0800d28f
 800d028:	0800d02d 	.word	0x0800d02d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d032:	69db      	ldr	r3, [r3, #28]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00b      	beq.n	800d050 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d03e:	69db      	ldr	r3, [r3, #28]
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	7c12      	ldrb	r2, [r2, #16]
 800d044:	f107 0108 	add.w	r1, r7, #8
 800d048:	4610      	mov	r0, r2
 800d04a:	4798      	blx	r3
 800d04c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d04e:	e126      	b.n	800d29e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d050:	6839      	ldr	r1, [r7, #0]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 fb0e 	bl	800d674 <USBD_CtlError>
        err++;
 800d058:	7afb      	ldrb	r3, [r7, #11]
 800d05a:	3301      	adds	r3, #1
 800d05c:	72fb      	strb	r3, [r7, #11]
      break;
 800d05e:	e11e      	b.n	800d29e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	7c12      	ldrb	r2, [r2, #16]
 800d06c:	f107 0108 	add.w	r1, r7, #8
 800d070:	4610      	mov	r0, r2
 800d072:	4798      	blx	r3
 800d074:	60f8      	str	r0, [r7, #12]
      break;
 800d076:	e112      	b.n	800d29e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	7c1b      	ldrb	r3, [r3, #16]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10d      	bne.n	800d09c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d088:	f107 0208 	add.w	r2, r7, #8
 800d08c:	4610      	mov	r0, r2
 800d08e:	4798      	blx	r3
 800d090:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	3301      	adds	r3, #1
 800d096:	2202      	movs	r2, #2
 800d098:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d09a:	e100      	b.n	800d29e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a4:	f107 0208 	add.w	r2, r7, #8
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	4798      	blx	r3
 800d0ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	701a      	strb	r2, [r3, #0]
      break;
 800d0b6:	e0f2      	b.n	800d29e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	885b      	ldrh	r3, [r3, #2]
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b05      	cmp	r3, #5
 800d0c0:	f200 80ac 	bhi.w	800d21c <USBD_GetDescriptor+0x258>
 800d0c4:	a201      	add	r2, pc, #4	; (adr r2, 800d0cc <USBD_GetDescriptor+0x108>)
 800d0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ca:	bf00      	nop
 800d0cc:	0800d0e5 	.word	0x0800d0e5
 800d0d0:	0800d119 	.word	0x0800d119
 800d0d4:	0800d14d 	.word	0x0800d14d
 800d0d8:	0800d181 	.word	0x0800d181
 800d0dc:	0800d1b5 	.word	0x0800d1b5
 800d0e0:	0800d1e9 	.word	0x0800d1e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00b      	beq.n	800d108 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	7c12      	ldrb	r2, [r2, #16]
 800d0fc:	f107 0108 	add.w	r1, r7, #8
 800d100:	4610      	mov	r0, r2
 800d102:	4798      	blx	r3
 800d104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d106:	e091      	b.n	800d22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fab2 	bl	800d674 <USBD_CtlError>
            err++;
 800d110:	7afb      	ldrb	r3, [r7, #11]
 800d112:	3301      	adds	r3, #1
 800d114:	72fb      	strb	r3, [r7, #11]
          break;
 800d116:	e089      	b.n	800d22c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d00b      	beq.n	800d13c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	7c12      	ldrb	r2, [r2, #16]
 800d130:	f107 0108 	add.w	r1, r7, #8
 800d134:	4610      	mov	r0, r2
 800d136:	4798      	blx	r3
 800d138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d13a:	e077      	b.n	800d22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d13c:	6839      	ldr	r1, [r7, #0]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 fa98 	bl	800d674 <USBD_CtlError>
            err++;
 800d144:	7afb      	ldrb	r3, [r7, #11]
 800d146:	3301      	adds	r3, #1
 800d148:	72fb      	strb	r3, [r7, #11]
          break;
 800d14a:	e06f      	b.n	800d22c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d00b      	beq.n	800d170 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	7c12      	ldrb	r2, [r2, #16]
 800d164:	f107 0108 	add.w	r1, r7, #8
 800d168:	4610      	mov	r0, r2
 800d16a:	4798      	blx	r3
 800d16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d16e:	e05d      	b.n	800d22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d170:	6839      	ldr	r1, [r7, #0]
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fa7e 	bl	800d674 <USBD_CtlError>
            err++;
 800d178:	7afb      	ldrb	r3, [r7, #11]
 800d17a:	3301      	adds	r3, #1
 800d17c:	72fb      	strb	r3, [r7, #11]
          break;
 800d17e:	e055      	b.n	800d22c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d186:	691b      	ldr	r3, [r3, #16]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00b      	beq.n	800d1a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	7c12      	ldrb	r2, [r2, #16]
 800d198:	f107 0108 	add.w	r1, r7, #8
 800d19c:	4610      	mov	r0, r2
 800d19e:	4798      	blx	r3
 800d1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1a2:	e043      	b.n	800d22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d1a4:	6839      	ldr	r1, [r7, #0]
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fa64 	bl	800d674 <USBD_CtlError>
            err++;
 800d1ac:	7afb      	ldrb	r3, [r7, #11]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1b2:	e03b      	b.n	800d22c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00b      	beq.n	800d1d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	7c12      	ldrb	r2, [r2, #16]
 800d1cc:	f107 0108 	add.w	r1, r7, #8
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	4798      	blx	r3
 800d1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1d6:	e029      	b.n	800d22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d1d8:	6839      	ldr	r1, [r7, #0]
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fa4a 	bl	800d674 <USBD_CtlError>
            err++;
 800d1e0:	7afb      	ldrb	r3, [r7, #11]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800d1e6:	e021      	b.n	800d22c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1ee:	699b      	ldr	r3, [r3, #24]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00b      	beq.n	800d20c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	7c12      	ldrb	r2, [r2, #16]
 800d200:	f107 0108 	add.w	r1, r7, #8
 800d204:	4610      	mov	r0, r2
 800d206:	4798      	blx	r3
 800d208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d20a:	e00f      	b.n	800d22c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fa30 	bl	800d674 <USBD_CtlError>
            err++;
 800d214:	7afb      	ldrb	r3, [r7, #11]
 800d216:	3301      	adds	r3, #1
 800d218:	72fb      	strb	r3, [r7, #11]
          break;
 800d21a:	e007      	b.n	800d22c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d21c:	6839      	ldr	r1, [r7, #0]
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fa28 	bl	800d674 <USBD_CtlError>
          err++;
 800d224:	7afb      	ldrb	r3, [r7, #11]
 800d226:	3301      	adds	r3, #1
 800d228:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d22a:	bf00      	nop
      }
      break;
 800d22c:	e037      	b.n	800d29e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	7c1b      	ldrb	r3, [r3, #16]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d109      	bne.n	800d24a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d23e:	f107 0208 	add.w	r2, r7, #8
 800d242:	4610      	mov	r0, r2
 800d244:	4798      	blx	r3
 800d246:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d248:	e029      	b.n	800d29e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d24a:	6839      	ldr	r1, [r7, #0]
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fa11 	bl	800d674 <USBD_CtlError>
        err++;
 800d252:	7afb      	ldrb	r3, [r7, #11]
 800d254:	3301      	adds	r3, #1
 800d256:	72fb      	strb	r3, [r7, #11]
      break;
 800d258:	e021      	b.n	800d29e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	7c1b      	ldrb	r3, [r3, #16]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10d      	bne.n	800d27e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d26a:	f107 0208 	add.w	r2, r7, #8
 800d26e:	4610      	mov	r0, r2
 800d270:	4798      	blx	r3
 800d272:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	3301      	adds	r3, #1
 800d278:	2207      	movs	r2, #7
 800d27a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d27c:	e00f      	b.n	800d29e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 f9f7 	bl	800d674 <USBD_CtlError>
        err++;
 800d286:	7afb      	ldrb	r3, [r7, #11]
 800d288:	3301      	adds	r3, #1
 800d28a:	72fb      	strb	r3, [r7, #11]
      break;
 800d28c:	e007      	b.n	800d29e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d28e:	6839      	ldr	r1, [r7, #0]
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 f9ef 	bl	800d674 <USBD_CtlError>
      err++;
 800d296:	7afb      	ldrb	r3, [r7, #11]
 800d298:	3301      	adds	r3, #1
 800d29a:	72fb      	strb	r3, [r7, #11]
      break;
 800d29c:	bf00      	nop
  }

  if (err != 0U)
 800d29e:	7afb      	ldrb	r3, [r7, #11]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d11e      	bne.n	800d2e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	88db      	ldrh	r3, [r3, #6]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d016      	beq.n	800d2da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d2ac:	893b      	ldrh	r3, [r7, #8]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00e      	beq.n	800d2d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	88da      	ldrh	r2, [r3, #6]
 800d2b6:	893b      	ldrh	r3, [r7, #8]
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	bf28      	it	cs
 800d2bc:	4613      	movcs	r3, r2
 800d2be:	b29b      	uxth	r3, r3
 800d2c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d2c2:	893b      	ldrh	r3, [r7, #8]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	68f9      	ldr	r1, [r7, #12]
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 fa44 	bl	800d756 <USBD_CtlSendData>
 800d2ce:	e009      	b.n	800d2e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 f9ce 	bl	800d674 <USBD_CtlError>
 800d2d8:	e004      	b.n	800d2e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 fa95 	bl	800d80a <USBD_CtlSendStatus>
 800d2e0:	e000      	b.n	800d2e4 <USBD_GetDescriptor+0x320>
    return;
 800d2e2:	bf00      	nop
  }
}
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop

0800d2ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	889b      	ldrh	r3, [r3, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d131      	bne.n	800d362 <USBD_SetAddress+0x76>
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	88db      	ldrh	r3, [r3, #6]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d12d      	bne.n	800d362 <USBD_SetAddress+0x76>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	885b      	ldrh	r3, [r3, #2]
 800d30a:	2b7f      	cmp	r3, #127	; 0x7f
 800d30c:	d829      	bhi.n	800d362 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	885b      	ldrh	r3, [r3, #2]
 800d312:	b2db      	uxtb	r3, r3
 800d314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d318:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d320:	b2db      	uxtb	r3, r3
 800d322:	2b03      	cmp	r3, #3
 800d324:	d104      	bne.n	800d330 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d326:	6839      	ldr	r1, [r7, #0]
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 f9a3 	bl	800d674 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d32e:	e01d      	b.n	800d36c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7bfa      	ldrb	r2, [r7, #15]
 800d334:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d338:	7bfb      	ldrb	r3, [r7, #15]
 800d33a:	4619      	mov	r1, r3
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f003 ff8f 	bl	8011260 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fa61 	bl	800d80a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d348:	7bfb      	ldrb	r3, [r7, #15]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d004      	beq.n	800d358 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2202      	movs	r2, #2
 800d352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d356:	e009      	b.n	800d36c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d360:	e004      	b.n	800d36c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d362:	6839      	ldr	r1, [r7, #0]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 f985 	bl	800d674 <USBD_CtlError>
  }
}
 800d36a:	bf00      	nop
 800d36c:	bf00      	nop
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	885b      	ldrh	r3, [r3, #2]
 800d386:	b2da      	uxtb	r2, r3
 800d388:	4b4c      	ldr	r3, [pc, #304]	; (800d4bc <USBD_SetConfig+0x148>)
 800d38a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d38c:	4b4b      	ldr	r3, [pc, #300]	; (800d4bc <USBD_SetConfig+0x148>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d905      	bls.n	800d3a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 f96c 	bl	800d674 <USBD_CtlError>
    return USBD_FAIL;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e088      	b.n	800d4b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d002      	beq.n	800d3b2 <USBD_SetConfig+0x3e>
 800d3ac:	2b03      	cmp	r3, #3
 800d3ae:	d025      	beq.n	800d3fc <USBD_SetConfig+0x88>
 800d3b0:	e071      	b.n	800d496 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d3b2:	4b42      	ldr	r3, [pc, #264]	; (800d4bc <USBD_SetConfig+0x148>)
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d01c      	beq.n	800d3f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d3ba:	4b40      	ldr	r3, [pc, #256]	; (800d4bc <USBD_SetConfig+0x148>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3c4:	4b3d      	ldr	r3, [pc, #244]	; (800d4bc <USBD_SetConfig+0x148>)
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f7ff f91e 	bl	800c60c <USBD_SetClassConfig>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d3d4:	7bfb      	ldrb	r3, [r7, #15]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d004      	beq.n	800d3e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d3da:	6839      	ldr	r1, [r7, #0]
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 f949 	bl	800d674 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d3e2:	e065      	b.n	800d4b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 fa10 	bl	800d80a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2203      	movs	r2, #3
 800d3ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3f2:	e05d      	b.n	800d4b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 fa08 	bl	800d80a <USBD_CtlSendStatus>
      break;
 800d3fa:	e059      	b.n	800d4b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d3fc:	4b2f      	ldr	r3, [pc, #188]	; (800d4bc <USBD_SetConfig+0x148>)
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d112      	bne.n	800d42a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2202      	movs	r2, #2
 800d408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d40c:	4b2b      	ldr	r3, [pc, #172]	; (800d4bc <USBD_SetConfig+0x148>)
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d416:	4b29      	ldr	r3, [pc, #164]	; (800d4bc <USBD_SetConfig+0x148>)
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	4619      	mov	r1, r3
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f7ff f911 	bl	800c644 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 f9f1 	bl	800d80a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d428:	e042      	b.n	800d4b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d42a:	4b24      	ldr	r3, [pc, #144]	; (800d4bc <USBD_SetConfig+0x148>)
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	461a      	mov	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	429a      	cmp	r2, r3
 800d436:	d02a      	beq.n	800d48e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	4619      	mov	r1, r3
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f7ff f8ff 	bl	800c644 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d446:	4b1d      	ldr	r3, [pc, #116]	; (800d4bc <USBD_SetConfig+0x148>)
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d450:	4b1a      	ldr	r3, [pc, #104]	; (800d4bc <USBD_SetConfig+0x148>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	4619      	mov	r1, r3
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f7ff f8d8 	bl	800c60c <USBD_SetClassConfig>
 800d45c:	4603      	mov	r3, r0
 800d45e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d460:	7bfb      	ldrb	r3, [r7, #15]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00f      	beq.n	800d486 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d466:	6839      	ldr	r1, [r7, #0]
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 f903 	bl	800d674 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	b2db      	uxtb	r3, r3
 800d474:	4619      	mov	r1, r3
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7ff f8e4 	bl	800c644 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2202      	movs	r2, #2
 800d480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d484:	e014      	b.n	800d4b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 f9bf 	bl	800d80a <USBD_CtlSendStatus>
      break;
 800d48c:	e010      	b.n	800d4b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f9bb 	bl	800d80a <USBD_CtlSendStatus>
      break;
 800d494:	e00c      	b.n	800d4b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d496:	6839      	ldr	r1, [r7, #0]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 f8eb 	bl	800d674 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d49e:	4b07      	ldr	r3, [pc, #28]	; (800d4bc <USBD_SetConfig+0x148>)
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff f8cd 	bl	800c644 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d4aa:	2303      	movs	r3, #3
 800d4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800d4ae:	bf00      	nop
  }

  return ret;
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	200001e0 	.word	0x200001e0

0800d4c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	88db      	ldrh	r3, [r3, #6]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d004      	beq.n	800d4dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 f8cd 	bl	800d674 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d4da:	e023      	b.n	800d524 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	dc02      	bgt.n	800d4ee <USBD_GetConfig+0x2e>
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	dc03      	bgt.n	800d4f4 <USBD_GetConfig+0x34>
 800d4ec:	e015      	b.n	800d51a <USBD_GetConfig+0x5a>
 800d4ee:	2b03      	cmp	r3, #3
 800d4f0:	d00b      	beq.n	800d50a <USBD_GetConfig+0x4a>
 800d4f2:	e012      	b.n	800d51a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	2201      	movs	r2, #1
 800d500:	4619      	mov	r1, r3
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 f927 	bl	800d756 <USBD_CtlSendData>
        break;
 800d508:	e00c      	b.n	800d524 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	3304      	adds	r3, #4
 800d50e:	2201      	movs	r2, #1
 800d510:	4619      	mov	r1, r3
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 f91f 	bl	800d756 <USBD_CtlSendData>
        break;
 800d518:	e004      	b.n	800d524 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d51a:	6839      	ldr	r1, [r7, #0]
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 f8a9 	bl	800d674 <USBD_CtlError>
        break;
 800d522:	bf00      	nop
}
 800d524:	bf00      	nop
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	3b01      	subs	r3, #1
 800d540:	2b02      	cmp	r3, #2
 800d542:	d81e      	bhi.n	800d582 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	88db      	ldrh	r3, [r3, #6]
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d004      	beq.n	800d556 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f890 	bl	800d674 <USBD_CtlError>
        break;
 800d554:	e01a      	b.n	800d58c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d562:	2b00      	cmp	r3, #0
 800d564:	d005      	beq.n	800d572 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	f043 0202 	orr.w	r2, r3, #2
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	330c      	adds	r3, #12
 800d576:	2202      	movs	r2, #2
 800d578:	4619      	mov	r1, r3
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 f8eb 	bl	800d756 <USBD_CtlSendData>
      break;
 800d580:	e004      	b.n	800d58c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f875 	bl	800d674 <USBD_CtlError>
      break;
 800d58a:	bf00      	nop
  }
}
 800d58c:	bf00      	nop
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	885b      	ldrh	r3, [r3, #2]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d106      	bne.n	800d5b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f92b 	bl	800d80a <USBD_CtlSendStatus>
  }
}
 800d5b4:	bf00      	nop
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d80b      	bhi.n	800d5ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	885b      	ldrh	r3, [r3, #2]
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d10c      	bne.n	800d5f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 f910 	bl	800d80a <USBD_CtlSendStatus>
      }
      break;
 800d5ea:	e004      	b.n	800d5f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f840 	bl	800d674 <USBD_CtlError>
      break;
 800d5f4:	e000      	b.n	800d5f8 <USBD_ClrFeature+0x3c>
      break;
 800d5f6:	bf00      	nop
  }
}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	781a      	ldrb	r2, [r3, #0]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	3301      	adds	r3, #1
 800d61a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	781a      	ldrb	r2, [r3, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	3301      	adds	r3, #1
 800d628:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d62a:	68f8      	ldr	r0, [r7, #12]
 800d62c:	f7ff fa91 	bl	800cb52 <SWAPBYTE>
 800d630:	4603      	mov	r3, r0
 800d632:	461a      	mov	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	3301      	adds	r3, #1
 800d63c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	3301      	adds	r3, #1
 800d642:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f7ff fa84 	bl	800cb52 <SWAPBYTE>
 800d64a:	4603      	mov	r3, r0
 800d64c:	461a      	mov	r2, r3
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	3301      	adds	r3, #1
 800d656:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	3301      	adds	r3, #1
 800d65c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f7ff fa77 	bl	800cb52 <SWAPBYTE>
 800d664:	4603      	mov	r3, r0
 800d666:	461a      	mov	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	80da      	strh	r2, [r3, #6]
}
 800d66c:	bf00      	nop
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d67e:	2180      	movs	r1, #128	; 0x80
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f003 fd55 	bl	8011130 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d686:	2100      	movs	r1, #0
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f003 fd51 	bl	8011130 <USBD_LL_StallEP>
}
 800d68e:	bf00      	nop
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b086      	sub	sp, #24
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	60f8      	str	r0, [r7, #12]
 800d69e:	60b9      	str	r1, [r7, #8]
 800d6a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d036      	beq.n	800d71a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d6b0:	6938      	ldr	r0, [r7, #16]
 800d6b2:	f000 f836 	bl	800d722 <USBD_GetLen>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	005b      	lsls	r3, r3, #1
 800d6be:	b29a      	uxth	r2, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d6c4:	7dfb      	ldrb	r3, [r7, #23]
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	7812      	ldrb	r2, [r2, #0]
 800d6ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d6d6:	7dfb      	ldrb	r3, [r7, #23]
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	4413      	add	r3, r2
 800d6dc:	2203      	movs	r2, #3
 800d6de:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6e0:	7dfb      	ldrb	r3, [r7, #23]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d6e6:	e013      	b.n	800d710 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d6e8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	693a      	ldr	r2, [r7, #16]
 800d6f0:	7812      	ldrb	r2, [r2, #0]
 800d6f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	613b      	str	r3, [r7, #16]
    idx++;
 800d6fa:	7dfb      	ldrb	r3, [r7, #23]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d700:	7dfb      	ldrb	r3, [r7, #23]
 800d702:	68ba      	ldr	r2, [r7, #8]
 800d704:	4413      	add	r3, r2
 800d706:	2200      	movs	r2, #0
 800d708:	701a      	strb	r2, [r3, #0]
    idx++;
 800d70a:	7dfb      	ldrb	r3, [r7, #23]
 800d70c:	3301      	adds	r3, #1
 800d70e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1e7      	bne.n	800d6e8 <USBD_GetString+0x52>
 800d718:	e000      	b.n	800d71c <USBD_GetString+0x86>
    return;
 800d71a:	bf00      	nop
  }
}
 800d71c:	3718      	adds	r7, #24
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d722:	b480      	push	{r7}
 800d724:	b085      	sub	sp, #20
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d732:	e005      	b.n	800d740 <USBD_GetLen+0x1e>
  {
    len++;
 800d734:	7bfb      	ldrb	r3, [r7, #15]
 800d736:	3301      	adds	r3, #1
 800d738:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	3301      	adds	r3, #1
 800d73e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d1f5      	bne.n	800d734 <USBD_GetLen+0x12>
  }

  return len;
 800d748:	7bfb      	ldrb	r3, [r7, #15]
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b084      	sub	sp, #16
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	60f8      	str	r0, [r7, #12]
 800d75e:	60b9      	str	r1, [r7, #8]
 800d760:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2202      	movs	r2, #2
 800d766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	2100      	movs	r1, #0
 800d77c:	68f8      	ldr	r0, [r7, #12]
 800d77e:	f003 fda5 	bl	80112cc <USBD_LL_Transmit>

  return USBD_OK;
 800d782:	2300      	movs	r3, #0
}
 800d784:	4618      	mov	r0, r3
 800d786:	3710      	adds	r7, #16
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	2100      	movs	r1, #0
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f003 fd94 	bl	80112cc <USBD_LL_Transmit>

  return USBD_OK;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d7ae:	b580      	push	{r7, lr}
 800d7b0:	b084      	sub	sp, #16
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	60b9      	str	r1, [r7, #8]
 800d7b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2203      	movs	r2, #3
 800d7be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	68ba      	ldr	r2, [r7, #8]
 800d7d6:	2100      	movs	r1, #0
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f003 fdaf 	bl	801133c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7de:	2300      	movs	r3, #0
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68ba      	ldr	r2, [r7, #8]
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f003 fd9e 	bl	801133c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b082      	sub	sp, #8
 800d80e:	af00      	add	r7, sp, #0
 800d810:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2204      	movs	r2, #4
 800d816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d81a:	2300      	movs	r3, #0
 800d81c:	2200      	movs	r2, #0
 800d81e:	2100      	movs	r1, #0
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f003 fd53 	bl	80112cc <USBD_LL_Transmit>

  return USBD_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3708      	adds	r7, #8
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2205      	movs	r2, #5
 800d83c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d840:	2300      	movs	r3, #0
 800d842:	2200      	movs	r2, #0
 800d844:	2100      	movs	r1, #0
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f003 fd78 	bl	801133c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d84c:	2300      	movs	r3, #0
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
	...

0800d858 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d858:	b480      	push	{r7}
 800d85a:	b087      	sub	sp, #28
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	4613      	mov	r3, r2
 800d864:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d866:	2301      	movs	r3, #1
 800d868:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d86e:	4b1f      	ldr	r3, [pc, #124]	; (800d8ec <FATFS_LinkDriverEx+0x94>)
 800d870:	7a5b      	ldrb	r3, [r3, #9]
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b00      	cmp	r3, #0
 800d876:	d131      	bne.n	800d8dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d878:	4b1c      	ldr	r3, [pc, #112]	; (800d8ec <FATFS_LinkDriverEx+0x94>)
 800d87a:	7a5b      	ldrb	r3, [r3, #9]
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	461a      	mov	r2, r3
 800d880:	4b1a      	ldr	r3, [pc, #104]	; (800d8ec <FATFS_LinkDriverEx+0x94>)
 800d882:	2100      	movs	r1, #0
 800d884:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d886:	4b19      	ldr	r3, [pc, #100]	; (800d8ec <FATFS_LinkDriverEx+0x94>)
 800d888:	7a5b      	ldrb	r3, [r3, #9]
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	4a17      	ldr	r2, [pc, #92]	; (800d8ec <FATFS_LinkDriverEx+0x94>)
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4413      	add	r3, r2
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d896:	4b15      	ldr	r3, [pc, #84]	; (800d8ec <FATFS_LinkDriverEx+0x94>)
 800d898:	7a5b      	ldrb	r3, [r3, #9]
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	461a      	mov	r2, r3
 800d89e:	4b13      	ldr	r3, [pc, #76]	; (800d8ec <FATFS_LinkDriverEx+0x94>)
 800d8a0:	4413      	add	r3, r2
 800d8a2:	79fa      	ldrb	r2, [r7, #7]
 800d8a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d8a6:	4b11      	ldr	r3, [pc, #68]	; (800d8ec <FATFS_LinkDriverEx+0x94>)
 800d8a8:	7a5b      	ldrb	r3, [r3, #9]
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	1c5a      	adds	r2, r3, #1
 800d8ae:	b2d1      	uxtb	r1, r2
 800d8b0:	4a0e      	ldr	r2, [pc, #56]	; (800d8ec <FATFS_LinkDriverEx+0x94>)
 800d8b2:	7251      	strb	r1, [r2, #9]
 800d8b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d8b6:	7dbb      	ldrb	r3, [r7, #22]
 800d8b8:	3330      	adds	r3, #48	; 0x30
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	223a      	movs	r2, #58	; 0x3a
 800d8c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	3302      	adds	r3, #2
 800d8cc:	222f      	movs	r2, #47	; 0x2f
 800d8ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	3303      	adds	r3, #3
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d8dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	371c      	adds	r7, #28
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	200001e4 	.word	0x200001e4

0800d8f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	6839      	ldr	r1, [r7, #0]
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7ff ffaa 	bl	800d858 <FATFS_LinkDriverEx>
 800d904:	4603      	mov	r3, r0
}
 800d906:	4618      	mov	r0, r3
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
	...

0800d910 <__NVIC_SetPriority>:
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	4603      	mov	r3, r0
 800d918:	6039      	str	r1, [r7, #0]
 800d91a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d91c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d920:	2b00      	cmp	r3, #0
 800d922:	db0a      	blt.n	800d93a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	b2da      	uxtb	r2, r3
 800d928:	490c      	ldr	r1, [pc, #48]	; (800d95c <__NVIC_SetPriority+0x4c>)
 800d92a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d92e:	0112      	lsls	r2, r2, #4
 800d930:	b2d2      	uxtb	r2, r2
 800d932:	440b      	add	r3, r1
 800d934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d938:	e00a      	b.n	800d950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	4908      	ldr	r1, [pc, #32]	; (800d960 <__NVIC_SetPriority+0x50>)
 800d940:	79fb      	ldrb	r3, [r7, #7]
 800d942:	f003 030f 	and.w	r3, r3, #15
 800d946:	3b04      	subs	r3, #4
 800d948:	0112      	lsls	r2, r2, #4
 800d94a:	b2d2      	uxtb	r2, r2
 800d94c:	440b      	add	r3, r1
 800d94e:	761a      	strb	r2, [r3, #24]
}
 800d950:	bf00      	nop
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	e000e100 	.word	0xe000e100
 800d960:	e000ed00 	.word	0xe000ed00

0800d964 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d964:	b580      	push	{r7, lr}
 800d966:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d968:	4b05      	ldr	r3, [pc, #20]	; (800d980 <SysTick_Handler+0x1c>)
 800d96a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d96c:	f001 ff32 	bl	800f7d4 <xTaskGetSchedulerState>
 800d970:	4603      	mov	r3, r0
 800d972:	2b01      	cmp	r3, #1
 800d974:	d001      	beq.n	800d97a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d976:	f002 fd17 	bl	80103a8 <xPortSysTickHandler>
  }
}
 800d97a:	bf00      	nop
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	e000e010 	.word	0xe000e010

0800d984 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d984:	b580      	push	{r7, lr}
 800d986:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d988:	2100      	movs	r1, #0
 800d98a:	f06f 0004 	mvn.w	r0, #4
 800d98e:	f7ff ffbf 	bl	800d910 <__NVIC_SetPriority>
#endif
}
 800d992:	bf00      	nop
 800d994:	bd80      	pop	{r7, pc}
	...

0800d998 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d99e:	f3ef 8305 	mrs	r3, IPSR
 800d9a2:	603b      	str	r3, [r7, #0]
  return(result);
 800d9a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d003      	beq.n	800d9b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d9aa:	f06f 0305 	mvn.w	r3, #5
 800d9ae:	607b      	str	r3, [r7, #4]
 800d9b0:	e00c      	b.n	800d9cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d9b2:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <osKernelInitialize+0x44>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d105      	bne.n	800d9c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d9ba:	4b08      	ldr	r3, [pc, #32]	; (800d9dc <osKernelInitialize+0x44>)
 800d9bc:	2201      	movs	r2, #1
 800d9be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	607b      	str	r3, [r7, #4]
 800d9c4:	e002      	b.n	800d9cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d9cc:	687b      	ldr	r3, [r7, #4]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	200001f0 	.word	0x200001f0

0800d9e0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800d9e6:	f001 fef5 	bl	800f7d4 <xTaskGetSchedulerState>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d004      	beq.n	800d9fa <osKernelGetState+0x1a>
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	d105      	bne.n	800da00 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	607b      	str	r3, [r7, #4]
      break;
 800d9f8:	e00c      	b.n	800da14 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	607b      	str	r3, [r7, #4]
      break;
 800d9fe:	e009      	b.n	800da14 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800da00:	4b07      	ldr	r3, [pc, #28]	; (800da20 <osKernelGetState+0x40>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2b01      	cmp	r3, #1
 800da06:	d102      	bne.n	800da0e <osKernelGetState+0x2e>
        state = osKernelReady;
 800da08:	2301      	movs	r3, #1
 800da0a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800da0c:	e001      	b.n	800da12 <osKernelGetState+0x32>
        state = osKernelInactive;
 800da0e:	2300      	movs	r3, #0
 800da10:	607b      	str	r3, [r7, #4]
      break;
 800da12:	bf00      	nop
  }

  return (state);
 800da14:	687b      	ldr	r3, [r7, #4]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3708      	adds	r7, #8
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	200001f0 	.word	0x200001f0

0800da24 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da2a:	f3ef 8305 	mrs	r3, IPSR
 800da2e:	603b      	str	r3, [r7, #0]
  return(result);
 800da30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da32:	2b00      	cmp	r3, #0
 800da34:	d003      	beq.n	800da3e <osKernelStart+0x1a>
    stat = osErrorISR;
 800da36:	f06f 0305 	mvn.w	r3, #5
 800da3a:	607b      	str	r3, [r7, #4]
 800da3c:	e010      	b.n	800da60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da3e:	4b0b      	ldr	r3, [pc, #44]	; (800da6c <osKernelStart+0x48>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d109      	bne.n	800da5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800da46:	f7ff ff9d 	bl	800d984 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800da4a:	4b08      	ldr	r3, [pc, #32]	; (800da6c <osKernelStart+0x48>)
 800da4c:	2202      	movs	r2, #2
 800da4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800da50:	f001 fa66 	bl	800ef20 <vTaskStartScheduler>
      stat = osOK;
 800da54:	2300      	movs	r3, #0
 800da56:	607b      	str	r3, [r7, #4]
 800da58:	e002      	b.n	800da60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800da5a:	f04f 33ff 	mov.w	r3, #4294967295
 800da5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da60:	687b      	ldr	r3, [r7, #4]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	200001f0 	.word	0x200001f0

0800da70 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da76:	f3ef 8305 	mrs	r3, IPSR
 800da7a:	603b      	str	r3, [r7, #0]
  return(result);
 800da7c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d003      	beq.n	800da8a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800da82:	f001 fb6f 	bl	800f164 <xTaskGetTickCountFromISR>
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	e002      	b.n	800da90 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800da8a:	f001 fb5b 	bl	800f144 <xTaskGetTickCount>
 800da8e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800da90:	687b      	ldr	r3, [r7, #4]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b08e      	sub	sp, #56	; 0x38
 800da9e:	af04      	add	r7, sp, #16
 800daa0:	60f8      	str	r0, [r7, #12]
 800daa2:	60b9      	str	r1, [r7, #8]
 800daa4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800daa6:	2300      	movs	r3, #0
 800daa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daaa:	f3ef 8305 	mrs	r3, IPSR
 800daae:	617b      	str	r3, [r7, #20]
  return(result);
 800dab0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d17e      	bne.n	800dbb4 <osThreadNew+0x11a>
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d07b      	beq.n	800dbb4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dabc:	2380      	movs	r3, #128	; 0x80
 800dabe:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dac0:	2318      	movs	r3, #24
 800dac2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dac4:	2300      	movs	r3, #0
 800dac6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dac8:	f04f 33ff 	mov.w	r3, #4294967295
 800dacc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d045      	beq.n	800db60 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d002      	beq.n	800dae2 <osThreadNew+0x48>
        name = attr->name;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	699b      	ldr	r3, [r3, #24]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d002      	beq.n	800daf0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	699b      	ldr	r3, [r3, #24]
 800daee:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d008      	beq.n	800db08 <osThreadNew+0x6e>
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	2b38      	cmp	r3, #56	; 0x38
 800dafa:	d805      	bhi.n	800db08 <osThreadNew+0x6e>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	f003 0301 	and.w	r3, r3, #1
 800db04:	2b00      	cmp	r3, #0
 800db06:	d001      	beq.n	800db0c <osThreadNew+0x72>
        return (NULL);
 800db08:	2300      	movs	r3, #0
 800db0a:	e054      	b.n	800dbb6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	695b      	ldr	r3, [r3, #20]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	695b      	ldr	r3, [r3, #20]
 800db18:	089b      	lsrs	r3, r3, #2
 800db1a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	689b      	ldr	r3, [r3, #8]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d00e      	beq.n	800db42 <osThreadNew+0xa8>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	2b5b      	cmp	r3, #91	; 0x5b
 800db2a:	d90a      	bls.n	800db42 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db30:	2b00      	cmp	r3, #0
 800db32:	d006      	beq.n	800db42 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	695b      	ldr	r3, [r3, #20]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d002      	beq.n	800db42 <osThreadNew+0xa8>
        mem = 1;
 800db3c:	2301      	movs	r3, #1
 800db3e:	61bb      	str	r3, [r7, #24]
 800db40:	e010      	b.n	800db64 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	689b      	ldr	r3, [r3, #8]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10c      	bne.n	800db64 <osThreadNew+0xca>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d108      	bne.n	800db64 <osThreadNew+0xca>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d104      	bne.n	800db64 <osThreadNew+0xca>
          mem = 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	61bb      	str	r3, [r7, #24]
 800db5e:	e001      	b.n	800db64 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800db60:	2300      	movs	r3, #0
 800db62:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d110      	bne.n	800db8c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db72:	9202      	str	r2, [sp, #8]
 800db74:	9301      	str	r3, [sp, #4]
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	6a3a      	ldr	r2, [r7, #32]
 800db7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f000 fff7 	bl	800eb74 <xTaskCreateStatic>
 800db86:	4603      	mov	r3, r0
 800db88:	613b      	str	r3, [r7, #16]
 800db8a:	e013      	b.n	800dbb4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d110      	bne.n	800dbb4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	b29a      	uxth	r2, r3
 800db96:	f107 0310 	add.w	r3, r7, #16
 800db9a:	9301      	str	r3, [sp, #4]
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f001 f842 	bl	800ec2e <xTaskCreate>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d001      	beq.n	800dbb4 <osThreadNew+0x11a>
            hTask = NULL;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dbb4:	693b      	ldr	r3, [r7, #16]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3728      	adds	r7, #40	; 0x28
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b084      	sub	sp, #16
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbc6:	f3ef 8305 	mrs	r3, IPSR
 800dbca:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbcc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d003      	beq.n	800dbda <osDelay+0x1c>
    stat = osErrorISR;
 800dbd2:	f06f 0305 	mvn.w	r3, #5
 800dbd6:	60fb      	str	r3, [r7, #12]
 800dbd8:	e007      	b.n	800dbea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <osDelay+0x2c>
      vTaskDelay(ticks);
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f001 f967 	bl	800eeb8 <vTaskDelay>
    }
  }

  return (stat);
 800dbea:	68fb      	ldr	r3, [r7, #12]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b08a      	sub	sp, #40	; 0x28
 800dbf8:	af02      	add	r7, sp, #8
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dc00:	2300      	movs	r3, #0
 800dc02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc04:	f3ef 8305 	mrs	r3, IPSR
 800dc08:	613b      	str	r3, [r7, #16]
  return(result);
 800dc0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d15f      	bne.n	800dcd0 <osMessageQueueNew+0xdc>
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d05c      	beq.n	800dcd0 <osMessageQueueNew+0xdc>
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d059      	beq.n	800dcd0 <osMessageQueueNew+0xdc>
    mem = -1;
 800dc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d029      	beq.n	800dc7c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d012      	beq.n	800dc56 <osMessageQueueNew+0x62>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	2b4f      	cmp	r3, #79	; 0x4f
 800dc36:	d90e      	bls.n	800dc56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00a      	beq.n	800dc56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	695a      	ldr	r2, [r3, #20]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	68b9      	ldr	r1, [r7, #8]
 800dc48:	fb01 f303 	mul.w	r3, r1, r3
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d302      	bcc.n	800dc56 <osMessageQueueNew+0x62>
        mem = 1;
 800dc50:	2301      	movs	r3, #1
 800dc52:	61bb      	str	r3, [r7, #24]
 800dc54:	e014      	b.n	800dc80 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	689b      	ldr	r3, [r3, #8]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d110      	bne.n	800dc80 <osMessageQueueNew+0x8c>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10c      	bne.n	800dc80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d108      	bne.n	800dc80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d104      	bne.n	800dc80 <osMessageQueueNew+0x8c>
          mem = 0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	61bb      	str	r3, [r7, #24]
 800dc7a:	e001      	b.n	800dc80 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d10b      	bne.n	800dc9e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	691a      	ldr	r2, [r3, #16]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	2100      	movs	r1, #0
 800dc90:	9100      	str	r1, [sp, #0]
 800dc92:	68b9      	ldr	r1, [r7, #8]
 800dc94:	68f8      	ldr	r0, [r7, #12]
 800dc96:	f000 fa2f 	bl	800e0f8 <xQueueGenericCreateStatic>
 800dc9a:	61f8      	str	r0, [r7, #28]
 800dc9c:	e008      	b.n	800dcb0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d105      	bne.n	800dcb0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dca4:	2200      	movs	r2, #0
 800dca6:	68b9      	ldr	r1, [r7, #8]
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f000 fa9d 	bl	800e1e8 <xQueueGenericCreate>
 800dcae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00c      	beq.n	800dcd0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	617b      	str	r3, [r7, #20]
 800dcc2:	e001      	b.n	800dcc8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dcc8:	6979      	ldr	r1, [r7, #20]
 800dcca:	69f8      	ldr	r0, [r7, #28]
 800dccc:	f000 fef4 	bl	800eab8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dcd0:	69fb      	ldr	r3, [r7, #28]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3720      	adds	r7, #32
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
	...

0800dcdc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b088      	sub	sp, #32
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	603b      	str	r3, [r7, #0]
 800dce8:	4613      	mov	r3, r2
 800dcea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcf4:	f3ef 8305 	mrs	r3, IPSR
 800dcf8:	617b      	str	r3, [r7, #20]
  return(result);
 800dcfa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d028      	beq.n	800dd52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d005      	beq.n	800dd12 <osMessageQueuePut+0x36>
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <osMessageQueuePut+0x36>
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d003      	beq.n	800dd1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dd12:	f06f 0303 	mvn.w	r3, #3
 800dd16:	61fb      	str	r3, [r7, #28]
 800dd18:	e038      	b.n	800dd8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dd1e:	f107 0210 	add.w	r2, r7, #16
 800dd22:	2300      	movs	r3, #0
 800dd24:	68b9      	ldr	r1, [r7, #8]
 800dd26:	69b8      	ldr	r0, [r7, #24]
 800dd28:	f000 fbba 	bl	800e4a0 <xQueueGenericSendFromISR>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d003      	beq.n	800dd3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dd32:	f06f 0302 	mvn.w	r3, #2
 800dd36:	61fb      	str	r3, [r7, #28]
 800dd38:	e028      	b.n	800dd8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d025      	beq.n	800dd8c <osMessageQueuePut+0xb0>
 800dd40:	4b15      	ldr	r3, [pc, #84]	; (800dd98 <osMessageQueuePut+0xbc>)
 800dd42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd46:	601a      	str	r2, [r3, #0]
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	e01c      	b.n	800dd8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <osMessageQueuePut+0x82>
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d103      	bne.n	800dd66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dd5e:	f06f 0303 	mvn.w	r3, #3
 800dd62:	61fb      	str	r3, [r7, #28]
 800dd64:	e012      	b.n	800dd8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dd66:	2300      	movs	r3, #0
 800dd68:	683a      	ldr	r2, [r7, #0]
 800dd6a:	68b9      	ldr	r1, [r7, #8]
 800dd6c:	69b8      	ldr	r0, [r7, #24]
 800dd6e:	f000 fa99 	bl	800e2a4 <xQueueGenericSend>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d009      	beq.n	800dd8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dd7e:	f06f 0301 	mvn.w	r3, #1
 800dd82:	61fb      	str	r3, [r7, #28]
 800dd84:	e002      	b.n	800dd8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dd86:	f06f 0302 	mvn.w	r3, #2
 800dd8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd8c:	69fb      	ldr	r3, [r7, #28]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3720      	adds	r7, #32
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	e000ed04 	.word	0xe000ed04

0800dd9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b088      	sub	sp, #32
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
 800dda8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddb2:	f3ef 8305 	mrs	r3, IPSR
 800ddb6:	617b      	str	r3, [r7, #20]
  return(result);
 800ddb8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d028      	beq.n	800de10 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d005      	beq.n	800ddd0 <osMessageQueueGet+0x34>
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d002      	beq.n	800ddd0 <osMessageQueueGet+0x34>
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d003      	beq.n	800ddd8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ddd0:	f06f 0303 	mvn.w	r3, #3
 800ddd4:	61fb      	str	r3, [r7, #28]
 800ddd6:	e037      	b.n	800de48 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dddc:	f107 0310 	add.w	r3, r7, #16
 800dde0:	461a      	mov	r2, r3
 800dde2:	68b9      	ldr	r1, [r7, #8]
 800dde4:	69b8      	ldr	r0, [r7, #24]
 800dde6:	f000 fcd7 	bl	800e798 <xQueueReceiveFromISR>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d003      	beq.n	800ddf8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ddf0:	f06f 0302 	mvn.w	r3, #2
 800ddf4:	61fb      	str	r3, [r7, #28]
 800ddf6:	e027      	b.n	800de48 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d024      	beq.n	800de48 <osMessageQueueGet+0xac>
 800ddfe:	4b15      	ldr	r3, [pc, #84]	; (800de54 <osMessageQueueGet+0xb8>)
 800de00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de04:	601a      	str	r2, [r3, #0]
 800de06:	f3bf 8f4f 	dsb	sy
 800de0a:	f3bf 8f6f 	isb	sy
 800de0e:	e01b      	b.n	800de48 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <osMessageQueueGet+0x80>
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d103      	bne.n	800de24 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800de1c:	f06f 0303 	mvn.w	r3, #3
 800de20:	61fb      	str	r3, [r7, #28]
 800de22:	e011      	b.n	800de48 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	68b9      	ldr	r1, [r7, #8]
 800de28:	69b8      	ldr	r0, [r7, #24]
 800de2a:	f000 fbd5 	bl	800e5d8 <xQueueReceive>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b01      	cmp	r3, #1
 800de32:	d009      	beq.n	800de48 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d003      	beq.n	800de42 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800de3a:	f06f 0301 	mvn.w	r3, #1
 800de3e:	61fb      	str	r3, [r7, #28]
 800de40:	e002      	b.n	800de48 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800de42:	f06f 0302 	mvn.w	r3, #2
 800de46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800de48:	69fb      	ldr	r3, [r7, #28]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3720      	adds	r7, #32
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	e000ed04 	.word	0xe000ed04

0800de58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	4a07      	ldr	r2, [pc, #28]	; (800de84 <vApplicationGetIdleTaskMemory+0x2c>)
 800de68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	4a06      	ldr	r2, [pc, #24]	; (800de88 <vApplicationGetIdleTaskMemory+0x30>)
 800de6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2280      	movs	r2, #128	; 0x80
 800de74:	601a      	str	r2, [r3, #0]
}
 800de76:	bf00      	nop
 800de78:	3714      	adds	r7, #20
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop
 800de84:	200001f4 	.word	0x200001f4
 800de88:	20000250 	.word	0x20000250

0800de8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	4a07      	ldr	r2, [pc, #28]	; (800deb8 <vApplicationGetTimerTaskMemory+0x2c>)
 800de9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	4a06      	ldr	r2, [pc, #24]	; (800debc <vApplicationGetTimerTaskMemory+0x30>)
 800dea2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800deaa:	601a      	str	r2, [r3, #0]
}
 800deac:	bf00      	nop
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr
 800deb8:	20000450 	.word	0x20000450
 800debc:	200004ac 	.word	0x200004ac

0800dec0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f103 0208 	add.w	r2, r3, #8
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f04f 32ff 	mov.w	r2, #4294967295
 800ded8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f103 0208 	add.w	r2, r3, #8
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f103 0208 	add.w	r2, r3, #8
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800def4:	bf00      	nop
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800df0e:	bf00      	nop
 800df10:	370c      	adds	r7, #12
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr

0800df1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df1a:	b480      	push	{r7}
 800df1c:	b085      	sub	sp, #20
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	689a      	ldr	r2, [r3, #8]
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	689b      	ldr	r3, [r3, #8]
 800df3c:	683a      	ldr	r2, [r7, #0]
 800df3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	683a      	ldr	r2, [r7, #0]
 800df44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	1c5a      	adds	r2, r3, #1
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	601a      	str	r2, [r3, #0]
}
 800df56:	bf00      	nop
 800df58:	3714      	adds	r7, #20
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr

0800df62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df62:	b480      	push	{r7}
 800df64:	b085      	sub	sp, #20
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
 800df6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df78:	d103      	bne.n	800df82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	691b      	ldr	r3, [r3, #16]
 800df7e:	60fb      	str	r3, [r7, #12]
 800df80:	e00c      	b.n	800df9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	3308      	adds	r3, #8
 800df86:	60fb      	str	r3, [r7, #12]
 800df88:	e002      	b.n	800df90 <vListInsert+0x2e>
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	60fb      	str	r3, [r7, #12]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d2f6      	bcs.n	800df8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	685a      	ldr	r2, [r3, #4]
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	685b      	ldr	r3, [r3, #4]
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	1c5a      	adds	r2, r3, #1
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	601a      	str	r2, [r3, #0]
}
 800dfc8:	bf00      	nop
 800dfca:	3714      	adds	r7, #20
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr

0800dfd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	6892      	ldr	r2, [r2, #8]
 800dfea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	6852      	ldr	r2, [r2, #4]
 800dff4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d103      	bne.n	800e008 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	689a      	ldr	r2, [r3, #8]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	1e5a      	subs	r2, r3, #1
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3714      	adds	r7, #20
 800e020:	46bd      	mov	sp, r7
 800e022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e026:	4770      	bx	lr

0800e028 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d10a      	bne.n	800e052 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e040:	f383 8811 	msr	BASEPRI, r3
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e04e:	bf00      	nop
 800e050:	e7fe      	b.n	800e050 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e052:	f002 f917 	bl	8010284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e05e:	68f9      	ldr	r1, [r7, #12]
 800e060:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e062:	fb01 f303 	mul.w	r3, r1, r3
 800e066:	441a      	add	r2, r3
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2200      	movs	r2, #0
 800e070:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e082:	3b01      	subs	r3, #1
 800e084:	68f9      	ldr	r1, [r7, #12]
 800e086:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e088:	fb01 f303 	mul.w	r3, r1, r3
 800e08c:	441a      	add	r2, r3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	22ff      	movs	r2, #255	; 0xff
 800e096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	22ff      	movs	r2, #255	; 0xff
 800e09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d114      	bne.n	800e0d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	691b      	ldr	r3, [r3, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d01a      	beq.n	800e0e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	3310      	adds	r3, #16
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f001 f9cf 	bl	800f458 <xTaskRemoveFromEventList>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d012      	beq.n	800e0e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e0c0:	4b0c      	ldr	r3, [pc, #48]	; (800e0f4 <xQueueGenericReset+0xcc>)
 800e0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	e009      	b.n	800e0e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	3310      	adds	r3, #16
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7ff fef2 	bl	800dec0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	3324      	adds	r3, #36	; 0x24
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff feed 	bl	800dec0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e0e6:	f002 f8fd 	bl	80102e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e0ea:	2301      	movs	r3, #1
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3710      	adds	r7, #16
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	e000ed04 	.word	0xe000ed04

0800e0f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b08e      	sub	sp, #56	; 0x38
 800e0fc:	af02      	add	r7, sp, #8
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
 800e104:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10a      	bne.n	800e122 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e110:	f383 8811 	msr	BASEPRI, r3
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	f3bf 8f4f 	dsb	sy
 800e11c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e11e:	bf00      	nop
 800e120:	e7fe      	b.n	800e120 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10a      	bne.n	800e13e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12c:	f383 8811 	msr	BASEPRI, r3
 800e130:	f3bf 8f6f 	isb	sy
 800e134:	f3bf 8f4f 	dsb	sy
 800e138:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e13a:	bf00      	nop
 800e13c:	e7fe      	b.n	800e13c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <xQueueGenericCreateStatic+0x52>
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <xQueueGenericCreateStatic+0x56>
 800e14a:	2301      	movs	r3, #1
 800e14c:	e000      	b.n	800e150 <xQueueGenericCreateStatic+0x58>
 800e14e:	2300      	movs	r3, #0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10a      	bne.n	800e16a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e158:	f383 8811 	msr	BASEPRI, r3
 800e15c:	f3bf 8f6f 	isb	sy
 800e160:	f3bf 8f4f 	dsb	sy
 800e164:	623b      	str	r3, [r7, #32]
}
 800e166:	bf00      	nop
 800e168:	e7fe      	b.n	800e168 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d102      	bne.n	800e176 <xQueueGenericCreateStatic+0x7e>
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <xQueueGenericCreateStatic+0x82>
 800e176:	2301      	movs	r3, #1
 800e178:	e000      	b.n	800e17c <xQueueGenericCreateStatic+0x84>
 800e17a:	2300      	movs	r3, #0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10a      	bne.n	800e196 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	61fb      	str	r3, [r7, #28]
}
 800e192:	bf00      	nop
 800e194:	e7fe      	b.n	800e194 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e196:	2350      	movs	r3, #80	; 0x50
 800e198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	2b50      	cmp	r3, #80	; 0x50
 800e19e:	d00a      	beq.n	800e1b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	61bb      	str	r3, [r7, #24]
}
 800e1b2:	bf00      	nop
 800e1b4:	e7fe      	b.n	800e1b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e1b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00d      	beq.n	800e1de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	68b9      	ldr	r1, [r7, #8]
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	f000 f83f 	bl	800e25c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3730      	adds	r7, #48	; 0x30
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08a      	sub	sp, #40	; 0x28
 800e1ec:	af02      	add	r7, sp, #8
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10a      	bne.n	800e212 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e200:	f383 8811 	msr	BASEPRI, r3
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	613b      	str	r3, [r7, #16]
}
 800e20e:	bf00      	nop
 800e210:	e7fe      	b.n	800e210 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	68ba      	ldr	r2, [r7, #8]
 800e216:	fb02 f303 	mul.w	r3, r2, r3
 800e21a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	3350      	adds	r3, #80	; 0x50
 800e220:	4618      	mov	r0, r3
 800e222:	f002 f951 	bl	80104c8 <pvPortMalloc>
 800e226:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d011      	beq.n	800e252 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	3350      	adds	r3, #80	; 0x50
 800e236:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e240:	79fa      	ldrb	r2, [r7, #7]
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	4613      	mov	r3, r2
 800e248:	697a      	ldr	r2, [r7, #20]
 800e24a:	68b9      	ldr	r1, [r7, #8]
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f000 f805 	bl	800e25c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e252:	69bb      	ldr	r3, [r7, #24]
	}
 800e254:	4618      	mov	r0, r3
 800e256:	3720      	adds	r7, #32
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	60b9      	str	r1, [r7, #8]
 800e266:	607a      	str	r2, [r7, #4]
 800e268:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d103      	bne.n	800e278 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	69ba      	ldr	r2, [r7, #24]
 800e274:	601a      	str	r2, [r3, #0]
 800e276:	e002      	b.n	800e27e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	68fa      	ldr	r2, [r7, #12]
 800e282:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	68ba      	ldr	r2, [r7, #8]
 800e288:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e28a:	2101      	movs	r1, #1
 800e28c:	69b8      	ldr	r0, [r7, #24]
 800e28e:	f7ff fecb 	bl	800e028 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	78fa      	ldrb	r2, [r7, #3]
 800e296:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e29a:	bf00      	nop
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
	...

0800e2a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b08e      	sub	sp, #56	; 0x38
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	607a      	str	r2, [r7, #4]
 800e2b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d10a      	bne.n	800e2d6 <xQueueGenericSend+0x32>
	__asm volatile
 800e2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c4:	f383 8811 	msr	BASEPRI, r3
 800e2c8:	f3bf 8f6f 	isb	sy
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e2d2:	bf00      	nop
 800e2d4:	e7fe      	b.n	800e2d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d103      	bne.n	800e2e4 <xQueueGenericSend+0x40>
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d101      	bne.n	800e2e8 <xQueueGenericSend+0x44>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e000      	b.n	800e2ea <xQueueGenericSend+0x46>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10a      	bne.n	800e304 <xQueueGenericSend+0x60>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e300:	bf00      	nop
 800e302:	e7fe      	b.n	800e302 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	2b02      	cmp	r3, #2
 800e308:	d103      	bne.n	800e312 <xQueueGenericSend+0x6e>
 800e30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d101      	bne.n	800e316 <xQueueGenericSend+0x72>
 800e312:	2301      	movs	r3, #1
 800e314:	e000      	b.n	800e318 <xQueueGenericSend+0x74>
 800e316:	2300      	movs	r3, #0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d10a      	bne.n	800e332 <xQueueGenericSend+0x8e>
	__asm volatile
 800e31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e320:	f383 8811 	msr	BASEPRI, r3
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	f3bf 8f4f 	dsb	sy
 800e32c:	623b      	str	r3, [r7, #32]
}
 800e32e:	bf00      	nop
 800e330:	e7fe      	b.n	800e330 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e332:	f001 fa4f 	bl	800f7d4 <xTaskGetSchedulerState>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d102      	bne.n	800e342 <xQueueGenericSend+0x9e>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <xQueueGenericSend+0xa2>
 800e342:	2301      	movs	r3, #1
 800e344:	e000      	b.n	800e348 <xQueueGenericSend+0xa4>
 800e346:	2300      	movs	r3, #0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d10a      	bne.n	800e362 <xQueueGenericSend+0xbe>
	__asm volatile
 800e34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e350:	f383 8811 	msr	BASEPRI, r3
 800e354:	f3bf 8f6f 	isb	sy
 800e358:	f3bf 8f4f 	dsb	sy
 800e35c:	61fb      	str	r3, [r7, #28]
}
 800e35e:	bf00      	nop
 800e360:	e7fe      	b.n	800e360 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e362:	f001 ff8f 	bl	8010284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e36e:	429a      	cmp	r2, r3
 800e370:	d302      	bcc.n	800e378 <xQueueGenericSend+0xd4>
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b02      	cmp	r3, #2
 800e376:	d129      	bne.n	800e3cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	68b9      	ldr	r1, [r7, #8]
 800e37c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e37e:	f000 fa8b 	bl	800e898 <prvCopyDataToQueue>
 800e382:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d010      	beq.n	800e3ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38e:	3324      	adds	r3, #36	; 0x24
 800e390:	4618      	mov	r0, r3
 800e392:	f001 f861 	bl	800f458 <xTaskRemoveFromEventList>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d013      	beq.n	800e3c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e39c:	4b3f      	ldr	r3, [pc, #252]	; (800e49c <xQueueGenericSend+0x1f8>)
 800e39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3a2:	601a      	str	r2, [r3, #0]
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	e00a      	b.n	800e3c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d007      	beq.n	800e3c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e3b4:	4b39      	ldr	r3, [pc, #228]	; (800e49c <xQueueGenericSend+0x1f8>)
 800e3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ba:	601a      	str	r2, [r3, #0]
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e3c4:	f001 ff8e 	bl	80102e4 <vPortExitCritical>
				return pdPASS;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	e063      	b.n	800e494 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d103      	bne.n	800e3da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3d2:	f001 ff87 	bl	80102e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e05c      	b.n	800e494 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d106      	bne.n	800e3ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3e0:	f107 0314 	add.w	r3, r7, #20
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f001 f89b 	bl	800f520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3ee:	f001 ff79 	bl	80102e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3f2:	f000 fdfb 	bl	800efec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3f6:	f001 ff45 	bl	8010284 <vPortEnterCritical>
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e400:	b25b      	sxtb	r3, r3
 800e402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e406:	d103      	bne.n	800e410 <xQueueGenericSend+0x16c>
 800e408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40a:	2200      	movs	r2, #0
 800e40c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e416:	b25b      	sxtb	r3, r3
 800e418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e41c:	d103      	bne.n	800e426 <xQueueGenericSend+0x182>
 800e41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e420:	2200      	movs	r2, #0
 800e422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e426:	f001 ff5d 	bl	80102e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e42a:	1d3a      	adds	r2, r7, #4
 800e42c:	f107 0314 	add.w	r3, r7, #20
 800e430:	4611      	mov	r1, r2
 800e432:	4618      	mov	r0, r3
 800e434:	f001 f88a 	bl	800f54c <xTaskCheckForTimeOut>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d124      	bne.n	800e488 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e43e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e440:	f000 fb22 	bl	800ea88 <prvIsQueueFull>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d018      	beq.n	800e47c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	3310      	adds	r3, #16
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	4611      	mov	r1, r2
 800e452:	4618      	mov	r0, r3
 800e454:	f000 ffb0 	bl	800f3b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e45a:	f000 faad 	bl	800e9b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e45e:	f000 fdd3 	bl	800f008 <xTaskResumeAll>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	f47f af7c 	bne.w	800e362 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e46a:	4b0c      	ldr	r3, [pc, #48]	; (800e49c <xQueueGenericSend+0x1f8>)
 800e46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e470:	601a      	str	r2, [r3, #0]
 800e472:	f3bf 8f4f 	dsb	sy
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	e772      	b.n	800e362 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e47e:	f000 fa9b 	bl	800e9b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e482:	f000 fdc1 	bl	800f008 <xTaskResumeAll>
 800e486:	e76c      	b.n	800e362 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e48a:	f000 fa95 	bl	800e9b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e48e:	f000 fdbb 	bl	800f008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e492:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e494:	4618      	mov	r0, r3
 800e496:	3738      	adds	r7, #56	; 0x38
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	e000ed04 	.word	0xe000ed04

0800e4a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b090      	sub	sp, #64	; 0x40
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	607a      	str	r2, [r7, #4]
 800e4ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10a      	bne.n	800e4ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4bc:	f383 8811 	msr	BASEPRI, r3
 800e4c0:	f3bf 8f6f 	isb	sy
 800e4c4:	f3bf 8f4f 	dsb	sy
 800e4c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e4ca:	bf00      	nop
 800e4cc:	e7fe      	b.n	800e4cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d103      	bne.n	800e4dc <xQueueGenericSendFromISR+0x3c>
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d101      	bne.n	800e4e0 <xQueueGenericSendFromISR+0x40>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e000      	b.n	800e4e2 <xQueueGenericSendFromISR+0x42>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10a      	bne.n	800e4fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ea:	f383 8811 	msr	BASEPRI, r3
 800e4ee:	f3bf 8f6f 	isb	sy
 800e4f2:	f3bf 8f4f 	dsb	sy
 800e4f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e4f8:	bf00      	nop
 800e4fa:	e7fe      	b.n	800e4fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d103      	bne.n	800e50a <xQueueGenericSendFromISR+0x6a>
 800e502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e506:	2b01      	cmp	r3, #1
 800e508:	d101      	bne.n	800e50e <xQueueGenericSendFromISR+0x6e>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e000      	b.n	800e510 <xQueueGenericSendFromISR+0x70>
 800e50e:	2300      	movs	r3, #0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10a      	bne.n	800e52a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	623b      	str	r3, [r7, #32]
}
 800e526:	bf00      	nop
 800e528:	e7fe      	b.n	800e528 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e52a:	f001 ff8d 	bl	8010448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e52e:	f3ef 8211 	mrs	r2, BASEPRI
 800e532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e536:	f383 8811 	msr	BASEPRI, r3
 800e53a:	f3bf 8f6f 	isb	sy
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	61fa      	str	r2, [r7, #28]
 800e544:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e546:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e548:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e552:	429a      	cmp	r2, r3
 800e554:	d302      	bcc.n	800e55c <xQueueGenericSendFromISR+0xbc>
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	2b02      	cmp	r3, #2
 800e55a:	d12f      	bne.n	800e5bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e56c:	683a      	ldr	r2, [r7, #0]
 800e56e:	68b9      	ldr	r1, [r7, #8]
 800e570:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e572:	f000 f991 	bl	800e898 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e576:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e57e:	d112      	bne.n	800e5a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e584:	2b00      	cmp	r3, #0
 800e586:	d016      	beq.n	800e5b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58a:	3324      	adds	r3, #36	; 0x24
 800e58c:	4618      	mov	r0, r3
 800e58e:	f000 ff63 	bl	800f458 <xTaskRemoveFromEventList>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00e      	beq.n	800e5b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00b      	beq.n	800e5b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	601a      	str	r2, [r3, #0]
 800e5a4:	e007      	b.n	800e5b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e5a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	b25a      	sxtb	r2, r3
 800e5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e5ba:	e001      	b.n	800e5c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e5ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3740      	adds	r7, #64	; 0x40
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
	...

0800e5d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b08c      	sub	sp, #48	; 0x30
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10a      	bne.n	800e608 <xQueueReceive+0x30>
	__asm volatile
 800e5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f6:	f383 8811 	msr	BASEPRI, r3
 800e5fa:	f3bf 8f6f 	isb	sy
 800e5fe:	f3bf 8f4f 	dsb	sy
 800e602:	623b      	str	r3, [r7, #32]
}
 800e604:	bf00      	nop
 800e606:	e7fe      	b.n	800e606 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d103      	bne.n	800e616 <xQueueReceive+0x3e>
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e612:	2b00      	cmp	r3, #0
 800e614:	d101      	bne.n	800e61a <xQueueReceive+0x42>
 800e616:	2301      	movs	r3, #1
 800e618:	e000      	b.n	800e61c <xQueueReceive+0x44>
 800e61a:	2300      	movs	r3, #0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d10a      	bne.n	800e636 <xQueueReceive+0x5e>
	__asm volatile
 800e620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	61fb      	str	r3, [r7, #28]
}
 800e632:	bf00      	nop
 800e634:	e7fe      	b.n	800e634 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e636:	f001 f8cd 	bl	800f7d4 <xTaskGetSchedulerState>
 800e63a:	4603      	mov	r3, r0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d102      	bne.n	800e646 <xQueueReceive+0x6e>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <xQueueReceive+0x72>
 800e646:	2301      	movs	r3, #1
 800e648:	e000      	b.n	800e64c <xQueueReceive+0x74>
 800e64a:	2300      	movs	r3, #0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10a      	bne.n	800e666 <xQueueReceive+0x8e>
	__asm volatile
 800e650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e654:	f383 8811 	msr	BASEPRI, r3
 800e658:	f3bf 8f6f 	isb	sy
 800e65c:	f3bf 8f4f 	dsb	sy
 800e660:	61bb      	str	r3, [r7, #24]
}
 800e662:	bf00      	nop
 800e664:	e7fe      	b.n	800e664 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e666:	f001 fe0d 	bl	8010284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	2b00      	cmp	r3, #0
 800e674:	d01f      	beq.n	800e6b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e676:	68b9      	ldr	r1, [r7, #8]
 800e678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e67a:	f000 f977 	bl	800e96c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e680:	1e5a      	subs	r2, r3, #1
 800e682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e684:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00f      	beq.n	800e6ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e690:	3310      	adds	r3, #16
 800e692:	4618      	mov	r0, r3
 800e694:	f000 fee0 	bl	800f458 <xTaskRemoveFromEventList>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d007      	beq.n	800e6ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e69e:	4b3d      	ldr	r3, [pc, #244]	; (800e794 <xQueueReceive+0x1bc>)
 800e6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6a4:	601a      	str	r2, [r3, #0]
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e6ae:	f001 fe19 	bl	80102e4 <vPortExitCritical>
				return pdPASS;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e069      	b.n	800e78a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d103      	bne.n	800e6c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6bc:	f001 fe12 	bl	80102e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	e062      	b.n	800e78a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d106      	bne.n	800e6d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6ca:	f107 0310 	add.w	r3, r7, #16
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f000 ff26 	bl	800f520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6d8:	f001 fe04 	bl	80102e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6dc:	f000 fc86 	bl	800efec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6e0:	f001 fdd0 	bl	8010284 <vPortEnterCritical>
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6ea:	b25b      	sxtb	r3, r3
 800e6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f0:	d103      	bne.n	800e6fa <xQueueReceive+0x122>
 800e6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e700:	b25b      	sxtb	r3, r3
 800e702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e706:	d103      	bne.n	800e710 <xQueueReceive+0x138>
 800e708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e710:	f001 fde8 	bl	80102e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e714:	1d3a      	adds	r2, r7, #4
 800e716:	f107 0310 	add.w	r3, r7, #16
 800e71a:	4611      	mov	r1, r2
 800e71c:	4618      	mov	r0, r3
 800e71e:	f000 ff15 	bl	800f54c <xTaskCheckForTimeOut>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d123      	bne.n	800e770 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e72a:	f000 f997 	bl	800ea5c <prvIsQueueEmpty>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d017      	beq.n	800e764 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e736:	3324      	adds	r3, #36	; 0x24
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	4611      	mov	r1, r2
 800e73c:	4618      	mov	r0, r3
 800e73e:	f000 fe3b 	bl	800f3b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e744:	f000 f938 	bl	800e9b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e748:	f000 fc5e 	bl	800f008 <xTaskResumeAll>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d189      	bne.n	800e666 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e752:	4b10      	ldr	r3, [pc, #64]	; (800e794 <xQueueReceive+0x1bc>)
 800e754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e758:	601a      	str	r2, [r3, #0]
 800e75a:	f3bf 8f4f 	dsb	sy
 800e75e:	f3bf 8f6f 	isb	sy
 800e762:	e780      	b.n	800e666 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e766:	f000 f927 	bl	800e9b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e76a:	f000 fc4d 	bl	800f008 <xTaskResumeAll>
 800e76e:	e77a      	b.n	800e666 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e772:	f000 f921 	bl	800e9b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e776:	f000 fc47 	bl	800f008 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e77c:	f000 f96e 	bl	800ea5c <prvIsQueueEmpty>
 800e780:	4603      	mov	r3, r0
 800e782:	2b00      	cmp	r3, #0
 800e784:	f43f af6f 	beq.w	800e666 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e788:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3730      	adds	r7, #48	; 0x30
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	e000ed04 	.word	0xe000ed04

0800e798 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b08e      	sub	sp, #56	; 0x38
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	60b9      	str	r1, [r7, #8]
 800e7a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d10a      	bne.n	800e7c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	623b      	str	r3, [r7, #32]
}
 800e7c0:	bf00      	nop
 800e7c2:	e7fe      	b.n	800e7c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d103      	bne.n	800e7d2 <xQueueReceiveFromISR+0x3a>
 800e7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d101      	bne.n	800e7d6 <xQueueReceiveFromISR+0x3e>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e000      	b.n	800e7d8 <xQueueReceiveFromISR+0x40>
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10a      	bne.n	800e7f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	61fb      	str	r3, [r7, #28]
}
 800e7ee:	bf00      	nop
 800e7f0:	e7fe      	b.n	800e7f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7f2:	f001 fe29 	bl	8010448 <vPortValidateInterruptPriority>
	__asm volatile
 800e7f6:	f3ef 8211 	mrs	r2, BASEPRI
 800e7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fe:	f383 8811 	msr	BASEPRI, r3
 800e802:	f3bf 8f6f 	isb	sy
 800e806:	f3bf 8f4f 	dsb	sy
 800e80a:	61ba      	str	r2, [r7, #24]
 800e80c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e80e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e810:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e816:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d02f      	beq.n	800e87e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e828:	68b9      	ldr	r1, [r7, #8]
 800e82a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e82c:	f000 f89e 	bl	800e96c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e832:	1e5a      	subs	r2, r3, #1
 800e834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e836:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e838:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e840:	d112      	bne.n	800e868 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d016      	beq.n	800e878 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e84c:	3310      	adds	r3, #16
 800e84e:	4618      	mov	r0, r3
 800e850:	f000 fe02 	bl	800f458 <xTaskRemoveFromEventList>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00e      	beq.n	800e878 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00b      	beq.n	800e878 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	601a      	str	r2, [r3, #0]
 800e866:	e007      	b.n	800e878 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e86c:	3301      	adds	r3, #1
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	b25a      	sxtb	r2, r3
 800e872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e878:	2301      	movs	r3, #1
 800e87a:	637b      	str	r3, [r7, #52]	; 0x34
 800e87c:	e001      	b.n	800e882 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e87e:	2300      	movs	r3, #0
 800e880:	637b      	str	r3, [r7, #52]	; 0x34
 800e882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e884:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	f383 8811 	msr	BASEPRI, r3
}
 800e88c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e890:	4618      	mov	r0, r3
 800e892:	3738      	adds	r7, #56	; 0x38
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b086      	sub	sp, #24
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d10d      	bne.n	800e8d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d14d      	bne.n	800e95a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	689b      	ldr	r3, [r3, #8]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f000 ffa4 	bl	800f810 <xTaskPriorityDisinherit>
 800e8c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	609a      	str	r2, [r3, #8]
 800e8d0:	e043      	b.n	800e95a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d119      	bne.n	800e90c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6858      	ldr	r0, [r3, #4]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	68b9      	ldr	r1, [r7, #8]
 800e8e4:	f002 fe06 	bl	80114f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	685a      	ldr	r2, [r3, #4]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8f0:	441a      	add	r2, r3
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	685a      	ldr	r2, [r3, #4]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	689b      	ldr	r3, [r3, #8]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d32b      	bcc.n	800e95a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	605a      	str	r2, [r3, #4]
 800e90a:	e026      	b.n	800e95a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	68d8      	ldr	r0, [r3, #12]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e914:	461a      	mov	r2, r3
 800e916:	68b9      	ldr	r1, [r7, #8]
 800e918:	f002 fdec 	bl	80114f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	68da      	ldr	r2, [r3, #12]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e924:	425b      	negs	r3, r3
 800e926:	441a      	add	r2, r3
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	68da      	ldr	r2, [r3, #12]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	429a      	cmp	r2, r3
 800e936:	d207      	bcs.n	800e948 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	689a      	ldr	r2, [r3, #8]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e940:	425b      	negs	r3, r3
 800e942:	441a      	add	r2, r3
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b02      	cmp	r3, #2
 800e94c:	d105      	bne.n	800e95a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d002      	beq.n	800e95a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	3b01      	subs	r3, #1
 800e958:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	1c5a      	adds	r2, r3, #1
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e962:	697b      	ldr	r3, [r7, #20]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d018      	beq.n	800e9b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	68da      	ldr	r2, [r3, #12]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e986:	441a      	add	r2, r3
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	68da      	ldr	r2, [r3, #12]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	429a      	cmp	r2, r3
 800e996:	d303      	bcc.n	800e9a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	68d9      	ldr	r1, [r3, #12]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	6838      	ldr	r0, [r7, #0]
 800e9ac:	f002 fda2 	bl	80114f4 <memcpy>
	}
}
 800e9b0:	bf00      	nop
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e9c0:	f001 fc60 	bl	8010284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9cc:	e011      	b.n	800e9f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d012      	beq.n	800e9fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3324      	adds	r3, #36	; 0x24
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f000 fd3c 	bl	800f458 <xTaskRemoveFromEventList>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e9e6:	f000 fe13 	bl	800f610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e9ea:	7bfb      	ldrb	r3, [r7, #15]
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	b2db      	uxtb	r3, r3
 800e9f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e9f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	dce9      	bgt.n	800e9ce <prvUnlockQueue+0x16>
 800e9fa:	e000      	b.n	800e9fe <prvUnlockQueue+0x46>
					break;
 800e9fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	22ff      	movs	r2, #255	; 0xff
 800ea02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ea06:	f001 fc6d 	bl	80102e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ea0a:	f001 fc3b 	bl	8010284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea16:	e011      	b.n	800ea3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d012      	beq.n	800ea46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	3310      	adds	r3, #16
 800ea24:	4618      	mov	r0, r3
 800ea26:	f000 fd17 	bl	800f458 <xTaskRemoveFromEventList>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d001      	beq.n	800ea34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea30:	f000 fdee 	bl	800f610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea34:	7bbb      	ldrb	r3, [r7, #14]
 800ea36:	3b01      	subs	r3, #1
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	dce9      	bgt.n	800ea18 <prvUnlockQueue+0x60>
 800ea44:	e000      	b.n	800ea48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	22ff      	movs	r2, #255	; 0xff
 800ea4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ea50:	f001 fc48 	bl	80102e4 <vPortExitCritical>
}
 800ea54:	bf00      	nop
 800ea56:	3710      	adds	r7, #16
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea64:	f001 fc0e 	bl	8010284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d102      	bne.n	800ea76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ea70:	2301      	movs	r3, #1
 800ea72:	60fb      	str	r3, [r7, #12]
 800ea74:	e001      	b.n	800ea7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ea76:	2300      	movs	r3, #0
 800ea78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ea7a:	f001 fc33 	bl	80102e4 <vPortExitCritical>

	return xReturn;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3710      	adds	r7, #16
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea90:	f001 fbf8 	bl	8010284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d102      	bne.n	800eaa6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	e001      	b.n	800eaaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eaaa:	f001 fc1b 	bl	80102e4 <vPortExitCritical>

	return xReturn;
 800eaae:	68fb      	ldr	r3, [r7, #12]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eac2:	2300      	movs	r3, #0
 800eac4:	60fb      	str	r3, [r7, #12]
 800eac6:	e014      	b.n	800eaf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eac8:	4a0f      	ldr	r2, [pc, #60]	; (800eb08 <vQueueAddToRegistry+0x50>)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d10b      	bne.n	800eaec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ead4:	490c      	ldr	r1, [pc, #48]	; (800eb08 <vQueueAddToRegistry+0x50>)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	683a      	ldr	r2, [r7, #0]
 800eada:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eade:	4a0a      	ldr	r2, [pc, #40]	; (800eb08 <vQueueAddToRegistry+0x50>)
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	00db      	lsls	r3, r3, #3
 800eae4:	4413      	add	r3, r2
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eaea:	e006      	b.n	800eafa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	3301      	adds	r3, #1
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2b07      	cmp	r3, #7
 800eaf6:	d9e7      	bls.n	800eac8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eaf8:	bf00      	nop
 800eafa:	bf00      	nop
 800eafc:	3714      	adds	r7, #20
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr
 800eb06:	bf00      	nop
 800eb08:	2000263c 	.word	0x2000263c

0800eb0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b086      	sub	sp, #24
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eb1c:	f001 fbb2 	bl	8010284 <vPortEnterCritical>
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb26:	b25b      	sxtb	r3, r3
 800eb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb2c:	d103      	bne.n	800eb36 <vQueueWaitForMessageRestricted+0x2a>
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	2200      	movs	r2, #0
 800eb32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb3c:	b25b      	sxtb	r3, r3
 800eb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb42:	d103      	bne.n	800eb4c <vQueueWaitForMessageRestricted+0x40>
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb4c:	f001 fbca 	bl	80102e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d106      	bne.n	800eb66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	3324      	adds	r3, #36	; 0x24
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	68b9      	ldr	r1, [r7, #8]
 800eb60:	4618      	mov	r0, r3
 800eb62:	f000 fc4d 	bl	800f400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eb66:	6978      	ldr	r0, [r7, #20]
 800eb68:	f7ff ff26 	bl	800e9b8 <prvUnlockQueue>
	}
 800eb6c:	bf00      	nop
 800eb6e:	3718      	adds	r7, #24
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b08e      	sub	sp, #56	; 0x38
 800eb78:	af04      	add	r7, sp, #16
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	607a      	str	r2, [r7, #4]
 800eb80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800eb82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d10a      	bne.n	800eb9e <xTaskCreateStatic+0x2a>
	__asm volatile
 800eb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f3bf 8f6f 	isb	sy
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	623b      	str	r3, [r7, #32]
}
 800eb9a:	bf00      	nop
 800eb9c:	e7fe      	b.n	800eb9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d10a      	bne.n	800ebba <xTaskCreateStatic+0x46>
	__asm volatile
 800eba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba8:	f383 8811 	msr	BASEPRI, r3
 800ebac:	f3bf 8f6f 	isb	sy
 800ebb0:	f3bf 8f4f 	dsb	sy
 800ebb4:	61fb      	str	r3, [r7, #28]
}
 800ebb6:	bf00      	nop
 800ebb8:	e7fe      	b.n	800ebb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ebba:	235c      	movs	r3, #92	; 0x5c
 800ebbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	2b5c      	cmp	r3, #92	; 0x5c
 800ebc2:	d00a      	beq.n	800ebda <xTaskCreateStatic+0x66>
	__asm volatile
 800ebc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc8:	f383 8811 	msr	BASEPRI, r3
 800ebcc:	f3bf 8f6f 	isb	sy
 800ebd0:	f3bf 8f4f 	dsb	sy
 800ebd4:	61bb      	str	r3, [r7, #24]
}
 800ebd6:	bf00      	nop
 800ebd8:	e7fe      	b.n	800ebd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ebda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ebdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d01e      	beq.n	800ec20 <xTaskCreateStatic+0xac>
 800ebe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d01b      	beq.n	800ec20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ebe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	9303      	str	r3, [sp, #12]
 800ebfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec00:	9302      	str	r3, [sp, #8]
 800ec02:	f107 0314 	add.w	r3, r7, #20
 800ec06:	9301      	str	r3, [sp, #4]
 800ec08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0a:	9300      	str	r3, [sp, #0]
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	68b9      	ldr	r1, [r7, #8]
 800ec12:	68f8      	ldr	r0, [r7, #12]
 800ec14:	f000 f850 	bl	800ecb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec1a:	f000 f8dd 	bl	800edd8 <prvAddNewTaskToReadyList>
 800ec1e:	e001      	b.n	800ec24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ec20:	2300      	movs	r3, #0
 800ec22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ec24:	697b      	ldr	r3, [r7, #20]
	}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3728      	adds	r7, #40	; 0x28
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b08c      	sub	sp, #48	; 0x30
 800ec32:	af04      	add	r7, sp, #16
 800ec34:	60f8      	str	r0, [r7, #12]
 800ec36:	60b9      	str	r1, [r7, #8]
 800ec38:	603b      	str	r3, [r7, #0]
 800ec3a:	4613      	mov	r3, r2
 800ec3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec3e:	88fb      	ldrh	r3, [r7, #6]
 800ec40:	009b      	lsls	r3, r3, #2
 800ec42:	4618      	mov	r0, r3
 800ec44:	f001 fc40 	bl	80104c8 <pvPortMalloc>
 800ec48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d00e      	beq.n	800ec6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec50:	205c      	movs	r0, #92	; 0x5c
 800ec52:	f001 fc39 	bl	80104c8 <pvPortMalloc>
 800ec56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d003      	beq.n	800ec66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	697a      	ldr	r2, [r7, #20]
 800ec62:	631a      	str	r2, [r3, #48]	; 0x30
 800ec64:	e005      	b.n	800ec72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ec66:	6978      	ldr	r0, [r7, #20]
 800ec68:	f001 fcfa 	bl	8010660 <vPortFree>
 800ec6c:	e001      	b.n	800ec72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d017      	beq.n	800eca8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec78:	69fb      	ldr	r3, [r7, #28]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec80:	88fa      	ldrh	r2, [r7, #6]
 800ec82:	2300      	movs	r3, #0
 800ec84:	9303      	str	r3, [sp, #12]
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	9302      	str	r3, [sp, #8]
 800ec8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8c:	9301      	str	r3, [sp, #4]
 800ec8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec90:	9300      	str	r3, [sp, #0]
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	68b9      	ldr	r1, [r7, #8]
 800ec96:	68f8      	ldr	r0, [r7, #12]
 800ec98:	f000 f80e 	bl	800ecb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec9c:	69f8      	ldr	r0, [r7, #28]
 800ec9e:	f000 f89b 	bl	800edd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eca2:	2301      	movs	r3, #1
 800eca4:	61bb      	str	r3, [r7, #24]
 800eca6:	e002      	b.n	800ecae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eca8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ecae:	69bb      	ldr	r3, [r7, #24]
	}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3720      	adds	r7, #32
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b088      	sub	sp, #32
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]
 800ecc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	461a      	mov	r2, r3
 800ecd0:	21a5      	movs	r1, #165	; 0xa5
 800ecd2:	f002 fc1d 	bl	8011510 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ecd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ece0:	3b01      	subs	r3, #1
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	4413      	add	r3, r2
 800ece6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	f023 0307 	bic.w	r3, r3, #7
 800ecee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	f003 0307 	and.w	r3, r3, #7
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d00a      	beq.n	800ed10 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ecfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecfe:	f383 8811 	msr	BASEPRI, r3
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	f3bf 8f4f 	dsb	sy
 800ed0a:	617b      	str	r3, [r7, #20]
}
 800ed0c:	bf00      	nop
 800ed0e:	e7fe      	b.n	800ed0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d01f      	beq.n	800ed56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed16:	2300      	movs	r3, #0
 800ed18:	61fb      	str	r3, [r7, #28]
 800ed1a:	e012      	b.n	800ed42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	4413      	add	r3, r2
 800ed22:	7819      	ldrb	r1, [r3, #0]
 800ed24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	4413      	add	r3, r2
 800ed2a:	3334      	adds	r3, #52	; 0x34
 800ed2c:	460a      	mov	r2, r1
 800ed2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed30:	68ba      	ldr	r2, [r7, #8]
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	4413      	add	r3, r2
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d006      	beq.n	800ed4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	61fb      	str	r3, [r7, #28]
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	2b0f      	cmp	r3, #15
 800ed46:	d9e9      	bls.n	800ed1c <prvInitialiseNewTask+0x64>
 800ed48:	e000      	b.n	800ed4c <prvInitialiseNewTask+0x94>
			{
				break;
 800ed4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed54:	e003      	b.n	800ed5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ed56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed60:	2b37      	cmp	r3, #55	; 0x37
 800ed62:	d901      	bls.n	800ed68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed64:	2337      	movs	r3, #55	; 0x37
 800ed66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ed68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ed74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed76:	2200      	movs	r2, #0
 800ed78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	3304      	adds	r3, #4
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7ff f8be 	bl	800df00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ed84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed86:	3318      	adds	r3, #24
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7ff f8b9 	bl	800df00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eda2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda6:	2200      	movs	r2, #0
 800eda8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	2200      	movs	r2, #0
 800edae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800edb2:	683a      	ldr	r2, [r7, #0]
 800edb4:	68f9      	ldr	r1, [r7, #12]
 800edb6:	69b8      	ldr	r0, [r7, #24]
 800edb8:	f001 f93a 	bl	8010030 <pxPortInitialiseStack>
 800edbc:	4602      	mov	r2, r0
 800edbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800edc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d002      	beq.n	800edce <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800edc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edce:	bf00      	nop
 800edd0:	3720      	adds	r7, #32
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
	...

0800edd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ede0:	f001 fa50 	bl	8010284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ede4:	4b2d      	ldr	r3, [pc, #180]	; (800ee9c <prvAddNewTaskToReadyList+0xc4>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	3301      	adds	r3, #1
 800edea:	4a2c      	ldr	r2, [pc, #176]	; (800ee9c <prvAddNewTaskToReadyList+0xc4>)
 800edec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800edee:	4b2c      	ldr	r3, [pc, #176]	; (800eea0 <prvAddNewTaskToReadyList+0xc8>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d109      	bne.n	800ee0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800edf6:	4a2a      	ldr	r2, [pc, #168]	; (800eea0 <prvAddNewTaskToReadyList+0xc8>)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800edfc:	4b27      	ldr	r3, [pc, #156]	; (800ee9c <prvAddNewTaskToReadyList+0xc4>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d110      	bne.n	800ee26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee04:	f000 fc28 	bl	800f658 <prvInitialiseTaskLists>
 800ee08:	e00d      	b.n	800ee26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee0a:	4b26      	ldr	r3, [pc, #152]	; (800eea4 <prvAddNewTaskToReadyList+0xcc>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d109      	bne.n	800ee26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee12:	4b23      	ldr	r3, [pc, #140]	; (800eea0 <prvAddNewTaskToReadyList+0xc8>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d802      	bhi.n	800ee26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ee20:	4a1f      	ldr	r2, [pc, #124]	; (800eea0 <prvAddNewTaskToReadyList+0xc8>)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ee26:	4b20      	ldr	r3, [pc, #128]	; (800eea8 <prvAddNewTaskToReadyList+0xd0>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	4a1e      	ldr	r2, [pc, #120]	; (800eea8 <prvAddNewTaskToReadyList+0xd0>)
 800ee2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ee30:	4b1d      	ldr	r3, [pc, #116]	; (800eea8 <prvAddNewTaskToReadyList+0xd0>)
 800ee32:	681a      	ldr	r2, [r3, #0]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3c:	4b1b      	ldr	r3, [pc, #108]	; (800eeac <prvAddNewTaskToReadyList+0xd4>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d903      	bls.n	800ee4c <prvAddNewTaskToReadyList+0x74>
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee48:	4a18      	ldr	r2, [pc, #96]	; (800eeac <prvAddNewTaskToReadyList+0xd4>)
 800ee4a:	6013      	str	r3, [r2, #0]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee50:	4613      	mov	r3, r2
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	4413      	add	r3, r2
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	4a15      	ldr	r2, [pc, #84]	; (800eeb0 <prvAddNewTaskToReadyList+0xd8>)
 800ee5a:	441a      	add	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	4619      	mov	r1, r3
 800ee62:	4610      	mov	r0, r2
 800ee64:	f7ff f859 	bl	800df1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ee68:	f001 fa3c 	bl	80102e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ee6c:	4b0d      	ldr	r3, [pc, #52]	; (800eea4 <prvAddNewTaskToReadyList+0xcc>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00e      	beq.n	800ee92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ee74:	4b0a      	ldr	r3, [pc, #40]	; (800eea0 <prvAddNewTaskToReadyList+0xc8>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d207      	bcs.n	800ee92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ee82:	4b0c      	ldr	r3, [pc, #48]	; (800eeb4 <prvAddNewTaskToReadyList+0xdc>)
 800ee84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee88:	601a      	str	r2, [r3, #0]
 800ee8a:	f3bf 8f4f 	dsb	sy
 800ee8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee92:	bf00      	nop
 800ee94:	3708      	adds	r7, #8
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	20000d80 	.word	0x20000d80
 800eea0:	200008ac 	.word	0x200008ac
 800eea4:	20000d8c 	.word	0x20000d8c
 800eea8:	20000d9c 	.word	0x20000d9c
 800eeac:	20000d88 	.word	0x20000d88
 800eeb0:	200008b0 	.word	0x200008b0
 800eeb4:	e000ed04 	.word	0xe000ed04

0800eeb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eec0:	2300      	movs	r3, #0
 800eec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d017      	beq.n	800eefa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eeca:	4b13      	ldr	r3, [pc, #76]	; (800ef18 <vTaskDelay+0x60>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00a      	beq.n	800eee8 <vTaskDelay+0x30>
	__asm volatile
 800eed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed6:	f383 8811 	msr	BASEPRI, r3
 800eeda:	f3bf 8f6f 	isb	sy
 800eede:	f3bf 8f4f 	dsb	sy
 800eee2:	60bb      	str	r3, [r7, #8]
}
 800eee4:	bf00      	nop
 800eee6:	e7fe      	b.n	800eee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eee8:	f000 f880 	bl	800efec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eeec:	2100      	movs	r1, #0
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f000 fcfc 	bl	800f8ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eef4:	f000 f888 	bl	800f008 <xTaskResumeAll>
 800eef8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d107      	bne.n	800ef10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ef00:	4b06      	ldr	r3, [pc, #24]	; (800ef1c <vTaskDelay+0x64>)
 800ef02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef06:	601a      	str	r2, [r3, #0]
 800ef08:	f3bf 8f4f 	dsb	sy
 800ef0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef10:	bf00      	nop
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	20000da8 	.word	0x20000da8
 800ef1c:	e000ed04 	.word	0xe000ed04

0800ef20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b08a      	sub	sp, #40	; 0x28
 800ef24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ef26:	2300      	movs	r3, #0
 800ef28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ef2e:	463a      	mov	r2, r7
 800ef30:	1d39      	adds	r1, r7, #4
 800ef32:	f107 0308 	add.w	r3, r7, #8
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fe ff8e 	bl	800de58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ef3c:	6839      	ldr	r1, [r7, #0]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	9202      	str	r2, [sp, #8]
 800ef44:	9301      	str	r3, [sp, #4]
 800ef46:	2300      	movs	r3, #0
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	460a      	mov	r2, r1
 800ef4e:	4921      	ldr	r1, [pc, #132]	; (800efd4 <vTaskStartScheduler+0xb4>)
 800ef50:	4821      	ldr	r0, [pc, #132]	; (800efd8 <vTaskStartScheduler+0xb8>)
 800ef52:	f7ff fe0f 	bl	800eb74 <xTaskCreateStatic>
 800ef56:	4603      	mov	r3, r0
 800ef58:	4a20      	ldr	r2, [pc, #128]	; (800efdc <vTaskStartScheduler+0xbc>)
 800ef5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ef5c:	4b1f      	ldr	r3, [pc, #124]	; (800efdc <vTaskStartScheduler+0xbc>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d002      	beq.n	800ef6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ef64:	2301      	movs	r3, #1
 800ef66:	617b      	str	r3, [r7, #20]
 800ef68:	e001      	b.n	800ef6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d102      	bne.n	800ef7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ef74:	f000 fd0e 	bl	800f994 <xTimerCreateTimerTask>
 800ef78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d116      	bne.n	800efae <vTaskStartScheduler+0x8e>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	613b      	str	r3, [r7, #16]
}
 800ef92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ef94:	4b12      	ldr	r3, [pc, #72]	; (800efe0 <vTaskStartScheduler+0xc0>)
 800ef96:	f04f 32ff 	mov.w	r2, #4294967295
 800ef9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ef9c:	4b11      	ldr	r3, [pc, #68]	; (800efe4 <vTaskStartScheduler+0xc4>)
 800ef9e:	2201      	movs	r2, #1
 800efa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800efa2:	4b11      	ldr	r3, [pc, #68]	; (800efe8 <vTaskStartScheduler+0xc8>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800efa8:	f001 f8ca 	bl	8010140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800efac:	e00e      	b.n	800efcc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb4:	d10a      	bne.n	800efcc <vTaskStartScheduler+0xac>
	__asm volatile
 800efb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efba:	f383 8811 	msr	BASEPRI, r3
 800efbe:	f3bf 8f6f 	isb	sy
 800efc2:	f3bf 8f4f 	dsb	sy
 800efc6:	60fb      	str	r3, [r7, #12]
}
 800efc8:	bf00      	nop
 800efca:	e7fe      	b.n	800efca <vTaskStartScheduler+0xaa>
}
 800efcc:	bf00      	nop
 800efce:	3718      	adds	r7, #24
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	08011544 	.word	0x08011544
 800efd8:	0800f629 	.word	0x0800f629
 800efdc:	20000da4 	.word	0x20000da4
 800efe0:	20000da0 	.word	0x20000da0
 800efe4:	20000d8c 	.word	0x20000d8c
 800efe8:	20000d84 	.word	0x20000d84

0800efec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800efec:	b480      	push	{r7}
 800efee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eff0:	4b04      	ldr	r3, [pc, #16]	; (800f004 <vTaskSuspendAll+0x18>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	3301      	adds	r3, #1
 800eff6:	4a03      	ldr	r2, [pc, #12]	; (800f004 <vTaskSuspendAll+0x18>)
 800eff8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800effa:	bf00      	nop
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr
 800f004:	20000da8 	.word	0x20000da8

0800f008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f00e:	2300      	movs	r3, #0
 800f010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f012:	2300      	movs	r3, #0
 800f014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f016:	4b42      	ldr	r3, [pc, #264]	; (800f120 <xTaskResumeAll+0x118>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d10a      	bne.n	800f034 <xTaskResumeAll+0x2c>
	__asm volatile
 800f01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f022:	f383 8811 	msr	BASEPRI, r3
 800f026:	f3bf 8f6f 	isb	sy
 800f02a:	f3bf 8f4f 	dsb	sy
 800f02e:	603b      	str	r3, [r7, #0]
}
 800f030:	bf00      	nop
 800f032:	e7fe      	b.n	800f032 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f034:	f001 f926 	bl	8010284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f038:	4b39      	ldr	r3, [pc, #228]	; (800f120 <xTaskResumeAll+0x118>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	3b01      	subs	r3, #1
 800f03e:	4a38      	ldr	r2, [pc, #224]	; (800f120 <xTaskResumeAll+0x118>)
 800f040:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f042:	4b37      	ldr	r3, [pc, #220]	; (800f120 <xTaskResumeAll+0x118>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d162      	bne.n	800f110 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f04a:	4b36      	ldr	r3, [pc, #216]	; (800f124 <xTaskResumeAll+0x11c>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d05e      	beq.n	800f110 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f052:	e02f      	b.n	800f0b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f054:	4b34      	ldr	r3, [pc, #208]	; (800f128 <xTaskResumeAll+0x120>)
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	3318      	adds	r3, #24
 800f060:	4618      	mov	r0, r3
 800f062:	f7fe ffb7 	bl	800dfd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	3304      	adds	r3, #4
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fe ffb2 	bl	800dfd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f074:	4b2d      	ldr	r3, [pc, #180]	; (800f12c <xTaskResumeAll+0x124>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d903      	bls.n	800f084 <xTaskResumeAll+0x7c>
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f080:	4a2a      	ldr	r2, [pc, #168]	; (800f12c <xTaskResumeAll+0x124>)
 800f082:	6013      	str	r3, [r2, #0]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f088:	4613      	mov	r3, r2
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	4413      	add	r3, r2
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	4a27      	ldr	r2, [pc, #156]	; (800f130 <xTaskResumeAll+0x128>)
 800f092:	441a      	add	r2, r3
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	3304      	adds	r3, #4
 800f098:	4619      	mov	r1, r3
 800f09a:	4610      	mov	r0, r2
 800f09c:	f7fe ff3d 	bl	800df1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0a4:	4b23      	ldr	r3, [pc, #140]	; (800f134 <xTaskResumeAll+0x12c>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d302      	bcc.n	800f0b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f0ae:	4b22      	ldr	r3, [pc, #136]	; (800f138 <xTaskResumeAll+0x130>)
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0b4:	4b1c      	ldr	r3, [pc, #112]	; (800f128 <xTaskResumeAll+0x120>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d1cb      	bne.n	800f054 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d001      	beq.n	800f0c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f0c2:	f000 fb67 	bl	800f794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f0c6:	4b1d      	ldr	r3, [pc, #116]	; (800f13c <xTaskResumeAll+0x134>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d010      	beq.n	800f0f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f0d2:	f000 f859 	bl	800f188 <xTaskIncrementTick>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f0dc:	4b16      	ldr	r3, [pc, #88]	; (800f138 <xTaskResumeAll+0x130>)
 800f0de:	2201      	movs	r2, #1
 800f0e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1f1      	bne.n	800f0d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f0ee:	4b13      	ldr	r3, [pc, #76]	; (800f13c <xTaskResumeAll+0x134>)
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f0f4:	4b10      	ldr	r3, [pc, #64]	; (800f138 <xTaskResumeAll+0x130>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d009      	beq.n	800f110 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f100:	4b0f      	ldr	r3, [pc, #60]	; (800f140 <xTaskResumeAll+0x138>)
 800f102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f106:	601a      	str	r2, [r3, #0]
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f110:	f001 f8e8 	bl	80102e4 <vPortExitCritical>

	return xAlreadyYielded;
 800f114:	68bb      	ldr	r3, [r7, #8]
}
 800f116:	4618      	mov	r0, r3
 800f118:	3710      	adds	r7, #16
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	20000da8 	.word	0x20000da8
 800f124:	20000d80 	.word	0x20000d80
 800f128:	20000d40 	.word	0x20000d40
 800f12c:	20000d88 	.word	0x20000d88
 800f130:	200008b0 	.word	0x200008b0
 800f134:	200008ac 	.word	0x200008ac
 800f138:	20000d94 	.word	0x20000d94
 800f13c:	20000d90 	.word	0x20000d90
 800f140:	e000ed04 	.word	0xe000ed04

0800f144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f14a:	4b05      	ldr	r3, [pc, #20]	; (800f160 <xTaskGetTickCount+0x1c>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f150:	687b      	ldr	r3, [r7, #4]
}
 800f152:	4618      	mov	r0, r3
 800f154:	370c      	adds	r7, #12
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop
 800f160:	20000d84 	.word	0x20000d84

0800f164 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f16a:	f001 f96d 	bl	8010448 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f16e:	2300      	movs	r3, #0
 800f170:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f172:	4b04      	ldr	r3, [pc, #16]	; (800f184 <xTaskGetTickCountFromISR+0x20>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f178:	683b      	ldr	r3, [r7, #0]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	20000d84 	.word	0x20000d84

0800f188 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b086      	sub	sp, #24
 800f18c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f18e:	2300      	movs	r3, #0
 800f190:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f192:	4b4f      	ldr	r3, [pc, #316]	; (800f2d0 <xTaskIncrementTick+0x148>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	f040 808f 	bne.w	800f2ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f19c:	4b4d      	ldr	r3, [pc, #308]	; (800f2d4 <xTaskIncrementTick+0x14c>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f1a4:	4a4b      	ldr	r2, [pc, #300]	; (800f2d4 <xTaskIncrementTick+0x14c>)
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d120      	bne.n	800f1f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f1b0:	4b49      	ldr	r3, [pc, #292]	; (800f2d8 <xTaskIncrementTick+0x150>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00a      	beq.n	800f1d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800f1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1be:	f383 8811 	msr	BASEPRI, r3
 800f1c2:	f3bf 8f6f 	isb	sy
 800f1c6:	f3bf 8f4f 	dsb	sy
 800f1ca:	603b      	str	r3, [r7, #0]
}
 800f1cc:	bf00      	nop
 800f1ce:	e7fe      	b.n	800f1ce <xTaskIncrementTick+0x46>
 800f1d0:	4b41      	ldr	r3, [pc, #260]	; (800f2d8 <xTaskIncrementTick+0x150>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]
 800f1d6:	4b41      	ldr	r3, [pc, #260]	; (800f2dc <xTaskIncrementTick+0x154>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	4a3f      	ldr	r2, [pc, #252]	; (800f2d8 <xTaskIncrementTick+0x150>)
 800f1dc:	6013      	str	r3, [r2, #0]
 800f1de:	4a3f      	ldr	r2, [pc, #252]	; (800f2dc <xTaskIncrementTick+0x154>)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6013      	str	r3, [r2, #0]
 800f1e4:	4b3e      	ldr	r3, [pc, #248]	; (800f2e0 <xTaskIncrementTick+0x158>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	4a3d      	ldr	r2, [pc, #244]	; (800f2e0 <xTaskIncrementTick+0x158>)
 800f1ec:	6013      	str	r3, [r2, #0]
 800f1ee:	f000 fad1 	bl	800f794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f1f2:	4b3c      	ldr	r3, [pc, #240]	; (800f2e4 <xTaskIncrementTick+0x15c>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	693a      	ldr	r2, [r7, #16]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d349      	bcc.n	800f290 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1fc:	4b36      	ldr	r3, [pc, #216]	; (800f2d8 <xTaskIncrementTick+0x150>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d104      	bne.n	800f210 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f206:	4b37      	ldr	r3, [pc, #220]	; (800f2e4 <xTaskIncrementTick+0x15c>)
 800f208:	f04f 32ff 	mov.w	r2, #4294967295
 800f20c:	601a      	str	r2, [r3, #0]
					break;
 800f20e:	e03f      	b.n	800f290 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f210:	4b31      	ldr	r3, [pc, #196]	; (800f2d8 <xTaskIncrementTick+0x150>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	429a      	cmp	r2, r3
 800f226:	d203      	bcs.n	800f230 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f228:	4a2e      	ldr	r2, [pc, #184]	; (800f2e4 <xTaskIncrementTick+0x15c>)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f22e:	e02f      	b.n	800f290 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	3304      	adds	r3, #4
 800f234:	4618      	mov	r0, r3
 800f236:	f7fe fecd 	bl	800dfd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d004      	beq.n	800f24c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	3318      	adds	r3, #24
 800f246:	4618      	mov	r0, r3
 800f248:	f7fe fec4 	bl	800dfd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f250:	4b25      	ldr	r3, [pc, #148]	; (800f2e8 <xTaskIncrementTick+0x160>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	429a      	cmp	r2, r3
 800f256:	d903      	bls.n	800f260 <xTaskIncrementTick+0xd8>
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25c:	4a22      	ldr	r2, [pc, #136]	; (800f2e8 <xTaskIncrementTick+0x160>)
 800f25e:	6013      	str	r3, [r2, #0]
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f264:	4613      	mov	r3, r2
 800f266:	009b      	lsls	r3, r3, #2
 800f268:	4413      	add	r3, r2
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	4a1f      	ldr	r2, [pc, #124]	; (800f2ec <xTaskIncrementTick+0x164>)
 800f26e:	441a      	add	r2, r3
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	3304      	adds	r3, #4
 800f274:	4619      	mov	r1, r3
 800f276:	4610      	mov	r0, r2
 800f278:	f7fe fe4f 	bl	800df1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f280:	4b1b      	ldr	r3, [pc, #108]	; (800f2f0 <xTaskIncrementTick+0x168>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f286:	429a      	cmp	r2, r3
 800f288:	d3b8      	bcc.n	800f1fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f28a:	2301      	movs	r3, #1
 800f28c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f28e:	e7b5      	b.n	800f1fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f290:	4b17      	ldr	r3, [pc, #92]	; (800f2f0 <xTaskIncrementTick+0x168>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f296:	4915      	ldr	r1, [pc, #84]	; (800f2ec <xTaskIncrementTick+0x164>)
 800f298:	4613      	mov	r3, r2
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	4413      	add	r3, r2
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	440b      	add	r3, r1
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d901      	bls.n	800f2ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f2ac:	4b11      	ldr	r3, [pc, #68]	; (800f2f4 <xTaskIncrementTick+0x16c>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d007      	beq.n	800f2c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	617b      	str	r3, [r7, #20]
 800f2b8:	e004      	b.n	800f2c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f2ba:	4b0f      	ldr	r3, [pc, #60]	; (800f2f8 <xTaskIncrementTick+0x170>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	4a0d      	ldr	r2, [pc, #52]	; (800f2f8 <xTaskIncrementTick+0x170>)
 800f2c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f2c4:	697b      	ldr	r3, [r7, #20]
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	3718      	adds	r7, #24
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	20000da8 	.word	0x20000da8
 800f2d4:	20000d84 	.word	0x20000d84
 800f2d8:	20000d38 	.word	0x20000d38
 800f2dc:	20000d3c 	.word	0x20000d3c
 800f2e0:	20000d98 	.word	0x20000d98
 800f2e4:	20000da0 	.word	0x20000da0
 800f2e8:	20000d88 	.word	0x20000d88
 800f2ec:	200008b0 	.word	0x200008b0
 800f2f0:	200008ac 	.word	0x200008ac
 800f2f4:	20000d94 	.word	0x20000d94
 800f2f8:	20000d90 	.word	0x20000d90

0800f2fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b085      	sub	sp, #20
 800f300:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f302:	4b28      	ldr	r3, [pc, #160]	; (800f3a4 <vTaskSwitchContext+0xa8>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d003      	beq.n	800f312 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f30a:	4b27      	ldr	r3, [pc, #156]	; (800f3a8 <vTaskSwitchContext+0xac>)
 800f30c:	2201      	movs	r2, #1
 800f30e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f310:	e041      	b.n	800f396 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800f312:	4b25      	ldr	r3, [pc, #148]	; (800f3a8 <vTaskSwitchContext+0xac>)
 800f314:	2200      	movs	r2, #0
 800f316:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f318:	4b24      	ldr	r3, [pc, #144]	; (800f3ac <vTaskSwitchContext+0xb0>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	60fb      	str	r3, [r7, #12]
 800f31e:	e010      	b.n	800f342 <vTaskSwitchContext+0x46>
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d10a      	bne.n	800f33c <vTaskSwitchContext+0x40>
	__asm volatile
 800f326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32a:	f383 8811 	msr	BASEPRI, r3
 800f32e:	f3bf 8f6f 	isb	sy
 800f332:	f3bf 8f4f 	dsb	sy
 800f336:	607b      	str	r3, [r7, #4]
}
 800f338:	bf00      	nop
 800f33a:	e7fe      	b.n	800f33a <vTaskSwitchContext+0x3e>
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	3b01      	subs	r3, #1
 800f340:	60fb      	str	r3, [r7, #12]
 800f342:	491b      	ldr	r1, [pc, #108]	; (800f3b0 <vTaskSwitchContext+0xb4>)
 800f344:	68fa      	ldr	r2, [r7, #12]
 800f346:	4613      	mov	r3, r2
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	4413      	add	r3, r2
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	440b      	add	r3, r1
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d0e4      	beq.n	800f320 <vTaskSwitchContext+0x24>
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	4613      	mov	r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	4413      	add	r3, r2
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	4a13      	ldr	r2, [pc, #76]	; (800f3b0 <vTaskSwitchContext+0xb4>)
 800f362:	4413      	add	r3, r2
 800f364:	60bb      	str	r3, [r7, #8]
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	685a      	ldr	r2, [r3, #4]
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	605a      	str	r2, [r3, #4]
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	685a      	ldr	r2, [r3, #4]
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	3308      	adds	r3, #8
 800f378:	429a      	cmp	r2, r3
 800f37a:	d104      	bne.n	800f386 <vTaskSwitchContext+0x8a>
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	685a      	ldr	r2, [r3, #4]
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	605a      	str	r2, [r3, #4]
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	4a09      	ldr	r2, [pc, #36]	; (800f3b4 <vTaskSwitchContext+0xb8>)
 800f38e:	6013      	str	r3, [r2, #0]
 800f390:	4a06      	ldr	r2, [pc, #24]	; (800f3ac <vTaskSwitchContext+0xb0>)
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6013      	str	r3, [r2, #0]
}
 800f396:	bf00      	nop
 800f398:	3714      	adds	r7, #20
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	20000da8 	.word	0x20000da8
 800f3a8:	20000d94 	.word	0x20000d94
 800f3ac:	20000d88 	.word	0x20000d88
 800f3b0:	200008b0 	.word	0x200008b0
 800f3b4:	200008ac 	.word	0x200008ac

0800f3b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d10a      	bne.n	800f3de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3cc:	f383 8811 	msr	BASEPRI, r3
 800f3d0:	f3bf 8f6f 	isb	sy
 800f3d4:	f3bf 8f4f 	dsb	sy
 800f3d8:	60fb      	str	r3, [r7, #12]
}
 800f3da:	bf00      	nop
 800f3dc:	e7fe      	b.n	800f3dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3de:	4b07      	ldr	r3, [pc, #28]	; (800f3fc <vTaskPlaceOnEventList+0x44>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	3318      	adds	r3, #24
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7fe fdbb 	bl	800df62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3ec:	2101      	movs	r1, #1
 800f3ee:	6838      	ldr	r0, [r7, #0]
 800f3f0:	f000 fa7c 	bl	800f8ec <prvAddCurrentTaskToDelayedList>
}
 800f3f4:	bf00      	nop
 800f3f6:	3710      	adds	r7, #16
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	200008ac 	.word	0x200008ac

0800f400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f400:	b580      	push	{r7, lr}
 800f402:	b086      	sub	sp, #24
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d10a      	bne.n	800f428 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f416:	f383 8811 	msr	BASEPRI, r3
 800f41a:	f3bf 8f6f 	isb	sy
 800f41e:	f3bf 8f4f 	dsb	sy
 800f422:	617b      	str	r3, [r7, #20]
}
 800f424:	bf00      	nop
 800f426:	e7fe      	b.n	800f426 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f428:	4b0a      	ldr	r3, [pc, #40]	; (800f454 <vTaskPlaceOnEventListRestricted+0x54>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	3318      	adds	r3, #24
 800f42e:	4619      	mov	r1, r3
 800f430:	68f8      	ldr	r0, [r7, #12]
 800f432:	f7fe fd72 	bl	800df1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d002      	beq.n	800f442 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f43c:	f04f 33ff 	mov.w	r3, #4294967295
 800f440:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f442:	6879      	ldr	r1, [r7, #4]
 800f444:	68b8      	ldr	r0, [r7, #8]
 800f446:	f000 fa51 	bl	800f8ec <prvAddCurrentTaskToDelayedList>
	}
 800f44a:	bf00      	nop
 800f44c:	3718      	adds	r7, #24
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	200008ac 	.word	0x200008ac

0800f458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b086      	sub	sp, #24
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d10a      	bne.n	800f484 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f472:	f383 8811 	msr	BASEPRI, r3
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	60fb      	str	r3, [r7, #12]
}
 800f480:	bf00      	nop
 800f482:	e7fe      	b.n	800f482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	3318      	adds	r3, #24
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fe fda3 	bl	800dfd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f48e:	4b1e      	ldr	r3, [pc, #120]	; (800f508 <xTaskRemoveFromEventList+0xb0>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d11d      	bne.n	800f4d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	3304      	adds	r3, #4
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fe fd9a 	bl	800dfd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4a4:	4b19      	ldr	r3, [pc, #100]	; (800f50c <xTaskRemoveFromEventList+0xb4>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d903      	bls.n	800f4b4 <xTaskRemoveFromEventList+0x5c>
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b0:	4a16      	ldr	r2, [pc, #88]	; (800f50c <xTaskRemoveFromEventList+0xb4>)
 800f4b2:	6013      	str	r3, [r2, #0]
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4b8:	4613      	mov	r3, r2
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	4413      	add	r3, r2
 800f4be:	009b      	lsls	r3, r3, #2
 800f4c0:	4a13      	ldr	r2, [pc, #76]	; (800f510 <xTaskRemoveFromEventList+0xb8>)
 800f4c2:	441a      	add	r2, r3
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	3304      	adds	r3, #4
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	4610      	mov	r0, r2
 800f4cc:	f7fe fd25 	bl	800df1a <vListInsertEnd>
 800f4d0:	e005      	b.n	800f4de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	3318      	adds	r3, #24
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	480e      	ldr	r0, [pc, #56]	; (800f514 <xTaskRemoveFromEventList+0xbc>)
 800f4da:	f7fe fd1e 	bl	800df1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4e2:	4b0d      	ldr	r3, [pc, #52]	; (800f518 <xTaskRemoveFromEventList+0xc0>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d905      	bls.n	800f4f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4f0:	4b0a      	ldr	r3, [pc, #40]	; (800f51c <xTaskRemoveFromEventList+0xc4>)
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	601a      	str	r2, [r3, #0]
 800f4f6:	e001      	b.n	800f4fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f4fc:	697b      	ldr	r3, [r7, #20]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3718      	adds	r7, #24
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	20000da8 	.word	0x20000da8
 800f50c:	20000d88 	.word	0x20000d88
 800f510:	200008b0 	.word	0x200008b0
 800f514:	20000d40 	.word	0x20000d40
 800f518:	200008ac 	.word	0x200008ac
 800f51c:	20000d94 	.word	0x20000d94

0800f520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f528:	4b06      	ldr	r3, [pc, #24]	; (800f544 <vTaskInternalSetTimeOutState+0x24>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f530:	4b05      	ldr	r3, [pc, #20]	; (800f548 <vTaskInternalSetTimeOutState+0x28>)
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	605a      	str	r2, [r3, #4]
}
 800f538:	bf00      	nop
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr
 800f544:	20000d98 	.word	0x20000d98
 800f548:	20000d84 	.word	0x20000d84

0800f54c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b088      	sub	sp, #32
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d10a      	bne.n	800f572 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	613b      	str	r3, [r7, #16]
}
 800f56e:	bf00      	nop
 800f570:	e7fe      	b.n	800f570 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d10a      	bne.n	800f58e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f57c:	f383 8811 	msr	BASEPRI, r3
 800f580:	f3bf 8f6f 	isb	sy
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	60fb      	str	r3, [r7, #12]
}
 800f58a:	bf00      	nop
 800f58c:	e7fe      	b.n	800f58c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f58e:	f000 fe79 	bl	8010284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f592:	4b1d      	ldr	r3, [pc, #116]	; (800f608 <xTaskCheckForTimeOut+0xbc>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	69ba      	ldr	r2, [r7, #24]
 800f59e:	1ad3      	subs	r3, r2, r3
 800f5a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5aa:	d102      	bne.n	800f5b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	61fb      	str	r3, [r7, #28]
 800f5b0:	e023      	b.n	800f5fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	4b15      	ldr	r3, [pc, #84]	; (800f60c <xTaskCheckForTimeOut+0xc0>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d007      	beq.n	800f5ce <xTaskCheckForTimeOut+0x82>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	69ba      	ldr	r2, [r7, #24]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d302      	bcc.n	800f5ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	61fb      	str	r3, [r7, #28]
 800f5cc:	e015      	b.n	800f5fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	697a      	ldr	r2, [r7, #20]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d20b      	bcs.n	800f5f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	1ad2      	subs	r2, r2, r3
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7ff ff9b 	bl	800f520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	61fb      	str	r3, [r7, #28]
 800f5ee:	e004      	b.n	800f5fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f5fa:	f000 fe73 	bl	80102e4 <vPortExitCritical>

	return xReturn;
 800f5fe:	69fb      	ldr	r3, [r7, #28]
}
 800f600:	4618      	mov	r0, r3
 800f602:	3720      	adds	r7, #32
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	20000d84 	.word	0x20000d84
 800f60c:	20000d98 	.word	0x20000d98

0800f610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f610:	b480      	push	{r7}
 800f612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f614:	4b03      	ldr	r3, [pc, #12]	; (800f624 <vTaskMissedYield+0x14>)
 800f616:	2201      	movs	r2, #1
 800f618:	601a      	str	r2, [r3, #0]
}
 800f61a:	bf00      	nop
 800f61c:	46bd      	mov	sp, r7
 800f61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f622:	4770      	bx	lr
 800f624:	20000d94 	.word	0x20000d94

0800f628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f630:	f000 f852 	bl	800f6d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f634:	4b06      	ldr	r3, [pc, #24]	; (800f650 <prvIdleTask+0x28>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d9f9      	bls.n	800f630 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f63c:	4b05      	ldr	r3, [pc, #20]	; (800f654 <prvIdleTask+0x2c>)
 800f63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f642:	601a      	str	r2, [r3, #0]
 800f644:	f3bf 8f4f 	dsb	sy
 800f648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f64c:	e7f0      	b.n	800f630 <prvIdleTask+0x8>
 800f64e:	bf00      	nop
 800f650:	200008b0 	.word	0x200008b0
 800f654:	e000ed04 	.word	0xe000ed04

0800f658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f65e:	2300      	movs	r3, #0
 800f660:	607b      	str	r3, [r7, #4]
 800f662:	e00c      	b.n	800f67e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	4613      	mov	r3, r2
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	4413      	add	r3, r2
 800f66c:	009b      	lsls	r3, r3, #2
 800f66e:	4a12      	ldr	r2, [pc, #72]	; (800f6b8 <prvInitialiseTaskLists+0x60>)
 800f670:	4413      	add	r3, r2
 800f672:	4618      	mov	r0, r3
 800f674:	f7fe fc24 	bl	800dec0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	3301      	adds	r3, #1
 800f67c:	607b      	str	r3, [r7, #4]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2b37      	cmp	r3, #55	; 0x37
 800f682:	d9ef      	bls.n	800f664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f684:	480d      	ldr	r0, [pc, #52]	; (800f6bc <prvInitialiseTaskLists+0x64>)
 800f686:	f7fe fc1b 	bl	800dec0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f68a:	480d      	ldr	r0, [pc, #52]	; (800f6c0 <prvInitialiseTaskLists+0x68>)
 800f68c:	f7fe fc18 	bl	800dec0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f690:	480c      	ldr	r0, [pc, #48]	; (800f6c4 <prvInitialiseTaskLists+0x6c>)
 800f692:	f7fe fc15 	bl	800dec0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f696:	480c      	ldr	r0, [pc, #48]	; (800f6c8 <prvInitialiseTaskLists+0x70>)
 800f698:	f7fe fc12 	bl	800dec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f69c:	480b      	ldr	r0, [pc, #44]	; (800f6cc <prvInitialiseTaskLists+0x74>)
 800f69e:	f7fe fc0f 	bl	800dec0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6a2:	4b0b      	ldr	r3, [pc, #44]	; (800f6d0 <prvInitialiseTaskLists+0x78>)
 800f6a4:	4a05      	ldr	r2, [pc, #20]	; (800f6bc <prvInitialiseTaskLists+0x64>)
 800f6a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6a8:	4b0a      	ldr	r3, [pc, #40]	; (800f6d4 <prvInitialiseTaskLists+0x7c>)
 800f6aa:	4a05      	ldr	r2, [pc, #20]	; (800f6c0 <prvInitialiseTaskLists+0x68>)
 800f6ac:	601a      	str	r2, [r3, #0]
}
 800f6ae:	bf00      	nop
 800f6b0:	3708      	adds	r7, #8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	200008b0 	.word	0x200008b0
 800f6bc:	20000d10 	.word	0x20000d10
 800f6c0:	20000d24 	.word	0x20000d24
 800f6c4:	20000d40 	.word	0x20000d40
 800f6c8:	20000d54 	.word	0x20000d54
 800f6cc:	20000d6c 	.word	0x20000d6c
 800f6d0:	20000d38 	.word	0x20000d38
 800f6d4:	20000d3c 	.word	0x20000d3c

0800f6d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6de:	e019      	b.n	800f714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f6e0:	f000 fdd0 	bl	8010284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6e4:	4b10      	ldr	r3, [pc, #64]	; (800f728 <prvCheckTasksWaitingTermination+0x50>)
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	3304      	adds	r3, #4
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7fe fc6f 	bl	800dfd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f6f6:	4b0d      	ldr	r3, [pc, #52]	; (800f72c <prvCheckTasksWaitingTermination+0x54>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	4a0b      	ldr	r2, [pc, #44]	; (800f72c <prvCheckTasksWaitingTermination+0x54>)
 800f6fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f700:	4b0b      	ldr	r3, [pc, #44]	; (800f730 <prvCheckTasksWaitingTermination+0x58>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	3b01      	subs	r3, #1
 800f706:	4a0a      	ldr	r2, [pc, #40]	; (800f730 <prvCheckTasksWaitingTermination+0x58>)
 800f708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f70a:	f000 fdeb 	bl	80102e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f000 f810 	bl	800f734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f714:	4b06      	ldr	r3, [pc, #24]	; (800f730 <prvCheckTasksWaitingTermination+0x58>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d1e1      	bne.n	800f6e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f71c:	bf00      	nop
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	20000d54 	.word	0x20000d54
 800f72c:	20000d80 	.word	0x20000d80
 800f730:	20000d68 	.word	0x20000d68

0800f734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f742:	2b00      	cmp	r3, #0
 800f744:	d108      	bne.n	800f758 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f74a:	4618      	mov	r0, r3
 800f74c:	f000 ff88 	bl	8010660 <vPortFree>
				vPortFree( pxTCB );
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 ff85 	bl	8010660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f756:	e018      	b.n	800f78a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d103      	bne.n	800f76a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 ff7c 	bl	8010660 <vPortFree>
	}
 800f768:	e00f      	b.n	800f78a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f770:	2b02      	cmp	r3, #2
 800f772:	d00a      	beq.n	800f78a <prvDeleteTCB+0x56>
	__asm volatile
 800f774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f778:	f383 8811 	msr	BASEPRI, r3
 800f77c:	f3bf 8f6f 	isb	sy
 800f780:	f3bf 8f4f 	dsb	sy
 800f784:	60fb      	str	r3, [r7, #12]
}
 800f786:	bf00      	nop
 800f788:	e7fe      	b.n	800f788 <prvDeleteTCB+0x54>
	}
 800f78a:	bf00      	nop
 800f78c:	3710      	adds	r7, #16
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
	...

0800f794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f79a:	4b0c      	ldr	r3, [pc, #48]	; (800f7cc <prvResetNextTaskUnblockTime+0x38>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d104      	bne.n	800f7ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f7a4:	4b0a      	ldr	r3, [pc, #40]	; (800f7d0 <prvResetNextTaskUnblockTime+0x3c>)
 800f7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f7aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f7ac:	e008      	b.n	800f7c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7ae:	4b07      	ldr	r3, [pc, #28]	; (800f7cc <prvResetNextTaskUnblockTime+0x38>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	4a04      	ldr	r2, [pc, #16]	; (800f7d0 <prvResetNextTaskUnblockTime+0x3c>)
 800f7be:	6013      	str	r3, [r2, #0]
}
 800f7c0:	bf00      	nop
 800f7c2:	370c      	adds	r7, #12
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr
 800f7cc:	20000d38 	.word	0x20000d38
 800f7d0:	20000da0 	.word	0x20000da0

0800f7d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7da:	4b0b      	ldr	r3, [pc, #44]	; (800f808 <xTaskGetSchedulerState+0x34>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d102      	bne.n	800f7e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	607b      	str	r3, [r7, #4]
 800f7e6:	e008      	b.n	800f7fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7e8:	4b08      	ldr	r3, [pc, #32]	; (800f80c <xTaskGetSchedulerState+0x38>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d102      	bne.n	800f7f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	607b      	str	r3, [r7, #4]
 800f7f4:	e001      	b.n	800f7fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f7fa:	687b      	ldr	r3, [r7, #4]
	}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	370c      	adds	r7, #12
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	20000d8c 	.word	0x20000d8c
 800f80c:	20000da8 	.word	0x20000da8

0800f810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f810:	b580      	push	{r7, lr}
 800f812:	b086      	sub	sp, #24
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f81c:	2300      	movs	r3, #0
 800f81e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d056      	beq.n	800f8d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f826:	4b2e      	ldr	r3, [pc, #184]	; (800f8e0 <xTaskPriorityDisinherit+0xd0>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	693a      	ldr	r2, [r7, #16]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d00a      	beq.n	800f846 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f834:	f383 8811 	msr	BASEPRI, r3
 800f838:	f3bf 8f6f 	isb	sy
 800f83c:	f3bf 8f4f 	dsb	sy
 800f840:	60fb      	str	r3, [r7, #12]
}
 800f842:	bf00      	nop
 800f844:	e7fe      	b.n	800f844 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d10a      	bne.n	800f864 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f852:	f383 8811 	msr	BASEPRI, r3
 800f856:	f3bf 8f6f 	isb	sy
 800f85a:	f3bf 8f4f 	dsb	sy
 800f85e:	60bb      	str	r3, [r7, #8]
}
 800f860:	bf00      	nop
 800f862:	e7fe      	b.n	800f862 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f868:	1e5a      	subs	r2, r3, #1
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f876:	429a      	cmp	r2, r3
 800f878:	d02c      	beq.n	800f8d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d128      	bne.n	800f8d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	3304      	adds	r3, #4
 800f886:	4618      	mov	r0, r3
 800f888:	f7fe fba4 	bl	800dfd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f898:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f8a0:	693b      	ldr	r3, [r7, #16]
 800f8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a4:	4b0f      	ldr	r3, [pc, #60]	; (800f8e4 <xTaskPriorityDisinherit+0xd4>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d903      	bls.n	800f8b4 <xTaskPriorityDisinherit+0xa4>
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b0:	4a0c      	ldr	r2, [pc, #48]	; (800f8e4 <xTaskPriorityDisinherit+0xd4>)
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b8:	4613      	mov	r3, r2
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4413      	add	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4a09      	ldr	r2, [pc, #36]	; (800f8e8 <xTaskPriorityDisinherit+0xd8>)
 800f8c2:	441a      	add	r2, r3
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	3304      	adds	r3, #4
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	4610      	mov	r0, r2
 800f8cc:	f7fe fb25 	bl	800df1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8d4:	697b      	ldr	r3, [r7, #20]
	}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3718      	adds	r7, #24
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	200008ac 	.word	0x200008ac
 800f8e4:	20000d88 	.word	0x20000d88
 800f8e8:	200008b0 	.word	0x200008b0

0800f8ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f8f6:	4b21      	ldr	r3, [pc, #132]	; (800f97c <prvAddCurrentTaskToDelayedList+0x90>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8fc:	4b20      	ldr	r3, [pc, #128]	; (800f980 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	3304      	adds	r3, #4
 800f902:	4618      	mov	r0, r3
 800f904:	f7fe fb66 	bl	800dfd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f90e:	d10a      	bne.n	800f926 <prvAddCurrentTaskToDelayedList+0x3a>
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d007      	beq.n	800f926 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f916:	4b1a      	ldr	r3, [pc, #104]	; (800f980 <prvAddCurrentTaskToDelayedList+0x94>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	3304      	adds	r3, #4
 800f91c:	4619      	mov	r1, r3
 800f91e:	4819      	ldr	r0, [pc, #100]	; (800f984 <prvAddCurrentTaskToDelayedList+0x98>)
 800f920:	f7fe fafb 	bl	800df1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f924:	e026      	b.n	800f974 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f926:	68fa      	ldr	r2, [r7, #12]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4413      	add	r3, r2
 800f92c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f92e:	4b14      	ldr	r3, [pc, #80]	; (800f980 <prvAddCurrentTaskToDelayedList+0x94>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	68ba      	ldr	r2, [r7, #8]
 800f934:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d209      	bcs.n	800f952 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f93e:	4b12      	ldr	r3, [pc, #72]	; (800f988 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	4b0f      	ldr	r3, [pc, #60]	; (800f980 <prvAddCurrentTaskToDelayedList+0x94>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	3304      	adds	r3, #4
 800f948:	4619      	mov	r1, r3
 800f94a:	4610      	mov	r0, r2
 800f94c:	f7fe fb09 	bl	800df62 <vListInsert>
}
 800f950:	e010      	b.n	800f974 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f952:	4b0e      	ldr	r3, [pc, #56]	; (800f98c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	4b0a      	ldr	r3, [pc, #40]	; (800f980 <prvAddCurrentTaskToDelayedList+0x94>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	3304      	adds	r3, #4
 800f95c:	4619      	mov	r1, r3
 800f95e:	4610      	mov	r0, r2
 800f960:	f7fe faff 	bl	800df62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f964:	4b0a      	ldr	r3, [pc, #40]	; (800f990 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	68ba      	ldr	r2, [r7, #8]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d202      	bcs.n	800f974 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f96e:	4a08      	ldr	r2, [pc, #32]	; (800f990 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	6013      	str	r3, [r2, #0]
}
 800f974:	bf00      	nop
 800f976:	3710      	adds	r7, #16
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	20000d84 	.word	0x20000d84
 800f980:	200008ac 	.word	0x200008ac
 800f984:	20000d6c 	.word	0x20000d6c
 800f988:	20000d3c 	.word	0x20000d3c
 800f98c:	20000d38 	.word	0x20000d38
 800f990:	20000da0 	.word	0x20000da0

0800f994 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b08a      	sub	sp, #40	; 0x28
 800f998:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f99a:	2300      	movs	r3, #0
 800f99c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f99e:	f000 fb07 	bl	800ffb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f9a2:	4b1c      	ldr	r3, [pc, #112]	; (800fa14 <xTimerCreateTimerTask+0x80>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d021      	beq.n	800f9ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f9b2:	1d3a      	adds	r2, r7, #4
 800f9b4:	f107 0108 	add.w	r1, r7, #8
 800f9b8:	f107 030c 	add.w	r3, r7, #12
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7fe fa65 	bl	800de8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f9c2:	6879      	ldr	r1, [r7, #4]
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	68fa      	ldr	r2, [r7, #12]
 800f9c8:	9202      	str	r2, [sp, #8]
 800f9ca:	9301      	str	r3, [sp, #4]
 800f9cc:	2302      	movs	r3, #2
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	460a      	mov	r2, r1
 800f9d4:	4910      	ldr	r1, [pc, #64]	; (800fa18 <xTimerCreateTimerTask+0x84>)
 800f9d6:	4811      	ldr	r0, [pc, #68]	; (800fa1c <xTimerCreateTimerTask+0x88>)
 800f9d8:	f7ff f8cc 	bl	800eb74 <xTaskCreateStatic>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	4a10      	ldr	r2, [pc, #64]	; (800fa20 <xTimerCreateTimerTask+0x8c>)
 800f9e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f9e2:	4b0f      	ldr	r3, [pc, #60]	; (800fa20 <xTimerCreateTimerTask+0x8c>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d001      	beq.n	800f9ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10a      	bne.n	800fa0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	613b      	str	r3, [r7, #16]
}
 800fa06:	bf00      	nop
 800fa08:	e7fe      	b.n	800fa08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fa0a:	697b      	ldr	r3, [r7, #20]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3718      	adds	r7, #24
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	20000ddc 	.word	0x20000ddc
 800fa18:	0801154c 	.word	0x0801154c
 800fa1c:	0800fb59 	.word	0x0800fb59
 800fa20:	20000de0 	.word	0x20000de0

0800fa24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b08a      	sub	sp, #40	; 0x28
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fa32:	2300      	movs	r3, #0
 800fa34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d10a      	bne.n	800fa52 <xTimerGenericCommand+0x2e>
	__asm volatile
 800fa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa40:	f383 8811 	msr	BASEPRI, r3
 800fa44:	f3bf 8f6f 	isb	sy
 800fa48:	f3bf 8f4f 	dsb	sy
 800fa4c:	623b      	str	r3, [r7, #32]
}
 800fa4e:	bf00      	nop
 800fa50:	e7fe      	b.n	800fa50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fa52:	4b1a      	ldr	r3, [pc, #104]	; (800fabc <xTimerGenericCommand+0x98>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d02a      	beq.n	800fab0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	2b05      	cmp	r3, #5
 800fa6a:	dc18      	bgt.n	800fa9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fa6c:	f7ff feb2 	bl	800f7d4 <xTaskGetSchedulerState>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b02      	cmp	r3, #2
 800fa74:	d109      	bne.n	800fa8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fa76:	4b11      	ldr	r3, [pc, #68]	; (800fabc <xTimerGenericCommand+0x98>)
 800fa78:	6818      	ldr	r0, [r3, #0]
 800fa7a:	f107 0110 	add.w	r1, r7, #16
 800fa7e:	2300      	movs	r3, #0
 800fa80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa82:	f7fe fc0f 	bl	800e2a4 <xQueueGenericSend>
 800fa86:	6278      	str	r0, [r7, #36]	; 0x24
 800fa88:	e012      	b.n	800fab0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fa8a:	4b0c      	ldr	r3, [pc, #48]	; (800fabc <xTimerGenericCommand+0x98>)
 800fa8c:	6818      	ldr	r0, [r3, #0]
 800fa8e:	f107 0110 	add.w	r1, r7, #16
 800fa92:	2300      	movs	r3, #0
 800fa94:	2200      	movs	r2, #0
 800fa96:	f7fe fc05 	bl	800e2a4 <xQueueGenericSend>
 800fa9a:	6278      	str	r0, [r7, #36]	; 0x24
 800fa9c:	e008      	b.n	800fab0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa9e:	4b07      	ldr	r3, [pc, #28]	; (800fabc <xTimerGenericCommand+0x98>)
 800faa0:	6818      	ldr	r0, [r3, #0]
 800faa2:	f107 0110 	add.w	r1, r7, #16
 800faa6:	2300      	movs	r3, #0
 800faa8:	683a      	ldr	r2, [r7, #0]
 800faaa:	f7fe fcf9 	bl	800e4a0 <xQueueGenericSendFromISR>
 800faae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3728      	adds	r7, #40	; 0x28
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	20000ddc 	.word	0x20000ddc

0800fac0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b088      	sub	sp, #32
 800fac4:	af02      	add	r7, sp, #8
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faca:	4b22      	ldr	r3, [pc, #136]	; (800fb54 <prvProcessExpiredTimer+0x94>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	68db      	ldr	r3, [r3, #12]
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	3304      	adds	r3, #4
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fe fa7b 	bl	800dfd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fae4:	f003 0304 	and.w	r3, r3, #4
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d022      	beq.n	800fb32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	699a      	ldr	r2, [r3, #24]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	18d1      	adds	r1, r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	683a      	ldr	r2, [r7, #0]
 800faf8:	6978      	ldr	r0, [r7, #20]
 800fafa:	f000 f8d1 	bl	800fca0 <prvInsertTimerInActiveList>
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d01f      	beq.n	800fb44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb04:	2300      	movs	r3, #0
 800fb06:	9300      	str	r3, [sp, #0]
 800fb08:	2300      	movs	r3, #0
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	6978      	ldr	r0, [r7, #20]
 800fb10:	f7ff ff88 	bl	800fa24 <xTimerGenericCommand>
 800fb14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d113      	bne.n	800fb44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	60fb      	str	r3, [r7, #12]
}
 800fb2e:	bf00      	nop
 800fb30:	e7fe      	b.n	800fb30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb38:	f023 0301 	bic.w	r3, r3, #1
 800fb3c:	b2da      	uxtb	r2, r3
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	6a1b      	ldr	r3, [r3, #32]
 800fb48:	6978      	ldr	r0, [r7, #20]
 800fb4a:	4798      	blx	r3
}
 800fb4c:	bf00      	nop
 800fb4e:	3718      	adds	r7, #24
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	20000dd4 	.word	0x20000dd4

0800fb58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb60:	f107 0308 	add.w	r3, r7, #8
 800fb64:	4618      	mov	r0, r3
 800fb66:	f000 f857 	bl	800fc18 <prvGetNextExpireTime>
 800fb6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	4619      	mov	r1, r3
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f000 f803 	bl	800fb7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fb76:	f000 f8d5 	bl	800fd24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb7a:	e7f1      	b.n	800fb60 <prvTimerTask+0x8>

0800fb7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b084      	sub	sp, #16
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fb86:	f7ff fa31 	bl	800efec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fb8a:	f107 0308 	add.w	r3, r7, #8
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f000 f866 	bl	800fc60 <prvSampleTimeNow>
 800fb94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d130      	bne.n	800fbfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d10a      	bne.n	800fbb8 <prvProcessTimerOrBlockTask+0x3c>
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d806      	bhi.n	800fbb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fbaa:	f7ff fa2d 	bl	800f008 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fbae:	68f9      	ldr	r1, [r7, #12]
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f7ff ff85 	bl	800fac0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fbb6:	e024      	b.n	800fc02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d008      	beq.n	800fbd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fbbe:	4b13      	ldr	r3, [pc, #76]	; (800fc0c <prvProcessTimerOrBlockTask+0x90>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d101      	bne.n	800fbcc <prvProcessTimerOrBlockTask+0x50>
 800fbc8:	2301      	movs	r3, #1
 800fbca:	e000      	b.n	800fbce <prvProcessTimerOrBlockTask+0x52>
 800fbcc:	2300      	movs	r3, #0
 800fbce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fbd0:	4b0f      	ldr	r3, [pc, #60]	; (800fc10 <prvProcessTimerOrBlockTask+0x94>)
 800fbd2:	6818      	ldr	r0, [r3, #0]
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	683a      	ldr	r2, [r7, #0]
 800fbdc:	4619      	mov	r1, r3
 800fbde:	f7fe ff95 	bl	800eb0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fbe2:	f7ff fa11 	bl	800f008 <xTaskResumeAll>
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d10a      	bne.n	800fc02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fbec:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <prvProcessTimerOrBlockTask+0x98>)
 800fbee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbf2:	601a      	str	r2, [r3, #0]
 800fbf4:	f3bf 8f4f 	dsb	sy
 800fbf8:	f3bf 8f6f 	isb	sy
}
 800fbfc:	e001      	b.n	800fc02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fbfe:	f7ff fa03 	bl	800f008 <xTaskResumeAll>
}
 800fc02:	bf00      	nop
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	20000dd8 	.word	0x20000dd8
 800fc10:	20000ddc 	.word	0x20000ddc
 800fc14:	e000ed04 	.word	0xe000ed04

0800fc18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fc20:	4b0e      	ldr	r3, [pc, #56]	; (800fc5c <prvGetNextExpireTime+0x44>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d101      	bne.n	800fc2e <prvGetNextExpireTime+0x16>
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	e000      	b.n	800fc30 <prvGetNextExpireTime+0x18>
 800fc2e:	2200      	movs	r2, #0
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d105      	bne.n	800fc48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc3c:	4b07      	ldr	r3, [pc, #28]	; (800fc5c <prvGetNextExpireTime+0x44>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	68db      	ldr	r3, [r3, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	60fb      	str	r3, [r7, #12]
 800fc46:	e001      	b.n	800fc4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3714      	adds	r7, #20
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr
 800fc5a:	bf00      	nop
 800fc5c:	20000dd4 	.word	0x20000dd4

0800fc60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fc68:	f7ff fa6c 	bl	800f144 <xTaskGetTickCount>
 800fc6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fc6e:	4b0b      	ldr	r3, [pc, #44]	; (800fc9c <prvSampleTimeNow+0x3c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d205      	bcs.n	800fc84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fc78:	f000 f936 	bl	800fee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	601a      	str	r2, [r3, #0]
 800fc82:	e002      	b.n	800fc8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fc8a:	4a04      	ldr	r2, [pc, #16]	; (800fc9c <prvSampleTimeNow+0x3c>)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fc90:	68fb      	ldr	r3, [r7, #12]
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3710      	adds	r7, #16
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	20000de4 	.word	0x20000de4

0800fca0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b086      	sub	sp, #24
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
 800fcac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fcbe:	68ba      	ldr	r2, [r7, #8]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d812      	bhi.n	800fcec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	1ad2      	subs	r2, r2, r3
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	699b      	ldr	r3, [r3, #24]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d302      	bcc.n	800fcda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	617b      	str	r3, [r7, #20]
 800fcd8:	e01b      	b.n	800fd12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fcda:	4b10      	ldr	r3, [pc, #64]	; (800fd1c <prvInsertTimerInActiveList+0x7c>)
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	3304      	adds	r3, #4
 800fce2:	4619      	mov	r1, r3
 800fce4:	4610      	mov	r0, r2
 800fce6:	f7fe f93c 	bl	800df62 <vListInsert>
 800fcea:	e012      	b.n	800fd12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fcec:	687a      	ldr	r2, [r7, #4]
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d206      	bcs.n	800fd02 <prvInsertTimerInActiveList+0x62>
 800fcf4:	68ba      	ldr	r2, [r7, #8]
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d302      	bcc.n	800fd02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	617b      	str	r3, [r7, #20]
 800fd00:	e007      	b.n	800fd12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd02:	4b07      	ldr	r3, [pc, #28]	; (800fd20 <prvInsertTimerInActiveList+0x80>)
 800fd04:	681a      	ldr	r2, [r3, #0]
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	3304      	adds	r3, #4
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	4610      	mov	r0, r2
 800fd0e:	f7fe f928 	bl	800df62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fd12:	697b      	ldr	r3, [r7, #20]
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3718      	adds	r7, #24
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	20000dd8 	.word	0x20000dd8
 800fd20:	20000dd4 	.word	0x20000dd4

0800fd24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b08e      	sub	sp, #56	; 0x38
 800fd28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd2a:	e0ca      	b.n	800fec2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	da18      	bge.n	800fd64 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fd32:	1d3b      	adds	r3, r7, #4
 800fd34:	3304      	adds	r3, #4
 800fd36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d10a      	bne.n	800fd54 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	61fb      	str	r3, [r7, #28]
}
 800fd50:	bf00      	nop
 800fd52:	e7fe      	b.n	800fd52 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd5a:	6850      	ldr	r0, [r2, #4]
 800fd5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd5e:	6892      	ldr	r2, [r2, #8]
 800fd60:	4611      	mov	r1, r2
 800fd62:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	f2c0 80aa 	blt.w	800fec0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd72:	695b      	ldr	r3, [r3, #20]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d004      	beq.n	800fd82 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fe f929 	bl	800dfd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd82:	463b      	mov	r3, r7
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7ff ff6b 	bl	800fc60 <prvSampleTimeNow>
 800fd8a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2b09      	cmp	r3, #9
 800fd90:	f200 8097 	bhi.w	800fec2 <prvProcessReceivedCommands+0x19e>
 800fd94:	a201      	add	r2, pc, #4	; (adr r2, 800fd9c <prvProcessReceivedCommands+0x78>)
 800fd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd9a:	bf00      	nop
 800fd9c:	0800fdc5 	.word	0x0800fdc5
 800fda0:	0800fdc5 	.word	0x0800fdc5
 800fda4:	0800fdc5 	.word	0x0800fdc5
 800fda8:	0800fe39 	.word	0x0800fe39
 800fdac:	0800fe4d 	.word	0x0800fe4d
 800fdb0:	0800fe97 	.word	0x0800fe97
 800fdb4:	0800fdc5 	.word	0x0800fdc5
 800fdb8:	0800fdc5 	.word	0x0800fdc5
 800fdbc:	0800fe39 	.word	0x0800fe39
 800fdc0:	0800fe4d 	.word	0x0800fe4d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdca:	f043 0301 	orr.w	r3, r3, #1
 800fdce:	b2da      	uxtb	r2, r3
 800fdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdda:	699b      	ldr	r3, [r3, #24]
 800fddc:	18d1      	adds	r1, r2, r3
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fde2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fde4:	f7ff ff5c 	bl	800fca0 <prvInsertTimerInActiveList>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d069      	beq.n	800fec2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf0:	6a1b      	ldr	r3, [r3, #32]
 800fdf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdfc:	f003 0304 	and.w	r3, r3, #4
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d05e      	beq.n	800fec2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fe04:	68ba      	ldr	r2, [r7, #8]
 800fe06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe08:	699b      	ldr	r3, [r3, #24]
 800fe0a:	441a      	add	r2, r3
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	9300      	str	r3, [sp, #0]
 800fe10:	2300      	movs	r3, #0
 800fe12:	2100      	movs	r1, #0
 800fe14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe16:	f7ff fe05 	bl	800fa24 <xTimerGenericCommand>
 800fe1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fe1c:	6a3b      	ldr	r3, [r7, #32]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d14f      	bne.n	800fec2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fe22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe26:	f383 8811 	msr	BASEPRI, r3
 800fe2a:	f3bf 8f6f 	isb	sy
 800fe2e:	f3bf 8f4f 	dsb	sy
 800fe32:	61bb      	str	r3, [r7, #24]
}
 800fe34:	bf00      	nop
 800fe36:	e7fe      	b.n	800fe36 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe3e:	f023 0301 	bic.w	r3, r3, #1
 800fe42:	b2da      	uxtb	r2, r3
 800fe44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fe4a:	e03a      	b.n	800fec2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe52:	f043 0301 	orr.w	r3, r3, #1
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe5e:	68ba      	ldr	r2, [r7, #8]
 800fe60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe66:	699b      	ldr	r3, [r3, #24]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10a      	bne.n	800fe82 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fe6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe70:	f383 8811 	msr	BASEPRI, r3
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	617b      	str	r3, [r7, #20]
}
 800fe7e:	bf00      	nop
 800fe80:	e7fe      	b.n	800fe80 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe84:	699a      	ldr	r2, [r3, #24]
 800fe86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe88:	18d1      	adds	r1, r2, r3
 800fe8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe90:	f7ff ff06 	bl	800fca0 <prvInsertTimerInActiveList>
					break;
 800fe94:	e015      	b.n	800fec2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe9c:	f003 0302 	and.w	r3, r3, #2
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d103      	bne.n	800feac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fea6:	f000 fbdb 	bl	8010660 <vPortFree>
 800feaa:	e00a      	b.n	800fec2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800feac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800feb2:	f023 0301 	bic.w	r3, r3, #1
 800feb6:	b2da      	uxtb	r2, r3
 800feb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800febe:	e000      	b.n	800fec2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fec0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fec2:	4b08      	ldr	r3, [pc, #32]	; (800fee4 <prvProcessReceivedCommands+0x1c0>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	1d39      	adds	r1, r7, #4
 800fec8:	2200      	movs	r2, #0
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fe fb84 	bl	800e5d8 <xQueueReceive>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	f47f af2a 	bne.w	800fd2c <prvProcessReceivedCommands+0x8>
	}
}
 800fed8:	bf00      	nop
 800feda:	bf00      	nop
 800fedc:	3730      	adds	r7, #48	; 0x30
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	20000ddc 	.word	0x20000ddc

0800fee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b088      	sub	sp, #32
 800feec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800feee:	e048      	b.n	800ff82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fef0:	4b2d      	ldr	r3, [pc, #180]	; (800ffa8 <prvSwitchTimerLists+0xc0>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fefa:	4b2b      	ldr	r3, [pc, #172]	; (800ffa8 <prvSwitchTimerLists+0xc0>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	68db      	ldr	r3, [r3, #12]
 800ff00:	68db      	ldr	r3, [r3, #12]
 800ff02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	3304      	adds	r3, #4
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7fe f863 	bl	800dfd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	6a1b      	ldr	r3, [r3, #32]
 800ff12:	68f8      	ldr	r0, [r7, #12]
 800ff14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff1c:	f003 0304 	and.w	r3, r3, #4
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d02e      	beq.n	800ff82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	699b      	ldr	r3, [r3, #24]
 800ff28:	693a      	ldr	r2, [r7, #16]
 800ff2a:	4413      	add	r3, r2
 800ff2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ff2e:	68ba      	ldr	r2, [r7, #8]
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d90e      	bls.n	800ff54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	68ba      	ldr	r2, [r7, #8]
 800ff3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	68fa      	ldr	r2, [r7, #12]
 800ff40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff42:	4b19      	ldr	r3, [pc, #100]	; (800ffa8 <prvSwitchTimerLists+0xc0>)
 800ff44:	681a      	ldr	r2, [r3, #0]
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	3304      	adds	r3, #4
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	4610      	mov	r0, r2
 800ff4e:	f7fe f808 	bl	800df62 <vListInsert>
 800ff52:	e016      	b.n	800ff82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff54:	2300      	movs	r3, #0
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	2300      	movs	r3, #0
 800ff5a:	693a      	ldr	r2, [r7, #16]
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	f7ff fd60 	bl	800fa24 <xTimerGenericCommand>
 800ff64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d10a      	bne.n	800ff82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	f383 8811 	msr	BASEPRI, r3
 800ff74:	f3bf 8f6f 	isb	sy
 800ff78:	f3bf 8f4f 	dsb	sy
 800ff7c:	603b      	str	r3, [r7, #0]
}
 800ff7e:	bf00      	nop
 800ff80:	e7fe      	b.n	800ff80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff82:	4b09      	ldr	r3, [pc, #36]	; (800ffa8 <prvSwitchTimerLists+0xc0>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1b1      	bne.n	800fef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ff8c:	4b06      	ldr	r3, [pc, #24]	; (800ffa8 <prvSwitchTimerLists+0xc0>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ff92:	4b06      	ldr	r3, [pc, #24]	; (800ffac <prvSwitchTimerLists+0xc4>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	4a04      	ldr	r2, [pc, #16]	; (800ffa8 <prvSwitchTimerLists+0xc0>)
 800ff98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ff9a:	4a04      	ldr	r2, [pc, #16]	; (800ffac <prvSwitchTimerLists+0xc4>)
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	6013      	str	r3, [r2, #0]
}
 800ffa0:	bf00      	nop
 800ffa2:	3718      	adds	r7, #24
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	20000dd4 	.word	0x20000dd4
 800ffac:	20000dd8 	.word	0x20000dd8

0800ffb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ffb6:	f000 f965 	bl	8010284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ffba:	4b15      	ldr	r3, [pc, #84]	; (8010010 <prvCheckForValidListAndQueue+0x60>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d120      	bne.n	8010004 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ffc2:	4814      	ldr	r0, [pc, #80]	; (8010014 <prvCheckForValidListAndQueue+0x64>)
 800ffc4:	f7fd ff7c 	bl	800dec0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ffc8:	4813      	ldr	r0, [pc, #76]	; (8010018 <prvCheckForValidListAndQueue+0x68>)
 800ffca:	f7fd ff79 	bl	800dec0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ffce:	4b13      	ldr	r3, [pc, #76]	; (801001c <prvCheckForValidListAndQueue+0x6c>)
 800ffd0:	4a10      	ldr	r2, [pc, #64]	; (8010014 <prvCheckForValidListAndQueue+0x64>)
 800ffd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ffd4:	4b12      	ldr	r3, [pc, #72]	; (8010020 <prvCheckForValidListAndQueue+0x70>)
 800ffd6:	4a10      	ldr	r2, [pc, #64]	; (8010018 <prvCheckForValidListAndQueue+0x68>)
 800ffd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ffda:	2300      	movs	r3, #0
 800ffdc:	9300      	str	r3, [sp, #0]
 800ffde:	4b11      	ldr	r3, [pc, #68]	; (8010024 <prvCheckForValidListAndQueue+0x74>)
 800ffe0:	4a11      	ldr	r2, [pc, #68]	; (8010028 <prvCheckForValidListAndQueue+0x78>)
 800ffe2:	2110      	movs	r1, #16
 800ffe4:	200a      	movs	r0, #10
 800ffe6:	f7fe f887 	bl	800e0f8 <xQueueGenericCreateStatic>
 800ffea:	4603      	mov	r3, r0
 800ffec:	4a08      	ldr	r2, [pc, #32]	; (8010010 <prvCheckForValidListAndQueue+0x60>)
 800ffee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fff0:	4b07      	ldr	r3, [pc, #28]	; (8010010 <prvCheckForValidListAndQueue+0x60>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d005      	beq.n	8010004 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fff8:	4b05      	ldr	r3, [pc, #20]	; (8010010 <prvCheckForValidListAndQueue+0x60>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	490b      	ldr	r1, [pc, #44]	; (801002c <prvCheckForValidListAndQueue+0x7c>)
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fe fd5a 	bl	800eab8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010004:	f000 f96e 	bl	80102e4 <vPortExitCritical>
}
 8010008:	bf00      	nop
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	20000ddc 	.word	0x20000ddc
 8010014:	20000dac 	.word	0x20000dac
 8010018:	20000dc0 	.word	0x20000dc0
 801001c:	20000dd4 	.word	0x20000dd4
 8010020:	20000dd8 	.word	0x20000dd8
 8010024:	20000e88 	.word	0x20000e88
 8010028:	20000de8 	.word	0x20000de8
 801002c:	08011554 	.word	0x08011554

08010030 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010030:	b480      	push	{r7}
 8010032:	b085      	sub	sp, #20
 8010034:	af00      	add	r7, sp, #0
 8010036:	60f8      	str	r0, [r7, #12]
 8010038:	60b9      	str	r1, [r7, #8]
 801003a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	3b04      	subs	r3, #4
 8010040:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	3b04      	subs	r3, #4
 801004e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	f023 0201 	bic.w	r2, r3, #1
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	3b04      	subs	r3, #4
 801005e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010060:	4a0c      	ldr	r2, [pc, #48]	; (8010094 <pxPortInitialiseStack+0x64>)
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	3b14      	subs	r3, #20
 801006a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	3b04      	subs	r3, #4
 8010076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f06f 0202 	mvn.w	r2, #2
 801007e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	3b20      	subs	r3, #32
 8010084:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010086:	68fb      	ldr	r3, [r7, #12]
}
 8010088:	4618      	mov	r0, r3
 801008a:	3714      	adds	r7, #20
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr
 8010094:	08010099 	.word	0x08010099

08010098 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010098:	b480      	push	{r7}
 801009a:	b085      	sub	sp, #20
 801009c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801009e:	2300      	movs	r3, #0
 80100a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80100a2:	4b12      	ldr	r3, [pc, #72]	; (80100ec <prvTaskExitError+0x54>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100aa:	d00a      	beq.n	80100c2 <prvTaskExitError+0x2a>
	__asm volatile
 80100ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b0:	f383 8811 	msr	BASEPRI, r3
 80100b4:	f3bf 8f6f 	isb	sy
 80100b8:	f3bf 8f4f 	dsb	sy
 80100bc:	60fb      	str	r3, [r7, #12]
}
 80100be:	bf00      	nop
 80100c0:	e7fe      	b.n	80100c0 <prvTaskExitError+0x28>
	__asm volatile
 80100c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c6:	f383 8811 	msr	BASEPRI, r3
 80100ca:	f3bf 8f6f 	isb	sy
 80100ce:	f3bf 8f4f 	dsb	sy
 80100d2:	60bb      	str	r3, [r7, #8]
}
 80100d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100d6:	bf00      	nop
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d0fc      	beq.n	80100d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80100de:	bf00      	nop
 80100e0:	bf00      	nop
 80100e2:	3714      	adds	r7, #20
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr
 80100ec:	2000011c 	.word	0x2000011c

080100f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80100f0:	4b07      	ldr	r3, [pc, #28]	; (8010110 <pxCurrentTCBConst2>)
 80100f2:	6819      	ldr	r1, [r3, #0]
 80100f4:	6808      	ldr	r0, [r1, #0]
 80100f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fa:	f380 8809 	msr	PSP, r0
 80100fe:	f3bf 8f6f 	isb	sy
 8010102:	f04f 0000 	mov.w	r0, #0
 8010106:	f380 8811 	msr	BASEPRI, r0
 801010a:	4770      	bx	lr
 801010c:	f3af 8000 	nop.w

08010110 <pxCurrentTCBConst2>:
 8010110:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010114:	bf00      	nop
 8010116:	bf00      	nop

08010118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010118:	4808      	ldr	r0, [pc, #32]	; (801013c <prvPortStartFirstTask+0x24>)
 801011a:	6800      	ldr	r0, [r0, #0]
 801011c:	6800      	ldr	r0, [r0, #0]
 801011e:	f380 8808 	msr	MSP, r0
 8010122:	f04f 0000 	mov.w	r0, #0
 8010126:	f380 8814 	msr	CONTROL, r0
 801012a:	b662      	cpsie	i
 801012c:	b661      	cpsie	f
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	f3bf 8f6f 	isb	sy
 8010136:	df00      	svc	0
 8010138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801013a:	bf00      	nop
 801013c:	e000ed08 	.word	0xe000ed08

08010140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b086      	sub	sp, #24
 8010144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010146:	4b46      	ldr	r3, [pc, #280]	; (8010260 <xPortStartScheduler+0x120>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a46      	ldr	r2, [pc, #280]	; (8010264 <xPortStartScheduler+0x124>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d10a      	bne.n	8010166 <xPortStartScheduler+0x26>
	__asm volatile
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	f383 8811 	msr	BASEPRI, r3
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	613b      	str	r3, [r7, #16]
}
 8010162:	bf00      	nop
 8010164:	e7fe      	b.n	8010164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010166:	4b3e      	ldr	r3, [pc, #248]	; (8010260 <xPortStartScheduler+0x120>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4a3f      	ldr	r2, [pc, #252]	; (8010268 <xPortStartScheduler+0x128>)
 801016c:	4293      	cmp	r3, r2
 801016e:	d10a      	bne.n	8010186 <xPortStartScheduler+0x46>
	__asm volatile
 8010170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010174:	f383 8811 	msr	BASEPRI, r3
 8010178:	f3bf 8f6f 	isb	sy
 801017c:	f3bf 8f4f 	dsb	sy
 8010180:	60fb      	str	r3, [r7, #12]
}
 8010182:	bf00      	nop
 8010184:	e7fe      	b.n	8010184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010186:	4b39      	ldr	r3, [pc, #228]	; (801026c <xPortStartScheduler+0x12c>)
 8010188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	b2db      	uxtb	r3, r3
 8010190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	22ff      	movs	r2, #255	; 0xff
 8010196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	b2db      	uxtb	r3, r3
 801019e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80101a0:	78fb      	ldrb	r3, [r7, #3]
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80101a8:	b2da      	uxtb	r2, r3
 80101aa:	4b31      	ldr	r3, [pc, #196]	; (8010270 <xPortStartScheduler+0x130>)
 80101ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80101ae:	4b31      	ldr	r3, [pc, #196]	; (8010274 <xPortStartScheduler+0x134>)
 80101b0:	2207      	movs	r2, #7
 80101b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101b4:	e009      	b.n	80101ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80101b6:	4b2f      	ldr	r3, [pc, #188]	; (8010274 <xPortStartScheduler+0x134>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3b01      	subs	r3, #1
 80101bc:	4a2d      	ldr	r2, [pc, #180]	; (8010274 <xPortStartScheduler+0x134>)
 80101be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80101c0:	78fb      	ldrb	r3, [r7, #3]
 80101c2:	b2db      	uxtb	r3, r3
 80101c4:	005b      	lsls	r3, r3, #1
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101ca:	78fb      	ldrb	r3, [r7, #3]
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101d2:	2b80      	cmp	r3, #128	; 0x80
 80101d4:	d0ef      	beq.n	80101b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80101d6:	4b27      	ldr	r3, [pc, #156]	; (8010274 <xPortStartScheduler+0x134>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f1c3 0307 	rsb	r3, r3, #7
 80101de:	2b04      	cmp	r3, #4
 80101e0:	d00a      	beq.n	80101f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80101e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e6:	f383 8811 	msr	BASEPRI, r3
 80101ea:	f3bf 8f6f 	isb	sy
 80101ee:	f3bf 8f4f 	dsb	sy
 80101f2:	60bb      	str	r3, [r7, #8]
}
 80101f4:	bf00      	nop
 80101f6:	e7fe      	b.n	80101f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80101f8:	4b1e      	ldr	r3, [pc, #120]	; (8010274 <xPortStartScheduler+0x134>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	021b      	lsls	r3, r3, #8
 80101fe:	4a1d      	ldr	r2, [pc, #116]	; (8010274 <xPortStartScheduler+0x134>)
 8010200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010202:	4b1c      	ldr	r3, [pc, #112]	; (8010274 <xPortStartScheduler+0x134>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801020a:	4a1a      	ldr	r2, [pc, #104]	; (8010274 <xPortStartScheduler+0x134>)
 801020c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	b2da      	uxtb	r2, r3
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010216:	4b18      	ldr	r3, [pc, #96]	; (8010278 <xPortStartScheduler+0x138>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a17      	ldr	r2, [pc, #92]	; (8010278 <xPortStartScheduler+0x138>)
 801021c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010222:	4b15      	ldr	r3, [pc, #84]	; (8010278 <xPortStartScheduler+0x138>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	4a14      	ldr	r2, [pc, #80]	; (8010278 <xPortStartScheduler+0x138>)
 8010228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801022c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801022e:	f000 f8dd 	bl	80103ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010232:	4b12      	ldr	r3, [pc, #72]	; (801027c <xPortStartScheduler+0x13c>)
 8010234:	2200      	movs	r2, #0
 8010236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010238:	f000 f8fc 	bl	8010434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801023c:	4b10      	ldr	r3, [pc, #64]	; (8010280 <xPortStartScheduler+0x140>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a0f      	ldr	r2, [pc, #60]	; (8010280 <xPortStartScheduler+0x140>)
 8010242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010248:	f7ff ff66 	bl	8010118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801024c:	f7ff f856 	bl	800f2fc <vTaskSwitchContext>
	prvTaskExitError();
 8010250:	f7ff ff22 	bl	8010098 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010254:	2300      	movs	r3, #0
}
 8010256:	4618      	mov	r0, r3
 8010258:	3718      	adds	r7, #24
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	e000ed00 	.word	0xe000ed00
 8010264:	410fc271 	.word	0x410fc271
 8010268:	410fc270 	.word	0x410fc270
 801026c:	e000e400 	.word	0xe000e400
 8010270:	20000ed8 	.word	0x20000ed8
 8010274:	20000edc 	.word	0x20000edc
 8010278:	e000ed20 	.word	0xe000ed20
 801027c:	2000011c 	.word	0x2000011c
 8010280:	e000ef34 	.word	0xe000ef34

08010284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
	__asm volatile
 801028a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028e:	f383 8811 	msr	BASEPRI, r3
 8010292:	f3bf 8f6f 	isb	sy
 8010296:	f3bf 8f4f 	dsb	sy
 801029a:	607b      	str	r3, [r7, #4]
}
 801029c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801029e:	4b0f      	ldr	r3, [pc, #60]	; (80102dc <vPortEnterCritical+0x58>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3301      	adds	r3, #1
 80102a4:	4a0d      	ldr	r2, [pc, #52]	; (80102dc <vPortEnterCritical+0x58>)
 80102a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80102a8:	4b0c      	ldr	r3, [pc, #48]	; (80102dc <vPortEnterCritical+0x58>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d10f      	bne.n	80102d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80102b0:	4b0b      	ldr	r3, [pc, #44]	; (80102e0 <vPortEnterCritical+0x5c>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00a      	beq.n	80102d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80102ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	603b      	str	r3, [r7, #0]
}
 80102cc:	bf00      	nop
 80102ce:	e7fe      	b.n	80102ce <vPortEnterCritical+0x4a>
	}
}
 80102d0:	bf00      	nop
 80102d2:	370c      	adds	r7, #12
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr
 80102dc:	2000011c 	.word	0x2000011c
 80102e0:	e000ed04 	.word	0xe000ed04

080102e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80102e4:	b480      	push	{r7}
 80102e6:	b083      	sub	sp, #12
 80102e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80102ea:	4b12      	ldr	r3, [pc, #72]	; (8010334 <vPortExitCritical+0x50>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d10a      	bne.n	8010308 <vPortExitCritical+0x24>
	__asm volatile
 80102f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f6:	f383 8811 	msr	BASEPRI, r3
 80102fa:	f3bf 8f6f 	isb	sy
 80102fe:	f3bf 8f4f 	dsb	sy
 8010302:	607b      	str	r3, [r7, #4]
}
 8010304:	bf00      	nop
 8010306:	e7fe      	b.n	8010306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010308:	4b0a      	ldr	r3, [pc, #40]	; (8010334 <vPortExitCritical+0x50>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	3b01      	subs	r3, #1
 801030e:	4a09      	ldr	r2, [pc, #36]	; (8010334 <vPortExitCritical+0x50>)
 8010310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010312:	4b08      	ldr	r3, [pc, #32]	; (8010334 <vPortExitCritical+0x50>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d105      	bne.n	8010326 <vPortExitCritical+0x42>
 801031a:	2300      	movs	r3, #0
 801031c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	f383 8811 	msr	BASEPRI, r3
}
 8010324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010326:	bf00      	nop
 8010328:	370c      	adds	r7, #12
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop
 8010334:	2000011c 	.word	0x2000011c
	...

08010340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010340:	f3ef 8009 	mrs	r0, PSP
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	4b15      	ldr	r3, [pc, #84]	; (80103a0 <pxCurrentTCBConst>)
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	f01e 0f10 	tst.w	lr, #16
 8010350:	bf08      	it	eq
 8010352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801035a:	6010      	str	r0, [r2, #0]
 801035c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010364:	f380 8811 	msr	BASEPRI, r0
 8010368:	f3bf 8f4f 	dsb	sy
 801036c:	f3bf 8f6f 	isb	sy
 8010370:	f7fe ffc4 	bl	800f2fc <vTaskSwitchContext>
 8010374:	f04f 0000 	mov.w	r0, #0
 8010378:	f380 8811 	msr	BASEPRI, r0
 801037c:	bc09      	pop	{r0, r3}
 801037e:	6819      	ldr	r1, [r3, #0]
 8010380:	6808      	ldr	r0, [r1, #0]
 8010382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010386:	f01e 0f10 	tst.w	lr, #16
 801038a:	bf08      	it	eq
 801038c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010390:	f380 8809 	msr	PSP, r0
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	4770      	bx	lr
 801039a:	bf00      	nop
 801039c:	f3af 8000 	nop.w

080103a0 <pxCurrentTCBConst>:
 80103a0:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80103a4:	bf00      	nop
 80103a6:	bf00      	nop

080103a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
	__asm volatile
 80103ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b2:	f383 8811 	msr	BASEPRI, r3
 80103b6:	f3bf 8f6f 	isb	sy
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	607b      	str	r3, [r7, #4]
}
 80103c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103c2:	f7fe fee1 	bl	800f188 <xTaskIncrementTick>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d003      	beq.n	80103d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103cc:	4b06      	ldr	r3, [pc, #24]	; (80103e8 <xPortSysTickHandler+0x40>)
 80103ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103d2:	601a      	str	r2, [r3, #0]
 80103d4:	2300      	movs	r3, #0
 80103d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	f383 8811 	msr	BASEPRI, r3
}
 80103de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80103e0:	bf00      	nop
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	e000ed04 	.word	0xe000ed04

080103ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80103ec:	b480      	push	{r7}
 80103ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80103f0:	4b0b      	ldr	r3, [pc, #44]	; (8010420 <vPortSetupTimerInterrupt+0x34>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80103f6:	4b0b      	ldr	r3, [pc, #44]	; (8010424 <vPortSetupTimerInterrupt+0x38>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80103fc:	4b0a      	ldr	r3, [pc, #40]	; (8010428 <vPortSetupTimerInterrupt+0x3c>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4a0a      	ldr	r2, [pc, #40]	; (801042c <vPortSetupTimerInterrupt+0x40>)
 8010402:	fba2 2303 	umull	r2, r3, r2, r3
 8010406:	099b      	lsrs	r3, r3, #6
 8010408:	4a09      	ldr	r2, [pc, #36]	; (8010430 <vPortSetupTimerInterrupt+0x44>)
 801040a:	3b01      	subs	r3, #1
 801040c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801040e:	4b04      	ldr	r3, [pc, #16]	; (8010420 <vPortSetupTimerInterrupt+0x34>)
 8010410:	2207      	movs	r2, #7
 8010412:	601a      	str	r2, [r3, #0]
}
 8010414:	bf00      	nop
 8010416:	46bd      	mov	sp, r7
 8010418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop
 8010420:	e000e010 	.word	0xe000e010
 8010424:	e000e018 	.word	0xe000e018
 8010428:	20000000 	.word	0x20000000
 801042c:	10624dd3 	.word	0x10624dd3
 8010430:	e000e014 	.word	0xe000e014

08010434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010444 <vPortEnableVFP+0x10>
 8010438:	6801      	ldr	r1, [r0, #0]
 801043a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801043e:	6001      	str	r1, [r0, #0]
 8010440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010442:	bf00      	nop
 8010444:	e000ed88 	.word	0xe000ed88

08010448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801044e:	f3ef 8305 	mrs	r3, IPSR
 8010452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2b0f      	cmp	r3, #15
 8010458:	d914      	bls.n	8010484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801045a:	4a17      	ldr	r2, [pc, #92]	; (80104b8 <vPortValidateInterruptPriority+0x70>)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	4413      	add	r3, r2
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010464:	4b15      	ldr	r3, [pc, #84]	; (80104bc <vPortValidateInterruptPriority+0x74>)
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	7afa      	ldrb	r2, [r7, #11]
 801046a:	429a      	cmp	r2, r3
 801046c:	d20a      	bcs.n	8010484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801046e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010472:	f383 8811 	msr	BASEPRI, r3
 8010476:	f3bf 8f6f 	isb	sy
 801047a:	f3bf 8f4f 	dsb	sy
 801047e:	607b      	str	r3, [r7, #4]
}
 8010480:	bf00      	nop
 8010482:	e7fe      	b.n	8010482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010484:	4b0e      	ldr	r3, [pc, #56]	; (80104c0 <vPortValidateInterruptPriority+0x78>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801048c:	4b0d      	ldr	r3, [pc, #52]	; (80104c4 <vPortValidateInterruptPriority+0x7c>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	429a      	cmp	r2, r3
 8010492:	d90a      	bls.n	80104aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010498:	f383 8811 	msr	BASEPRI, r3
 801049c:	f3bf 8f6f 	isb	sy
 80104a0:	f3bf 8f4f 	dsb	sy
 80104a4:	603b      	str	r3, [r7, #0]
}
 80104a6:	bf00      	nop
 80104a8:	e7fe      	b.n	80104a8 <vPortValidateInterruptPriority+0x60>
	}
 80104aa:	bf00      	nop
 80104ac:	3714      	adds	r7, #20
 80104ae:	46bd      	mov	sp, r7
 80104b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b4:	4770      	bx	lr
 80104b6:	bf00      	nop
 80104b8:	e000e3f0 	.word	0xe000e3f0
 80104bc:	20000ed8 	.word	0x20000ed8
 80104c0:	e000ed0c 	.word	0xe000ed0c
 80104c4:	20000edc 	.word	0x20000edc

080104c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b08a      	sub	sp, #40	; 0x28
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80104d0:	2300      	movs	r3, #0
 80104d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80104d4:	f7fe fd8a 	bl	800efec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80104d8:	4b5b      	ldr	r3, [pc, #364]	; (8010648 <pvPortMalloc+0x180>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d101      	bne.n	80104e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80104e0:	f000 f920 	bl	8010724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80104e4:	4b59      	ldr	r3, [pc, #356]	; (801064c <pvPortMalloc+0x184>)
 80104e6:	681a      	ldr	r2, [r3, #0]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	4013      	ands	r3, r2
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f040 8093 	bne.w	8010618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d01d      	beq.n	8010534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80104f8:	2208      	movs	r2, #8
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	4413      	add	r3, r2
 80104fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f003 0307 	and.w	r3, r3, #7
 8010506:	2b00      	cmp	r3, #0
 8010508:	d014      	beq.n	8010534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f023 0307 	bic.w	r3, r3, #7
 8010510:	3308      	adds	r3, #8
 8010512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f003 0307 	and.w	r3, r3, #7
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00a      	beq.n	8010534 <pvPortMalloc+0x6c>
	__asm volatile
 801051e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010522:	f383 8811 	msr	BASEPRI, r3
 8010526:	f3bf 8f6f 	isb	sy
 801052a:	f3bf 8f4f 	dsb	sy
 801052e:	617b      	str	r3, [r7, #20]
}
 8010530:	bf00      	nop
 8010532:	e7fe      	b.n	8010532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d06e      	beq.n	8010618 <pvPortMalloc+0x150>
 801053a:	4b45      	ldr	r3, [pc, #276]	; (8010650 <pvPortMalloc+0x188>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	429a      	cmp	r2, r3
 8010542:	d869      	bhi.n	8010618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010544:	4b43      	ldr	r3, [pc, #268]	; (8010654 <pvPortMalloc+0x18c>)
 8010546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010548:	4b42      	ldr	r3, [pc, #264]	; (8010654 <pvPortMalloc+0x18c>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801054e:	e004      	b.n	801055a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801055a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055c:	685b      	ldr	r3, [r3, #4]
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	429a      	cmp	r2, r3
 8010562:	d903      	bls.n	801056c <pvPortMalloc+0xa4>
 8010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d1f1      	bne.n	8010550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801056c:	4b36      	ldr	r3, [pc, #216]	; (8010648 <pvPortMalloc+0x180>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010572:	429a      	cmp	r2, r3
 8010574:	d050      	beq.n	8010618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010576:	6a3b      	ldr	r3, [r7, #32]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2208      	movs	r2, #8
 801057c:	4413      	add	r3, r2
 801057e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	6a3b      	ldr	r3, [r7, #32]
 8010586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058a:	685a      	ldr	r2, [r3, #4]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	1ad2      	subs	r2, r2, r3
 8010590:	2308      	movs	r3, #8
 8010592:	005b      	lsls	r3, r3, #1
 8010594:	429a      	cmp	r2, r3
 8010596:	d91f      	bls.n	80105d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	4413      	add	r3, r2
 801059e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105a0:	69bb      	ldr	r3, [r7, #24]
 80105a2:	f003 0307 	and.w	r3, r3, #7
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00a      	beq.n	80105c0 <pvPortMalloc+0xf8>
	__asm volatile
 80105aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ae:	f383 8811 	msr	BASEPRI, r3
 80105b2:	f3bf 8f6f 	isb	sy
 80105b6:	f3bf 8f4f 	dsb	sy
 80105ba:	613b      	str	r3, [r7, #16]
}
 80105bc:	bf00      	nop
 80105be:	e7fe      	b.n	80105be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80105c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c2:	685a      	ldr	r2, [r3, #4]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	1ad2      	subs	r2, r2, r3
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ce:	687a      	ldr	r2, [r7, #4]
 80105d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80105d2:	69b8      	ldr	r0, [r7, #24]
 80105d4:	f000 f908 	bl	80107e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80105d8:	4b1d      	ldr	r3, [pc, #116]	; (8010650 <pvPortMalloc+0x188>)
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	4a1b      	ldr	r2, [pc, #108]	; (8010650 <pvPortMalloc+0x188>)
 80105e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80105e6:	4b1a      	ldr	r3, [pc, #104]	; (8010650 <pvPortMalloc+0x188>)
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	4b1b      	ldr	r3, [pc, #108]	; (8010658 <pvPortMalloc+0x190>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d203      	bcs.n	80105fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80105f2:	4b17      	ldr	r3, [pc, #92]	; (8010650 <pvPortMalloc+0x188>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	4a18      	ldr	r2, [pc, #96]	; (8010658 <pvPortMalloc+0x190>)
 80105f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80105fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105fc:	685a      	ldr	r2, [r3, #4]
 80105fe:	4b13      	ldr	r3, [pc, #76]	; (801064c <pvPortMalloc+0x184>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	431a      	orrs	r2, r3
 8010604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060a:	2200      	movs	r2, #0
 801060c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801060e:	4b13      	ldr	r3, [pc, #76]	; (801065c <pvPortMalloc+0x194>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3301      	adds	r3, #1
 8010614:	4a11      	ldr	r2, [pc, #68]	; (801065c <pvPortMalloc+0x194>)
 8010616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010618:	f7fe fcf6 	bl	800f008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	f003 0307 	and.w	r3, r3, #7
 8010622:	2b00      	cmp	r3, #0
 8010624:	d00a      	beq.n	801063c <pvPortMalloc+0x174>
	__asm volatile
 8010626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062a:	f383 8811 	msr	BASEPRI, r3
 801062e:	f3bf 8f6f 	isb	sy
 8010632:	f3bf 8f4f 	dsb	sy
 8010636:	60fb      	str	r3, [r7, #12]
}
 8010638:	bf00      	nop
 801063a:	e7fe      	b.n	801063a <pvPortMalloc+0x172>
	return pvReturn;
 801063c:	69fb      	ldr	r3, [r7, #28]
}
 801063e:	4618      	mov	r0, r3
 8010640:	3728      	adds	r7, #40	; 0x28
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	20001aa0 	.word	0x20001aa0
 801064c:	20001ab4 	.word	0x20001ab4
 8010650:	20001aa4 	.word	0x20001aa4
 8010654:	20001a98 	.word	0x20001a98
 8010658:	20001aa8 	.word	0x20001aa8
 801065c:	20001aac 	.word	0x20001aac

08010660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b086      	sub	sp, #24
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d04d      	beq.n	801070e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010672:	2308      	movs	r3, #8
 8010674:	425b      	negs	r3, r3
 8010676:	697a      	ldr	r2, [r7, #20]
 8010678:	4413      	add	r3, r2
 801067a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	685a      	ldr	r2, [r3, #4]
 8010684:	4b24      	ldr	r3, [pc, #144]	; (8010718 <vPortFree+0xb8>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4013      	ands	r3, r2
 801068a:	2b00      	cmp	r3, #0
 801068c:	d10a      	bne.n	80106a4 <vPortFree+0x44>
	__asm volatile
 801068e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010692:	f383 8811 	msr	BASEPRI, r3
 8010696:	f3bf 8f6f 	isb	sy
 801069a:	f3bf 8f4f 	dsb	sy
 801069e:	60fb      	str	r3, [r7, #12]
}
 80106a0:	bf00      	nop
 80106a2:	e7fe      	b.n	80106a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d00a      	beq.n	80106c2 <vPortFree+0x62>
	__asm volatile
 80106ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b0:	f383 8811 	msr	BASEPRI, r3
 80106b4:	f3bf 8f6f 	isb	sy
 80106b8:	f3bf 8f4f 	dsb	sy
 80106bc:	60bb      	str	r3, [r7, #8]
}
 80106be:	bf00      	nop
 80106c0:	e7fe      	b.n	80106c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	685a      	ldr	r2, [r3, #4]
 80106c6:	4b14      	ldr	r3, [pc, #80]	; (8010718 <vPortFree+0xb8>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4013      	ands	r3, r2
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01e      	beq.n	801070e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d11a      	bne.n	801070e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	685a      	ldr	r2, [r3, #4]
 80106dc:	4b0e      	ldr	r3, [pc, #56]	; (8010718 <vPortFree+0xb8>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	43db      	mvns	r3, r3
 80106e2:	401a      	ands	r2, r3
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80106e8:	f7fe fc80 	bl	800efec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	685a      	ldr	r2, [r3, #4]
 80106f0:	4b0a      	ldr	r3, [pc, #40]	; (801071c <vPortFree+0xbc>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4413      	add	r3, r2
 80106f6:	4a09      	ldr	r2, [pc, #36]	; (801071c <vPortFree+0xbc>)
 80106f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106fa:	6938      	ldr	r0, [r7, #16]
 80106fc:	f000 f874 	bl	80107e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010700:	4b07      	ldr	r3, [pc, #28]	; (8010720 <vPortFree+0xc0>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	3301      	adds	r3, #1
 8010706:	4a06      	ldr	r2, [pc, #24]	; (8010720 <vPortFree+0xc0>)
 8010708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801070a:	f7fe fc7d 	bl	800f008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801070e:	bf00      	nop
 8010710:	3718      	adds	r7, #24
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	20001ab4 	.word	0x20001ab4
 801071c:	20001aa4 	.word	0x20001aa4
 8010720:	20001ab0 	.word	0x20001ab0

08010724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010724:	b480      	push	{r7}
 8010726:	b085      	sub	sp, #20
 8010728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801072a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801072e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010730:	4b27      	ldr	r3, [pc, #156]	; (80107d0 <prvHeapInit+0xac>)
 8010732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f003 0307 	and.w	r3, r3, #7
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00c      	beq.n	8010758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	3307      	adds	r3, #7
 8010742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f023 0307 	bic.w	r3, r3, #7
 801074a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	4a1f      	ldr	r2, [pc, #124]	; (80107d0 <prvHeapInit+0xac>)
 8010754:	4413      	add	r3, r2
 8010756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801075c:	4a1d      	ldr	r2, [pc, #116]	; (80107d4 <prvHeapInit+0xb0>)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010762:	4b1c      	ldr	r3, [pc, #112]	; (80107d4 <prvHeapInit+0xb0>)
 8010764:	2200      	movs	r2, #0
 8010766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	68ba      	ldr	r2, [r7, #8]
 801076c:	4413      	add	r3, r2
 801076e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010770:	2208      	movs	r2, #8
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	1a9b      	subs	r3, r3, r2
 8010776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f023 0307 	bic.w	r3, r3, #7
 801077e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	4a15      	ldr	r2, [pc, #84]	; (80107d8 <prvHeapInit+0xb4>)
 8010784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010786:	4b14      	ldr	r3, [pc, #80]	; (80107d8 <prvHeapInit+0xb4>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	2200      	movs	r2, #0
 801078c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801078e:	4b12      	ldr	r3, [pc, #72]	; (80107d8 <prvHeapInit+0xb4>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	2200      	movs	r2, #0
 8010794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	68fa      	ldr	r2, [r7, #12]
 801079e:	1ad2      	subs	r2, r2, r3
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80107a4:	4b0c      	ldr	r3, [pc, #48]	; (80107d8 <prvHeapInit+0xb4>)
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	685b      	ldr	r3, [r3, #4]
 80107b0:	4a0a      	ldr	r2, [pc, #40]	; (80107dc <prvHeapInit+0xb8>)
 80107b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	4a09      	ldr	r2, [pc, #36]	; (80107e0 <prvHeapInit+0xbc>)
 80107ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80107bc:	4b09      	ldr	r3, [pc, #36]	; (80107e4 <prvHeapInit+0xc0>)
 80107be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80107c2:	601a      	str	r2, [r3, #0]
}
 80107c4:	bf00      	nop
 80107c6:	3714      	adds	r7, #20
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr
 80107d0:	20000ee0 	.word	0x20000ee0
 80107d4:	20001a98 	.word	0x20001a98
 80107d8:	20001aa0 	.word	0x20001aa0
 80107dc:	20001aa8 	.word	0x20001aa8
 80107e0:	20001aa4 	.word	0x20001aa4
 80107e4:	20001ab4 	.word	0x20001ab4

080107e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80107e8:	b480      	push	{r7}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107f0:	4b28      	ldr	r3, [pc, #160]	; (8010894 <prvInsertBlockIntoFreeList+0xac>)
 80107f2:	60fb      	str	r3, [r7, #12]
 80107f4:	e002      	b.n	80107fc <prvInsertBlockIntoFreeList+0x14>
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	60fb      	str	r3, [r7, #12]
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	429a      	cmp	r2, r3
 8010804:	d8f7      	bhi.n	80107f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	68ba      	ldr	r2, [r7, #8]
 8010810:	4413      	add	r3, r2
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	429a      	cmp	r2, r3
 8010816:	d108      	bne.n	801082a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	685a      	ldr	r2, [r3, #4]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	685b      	ldr	r3, [r3, #4]
 8010820:	441a      	add	r2, r3
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	68ba      	ldr	r2, [r7, #8]
 8010834:	441a      	add	r2, r3
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	429a      	cmp	r2, r3
 801083c:	d118      	bne.n	8010870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	4b15      	ldr	r3, [pc, #84]	; (8010898 <prvInsertBlockIntoFreeList+0xb0>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	429a      	cmp	r2, r3
 8010848:	d00d      	beq.n	8010866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	685a      	ldr	r2, [r3, #4]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	685b      	ldr	r3, [r3, #4]
 8010854:	441a      	add	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	601a      	str	r2, [r3, #0]
 8010864:	e008      	b.n	8010878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010866:	4b0c      	ldr	r3, [pc, #48]	; (8010898 <prvInsertBlockIntoFreeList+0xb0>)
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	601a      	str	r2, [r3, #0]
 801086e:	e003      	b.n	8010878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	429a      	cmp	r2, r3
 801087e:	d002      	beq.n	8010886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010886:	bf00      	nop
 8010888:	3714      	adds	r7, #20
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr
 8010892:	bf00      	nop
 8010894:	20001a98 	.word	0x20001a98
 8010898:	20001aa0 	.word	0x20001aa0

0801089c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80108a0:	2200      	movs	r2, #0
 80108a2:	4912      	ldr	r1, [pc, #72]	; (80108ec <MX_USB_DEVICE_Init+0x50>)
 80108a4:	4812      	ldr	r0, [pc, #72]	; (80108f0 <MX_USB_DEVICE_Init+0x54>)
 80108a6:	f7fb fe43 	bl	800c530 <USBD_Init>
 80108aa:	4603      	mov	r3, r0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d001      	beq.n	80108b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80108b0:	f7f0 fa78 	bl	8000da4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80108b4:	490f      	ldr	r1, [pc, #60]	; (80108f4 <MX_USB_DEVICE_Init+0x58>)
 80108b6:	480e      	ldr	r0, [pc, #56]	; (80108f0 <MX_USB_DEVICE_Init+0x54>)
 80108b8:	f7fb fe6a 	bl	800c590 <USBD_RegisterClass>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d001      	beq.n	80108c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80108c2:	f7f0 fa6f 	bl	8000da4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80108c6:	490c      	ldr	r1, [pc, #48]	; (80108f8 <MX_USB_DEVICE_Init+0x5c>)
 80108c8:	4809      	ldr	r0, [pc, #36]	; (80108f0 <MX_USB_DEVICE_Init+0x54>)
 80108ca:	f7fb fdbb 	bl	800c444 <USBD_CDC_RegisterInterface>
 80108ce:	4603      	mov	r3, r0
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d001      	beq.n	80108d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80108d4:	f7f0 fa66 	bl	8000da4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80108d8:	4805      	ldr	r0, [pc, #20]	; (80108f0 <MX_USB_DEVICE_Init+0x54>)
 80108da:	f7fb fe80 	bl	800c5de <USBD_Start>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d001      	beq.n	80108e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80108e4:	f7f0 fa5e 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80108e8:	bf00      	nop
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	20000134 	.word	0x20000134
 80108f0:	2000267c 	.word	0x2000267c
 80108f4:	20000018 	.word	0x20000018
 80108f8:	20000120 	.word	0x20000120

080108fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010900:	2200      	movs	r2, #0
 8010902:	4905      	ldr	r1, [pc, #20]	; (8010918 <CDC_Init_FS+0x1c>)
 8010904:	4805      	ldr	r0, [pc, #20]	; (801091c <CDC_Init_FS+0x20>)
 8010906:	f7fb fdb2 	bl	800c46e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801090a:	4905      	ldr	r1, [pc, #20]	; (8010920 <CDC_Init_FS+0x24>)
 801090c:	4803      	ldr	r0, [pc, #12]	; (801091c <CDC_Init_FS+0x20>)
 801090e:	f7fb fdcc 	bl	800c4aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010912:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010914:	4618      	mov	r0, r3
 8010916:	bd80      	pop	{r7, pc}
 8010918:	2000314c 	.word	0x2000314c
 801091c:	2000267c 	.word	0x2000267c
 8010920:	2000294c 	.word	0x2000294c

08010924 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010924:	b480      	push	{r7}
 8010926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010928:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801092a:	4618      	mov	r0, r3
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr

08010934 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010934:	b480      	push	{r7}
 8010936:	b083      	sub	sp, #12
 8010938:	af00      	add	r7, sp, #0
 801093a:	4603      	mov	r3, r0
 801093c:	6039      	str	r1, [r7, #0]
 801093e:	71fb      	strb	r3, [r7, #7]
 8010940:	4613      	mov	r3, r2
 8010942:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010944:	79fb      	ldrb	r3, [r7, #7]
 8010946:	2b23      	cmp	r3, #35	; 0x23
 8010948:	d84a      	bhi.n	80109e0 <CDC_Control_FS+0xac>
 801094a:	a201      	add	r2, pc, #4	; (adr r2, 8010950 <CDC_Control_FS+0x1c>)
 801094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010950:	080109e1 	.word	0x080109e1
 8010954:	080109e1 	.word	0x080109e1
 8010958:	080109e1 	.word	0x080109e1
 801095c:	080109e1 	.word	0x080109e1
 8010960:	080109e1 	.word	0x080109e1
 8010964:	080109e1 	.word	0x080109e1
 8010968:	080109e1 	.word	0x080109e1
 801096c:	080109e1 	.word	0x080109e1
 8010970:	080109e1 	.word	0x080109e1
 8010974:	080109e1 	.word	0x080109e1
 8010978:	080109e1 	.word	0x080109e1
 801097c:	080109e1 	.word	0x080109e1
 8010980:	080109e1 	.word	0x080109e1
 8010984:	080109e1 	.word	0x080109e1
 8010988:	080109e1 	.word	0x080109e1
 801098c:	080109e1 	.word	0x080109e1
 8010990:	080109e1 	.word	0x080109e1
 8010994:	080109e1 	.word	0x080109e1
 8010998:	080109e1 	.word	0x080109e1
 801099c:	080109e1 	.word	0x080109e1
 80109a0:	080109e1 	.word	0x080109e1
 80109a4:	080109e1 	.word	0x080109e1
 80109a8:	080109e1 	.word	0x080109e1
 80109ac:	080109e1 	.word	0x080109e1
 80109b0:	080109e1 	.word	0x080109e1
 80109b4:	080109e1 	.word	0x080109e1
 80109b8:	080109e1 	.word	0x080109e1
 80109bc:	080109e1 	.word	0x080109e1
 80109c0:	080109e1 	.word	0x080109e1
 80109c4:	080109e1 	.word	0x080109e1
 80109c8:	080109e1 	.word	0x080109e1
 80109cc:	080109e1 	.word	0x080109e1
 80109d0:	080109e1 	.word	0x080109e1
 80109d4:	080109e1 	.word	0x080109e1
 80109d8:	080109e1 	.word	0x080109e1
 80109dc:	080109e1 	.word	0x080109e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80109e0:	bf00      	nop
  }

  return (USBD_OK);
 80109e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	370c      	adds	r7, #12
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr

080109f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b082      	sub	sp, #8
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80109fa:	6879      	ldr	r1, [r7, #4]
 80109fc:	4805      	ldr	r0, [pc, #20]	; (8010a14 <CDC_Receive_FS+0x24>)
 80109fe:	f7fb fd54 	bl	800c4aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010a02:	4804      	ldr	r0, [pc, #16]	; (8010a14 <CDC_Receive_FS+0x24>)
 8010a04:	f7fb fd6a 	bl	800c4dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010a08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3708      	adds	r7, #8
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	2000267c 	.word	0x2000267c

08010a18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010a18:	b480      	push	{r7}
 8010a1a:	b087      	sub	sp, #28
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	4613      	mov	r3, r2
 8010a24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010a26:	2300      	movs	r3, #0
 8010a28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	371c      	adds	r7, #28
 8010a32:	46bd      	mov	sp, r7
 8010a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a38:	4770      	bx	lr
	...

08010a3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	4603      	mov	r3, r0
 8010a44:	6039      	str	r1, [r7, #0]
 8010a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	2212      	movs	r2, #18
 8010a4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010a4e:	4b03      	ldr	r3, [pc, #12]	; (8010a5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	370c      	adds	r7, #12
 8010a54:	46bd      	mov	sp, r7
 8010a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5a:	4770      	bx	lr
 8010a5c:	20000154 	.word	0x20000154

08010a60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a60:	b480      	push	{r7}
 8010a62:	b083      	sub	sp, #12
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	4603      	mov	r3, r0
 8010a68:	6039      	str	r1, [r7, #0]
 8010a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	2204      	movs	r2, #4
 8010a70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010a72:	4b03      	ldr	r3, [pc, #12]	; (8010a80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	370c      	adds	r7, #12
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr
 8010a80:	20000174 	.word	0x20000174

08010a84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	6039      	str	r1, [r7, #0]
 8010a8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a90:	79fb      	ldrb	r3, [r7, #7]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d105      	bne.n	8010aa2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010a96:	683a      	ldr	r2, [r7, #0]
 8010a98:	4907      	ldr	r1, [pc, #28]	; (8010ab8 <USBD_FS_ProductStrDescriptor+0x34>)
 8010a9a:	4808      	ldr	r0, [pc, #32]	; (8010abc <USBD_FS_ProductStrDescriptor+0x38>)
 8010a9c:	f7fc fdfb 	bl	800d696 <USBD_GetString>
 8010aa0:	e004      	b.n	8010aac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010aa2:	683a      	ldr	r2, [r7, #0]
 8010aa4:	4904      	ldr	r1, [pc, #16]	; (8010ab8 <USBD_FS_ProductStrDescriptor+0x34>)
 8010aa6:	4805      	ldr	r0, [pc, #20]	; (8010abc <USBD_FS_ProductStrDescriptor+0x38>)
 8010aa8:	f7fc fdf5 	bl	800d696 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010aac:	4b02      	ldr	r3, [pc, #8]	; (8010ab8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3708      	adds	r7, #8
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	2000394c 	.word	0x2000394c
 8010abc:	0801155c 	.word	0x0801155c

08010ac0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	6039      	str	r1, [r7, #0]
 8010aca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010acc:	683a      	ldr	r2, [r7, #0]
 8010ace:	4904      	ldr	r1, [pc, #16]	; (8010ae0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010ad0:	4804      	ldr	r0, [pc, #16]	; (8010ae4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010ad2:	f7fc fde0 	bl	800d696 <USBD_GetString>
  return USBD_StrDesc;
 8010ad6:	4b02      	ldr	r3, [pc, #8]	; (8010ae0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3708      	adds	r7, #8
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	2000394c 	.word	0x2000394c
 8010ae4:	08011574 	.word	0x08011574

08010ae8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	4603      	mov	r3, r0
 8010af0:	6039      	str	r1, [r7, #0]
 8010af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	221a      	movs	r2, #26
 8010af8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010afa:	f000 f855 	bl	8010ba8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010afe:	4b02      	ldr	r3, [pc, #8]	; (8010b08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	20000178 	.word	0x20000178

08010b0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	4603      	mov	r3, r0
 8010b14:	6039      	str	r1, [r7, #0]
 8010b16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010b18:	79fb      	ldrb	r3, [r7, #7]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d105      	bne.n	8010b2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b1e:	683a      	ldr	r2, [r7, #0]
 8010b20:	4907      	ldr	r1, [pc, #28]	; (8010b40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b22:	4808      	ldr	r0, [pc, #32]	; (8010b44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b24:	f7fc fdb7 	bl	800d696 <USBD_GetString>
 8010b28:	e004      	b.n	8010b34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010b2a:	683a      	ldr	r2, [r7, #0]
 8010b2c:	4904      	ldr	r1, [pc, #16]	; (8010b40 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010b2e:	4805      	ldr	r0, [pc, #20]	; (8010b44 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010b30:	f7fc fdb1 	bl	800d696 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b34:	4b02      	ldr	r3, [pc, #8]	; (8010b40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3708      	adds	r7, #8
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}
 8010b3e:	bf00      	nop
 8010b40:	2000394c 	.word	0x2000394c
 8010b44:	08011588 	.word	0x08011588

08010b48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	4603      	mov	r3, r0
 8010b50:	6039      	str	r1, [r7, #0]
 8010b52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b54:	79fb      	ldrb	r3, [r7, #7]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d105      	bne.n	8010b66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b5a:	683a      	ldr	r2, [r7, #0]
 8010b5c:	4907      	ldr	r1, [pc, #28]	; (8010b7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b5e:	4808      	ldr	r0, [pc, #32]	; (8010b80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b60:	f7fc fd99 	bl	800d696 <USBD_GetString>
 8010b64:	e004      	b.n	8010b70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010b66:	683a      	ldr	r2, [r7, #0]
 8010b68:	4904      	ldr	r1, [pc, #16]	; (8010b7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010b6a:	4805      	ldr	r0, [pc, #20]	; (8010b80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010b6c:	f7fc fd93 	bl	800d696 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010b70:	4b02      	ldr	r3, [pc, #8]	; (8010b7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3708      	adds	r7, #8
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	2000394c 	.word	0x2000394c
 8010b80:	08011594 	.word	0x08011594

08010b84 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	6039      	str	r1, [r7, #0]
 8010b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	220c      	movs	r2, #12
 8010b94:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010b96:	4b03      	ldr	r3, [pc, #12]	; (8010ba4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	370c      	adds	r7, #12
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr
 8010ba4:	20000168 	.word	0x20000168

08010ba8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010bae:	4b0f      	ldr	r3, [pc, #60]	; (8010bec <Get_SerialNum+0x44>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010bb4:	4b0e      	ldr	r3, [pc, #56]	; (8010bf0 <Get_SerialNum+0x48>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010bba:	4b0e      	ldr	r3, [pc, #56]	; (8010bf4 <Get_SerialNum+0x4c>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010bc0:	68fa      	ldr	r2, [r7, #12]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d009      	beq.n	8010be2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010bce:	2208      	movs	r2, #8
 8010bd0:	4909      	ldr	r1, [pc, #36]	; (8010bf8 <Get_SerialNum+0x50>)
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f000 f814 	bl	8010c00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010bd8:	2204      	movs	r2, #4
 8010bda:	4908      	ldr	r1, [pc, #32]	; (8010bfc <Get_SerialNum+0x54>)
 8010bdc:	68b8      	ldr	r0, [r7, #8]
 8010bde:	f000 f80f 	bl	8010c00 <IntToUnicode>
  }
}
 8010be2:	bf00      	nop
 8010be4:	3710      	adds	r7, #16
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	1fff7590 	.word	0x1fff7590
 8010bf0:	1fff7594 	.word	0x1fff7594
 8010bf4:	1fff7598 	.word	0x1fff7598
 8010bf8:	2000017a 	.word	0x2000017a
 8010bfc:	2000018a 	.word	0x2000018a

08010c00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b087      	sub	sp, #28
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010c12:	2300      	movs	r3, #0
 8010c14:	75fb      	strb	r3, [r7, #23]
 8010c16:	e027      	b.n	8010c68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	0f1b      	lsrs	r3, r3, #28
 8010c1c:	2b09      	cmp	r3, #9
 8010c1e:	d80b      	bhi.n	8010c38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	0f1b      	lsrs	r3, r3, #28
 8010c24:	b2da      	uxtb	r2, r3
 8010c26:	7dfb      	ldrb	r3, [r7, #23]
 8010c28:	005b      	lsls	r3, r3, #1
 8010c2a:	4619      	mov	r1, r3
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	440b      	add	r3, r1
 8010c30:	3230      	adds	r2, #48	; 0x30
 8010c32:	b2d2      	uxtb	r2, r2
 8010c34:	701a      	strb	r2, [r3, #0]
 8010c36:	e00a      	b.n	8010c4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	0f1b      	lsrs	r3, r3, #28
 8010c3c:	b2da      	uxtb	r2, r3
 8010c3e:	7dfb      	ldrb	r3, [r7, #23]
 8010c40:	005b      	lsls	r3, r3, #1
 8010c42:	4619      	mov	r1, r3
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	440b      	add	r3, r1
 8010c48:	3237      	adds	r2, #55	; 0x37
 8010c4a:	b2d2      	uxtb	r2, r2
 8010c4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	011b      	lsls	r3, r3, #4
 8010c52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010c54:	7dfb      	ldrb	r3, [r7, #23]
 8010c56:	005b      	lsls	r3, r3, #1
 8010c58:	3301      	adds	r3, #1
 8010c5a:	68ba      	ldr	r2, [r7, #8]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	2200      	movs	r2, #0
 8010c60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010c62:	7dfb      	ldrb	r3, [r7, #23]
 8010c64:	3301      	adds	r3, #1
 8010c66:	75fb      	strb	r3, [r7, #23]
 8010c68:	7dfa      	ldrb	r2, [r7, #23]
 8010c6a:	79fb      	ldrb	r3, [r7, #7]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d3d3      	bcc.n	8010c18 <IntToUnicode+0x18>
  }
}
 8010c70:	bf00      	nop
 8010c72:	bf00      	nop
 8010c74:	371c      	adds	r7, #28
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr
	...

08010c80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b08a      	sub	sp, #40	; 0x28
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c88:	f107 0314 	add.w	r3, r7, #20
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	601a      	str	r2, [r3, #0]
 8010c90:	605a      	str	r2, [r3, #4]
 8010c92:	609a      	str	r2, [r3, #8]
 8010c94:	60da      	str	r2, [r3, #12]
 8010c96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010ca0:	d14e      	bne.n	8010d40 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010ca2:	4b29      	ldr	r3, [pc, #164]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ca6:	4a28      	ldr	r2, [pc, #160]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010ca8:	f043 0301 	orr.w	r3, r3, #1
 8010cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010cae:	4b26      	ldr	r3, [pc, #152]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cb2:	f003 0301 	and.w	r3, r3, #1
 8010cb6:	613b      	str	r3, [r7, #16]
 8010cb8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 8010cba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010cc0:	2302      	movs	r3, #2
 8010cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010cc8:	2303      	movs	r3, #3
 8010cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010ccc:	230a      	movs	r3, #10
 8010cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010cd0:	f107 0314 	add.w	r3, r7, #20
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8010cda:	f7f2 f8e9 	bl	8002eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010cde:	4b1a      	ldr	r3, [pc, #104]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ce2:	4a19      	ldr	r2, [pc, #100]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010cea:	4b17      	ldr	r3, [pc, #92]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010cf2:	60fb      	str	r3, [r7, #12]
 8010cf4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010cf6:	4b14      	ldr	r3, [pc, #80]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d114      	bne.n	8010d2c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010d02:	4b11      	ldr	r3, [pc, #68]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d06:	4a10      	ldr	r2, [pc, #64]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8010d0e:	4b0e      	ldr	r3, [pc, #56]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d16:	60bb      	str	r3, [r7, #8]
 8010d18:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8010d1a:	f7f3 fd3f 	bl	800479c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8010d1e:	4b0a      	ldr	r3, [pc, #40]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d22:	4a09      	ldr	r2, [pc, #36]	; (8010d48 <HAL_PCD_MspInit+0xc8>)
 8010d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010d28:	6593      	str	r3, [r2, #88]	; 0x58
 8010d2a:	e001      	b.n	8010d30 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8010d2c:	f7f3 fd36 	bl	800479c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010d30:	2200      	movs	r2, #0
 8010d32:	2105      	movs	r1, #5
 8010d34:	2043      	movs	r0, #67	; 0x43
 8010d36:	f7f1 fcab 	bl	8002690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010d3a:	2043      	movs	r0, #67	; 0x43
 8010d3c:	f7f1 fcc4 	bl	80026c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010d40:	bf00      	nop
 8010d42:	3728      	adds	r7, #40	; 0x28
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	40021000 	.word	0x40021000

08010d4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010d60:	4619      	mov	r1, r3
 8010d62:	4610      	mov	r0, r2
 8010d64:	f7fb fc86 	bl	800c674 <USBD_LL_SetupStage>
}
 8010d68:	bf00      	nop
 8010d6a:	3708      	adds	r7, #8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	460b      	mov	r3, r1
 8010d7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010d82:	78fa      	ldrb	r2, [r7, #3]
 8010d84:	6879      	ldr	r1, [r7, #4]
 8010d86:	4613      	mov	r3, r2
 8010d88:	00db      	lsls	r3, r3, #3
 8010d8a:	1a9b      	subs	r3, r3, r2
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	440b      	add	r3, r1
 8010d90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	78fb      	ldrb	r3, [r7, #3]
 8010d98:	4619      	mov	r1, r3
 8010d9a:	f7fb fcc0 	bl	800c71e <USBD_LL_DataOutStage>
}
 8010d9e:	bf00      	nop
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b082      	sub	sp, #8
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
 8010dae:	460b      	mov	r3, r1
 8010db0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010db8:	78fa      	ldrb	r2, [r7, #3]
 8010dba:	6879      	ldr	r1, [r7, #4]
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	00db      	lsls	r3, r3, #3
 8010dc0:	1a9b      	subs	r3, r3, r2
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	440b      	add	r3, r1
 8010dc6:	3348      	adds	r3, #72	; 0x48
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	78fb      	ldrb	r3, [r7, #3]
 8010dcc:	4619      	mov	r1, r3
 8010dce:	f7fb fd09 	bl	800c7e4 <USBD_LL_DataInStage>
}
 8010dd2:	bf00      	nop
 8010dd4:	3708      	adds	r7, #8
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b082      	sub	sp, #8
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7fb fe1d 	bl	800ca28 <USBD_LL_SOF>
}
 8010dee:	bf00      	nop
 8010df0:	3708      	adds	r7, #8
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}

08010df6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010df6:	b580      	push	{r7, lr}
 8010df8:	b084      	sub	sp, #16
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	2b02      	cmp	r3, #2
 8010e08:	d001      	beq.n	8010e0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010e0a:	f7ef ffcb 	bl	8000da4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e14:	7bfa      	ldrb	r2, [r7, #15]
 8010e16:	4611      	mov	r1, r2
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fb fdc7 	bl	800c9ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7fb fd73 	bl	800c910 <USBD_LL_Reset>
}
 8010e2a:	bf00      	nop
 8010e2c:	3710      	adds	r7, #16
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
	...

08010e34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	6812      	ldr	r2, [r2, #0]
 8010e4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e4e:	f043 0301 	orr.w	r3, r3, #1
 8010e52:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fb fdb6 	bl	800c9cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6a1b      	ldr	r3, [r3, #32]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d005      	beq.n	8010e74 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010e68:	4b04      	ldr	r3, [pc, #16]	; (8010e7c <HAL_PCD_SuspendCallback+0x48>)
 8010e6a:	691b      	ldr	r3, [r3, #16]
 8010e6c:	4a03      	ldr	r2, [pc, #12]	; (8010e7c <HAL_PCD_SuspendCallback+0x48>)
 8010e6e:	f043 0306 	orr.w	r3, r3, #6
 8010e72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010e74:	bf00      	nop
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	e000ed00 	.word	0xe000ed00

08010e80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	687a      	ldr	r2, [r7, #4]
 8010e94:	6812      	ldr	r2, [r2, #0]
 8010e96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010e9a:	f023 0301 	bic.w	r3, r3, #1
 8010e9e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6a1b      	ldr	r3, [r3, #32]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d007      	beq.n	8010eb8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ea8:	4b08      	ldr	r3, [pc, #32]	; (8010ecc <HAL_PCD_ResumeCallback+0x4c>)
 8010eaa:	691b      	ldr	r3, [r3, #16]
 8010eac:	4a07      	ldr	r2, [pc, #28]	; (8010ecc <HAL_PCD_ResumeCallback+0x4c>)
 8010eae:	f023 0306 	bic.w	r3, r3, #6
 8010eb2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010eb4:	f000 faf4 	bl	80114a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fb fd9a 	bl	800c9f8 <USBD_LL_Resume>
}
 8010ec4:	bf00      	nop
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}
 8010ecc:	e000ed00 	.word	0xe000ed00

08010ed0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	460b      	mov	r3, r1
 8010eda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010ee2:	78fa      	ldrb	r2, [r7, #3]
 8010ee4:	4611      	mov	r1, r2
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fb fde6 	bl	800cab8 <USBD_LL_IsoOUTIncomplete>
}
 8010eec:	bf00      	nop
 8010eee:	3708      	adds	r7, #8
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bd80      	pop	{r7, pc}

08010ef4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	460b      	mov	r3, r1
 8010efe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f06:	78fa      	ldrb	r2, [r7, #3]
 8010f08:	4611      	mov	r1, r2
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fb fdae 	bl	800ca6c <USBD_LL_IsoINIncomplete>
}
 8010f10:	bf00      	nop
 8010f12:	3708      	adds	r7, #8
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b082      	sub	sp, #8
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fb fdec 	bl	800cb04 <USBD_LL_DevConnected>
}
 8010f2c:	bf00      	nop
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010f42:	4618      	mov	r0, r3
 8010f44:	f7fb fde9 	bl	800cb1a <USBD_LL_DevDisconnected>
}
 8010f48:	bf00      	nop
 8010f4a:	3708      	adds	r7, #8
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}

08010f50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d139      	bne.n	8010fd4 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010f60:	4a1f      	ldr	r2, [pc, #124]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	4a1d      	ldr	r2, [pc, #116]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010f6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010f70:	4b1b      	ldr	r3, [pc, #108]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010f72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010f76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8010f78:	4b19      	ldr	r3, [pc, #100]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010f7a:	2206      	movs	r2, #6
 8010f7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010f7e:	4b18      	ldr	r3, [pc, #96]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010f80:	2202      	movs	r2, #2
 8010f82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010f84:	4b16      	ldr	r3, [pc, #88]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010f86:	2200      	movs	r2, #0
 8010f88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010f8a:	4b15      	ldr	r3, [pc, #84]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010f90:	4b13      	ldr	r3, [pc, #76]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010f92:	2200      	movs	r2, #0
 8010f94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8010f96:	4b12      	ldr	r3, [pc, #72]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010f98:	2201      	movs	r2, #1
 8010f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010f9c:	4b10      	ldr	r3, [pc, #64]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010fa2:	4b0f      	ldr	r3, [pc, #60]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010fa8:	480d      	ldr	r0, [pc, #52]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010faa:	f7f2 fa83 	bl	80034b4 <HAL_PCD_Init>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8010fb4:	f7ef fef6 	bl	8000da4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010fb8:	2180      	movs	r1, #128	; 0x80
 8010fba:	4809      	ldr	r0, [pc, #36]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010fbc:	f7f3 fae5 	bl	800458a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010fc0:	2240      	movs	r2, #64	; 0x40
 8010fc2:	2100      	movs	r1, #0
 8010fc4:	4806      	ldr	r0, [pc, #24]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010fc6:	f7f3 fa99 	bl	80044fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010fca:	2280      	movs	r2, #128	; 0x80
 8010fcc:	2101      	movs	r1, #1
 8010fce:	4804      	ldr	r0, [pc, #16]	; (8010fe0 <USBD_LL_Init+0x90>)
 8010fd0:	f7f3 fa94 	bl	80044fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010fd4:	2300      	movs	r3, #0
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3708      	adds	r7, #8
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	20003b4c 	.word	0x20003b4c

08010fe4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fec:	2300      	movs	r3, #0
 8010fee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7f2 fb7e 	bl	80036fc <HAL_PCD_Start>
 8011000:	4603      	mov	r3, r0
 8011002:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011004:	7bbb      	ldrb	r3, [r7, #14]
 8011006:	2b03      	cmp	r3, #3
 8011008:	d816      	bhi.n	8011038 <USBD_LL_Start+0x54>
 801100a:	a201      	add	r2, pc, #4	; (adr r2, 8011010 <USBD_LL_Start+0x2c>)
 801100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011010:	08011021 	.word	0x08011021
 8011014:	08011027 	.word	0x08011027
 8011018:	0801102d 	.word	0x0801102d
 801101c:	08011033 	.word	0x08011033
    case HAL_OK :
      usb_status = USBD_OK;
 8011020:	2300      	movs	r3, #0
 8011022:	73fb      	strb	r3, [r7, #15]
    break;
 8011024:	e00b      	b.n	801103e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011026:	2303      	movs	r3, #3
 8011028:	73fb      	strb	r3, [r7, #15]
    break;
 801102a:	e008      	b.n	801103e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801102c:	2301      	movs	r3, #1
 801102e:	73fb      	strb	r3, [r7, #15]
    break;
 8011030:	e005      	b.n	801103e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011032:	2303      	movs	r3, #3
 8011034:	73fb      	strb	r3, [r7, #15]
    break;
 8011036:	e002      	b.n	801103e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8011038:	2303      	movs	r3, #3
 801103a:	73fb      	strb	r3, [r7, #15]
    break;
 801103c:	bf00      	nop
  }
  return usb_status;
 801103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011040:	4618      	mov	r0, r3
 8011042:	3710      	adds	r7, #16
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	4608      	mov	r0, r1
 8011052:	4611      	mov	r1, r2
 8011054:	461a      	mov	r2, r3
 8011056:	4603      	mov	r3, r0
 8011058:	70fb      	strb	r3, [r7, #3]
 801105a:	460b      	mov	r3, r1
 801105c:	70bb      	strb	r3, [r7, #2]
 801105e:	4613      	mov	r3, r2
 8011060:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011062:	2300      	movs	r3, #0
 8011064:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011066:	2300      	movs	r3, #0
 8011068:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011070:	78bb      	ldrb	r3, [r7, #2]
 8011072:	883a      	ldrh	r2, [r7, #0]
 8011074:	78f9      	ldrb	r1, [r7, #3]
 8011076:	f7f2 ff39 	bl	8003eec <HAL_PCD_EP_Open>
 801107a:	4603      	mov	r3, r0
 801107c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801107e:	7bbb      	ldrb	r3, [r7, #14]
 8011080:	2b03      	cmp	r3, #3
 8011082:	d817      	bhi.n	80110b4 <USBD_LL_OpenEP+0x6c>
 8011084:	a201      	add	r2, pc, #4	; (adr r2, 801108c <USBD_LL_OpenEP+0x44>)
 8011086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801108a:	bf00      	nop
 801108c:	0801109d 	.word	0x0801109d
 8011090:	080110a3 	.word	0x080110a3
 8011094:	080110a9 	.word	0x080110a9
 8011098:	080110af 	.word	0x080110af
    case HAL_OK :
      usb_status = USBD_OK;
 801109c:	2300      	movs	r3, #0
 801109e:	73fb      	strb	r3, [r7, #15]
    break;
 80110a0:	e00b      	b.n	80110ba <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80110a2:	2303      	movs	r3, #3
 80110a4:	73fb      	strb	r3, [r7, #15]
    break;
 80110a6:	e008      	b.n	80110ba <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80110a8:	2301      	movs	r3, #1
 80110aa:	73fb      	strb	r3, [r7, #15]
    break;
 80110ac:	e005      	b.n	80110ba <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80110ae:	2303      	movs	r3, #3
 80110b0:	73fb      	strb	r3, [r7, #15]
    break;
 80110b2:	e002      	b.n	80110ba <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80110b4:	2303      	movs	r3, #3
 80110b6:	73fb      	strb	r3, [r7, #15]
    break;
 80110b8:	bf00      	nop
  }
  return usb_status;
 80110ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3710      	adds	r7, #16
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}

080110c4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	460b      	mov	r3, r1
 80110ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110d0:	2300      	movs	r3, #0
 80110d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110d4:	2300      	movs	r3, #0
 80110d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80110de:	78fa      	ldrb	r2, [r7, #3]
 80110e0:	4611      	mov	r1, r2
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7f2 ff6a 	bl	8003fbc <HAL_PCD_EP_Close>
 80110e8:	4603      	mov	r3, r0
 80110ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80110ec:	7bbb      	ldrb	r3, [r7, #14]
 80110ee:	2b03      	cmp	r3, #3
 80110f0:	d816      	bhi.n	8011120 <USBD_LL_CloseEP+0x5c>
 80110f2:	a201      	add	r2, pc, #4	; (adr r2, 80110f8 <USBD_LL_CloseEP+0x34>)
 80110f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f8:	08011109 	.word	0x08011109
 80110fc:	0801110f 	.word	0x0801110f
 8011100:	08011115 	.word	0x08011115
 8011104:	0801111b 	.word	0x0801111b
    case HAL_OK :
      usb_status = USBD_OK;
 8011108:	2300      	movs	r3, #0
 801110a:	73fb      	strb	r3, [r7, #15]
    break;
 801110c:	e00b      	b.n	8011126 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801110e:	2303      	movs	r3, #3
 8011110:	73fb      	strb	r3, [r7, #15]
    break;
 8011112:	e008      	b.n	8011126 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011114:	2301      	movs	r3, #1
 8011116:	73fb      	strb	r3, [r7, #15]
    break;
 8011118:	e005      	b.n	8011126 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801111a:	2303      	movs	r3, #3
 801111c:	73fb      	strb	r3, [r7, #15]
    break;
 801111e:	e002      	b.n	8011126 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8011120:	2303      	movs	r3, #3
 8011122:	73fb      	strb	r3, [r7, #15]
    break;
 8011124:	bf00      	nop
  }
  return usb_status;
 8011126:	7bfb      	ldrb	r3, [r7, #15]
}
 8011128:	4618      	mov	r0, r3
 801112a:	3710      	adds	r7, #16
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	460b      	mov	r3, r1
 801113a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801113c:	2300      	movs	r3, #0
 801113e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011140:	2300      	movs	r3, #0
 8011142:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801114a:	78fa      	ldrb	r2, [r7, #3]
 801114c:	4611      	mov	r1, r2
 801114e:	4618      	mov	r0, r3
 8011150:	f7f3 f811 	bl	8004176 <HAL_PCD_EP_SetStall>
 8011154:	4603      	mov	r3, r0
 8011156:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011158:	7bbb      	ldrb	r3, [r7, #14]
 801115a:	2b03      	cmp	r3, #3
 801115c:	d816      	bhi.n	801118c <USBD_LL_StallEP+0x5c>
 801115e:	a201      	add	r2, pc, #4	; (adr r2, 8011164 <USBD_LL_StallEP+0x34>)
 8011160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011164:	08011175 	.word	0x08011175
 8011168:	0801117b 	.word	0x0801117b
 801116c:	08011181 	.word	0x08011181
 8011170:	08011187 	.word	0x08011187
    case HAL_OK :
      usb_status = USBD_OK;
 8011174:	2300      	movs	r3, #0
 8011176:	73fb      	strb	r3, [r7, #15]
    break;
 8011178:	e00b      	b.n	8011192 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801117a:	2303      	movs	r3, #3
 801117c:	73fb      	strb	r3, [r7, #15]
    break;
 801117e:	e008      	b.n	8011192 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011180:	2301      	movs	r3, #1
 8011182:	73fb      	strb	r3, [r7, #15]
    break;
 8011184:	e005      	b.n	8011192 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011186:	2303      	movs	r3, #3
 8011188:	73fb      	strb	r3, [r7, #15]
    break;
 801118a:	e002      	b.n	8011192 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801118c:	2303      	movs	r3, #3
 801118e:	73fb      	strb	r3, [r7, #15]
    break;
 8011190:	bf00      	nop
  }
  return usb_status;
 8011192:	7bfb      	ldrb	r3, [r7, #15]
}
 8011194:	4618      	mov	r0, r3
 8011196:	3710      	adds	r7, #16
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b084      	sub	sp, #16
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	460b      	mov	r3, r1
 80111a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111a8:	2300      	movs	r3, #0
 80111aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111ac:	2300      	movs	r3, #0
 80111ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80111b6:	78fa      	ldrb	r2, [r7, #3]
 80111b8:	4611      	mov	r1, r2
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7f3 f83d 	bl	800423a <HAL_PCD_EP_ClrStall>
 80111c0:	4603      	mov	r3, r0
 80111c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80111c4:	7bbb      	ldrb	r3, [r7, #14]
 80111c6:	2b03      	cmp	r3, #3
 80111c8:	d816      	bhi.n	80111f8 <USBD_LL_ClearStallEP+0x5c>
 80111ca:	a201      	add	r2, pc, #4	; (adr r2, 80111d0 <USBD_LL_ClearStallEP+0x34>)
 80111cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111d0:	080111e1 	.word	0x080111e1
 80111d4:	080111e7 	.word	0x080111e7
 80111d8:	080111ed 	.word	0x080111ed
 80111dc:	080111f3 	.word	0x080111f3
    case HAL_OK :
      usb_status = USBD_OK;
 80111e0:	2300      	movs	r3, #0
 80111e2:	73fb      	strb	r3, [r7, #15]
    break;
 80111e4:	e00b      	b.n	80111fe <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80111e6:	2303      	movs	r3, #3
 80111e8:	73fb      	strb	r3, [r7, #15]
    break;
 80111ea:	e008      	b.n	80111fe <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80111ec:	2301      	movs	r3, #1
 80111ee:	73fb      	strb	r3, [r7, #15]
    break;
 80111f0:	e005      	b.n	80111fe <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80111f2:	2303      	movs	r3, #3
 80111f4:	73fb      	strb	r3, [r7, #15]
    break;
 80111f6:	e002      	b.n	80111fe <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80111f8:	2303      	movs	r3, #3
 80111fa:	73fb      	strb	r3, [r7, #15]
    break;
 80111fc:	bf00      	nop
  }
  return usb_status;
 80111fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3710      	adds	r7, #16
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011208:	b480      	push	{r7}
 801120a:	b085      	sub	sp, #20
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	460b      	mov	r3, r1
 8011212:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801121a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801121c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011220:	2b00      	cmp	r3, #0
 8011222:	da0b      	bge.n	801123c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011224:	78fb      	ldrb	r3, [r7, #3]
 8011226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801122a:	68f9      	ldr	r1, [r7, #12]
 801122c:	4613      	mov	r3, r2
 801122e:	00db      	lsls	r3, r3, #3
 8011230:	1a9b      	subs	r3, r3, r2
 8011232:	009b      	lsls	r3, r3, #2
 8011234:	440b      	add	r3, r1
 8011236:	333e      	adds	r3, #62	; 0x3e
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	e00b      	b.n	8011254 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801123c:	78fb      	ldrb	r3, [r7, #3]
 801123e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011242:	68f9      	ldr	r1, [r7, #12]
 8011244:	4613      	mov	r3, r2
 8011246:	00db      	lsls	r3, r3, #3
 8011248:	1a9b      	subs	r3, r3, r2
 801124a:	009b      	lsls	r3, r3, #2
 801124c:	440b      	add	r3, r1
 801124e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011252:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011254:	4618      	mov	r0, r3
 8011256:	3714      	adds	r7, #20
 8011258:	46bd      	mov	sp, r7
 801125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125e:	4770      	bx	lr

08011260 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	460b      	mov	r3, r1
 801126a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801126c:	2300      	movs	r3, #0
 801126e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801127a:	78fa      	ldrb	r2, [r7, #3]
 801127c:	4611      	mov	r1, r2
 801127e:	4618      	mov	r0, r3
 8011280:	f7f2 fe0f 	bl	8003ea2 <HAL_PCD_SetAddress>
 8011284:	4603      	mov	r3, r0
 8011286:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8011288:	7bbb      	ldrb	r3, [r7, #14]
 801128a:	2b03      	cmp	r3, #3
 801128c:	d816      	bhi.n	80112bc <USBD_LL_SetUSBAddress+0x5c>
 801128e:	a201      	add	r2, pc, #4	; (adr r2, 8011294 <USBD_LL_SetUSBAddress+0x34>)
 8011290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011294:	080112a5 	.word	0x080112a5
 8011298:	080112ab 	.word	0x080112ab
 801129c:	080112b1 	.word	0x080112b1
 80112a0:	080112b7 	.word	0x080112b7
    case HAL_OK :
      usb_status = USBD_OK;
 80112a4:	2300      	movs	r3, #0
 80112a6:	73fb      	strb	r3, [r7, #15]
    break;
 80112a8:	e00b      	b.n	80112c2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80112aa:	2303      	movs	r3, #3
 80112ac:	73fb      	strb	r3, [r7, #15]
    break;
 80112ae:	e008      	b.n	80112c2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80112b0:	2301      	movs	r3, #1
 80112b2:	73fb      	strb	r3, [r7, #15]
    break;
 80112b4:	e005      	b.n	80112c2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80112b6:	2303      	movs	r3, #3
 80112b8:	73fb      	strb	r3, [r7, #15]
    break;
 80112ba:	e002      	b.n	80112c2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80112bc:	2303      	movs	r3, #3
 80112be:	73fb      	strb	r3, [r7, #15]
    break;
 80112c0:	bf00      	nop
  }
  return usb_status;
 80112c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	3710      	adds	r7, #16
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b086      	sub	sp, #24
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	60f8      	str	r0, [r7, #12]
 80112d4:	607a      	str	r2, [r7, #4]
 80112d6:	603b      	str	r3, [r7, #0]
 80112d8:	460b      	mov	r3, r1
 80112da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112dc:	2300      	movs	r3, #0
 80112de:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112e0:	2300      	movs	r3, #0
 80112e2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80112ea:	7af9      	ldrb	r1, [r7, #11]
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	687a      	ldr	r2, [r7, #4]
 80112f0:	f7f2 ff04 	bl	80040fc <HAL_PCD_EP_Transmit>
 80112f4:	4603      	mov	r3, r0
 80112f6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80112f8:	7dbb      	ldrb	r3, [r7, #22]
 80112fa:	2b03      	cmp	r3, #3
 80112fc:	d816      	bhi.n	801132c <USBD_LL_Transmit+0x60>
 80112fe:	a201      	add	r2, pc, #4	; (adr r2, 8011304 <USBD_LL_Transmit+0x38>)
 8011300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011304:	08011315 	.word	0x08011315
 8011308:	0801131b 	.word	0x0801131b
 801130c:	08011321 	.word	0x08011321
 8011310:	08011327 	.word	0x08011327
    case HAL_OK :
      usb_status = USBD_OK;
 8011314:	2300      	movs	r3, #0
 8011316:	75fb      	strb	r3, [r7, #23]
    break;
 8011318:	e00b      	b.n	8011332 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801131a:	2303      	movs	r3, #3
 801131c:	75fb      	strb	r3, [r7, #23]
    break;
 801131e:	e008      	b.n	8011332 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011320:	2301      	movs	r3, #1
 8011322:	75fb      	strb	r3, [r7, #23]
    break;
 8011324:	e005      	b.n	8011332 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011326:	2303      	movs	r3, #3
 8011328:	75fb      	strb	r3, [r7, #23]
    break;
 801132a:	e002      	b.n	8011332 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801132c:	2303      	movs	r3, #3
 801132e:	75fb      	strb	r3, [r7, #23]
    break;
 8011330:	bf00      	nop
  }
  return usb_status;
 8011332:	7dfb      	ldrb	r3, [r7, #23]
}
 8011334:	4618      	mov	r0, r3
 8011336:	3718      	adds	r7, #24
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b086      	sub	sp, #24
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	607a      	str	r2, [r7, #4]
 8011346:	603b      	str	r3, [r7, #0]
 8011348:	460b      	mov	r3, r1
 801134a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801134c:	2300      	movs	r3, #0
 801134e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011350:	2300      	movs	r3, #0
 8011352:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801135a:	7af9      	ldrb	r1, [r7, #11]
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	f7f2 fe76 	bl	8004050 <HAL_PCD_EP_Receive>
 8011364:	4603      	mov	r3, r0
 8011366:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8011368:	7dbb      	ldrb	r3, [r7, #22]
 801136a:	2b03      	cmp	r3, #3
 801136c:	d816      	bhi.n	801139c <USBD_LL_PrepareReceive+0x60>
 801136e:	a201      	add	r2, pc, #4	; (adr r2, 8011374 <USBD_LL_PrepareReceive+0x38>)
 8011370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011374:	08011385 	.word	0x08011385
 8011378:	0801138b 	.word	0x0801138b
 801137c:	08011391 	.word	0x08011391
 8011380:	08011397 	.word	0x08011397
    case HAL_OK :
      usb_status = USBD_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	75fb      	strb	r3, [r7, #23]
    break;
 8011388:	e00b      	b.n	80113a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801138a:	2303      	movs	r3, #3
 801138c:	75fb      	strb	r3, [r7, #23]
    break;
 801138e:	e008      	b.n	80113a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011390:	2301      	movs	r3, #1
 8011392:	75fb      	strb	r3, [r7, #23]
    break;
 8011394:	e005      	b.n	80113a2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011396:	2303      	movs	r3, #3
 8011398:	75fb      	strb	r3, [r7, #23]
    break;
 801139a:	e002      	b.n	80113a2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 801139c:	2303      	movs	r3, #3
 801139e:	75fb      	strb	r3, [r7, #23]
    break;
 80113a0:	bf00      	nop
  }
  return usb_status;
 80113a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3718      	adds	r7, #24
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}

080113ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b082      	sub	sp, #8
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	460b      	mov	r3, r1
 80113b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80113be:	78fa      	ldrb	r2, [r7, #3]
 80113c0:	4611      	mov	r1, r2
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7f2 fe82 	bl	80040cc <HAL_PCD_EP_GetRxCount>
 80113c8:	4603      	mov	r3, r0
}
 80113ca:	4618      	mov	r0, r3
 80113cc:	3708      	adds	r7, #8
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
	...

080113d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	460b      	mov	r3, r1
 80113de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80113e0:	78fb      	ldrb	r3, [r7, #3]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d002      	beq.n	80113ec <HAL_PCDEx_LPM_Callback+0x18>
 80113e6:	2b01      	cmp	r3, #1
 80113e8:	d01f      	beq.n	801142a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80113ea:	e03b      	b.n	8011464 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6a1b      	ldr	r3, [r3, #32]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d007      	beq.n	8011404 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80113f4:	f000 f854 	bl	80114a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113f8:	4b1c      	ldr	r3, [pc, #112]	; (801146c <HAL_PCDEx_LPM_Callback+0x98>)
 80113fa:	691b      	ldr	r3, [r3, #16]
 80113fc:	4a1b      	ldr	r2, [pc, #108]	; (801146c <HAL_PCDEx_LPM_Callback+0x98>)
 80113fe:	f023 0306 	bic.w	r3, r3, #6
 8011402:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	687a      	ldr	r2, [r7, #4]
 8011410:	6812      	ldr	r2, [r2, #0]
 8011412:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011416:	f023 0301 	bic.w	r3, r3, #1
 801141a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011422:	4618      	mov	r0, r3
 8011424:	f7fb fae8 	bl	800c9f8 <USBD_LL_Resume>
    break;
 8011428:	e01c      	b.n	8011464 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	6812      	ldr	r2, [r2, #0]
 8011438:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801143c:	f043 0301 	orr.w	r3, r3, #1
 8011440:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011448:	4618      	mov	r0, r3
 801144a:	f7fb fabf 	bl	800c9cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6a1b      	ldr	r3, [r3, #32]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d005      	beq.n	8011462 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011456:	4b05      	ldr	r3, [pc, #20]	; (801146c <HAL_PCDEx_LPM_Callback+0x98>)
 8011458:	691b      	ldr	r3, [r3, #16]
 801145a:	4a04      	ldr	r2, [pc, #16]	; (801146c <HAL_PCDEx_LPM_Callback+0x98>)
 801145c:	f043 0306 	orr.w	r3, r3, #6
 8011460:	6113      	str	r3, [r2, #16]
    break;
 8011462:	bf00      	nop
}
 8011464:	bf00      	nop
 8011466:	3708      	adds	r7, #8
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	e000ed00 	.word	0xe000ed00

08011470 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011478:	4b03      	ldr	r3, [pc, #12]	; (8011488 <USBD_static_malloc+0x18>)
}
 801147a:	4618      	mov	r0, r3
 801147c:	370c      	adds	r7, #12
 801147e:	46bd      	mov	sp, r7
 8011480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011484:	4770      	bx	lr
 8011486:	bf00      	nop
 8011488:	20001ab8 	.word	0x20001ab8

0801148c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801148c:	b480      	push	{r7}
 801148e:	b083      	sub	sp, #12
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]

}
 8011494:	bf00      	nop
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr

080114a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80114a4:	f7ee fee4 	bl	8000270 <SystemClock_Config>
}
 80114a8:	bf00      	nop
 80114aa:	bd80      	pop	{r7, pc}

080114ac <__libc_init_array>:
 80114ac:	b570      	push	{r4, r5, r6, lr}
 80114ae:	4d0d      	ldr	r5, [pc, #52]	; (80114e4 <__libc_init_array+0x38>)
 80114b0:	4c0d      	ldr	r4, [pc, #52]	; (80114e8 <__libc_init_array+0x3c>)
 80114b2:	1b64      	subs	r4, r4, r5
 80114b4:	10a4      	asrs	r4, r4, #2
 80114b6:	2600      	movs	r6, #0
 80114b8:	42a6      	cmp	r6, r4
 80114ba:	d109      	bne.n	80114d0 <__libc_init_array+0x24>
 80114bc:	4d0b      	ldr	r5, [pc, #44]	; (80114ec <__libc_init_array+0x40>)
 80114be:	4c0c      	ldr	r4, [pc, #48]	; (80114f0 <__libc_init_array+0x44>)
 80114c0:	f000 f82e 	bl	8011520 <_init>
 80114c4:	1b64      	subs	r4, r4, r5
 80114c6:	10a4      	asrs	r4, r4, #2
 80114c8:	2600      	movs	r6, #0
 80114ca:	42a6      	cmp	r6, r4
 80114cc:	d105      	bne.n	80114da <__libc_init_array+0x2e>
 80114ce:	bd70      	pop	{r4, r5, r6, pc}
 80114d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80114d4:	4798      	blx	r3
 80114d6:	3601      	adds	r6, #1
 80114d8:	e7ee      	b.n	80114b8 <__libc_init_array+0xc>
 80114da:	f855 3b04 	ldr.w	r3, [r5], #4
 80114de:	4798      	blx	r3
 80114e0:	3601      	adds	r6, #1
 80114e2:	e7f2      	b.n	80114ca <__libc_init_array+0x1e>
 80114e4:	08011624 	.word	0x08011624
 80114e8:	08011624 	.word	0x08011624
 80114ec:	08011624 	.word	0x08011624
 80114f0:	08011628 	.word	0x08011628

080114f4 <memcpy>:
 80114f4:	440a      	add	r2, r1
 80114f6:	4291      	cmp	r1, r2
 80114f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80114fc:	d100      	bne.n	8011500 <memcpy+0xc>
 80114fe:	4770      	bx	lr
 8011500:	b510      	push	{r4, lr}
 8011502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011506:	f803 4f01 	strb.w	r4, [r3, #1]!
 801150a:	4291      	cmp	r1, r2
 801150c:	d1f9      	bne.n	8011502 <memcpy+0xe>
 801150e:	bd10      	pop	{r4, pc}

08011510 <memset>:
 8011510:	4402      	add	r2, r0
 8011512:	4603      	mov	r3, r0
 8011514:	4293      	cmp	r3, r2
 8011516:	d100      	bne.n	801151a <memset+0xa>
 8011518:	4770      	bx	lr
 801151a:	f803 1b01 	strb.w	r1, [r3], #1
 801151e:	e7f9      	b.n	8011514 <memset+0x4>

08011520 <_init>:
 8011520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011522:	bf00      	nop
 8011524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011526:	bc08      	pop	{r3}
 8011528:	469e      	mov	lr, r3
 801152a:	4770      	bx	lr

0801152c <_fini>:
 801152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152e:	bf00      	nop
 8011530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011532:	bc08      	pop	{r3}
 8011534:	469e      	mov	lr, r3
 8011536:	4770      	bx	lr
