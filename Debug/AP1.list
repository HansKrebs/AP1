
AP1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e250  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800e40c  0800e40c  0001e40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4b0  0800e4b0  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4b0  0800e4b0  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4b0  0800e4b0  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4b0  0800e4b0  0001e4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4b4  0800e4b4  0001e4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e4b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002468  20000190  0800e648  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025f8  0800e648  000225f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000334b7  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b37  00000000  00000000  00053677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002460  00000000  00000000  000591b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021e8  00000000  00000000  0005b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a476  00000000  00000000  0005d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d046  00000000  00000000  00097c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014b790  00000000  00000000  000c4cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00210444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a30  00000000  00000000  00210498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000190 	.word	0x20000190
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800e3f4 	.word	0x0800e3f4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000194 	.word	0x20000194
 80001f8:	0800e3f4 	.word	0x0800e3f4

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f001 f9cd 	bl	800159e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f82c 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 fc34 	bl	8000a74 <MX_GPIO_Init>
  MX_DMA_Init();
 800020c:	f000 fc08 	bl	8000a20 <MX_DMA_Init>
  MX_ADC1_Init();
 8000210:	f000 f8cc 	bl	80003ac <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000214:	f000 f92e 	bl	8000474 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000218:	f000 f990 	bl	800053c <MX_I2C1_Init>
  MX_I2C3_Init();
 800021c:	f000 f9ce 	bl	80005bc <MX_I2C3_Init>
  MX_RTC_Init();
 8000220:	f000 fa0c 	bl	800063c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000224:	f000 fa66 	bl	80006f4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000228:	f000 fa86 	bl	8000738 <MX_SPI1_Init>
  MX_SPI2_Init();
 800022c:	f000 fac2 	bl	80007b4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000230:	f000 fafe 	bl	8000830 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000234:	f000 fb3a 	bl	80008ac <MX_TIM2_Init>
  MX_TIM6_Init();
 8000238:	f000 fb86 	bl	8000948 <MX_TIM6_Init>
  MX_TIM7_Init();
 800023c:	f000 fbba 	bl	80009b4 <MX_TIM7_Init>
  MX_FATFS_Init();
 8000240:	f00b fb76 	bl	800b930 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000244:	f00d faa2 	bl	800d78c <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
 8000248:	2104      	movs	r1, #4
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <main+0x60>)
 800024c:	f002 ffe2 	bl	8003214 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000254:	f001 fa18 	bl	8001688 <HAL_Delay>
		HAL_GPIO_TogglePin(USER_LED_GPIO_Port,USER_LED_Pin);
 8000258:	e7f6      	b.n	8000248 <main+0x4c>
 800025a:	bf00      	nop
 800025c:	48001400 	.word	0x48001400

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b0be      	sub	sp, #248	; 0xf8
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800026a:	2244      	movs	r2, #68	; 0x44
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f00e f8b8 	bl	800e3e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	229c      	movs	r2, #156	; 0x9c
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f00e f8aa 	bl	800e3e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000290:	2000      	movs	r0, #0
 8000292:	f004 f9cf 	bl	8004634 <HAL_PWREx_ControlVoltageScaling>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800029c:	f000 fd56 	bl	8000d4c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002a0:	f004 f998 	bl	80045d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002a4:	4b3f      	ldr	r3, [pc, #252]	; (80003a4 <SystemClock_Config+0x144>)
 80002a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002aa:	4a3e      	ldr	r2, [pc, #248]	; (80003a4 <SystemClock_Config+0x144>)
 80002ac:	f023 0318 	bic.w	r3, r3, #24
 80002b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80002b4:	2325      	movs	r3, #37	; 0x25
 80002b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002c2:	2301      	movs	r3, #1
 80002c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d4:	2303      	movs	r3, #3
 80002d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 4;
 80002da:	2304      	movs	r3, #4
 80002dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 80002e0:	233c      	movs	r3, #60	; 0x3c
 80002e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80002e6:	2305      	movs	r3, #5
 80002e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ec:	2302      	movs	r3, #2
 80002ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f2:	2302      	movs	r3, #2
 80002f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f004 fa5d 	bl	80047bc <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000308:	f000 fd20 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000312:	2303      	movs	r3, #3
 8000314:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800032a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800032e:	2105      	movs	r1, #5
 8000330:	4618      	mov	r0, r3
 8000332:	f004 fe69 	bl	8005008 <HAL_RCC_ClockConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800033c:	f000 fd06 	bl	8000d4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <SystemClock_Config+0x148>)
 8000342:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000344:	2300      	movs	r3, #0
 8000346:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000348:	2300      	movs	r3, #0
 800034a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800034c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000350:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000354:	2300      	movs	r3, #0
 8000356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800035a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800035e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000362:	2300      	movs	r3, #0
 8000364:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000366:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800036a:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800036c:	2303      	movs	r3, #3
 800036e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000370:	2305      	movs	r3, #5
 8000372:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 8000374:	2360      	movs	r3, #96	; 0x60
 8000376:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000378:	2302      	movs	r3, #2
 800037a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800037c:	2304      	movs	r3, #4
 800037e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8000380:	2304      	movs	r3, #4
 8000382:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000388:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4618      	mov	r0, r3
 800038e:	f005 f8e9 	bl	8005564 <HAL_RCCEx_PeriphCLKConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8000398:	f000 fcd8 	bl	8000d4c <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	37f8      	adds	r7, #248	; 0xf8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	000b6140 	.word	0x000b6140

080003ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003b2:	463b      	mov	r3, r7
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
 80003c0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003c2:	4b29      	ldr	r3, [pc, #164]	; (8000468 <MX_ADC1_Init+0xbc>)
 80003c4:	4a29      	ldr	r2, [pc, #164]	; (800046c <MX_ADC1_Init+0xc0>)
 80003c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003c8:	4b27      	ldr	r3, [pc, #156]	; (8000468 <MX_ADC1_Init+0xbc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003ce:	4b26      	ldr	r3, [pc, #152]	; (8000468 <MX_ADC1_Init+0xbc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d4:	4b24      	ldr	r3, [pc, #144]	; (8000468 <MX_ADC1_Init+0xbc>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003da:	4b23      	ldr	r3, [pc, #140]	; (8000468 <MX_ADC1_Init+0xbc>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e0:	4b21      	ldr	r3, [pc, #132]	; (8000468 <MX_ADC1_Init+0xbc>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003e6:	4b20      	ldr	r3, [pc, #128]	; (8000468 <MX_ADC1_Init+0xbc>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003ec:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <MX_ADC1_Init+0xbc>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80003f2:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <MX_ADC1_Init+0xbc>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_ADC1_Init+0xbc>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000400:	4b19      	ldr	r3, [pc, #100]	; (8000468 <MX_ADC1_Init+0xbc>)
 8000402:	2200      	movs	r2, #0
 8000404:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000406:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_ADC1_Init+0xbc>)
 8000408:	2200      	movs	r2, #0
 800040a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_ADC1_Init+0xbc>)
 800040e:	2200      	movs	r2, #0
 8000410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_ADC1_Init+0xbc>)
 8000416:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800041a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_ADC1_Init+0xbc>)
 800041e:	2200      	movs	r2, #0
 8000420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000424:	4810      	ldr	r0, [pc, #64]	; (8000468 <MX_ADC1_Init+0xbc>)
 8000426:	f001 faf3 	bl	8001a10 <HAL_ADC_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000430:	f000 fc8c 	bl	8000d4c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000434:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_ADC1_Init+0xc4>)
 8000436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000438:	2306      	movs	r3, #6
 800043a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800043c:	2302      	movs	r3, #2
 800043e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000440:	237f      	movs	r3, #127	; 0x7f
 8000442:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000444:	2304      	movs	r3, #4
 8000446:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044c:	463b      	mov	r3, r7
 800044e:	4619      	mov	r1, r3
 8000450:	4805      	ldr	r0, [pc, #20]	; (8000468 <MX_ADC1_Init+0xbc>)
 8000452:	f001 fc29 	bl	8001ca8 <HAL_ADC_ConfigChannel>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800045c:	f000 fc76 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000460:	bf00      	nop
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000644 	.word	0x20000644
 800046c:	50040000 	.word	0x50040000
 8000470:	21800100 	.word	0x21800100

08000474 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000478:	4b2c      	ldr	r3, [pc, #176]	; (800052c <MX_DFSDM1_Init+0xb8>)
 800047a:	4a2d      	ldr	r2, [pc, #180]	; (8000530 <MX_DFSDM1_Init+0xbc>)
 800047c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800047e:	4b2b      	ldr	r3, [pc, #172]	; (800052c <MX_DFSDM1_Init+0xb8>)
 8000480:	2200      	movs	r2, #0
 8000482:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000484:	4b29      	ldr	r3, [pc, #164]	; (800052c <MX_DFSDM1_Init+0xb8>)
 8000486:	2201      	movs	r2, #1
 8000488:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800048a:	4b28      	ldr	r3, [pc, #160]	; (800052c <MX_DFSDM1_Init+0xb8>)
 800048c:	2201      	movs	r2, #1
 800048e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8000490:	4b26      	ldr	r3, [pc, #152]	; (800052c <MX_DFSDM1_Init+0xb8>)
 8000492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000496:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 192;
 8000498:	4b24      	ldr	r3, [pc, #144]	; (800052c <MX_DFSDM1_Init+0xb8>)
 800049a:	22c0      	movs	r2, #192	; 0xc0
 800049c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <MX_DFSDM1_Init+0xb8>)
 80004a0:	2201      	movs	r2, #1
 80004a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80004a4:	4821      	ldr	r0, [pc, #132]	; (800052c <MX_DFSDM1_Init+0xb8>)
 80004a6:	f002 f9cd 	bl	8002844 <HAL_DFSDM_FilterInit>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80004b0:	f000 fc4c 	bl	8000d4c <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80004b4:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004b6:	4a20      	ldr	r2, [pc, #128]	; (8000538 <MX_DFSDM1_Init+0xc4>)
 80004b8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004bc:	2200      	movs	r2, #0
 80004be:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80004c0:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80004c6:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004c8:	2202      	movs	r2, #2
 80004ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_ADC_OUTPUT;
 80004cc:	4b19      	ldr	r3, [pc, #100]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004d2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 7;
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 8000500:	2207      	movs	r2, #7
 8000502:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <MX_DFSDM1_Init+0xc0>)
 8000506:	f002 f8dd 	bl	80026c4 <HAL_DFSDM_ChannelInit>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 8000510:	f000 fc1c 	bl	8000d4c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000514:	2201      	movs	r2, #1
 8000516:	2101      	movs	r1, #1
 8000518:	4804      	ldr	r0, [pc, #16]	; (800052c <MX_DFSDM1_Init+0xb8>)
 800051a:	f002 fa6d 	bl	80029f8 <HAL_DFSDM_FilterConfigRegChannel>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 8000524:	f000 fc12 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000050c 	.word	0x2000050c
 8000530:	40016100 	.word	0x40016100
 8000534:	2000077c 	.word	0x2000077c
 8000538:	40016000 	.word	0x40016000

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000542:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <MX_I2C1_Init+0x78>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8000546:	4b1a      	ldr	r3, [pc, #104]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000548:	4a1b      	ldr	r2, [pc, #108]	; (80005b8 <MX_I2C1_Init+0x7c>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <MX_I2C1_Init+0x74>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000554:	2201      	movs	r2, #1
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_I2C1_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000560:	2200      	movs	r2, #0
 8000562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_I2C1_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <MX_I2C1_Init+0x74>)
 8000578:	f002 fe66 	bl	8003248 <HAL_I2C_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000582:	f000 fbe3 	bl	8000d4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000586:	2100      	movs	r1, #0
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <MX_I2C1_Init+0x74>)
 800058a:	f002 feec 	bl	8003366 <HAL_I2CEx_ConfigAnalogFilter>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000594:	f000 fbda 	bl	8000d4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000598:	2100      	movs	r1, #0
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_I2C1_Init+0x74>)
 800059c:	f002 ff2e 	bl	80033fc <HAL_I2CEx_ConfigDigitalFilter>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005a6:	f000 fbd1 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200004c0 	.word	0x200004c0
 80005b4:	40005400 	.word	0x40005400
 80005b8:	00b03fdb 	.word	0x00b03fdb

080005bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_I2C3_Init+0x74>)
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <MX_I2C3_Init+0x78>)
 80005c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B03FDB;
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_I2C3_Init+0x74>)
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <MX_I2C3_Init+0x7c>)
 80005ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_I2C3_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_I2C3_Init+0x74>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_I2C3_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_I2C3_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_I2C3_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_I2C3_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_I2C3_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <MX_I2C3_Init+0x74>)
 80005f8:	f002 fe26 	bl	8003248 <HAL_I2C_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000602:	f000 fba3 	bl	8000d4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000606:	2100      	movs	r1, #0
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <MX_I2C3_Init+0x74>)
 800060a:	f002 feac 	bl	8003366 <HAL_I2CEx_ConfigAnalogFilter>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000614:	f000 fb9a 	bl	8000d4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000618:	2100      	movs	r1, #0
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_I2C3_Init+0x74>)
 800061c:	f002 feee 	bl	80033fc <HAL_I2CEx_ConfigDigitalFilter>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000626:	f000 fb91 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000410 	.word	0x20000410
 8000634:	40005c00 	.word	0x40005c00
 8000638:	00b03fdb 	.word	0x00b03fdb

0800063c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <MX_RTC_Init+0xb0>)
 8000656:	4a26      	ldr	r2, [pc, #152]	; (80006f0 <MX_RTC_Init+0xb4>)
 8000658:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_RTC_Init+0xb0>)
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <MX_RTC_Init+0xb0>)
 8000662:	227f      	movs	r2, #127	; 0x7f
 8000664:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_RTC_Init+0xb0>)
 8000668:	22ff      	movs	r2, #255	; 0xff
 800066a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_RTC_Init+0xb0>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_RTC_Init+0xb0>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_RTC_Init+0xb0>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_RTC_Init+0xb0>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000684:	4819      	ldr	r0, [pc, #100]	; (80006ec <MX_RTC_Init+0xb0>)
 8000686:	f006 fd13 	bl	80070b0 <HAL_RTC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000690:	f000 fb5c 	bl	8000d4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	4619      	mov	r1, r3
 80006ae:	480f      	ldr	r0, [pc, #60]	; (80006ec <MX_RTC_Init+0xb0>)
 80006b0:	f006 fd79 	bl	80071a6 <HAL_RTC_SetTime>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80006ba:	f000 fb47 	bl	8000d4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80006be:	2302      	movs	r3, #2
 80006c0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_APRIL;
 80006c2:	2304      	movs	r3, #4
 80006c4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 3;
 80006c6:	2303      	movs	r3, #3
 80006c8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 20;
 80006ca:	2314      	movs	r3, #20
 80006cc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_RTC_Init+0xb0>)
 80006d6:	f006 fe03 	bl	80072e0 <HAL_RTC_SetDate>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80006e0:	f000 fb34 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000070c 	.word	0x2000070c
 80006f0:	40002800 	.word	0x40002800

080006f4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_SDMMC1_SD_Init+0x3c>)
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <MX_SDMMC1_SD_Init+0x40>)
 80006fc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_SDMMC1_SD_Init+0x3c>)
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_SDMMC1_SD_Init+0x3c>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_SDMMC1_SD_Init+0x3c>)
 800070c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000710:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_SDMMC1_SD_Init+0x3c>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <MX_SDMMC1_SD_Init+0x3c>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_ENABLE;
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <MX_SDMMC1_SD_Init+0x3c>)
 8000720:	2201      	movs	r2, #1
 8000722:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000560 	.word	0x20000560
 8000734:	50062400 	.word	0x50062400

08000738 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_SPI1_Init+0x74>)
 800073e:	4a1c      	ldr	r2, [pc, #112]	; (80007b0 <MX_SPI1_Init+0x78>)
 8000740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_SPI1_Init+0x74>)
 8000744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_SPI1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_SPI1_Init+0x74>)
 8000752:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000756:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_SPI1_Init+0x74>)
 800075a:	2202      	movs	r2, #2
 800075c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_SPI1_Init+0x74>)
 8000760:	2201      	movs	r2, #1
 8000762:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_SPI1_Init+0x74>)
 8000766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_SPI1_Init+0x74>)
 800076e:	2218      	movs	r2, #24
 8000770:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_SPI1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_SPI1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_SPI1_Init+0x74>)
 8000786:	2207      	movs	r2, #7
 8000788:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_SPI1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_SPI1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_SPI1_Init+0x74>)
 8000798:	f008 fbe5 	bl	8008f66 <HAL_SPI_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007a2:	f000 fad3 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200007b4 	.word	0x200007b4
 80007b0:	40013000 	.word	0x40013000

080007b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_SPI2_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_SPI2_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_SPI2_Init+0x74>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_SPI2_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_SPI2_Init+0x74>)
 80007ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_SPI2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_SPI2_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_SPI2_Init+0x74>)
 80007e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_SPI2_Init+0x74>)
 80007ea:	2230      	movs	r2, #48	; 0x30
 80007ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_SPI2_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SPI2_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_SPI2_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SPI2_Init+0x74>)
 8000802:	2207      	movs	r2, #7
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_SPI2_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SPI2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_SPI2_Init+0x74>)
 8000814:	f008 fba7 	bl	8008f66 <HAL_SPI_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 fa95 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000045c 	.word	0x2000045c
 800082c:	40003800 	.word	0x40003800

08000830 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <MX_SPI3_Init+0x74>)
 8000836:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <MX_SPI3_Init+0x78>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_SPI3_Init+0x74>)
 800083c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000840:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <MX_SPI3_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_SPI3_Init+0x74>)
 800084a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800084e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_SPI3_Init+0x74>)
 8000852:	2202      	movs	r2, #2
 8000854:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_SPI3_Init+0x74>)
 8000858:	2201      	movs	r2, #1
 800085a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_SPI3_Init+0x74>)
 800085e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000862:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_SPI3_Init+0x74>)
 8000866:	2218      	movs	r2, #24
 8000868:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_SPI3_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_SPI3_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_SPI3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_SPI3_Init+0x74>)
 800087e:	2207      	movs	r2, #7
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_SPI3_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_SPI3_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_SPI3_Init+0x74>)
 8000890:	f008 fb69 	bl	8008f66 <HAL_SPI_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 fa57 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200005e0 	.word	0x200005e0
 80008a8:	40003c00 	.word	0x40003c00

080008ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_TIM2_Init+0x98>)
 80008cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_TIM2_Init+0x98>)
 80008d4:	2277      	movs	r2, #119	; 0x77
 80008d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_TIM2_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_TIM2_Init+0x98>)
 80008e0:	f04f 32ff 	mov.w	r2, #4294967295
 80008e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_TIM2_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_TIM2_Init+0x98>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <MX_TIM2_Init+0x98>)
 80008f4:	f008 fbda 	bl	80090ac <HAL_TIM_Base_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008fe:	f000 fa25 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000906:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_TIM2_Init+0x98>)
 8000910:	f008 fd42 	bl	8009398 <HAL_TIM_ConfigClockSource>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800091a:	f000 fa17 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <MX_TIM2_Init+0x98>)
 800092c:	f008 ff60 	bl	80097f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000936:	f000 fa09 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3720      	adds	r7, #32
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000818 	.word	0x20000818

08000948 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_TIM6_Init+0x64>)
 800095a:	4a15      	ldr	r2, [pc, #84]	; (80009b0 <MX_TIM6_Init+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 119;
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_TIM6_Init+0x64>)
 8000960:	2277      	movs	r2, #119	; 0x77
 8000962:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_TIM6_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_TIM6_Init+0x64>)
 800096c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000970:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_TIM6_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <MX_TIM6_Init+0x64>)
 800097a:	f008 fb97 	bl	80090ac <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000984:	f000 f9e2 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_TIM6_Init+0x64>)
 8000996:	f008 ff2b 	bl	80097f0 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009a0:	f000 f9d4 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000730 	.word	0x20000730
 80009b0:	40001000 	.word	0x40001000

080009b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <MX_TIM7_Init+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 119;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009cc:	2277      	movs	r2, #119	; 0x77
 80009ce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0xFFFF;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009dc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <MX_TIM7_Init+0x64>)
 80009e6:	f008 fb61 	bl	80090ac <HAL_TIM_Base_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80009f0:	f000 f9ac 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_TIM7_Init+0x64>)
 8000a02:	f008 fef5 	bl	80097f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a0c:	f000 f99e 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000864 	.word	0x20000864
 8000a1c:	40001400 	.word	0x40001400

08000a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_DMA_Init+0x50>)
 8000a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2a:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <MX_DMA_Init+0x50>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6493      	str	r3, [r2, #72]	; 0x48
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_DMA_Init+0x50>)
 8000a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_DMA_Init+0x50>)
 8000a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <MX_DMA_Init+0x50>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6493      	str	r3, [r2, #72]	; 0x48
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_DMA_Init+0x50>)
 8000a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	200e      	movs	r0, #14
 8000a5c:	f001 fdfb 	bl	8002656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000a60:	200e      	movs	r0, #14
 8000a62:	f001 fe14 	bl	800268e <HAL_NVIC_EnableIRQ>

}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	; 0x38
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4ba7      	ldr	r3, [pc, #668]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4aa6      	ldr	r2, [pc, #664]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4ba4      	ldr	r3, [pc, #656]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa2:	4ba1      	ldr	r3, [pc, #644]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4aa0      	ldr	r2, [pc, #640]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b9e      	ldr	r3, [pc, #632]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b9b      	ldr	r3, [pc, #620]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a9a      	ldr	r2, [pc, #616]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b98      	ldr	r3, [pc, #608]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	4b95      	ldr	r3, [pc, #596]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a94      	ldr	r2, [pc, #592]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b92      	ldr	r3, [pc, #584]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b8f      	ldr	r3, [pc, #572]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a8e      	ldr	r2, [pc, #568]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b8c      	ldr	r3, [pc, #560]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b02:	4b89      	ldr	r3, [pc, #548]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a88      	ldr	r2, [pc, #544]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b86      	ldr	r3, [pc, #536]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0320 	and.w	r3, r3, #32
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1a:	4b83      	ldr	r3, [pc, #524]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a82      	ldr	r2, [pc, #520]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b80      	ldr	r3, [pc, #512]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b32:	f003 fe33 	bl	800479c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	4b7c      	ldr	r3, [pc, #496]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a7b      	ldr	r2, [pc, #492]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b79      	ldr	r3, [pc, #484]	; (8000d28 <MX_GPIO_Init+0x2b4>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_LIS2MDL_GPIO_Port, CS_LIS2MDL_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f002 fb44 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SD_SEL_Pin|SD_EN_Pin|CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f641 4130 	movw	r1, #7216	; 0x1c30
 8000b62:	4872      	ldr	r0, [pc, #456]	; (8000d2c <MX_GPIO_Init+0x2b8>)
 8000b64:	f002 fb3e 	bl	80031e4 <HAL_GPIO_WritePin>
                          |CS_LSM6DSOX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, USER_LED_Pin|BB_MODE_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2105      	movs	r1, #5
 8000b6c:	4870      	ldr	r0, [pc, #448]	; (8000d30 <MX_GPIO_Init+0x2bc>)
 8000b6e:	f002 fb39 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHG_LED2_GPIO_Port, CHG_LED2_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b78:	486e      	ldr	r0, [pc, #440]	; (8000d34 <MX_GPIO_Init+0x2c0>)
 8000b7a:	f002 fb33 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDO_2V7_EN_GPIO_Port, LDO_2V7_EN_Pin, GPIO_PIN_SET);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	486b      	ldr	r0, [pc, #428]	; (8000d30 <MX_GPIO_Init+0x2bc>)
 8000b84:	f002 fb2e 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SW_SEL_GPIO_Port, SW_SEL_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4869      	ldr	r0, [pc, #420]	; (8000d34 <MX_GPIO_Init+0x2c0>)
 8000b8e:	f002 fb29 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CPU_LED_GPIO_Port, CPU_LED_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b98:	4867      	ldr	r0, [pc, #412]	; (8000d38 <MX_GPIO_Init+0x2c4>)
 8000b9a:	f002 fb23 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INT2_LSM6DSOX_Pin INT2_IIS3DHHC_Pin */
  GPIO_InitStruct.Pin = INT2_LSM6DSOX_Pin|INT2_IIS3DHHC_Pin;
 8000b9e:	2348      	movs	r3, #72	; 0x48
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba2:	4b66      	ldr	r3, [pc, #408]	; (8000d3c <MX_GPIO_Init+0x2c8>)
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	485e      	ldr	r0, [pc, #376]	; (8000d2c <MX_GPIO_Init+0x2b8>)
 8000bb2:	f002 f96d 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_RX_Pin USART2_TX_Pin */
  GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 8000bb6:	2360      	movs	r3, #96	; 0x60
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	485b      	ldr	r0, [pc, #364]	; (8000d40 <MX_GPIO_Init+0x2cc>)
 8000bd2:	f002 f95d 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_LIS2MDL_Pin */
  GPIO_InitStruct.Pin = CS_LIS2MDL_Pin;
 8000bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bdc:	2311      	movs	r3, #17
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_LIS2MDL_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f002 f94d 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SEL_Pin SD_EN_Pin */
  GPIO_InitStruct.Pin = SD_SEL_Pin|SD_EN_Pin;
 8000bf6:	2330      	movs	r3, #48	; 0x30
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4847      	ldr	r0, [pc, #284]	; (8000d2c <MX_GPIO_Init+0x2b8>)
 8000c0e:	f002 f93f 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_Pin BB_MODE_Pin LDO_2V7_EN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|BB_MODE_Pin|LDO_2V7_EN_Pin;
 8000c12:	2385      	movs	r3, #133	; 0x85
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4841      	ldr	r0, [pc, #260]	; (8000d30 <MX_GPIO_Init+0x2bc>)
 8000c2a:	f002 f931 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHG_LED2_Pin SW_SEL_Pin */
  GPIO_InitStruct.Pin = CHG_LED2_Pin|SW_SEL_Pin;
 8000c2e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	483b      	ldr	r0, [pc, #236]	; (8000d34 <MX_GPIO_Init+0x2c0>)
 8000c48:	f002 f922 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHG_LED_Pin */
  GPIO_InitStruct.Pin = CHG_LED_Pin;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHG_LED_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4835      	ldr	r0, [pc, #212]	; (8000d34 <MX_GPIO_Init+0x2c0>)
 8000c60:	f002 f916 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_LPS22HH_Pin INT2_LIS2DW12_Pin INT_HTS221_Pin */
  GPIO_InitStruct.Pin = INT_LPS22HH_Pin|INT2_LIS2DW12_Pin|INT_HTS221_Pin;
 8000c64:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <MX_GPIO_Init+0x2c8>)
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	4831      	ldr	r0, [pc, #196]	; (8000d40 <MX_GPIO_Init+0x2cc>)
 8000c7a:	f002 f909 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_LIS2DW12_Pin CS_IIS3DHHC_Pin CS_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = CS_LIS2DW12_Pin|CS_IIS3DHHC_Pin|CS_LSM6DSOX_Pin;
 8000c7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c84:	2311      	movs	r3, #17
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4825      	ldr	r0, [pc, #148]	; (8000d2c <MX_GPIO_Init+0x2b8>)
 8000c98:	f002 f8fa 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CPU_LED_Pin */
  GPIO_InitStruct.Pin = CPU_LED_Pin;
 8000c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CPU_LED_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4820      	ldr	r0, [pc, #128]	; (8000d38 <MX_GPIO_Init+0x2c4>)
 8000cb6:	f002 f8eb 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LIS2DW12_Pin */
  GPIO_InitStruct.Pin = INT1_LIS2DW12_Pin;
 8000cba:	2320      	movs	r3, #32
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_GPIO_Init+0x2c8>)
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LIS2DW12_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	481d      	ldr	r0, [pc, #116]	; (8000d44 <MX_GPIO_Init+0x2d0>)
 8000cce:	f002 f8df 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT1_LSM6DSOX_Pin */
  GPIO_InitStruct.Pin = INT1_LSM6DSOX_Pin;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_GPIO_Init+0x2c8>)
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT1_LSM6DSOX_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f002 f8d2 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8000cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_GPIO_Init+0x2c4>)
 8000d02:	f002 f8c5 	bl	8002e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_PB1_Pin */
  GPIO_InitStruct.Pin = USER_PB1_Pin;
 8000d06:	2302      	movs	r3, #2
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_GPIO_Init+0x2d4>)
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_PB1_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_GPIO_Init+0x2c0>)
 8000d1a:	f002 f8b9 	bl	8002e90 <HAL_GPIO_Init>

}
 8000d1e:	bf00      	nop
 8000d20:	3738      	adds	r7, #56	; 0x38
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48001000 	.word	0x48001000
 8000d30:	48001400 	.word	0x48001400
 8000d34:	48001800 	.word	0x48001800
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	10110000 	.word	0x10110000
 8000d40:	48000c00 	.word	0x48000c00
 8000d44:	48000800 	.word	0x48000800
 8000d48:	10210000 	.word	0x10210000

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_MspInit+0x44>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_MspInit+0x44>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x44>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6593      	str	r3, [r2, #88]	; 0x58
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x44>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <HAL_ADC_MspInit+0xa4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d13c      	bne.n	8000e3c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <HAL_ADC_MspInit+0xa8>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a20      	ldr	r2, [pc, #128]	; (8000e48 <HAL_ADC_MspInit+0xa8>)
 8000dc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <HAL_ADC_MspInit+0xa8>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <HAL_ADC_MspInit+0xa8>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <HAL_ADC_MspInit+0xa8>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_ADC_MspInit+0xa8>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_ADC_MspInit+0xa8>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <HAL_ADC_MspInit+0xa8>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_ADC_MspInit+0xa8>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AN_VBATT_Pin;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e0e:	230b      	movs	r3, #11
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AN_VBATT_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <HAL_ADC_MspInit+0xac>)
 8000e1e:	f002 f837 	bl	8002e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8000e22:	2308      	movs	r3, #8
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e26:	230b      	movs	r3, #11
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f002 f82a 	bl	8002e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	50040000 	.word	0x50040000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000800 	.word	0x48000800

08000e50 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <HAL_DFSDM_FilterMspInit+0xbc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d119      	bne.n	8000e94 <HAL_DFSDM_FilterMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <HAL_DFSDM_FilterMspInit+0xc0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	4a2a      	ldr	r2, [pc, #168]	; (8000f10 <HAL_DFSDM_FilterMspInit+0xc0>)
 8000e68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <HAL_DFSDM_FilterMspInit+0xc0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d10b      	bne.n	8000e8a <HAL_DFSDM_FilterMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e72:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e76:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <HAL_DFSDM_FilterMspInit+0xc4>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <HAL_DFSDM_FilterMspInit+0xbc>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <HAL_DFSDM_FilterMspInit+0xbc>)
 8000e92:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <HAL_DFSDM_FilterMspInit+0xc8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d131      	bne.n	8000f02 <HAL_DFSDM_FilterMspInit+0xb2>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ea0:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_DFSDM_FilterMspInit+0xd0>)
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ea6:	2256      	movs	r2, #86	; 0x56
 8000ea8:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec2:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eca:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ece:	2220      	movs	r2, #32
 8000ed0:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ed4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ed8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000edc:	f001 fe1e 	bl	8002b1c <HAL_DMA_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_DFSDM_FilterMspInit+0x9a>
    {
      Error_Handler();
 8000ee6:	f7ff ff31 	bl	8000d4c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000efa:	629a      	str	r2, [r3, #40]	; 0x28
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_DFSDM_FilterMspInit+0xcc>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001b0 	.word	0x200001b0
 8000f10:	200001ac 	.word	0x200001ac
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40016100 	.word	0x40016100
 8000f1c:	200006ac 	.word	0x200006ac
 8000f20:	40020044 	.word	0x40020044

08000f24 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if(DFSDM1_Init == 0)
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d119      	bne.n	8000f68 <HAL_DFSDM_ChannelMspInit+0x44>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000f3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_DFSDM_ChannelMspInit+0x54>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d10b      	bne.n	8000f5e <HAL_DFSDM_ChannelMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_DFSDM_ChannelMspInit+0x58>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <HAL_DFSDM_ChannelMspInit+0x58>)
 8000f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f50:	6613      	str	r3, [r2, #96]	; 0x60
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_DFSDM_ChannelMspInit+0x58>)
 8000f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    }
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <HAL_DFSDM_ChannelMspInit+0x50>)
 8000f66:	6013      	str	r3, [r2, #0]
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	200001b0 	.word	0x200001b0
 8000f78:	200001ac 	.word	0x200001ac
 8000f7c:	40021000 	.word	0x40021000

08000f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	; 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a2f      	ldr	r2, [pc, #188]	; (800105c <HAL_I2C_MspInit+0xdc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d128      	bne.n	8000ff4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a2e      	ldr	r2, [pc, #184]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	61bb      	str	r3, [r7, #24]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8000fba:	23c0      	movs	r3, #192	; 0xc0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbe:	2312      	movs	r3, #18
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4823      	ldr	r0, [pc, #140]	; (8001064 <HAL_I2C_MspInit+0xe4>)
 8000fd6:	f001 ff5b 	bl	8002e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fde:	4a20      	ldr	r2, [pc, #128]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 8000fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ff2:	e02f      	b.n	8001054 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C3)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_I2C_MspInit+0xe8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12a      	bne.n	8001054 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 8001004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001016:	f003 fbc1 	bl	800479c <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 800101a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001020:	2312      	movs	r3, #18
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800102c:	2304      	movs	r3, #4
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	480d      	ldr	r0, [pc, #52]	; (800106c <HAL_I2C_MspInit+0xec>)
 8001038:	f001 ff2a 	bl	8002e90 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 8001042:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001046:	6593      	str	r3, [r2, #88]	; 0x58
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_I2C_MspInit+0xe0>)
 800104a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	; 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40005400 	.word	0x40005400
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400
 8001068:	40005c00 	.word	0x40005c00
 800106c:	48001800 	.word	0x48001800

08001070 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_RTC_MspInit+0x30>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d107      	bne.n	8001092 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_RTC_MspInit+0x34>)
 8001084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <HAL_RTC_MspInit+0x34>)
 800108a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40002800 	.word	0x40002800
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <HAL_SD_MspInit+0x120>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d179      	bne.n	80011be <HAL_SD_MspInit+0x116>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010ca:	4b40      	ldr	r3, [pc, #256]	; (80011cc <HAL_SD_MspInit+0x124>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a3f      	ldr	r2, [pc, #252]	; (80011cc <HAL_SD_MspInit+0x124>)
 80010d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <HAL_SD_MspInit+0x124>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <HAL_SD_MspInit+0x124>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a39      	ldr	r2, [pc, #228]	; (80011cc <HAL_SD_MspInit+0x124>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <HAL_SD_MspInit+0x124>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b34      	ldr	r3, [pc, #208]	; (80011cc <HAL_SD_MspInit+0x124>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a33      	ldr	r2, [pc, #204]	; (80011cc <HAL_SD_MspInit+0x124>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <HAL_SD_MspInit+0x124>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <HAL_SD_MspInit+0x124>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	4a2d      	ldr	r2, [pc, #180]	; (80011cc <HAL_SD_MspInit+0x124>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_SD_MspInit+0x124>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PC6     ------> SDMMC1_D0DIR
    PC7     ------> SDMMC1_D123DIR
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC1_CDIR_Pin|SDMMC1_CKIN_Pin;
 800112a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 800113c:	2308      	movs	r3, #8
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4822      	ldr	r0, [pc, #136]	; (80011d0 <HAL_SD_MspInit+0x128>)
 8001148:	f001 fea2 	bl	8002e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D3_Pin|SDMMC1_D2_Pin|SDMMC1_D1_Pin|SDMMC1_CK_Pin
 800114c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001150:	61fb      	str	r3, [r7, #28]
                          |SDMMC1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800115e:	230c      	movs	r3, #12
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	481a      	ldr	r0, [pc, #104]	; (80011d4 <HAL_SD_MspInit+0x12c>)
 800116a:	f001 fe91 	bl	8002e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_CMD_Pin;
 800116e:	2304      	movs	r3, #4
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800117e:	230c      	movs	r3, #12
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SDMMC1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4813      	ldr	r0, [pc, #76]	; (80011d8 <HAL_SD_MspInit+0x130>)
 800118a:	f001 fe81 	bl	8002e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC1_D0DIR_Pin|SDMMC1_D123DIR_Pin;
 800118e:	23c0      	movs	r3, #192	; 0xc0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_SDMMC1;
 800119e:	2308      	movs	r3, #8
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	480a      	ldr	r0, [pc, #40]	; (80011d4 <HAL_SD_MspInit+0x12c>)
 80011aa:	f001 fe71 	bl	8002e90 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2031      	movs	r0, #49	; 0x31
 80011b4:	f001 fa4f 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80011b8:	2031      	movs	r0, #49	; 0x31
 80011ba:	f001 fa68 	bl	800268e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	; 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	50062400 	.word	0x50062400
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	48000800 	.word	0x48000800
 80011d8:	48000c00 	.word	0x48000c00

080011dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08e      	sub	sp, #56	; 0x38
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a64      	ldr	r2, [pc, #400]	; (800138c <HAL_SPI_MspInit+0x1b0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d13a      	bne.n	8001274 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011fe:	4b64      	ldr	r3, [pc, #400]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	4a63      	ldr	r2, [pc, #396]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001208:	6613      	str	r3, [r2, #96]	; 0x60
 800120a:	4b61      	ldr	r3, [pc, #388]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001212:	623b      	str	r3, [r7, #32]
 8001214:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001216:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	4a5d      	ldr	r2, [pc, #372]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001222:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    PE14     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI2_SCKE13_Pin;
 800122e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001238:	2301      	movs	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001240:	2305      	movs	r3, #5
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_SCKE13_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001248:	4619      	mov	r1, r3
 800124a:	4852      	ldr	r0, [pc, #328]	; (8001394 <HAL_SPI_MspInit+0x1b8>)
 800124c:	f001 fe20 	bl	8002e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin|GPIO_PIN_14;
 8001250:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001262:	2305      	movs	r3, #5
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	4849      	ldr	r0, [pc, #292]	; (8001394 <HAL_SPI_MspInit+0x1b8>)
 800126e:	f001 fe0f 	bl	8002e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001272:	e086      	b.n	8001382 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a47      	ldr	r2, [pc, #284]	; (8001398 <HAL_SPI_MspInit+0x1bc>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d144      	bne.n	8001308 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	4a43      	ldr	r2, [pc, #268]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6593      	str	r3, [r2, #88]	; 0x58
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	4b3e      	ldr	r3, [pc, #248]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a3d      	ldr	r2, [pc, #244]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4b38      	ldr	r3, [pc, #224]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a37      	ldr	r2, [pc, #220]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_SCK_Pin;
 80012c6:	230a      	movs	r3, #10
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d6:	2305      	movs	r3, #5
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	482e      	ldr	r0, [pc, #184]	; (800139c <HAL_SPI_MspInit+0x1c0>)
 80012e2:	f001 fdd5 	bl	8002e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80012e6:	2308      	movs	r3, #8
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012f6:	2305      	movs	r3, #5
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	4619      	mov	r1, r3
 8001300:	4827      	ldr	r0, [pc, #156]	; (80013a0 <HAL_SPI_MspInit+0x1c4>)
 8001302:	f001 fdc5 	bl	8002e90 <HAL_GPIO_Init>
}
 8001306:	e03c      	b.n	8001382 <HAL_SPI_MspInit+0x1a6>
  else if(hspi->Instance==SPI3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a25      	ldr	r2, [pc, #148]	; (80013a4 <HAL_SPI_MspInit+0x1c8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d137      	bne.n	8001382 <HAL_SPI_MspInit+0x1a6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131c:	6593      	str	r3, [r2, #88]	; 0x58
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <HAL_SPI_MspInit+0x1b4>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin;
 8001342:	2330      	movs	r3, #48	; 0x30
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001352:	2306      	movs	r3, #6
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	4619      	mov	r1, r3
 800135c:	4812      	ldr	r0, [pc, #72]	; (80013a8 <HAL_SPI_MspInit+0x1cc>)
 800135e:	f001 fd97 	bl	8002e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin;
 8001362:	2308      	movs	r3, #8
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136a:	2301      	movs	r3, #1
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001372:	2306      	movs	r3, #6
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	480a      	ldr	r0, [pc, #40]	; (80013a8 <HAL_SPI_MspInit+0x1cc>)
 800137e:	f001 fd87 	bl	8002e90 <HAL_GPIO_Init>
}
 8001382:	bf00      	nop
 8001384:	3738      	adds	r7, #56	; 0x38
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40013000 	.word	0x40013000
 8001390:	40021000 	.word	0x40021000
 8001394:	48001000 	.word	0x48001000
 8001398:	40003800 	.word	0x40003800
 800139c:	48000c00 	.word	0x48000c00
 80013a0:	48000800 	.word	0x48000800
 80013a4:	40003c00 	.word	0x40003c00
 80013a8:	48000400 	.word	0x48000400

080013ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013bc:	d10c      	bne.n	80013d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013be:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_TIM_Base_MspInit+0x8c>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_TIM_Base_MspInit+0x8c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_TIM_Base_MspInit+0x8c>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80013d6:	e02a      	b.n	800142e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_TIM_Base_MspInit+0x90>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d114      	bne.n	800140c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_TIM_Base_MspInit+0x8c>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_TIM_Base_MspInit+0x8c>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	6593      	str	r3, [r2, #88]	; 0x58
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_TIM_Base_MspInit+0x8c>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2036      	movs	r0, #54	; 0x36
 8001400:	f001 f929 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001404:	2036      	movs	r0, #54	; 0x36
 8001406:	f001 f942 	bl	800268e <HAL_NVIC_EnableIRQ>
}
 800140a:	e010      	b.n	800142e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_TIM_Base_MspInit+0x94>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10b      	bne.n	800142e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_TIM_Base_MspInit+0x8c>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_TIM_Base_MspInit+0x8c>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	6593      	str	r3, [r2, #88]	; 0x58
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_TIM_Base_MspInit+0x8c>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	40001000 	.word	0x40001000
 8001440:	40001400 	.word	0x40001400

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f8da 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <DMA1_Channel4_IRQHandler+0x10>)
 800149e:	f001 fbe5 	bl	8002c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200006ac 	.word	0x200006ac

080014ac <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <SDMMC1_IRQHandler+0x10>)
 80014b2:	f006 fadd 	bl	8007a70 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000560 	.word	0x20000560

080014c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <TIM6_DAC_IRQHandler+0x10>)
 80014c6:	f007 fe48 	bl	800915a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000730 	.word	0x20000730

080014d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <OTG_FS_IRQHandler+0x10>)
 80014da:	f002 f92e 	bl	800373a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200021f0 	.word	0x200021f0

080014e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <SystemInit+0x5c>)
 80014ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f2:	4a14      	ldr	r2, [pc, #80]	; (8001544 <SystemInit+0x5c>)
 80014f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <SystemInit+0x60>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a11      	ldr	r2, [pc, #68]	; (8001548 <SystemInit+0x60>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <SystemInit+0x60>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <SystemInit+0x60>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <SystemInit+0x60>)
 8001514:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001518:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800151c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <SystemInit+0x60>)
 8001520:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001524:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <SystemInit+0x60>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <SystemInit+0x60>)
 800152c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001530:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SystemInit+0x60>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00
 8001548:	40021000 	.word	0x40021000

0800154c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800154c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001584 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001550:	f7ff ffca 	bl	80014e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001554:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001556:	e003      	b.n	8001560 <LoopCopyDataInit>

08001558 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800155a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800155c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800155e:	3104      	adds	r1, #4

08001560 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001560:	480a      	ldr	r0, [pc, #40]	; (800158c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001564:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001566:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001568:	d3f6      	bcc.n	8001558 <CopyDataInit>
	ldr	r2, =_sbss
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <LoopForever+0x12>)
	b	LoopFillZerobss
 800156c:	e002      	b.n	8001574 <LoopFillZerobss>

0800156e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800156e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001570:	f842 3b04 	str.w	r3, [r2], #4

08001574 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <LoopForever+0x16>)
	cmp	r2, r3
 8001576:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001578:	d3f9      	bcc.n	800156e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157a:	f00c ff0f 	bl	800e39c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800157e:	f7fe fe3d 	bl	80001fc <main>

08001582 <LoopForever>:

LoopForever:
    b LoopForever
 8001582:	e7fe      	b.n	8001582 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001584:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001588:	0800e4b8 	.word	0x0800e4b8
	ldr	r0, =_sdata
 800158c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001590:	20000190 	.word	0x20000190
	ldr	r2, =_sbss
 8001594:	20000190 	.word	0x20000190
	ldr	r3, = _ebss
 8001598:	200025f8 	.word	0x200025f8

0800159c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800159c:	e7fe      	b.n	800159c <ADC1_IRQHandler>

0800159e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f001 f849 	bl	8002640 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 f80e 	bl	80015d0 <HAL_InitTick>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	71fb      	strb	r3, [r7, #7]
 80015be:	e001      	b.n	80015c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015c0:	f7ff fbca 	bl	8000d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015c4:	79fb      	ldrb	r3, [r7, #7]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015dc:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_InitTick+0x6c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d023      	beq.n	800162c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_InitTick+0x70>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_InitTick+0x6c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 f855 	bl	80026aa <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10f      	bne.n	8001626 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d809      	bhi.n	8001620 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f001 f81f 	bl	8002656 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_InitTick+0x74>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e007      	b.n	8001630 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e004      	b.n	8001630 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e001      	b.n	8001630 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008
 8001640:	20000000 	.word	0x20000000
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	200008b0 	.word	0x200008b0

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200008b0 	.word	0x200008b0

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008

080016d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	609a      	str	r2, [r3, #8]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3360      	adds	r3, #96	; 0x60
 800174a:	461a      	mov	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <LL_ADC_SetOffset+0x44>)
 800175a:	4013      	ands	r3, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	4313      	orrs	r3, r2
 8001768:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001770:	bf00      	nop
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	03fff000 	.word	0x03fff000

08001780 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3360      	adds	r3, #96	; 0x60
 800178e:	461a      	mov	r2, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3360      	adds	r3, #96	; 0x60
 80017bc:	461a      	mov	r2, r3
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017d6:	bf00      	nop
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	615a      	str	r2, [r3, #20]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3330      	adds	r3, #48	; 0x30
 8001818:	461a      	mov	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	4413      	add	r3, r2
 8001826:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	211f      	movs	r1, #31
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	401a      	ands	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	0e9b      	lsrs	r3, r3, #26
 8001840:	f003 011f 	and.w	r1, r3, #31
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	431a      	orrs	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001854:	bf00      	nop
 8001856:	371c      	adds	r7, #28
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	3314      	adds	r3, #20
 8001870:	461a      	mov	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	0e5b      	lsrs	r3, r3, #25
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	4413      	add	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	0d1b      	lsrs	r3, r3, #20
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2107      	movs	r1, #7
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	401a      	ands	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	0d1b      	lsrs	r3, r3, #20
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	431a      	orrs	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018aa:	bf00      	nop
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0318 	and.w	r3, r3, #24
 80018da:	4908      	ldr	r1, [pc, #32]	; (80018fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80018dc:	40d9      	lsrs	r1, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	400b      	ands	r3, r1
 80018e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e6:	431a      	orrs	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	0007ffff 	.word	0x0007ffff

08001900 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001910:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6093      	str	r3, [r2, #8]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001938:	d101      	bne.n	800193e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800195c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001960:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001984:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001988:	d101      	bne.n	800198e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <LL_ADC_IsEnabled+0x18>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <LL_ADC_IsEnabled+0x1a>
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d101      	bne.n	80019da <LL_ADC_REG_IsConversionOngoing+0x18>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d101      	bne.n	8001a00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e12f      	b.n	8001c8a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff f9b1 	bl	8000da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff67 	bl	8001924 <LL_ADC_IsDeepPowerDownEnabled>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff4d 	bl	8001900 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff82 	bl	8001974 <LL_ADC_IsInternalRegulatorEnabled>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d115      	bne.n	8001aa2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff66 	bl	800194c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a80:	4b84      	ldr	r3, [pc, #528]	; (8001c94 <HAL_ADC_Init+0x284>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	099b      	lsrs	r3, r3, #6
 8001a86:	4a84      	ldr	r2, [pc, #528]	; (8001c98 <HAL_ADC_Init+0x288>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	3301      	adds	r3, #1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a94:	e002      	b.n	8001a9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f9      	bne.n	8001a96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ff64 	bl	8001974 <LL_ADC_IsInternalRegulatorEnabled>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10d      	bne.n	8001ace <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff75 	bl	80019c2 <LL_ADC_REG_IsConversionOngoing>
 8001ad8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 80c8 	bne.w	8001c78 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 80c4 	bne.w	8001c78 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001af8:	f043 0202 	orr.w	r2, r3, #2
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff49 	bl	800199c <LL_ADC_IsEnabled>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10b      	bne.n	8001b28 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b10:	4862      	ldr	r0, [pc, #392]	; (8001c9c <HAL_ADC_Init+0x28c>)
 8001b12:	f7ff ff43 	bl	800199c <LL_ADC_IsEnabled>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d105      	bne.n	8001b28 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4619      	mov	r1, r3
 8001b22:	485f      	ldr	r0, [pc, #380]	; (8001ca0 <HAL_ADC_Init+0x290>)
 8001b24:	f7ff fdd4 	bl	80016d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7e5b      	ldrb	r3, [r3, #25]
 8001b2c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b32:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b38:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b3e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b46:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d106      	bne.n	8001b64 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	045b      	lsls	r3, r3, #17
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d009      	beq.n	8001b80 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_ADC_Init+0x294>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	430b      	orrs	r3, r1
 8001b92:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff12 	bl	80019c2 <LL_ADC_REG_IsConversionOngoing>
 8001b9e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff1f 	bl	80019e8 <LL_ADC_INJ_IsConversionOngoing>
 8001baa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d140      	bne.n	8001c34 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d13d      	bne.n	8001c34 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7e1b      	ldrb	r3, [r3, #24]
 8001bc0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bc2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bca:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bda:	f023 0306 	bic.w	r3, r3, #6
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	430b      	orrs	r3, r1
 8001be6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d118      	bne.n	8001c24 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c14:	430a      	orrs	r2, r1
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	611a      	str	r2, [r3, #16]
 8001c22:	e007      	b.n	8001c34 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d10c      	bne.n	8001c56 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f023 010f 	bic.w	r1, r3, #15
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	1e5a      	subs	r2, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
 8001c54:	e007      	b.n	8001c66 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 020f 	bic.w	r2, r2, #15
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	f023 0303 	bic.w	r3, r3, #3
 8001c6e:	f043 0201 	orr.w	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	659a      	str	r2, [r3, #88]	; 0x58
 8001c76:	e007      	b.n	8001c88 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	f043 0210 	orr.w	r2, r3, #16
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000000 	.word	0x20000000
 8001c98:	053e2d63 	.word	0x053e2d63
 8001c9c:	50040000 	.word	0x50040000
 8001ca0:	50040300 	.word	0x50040300
 8001ca4:	fff0c007 	.word	0xfff0c007

08001ca8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0b6      	sub	sp, #216	; 0xd8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x22>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e3d5      	b.n	8002476 <HAL_ADC_ConfigChannel+0x7ce>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fe73 	bl	80019c2 <LL_ADC_REG_IsConversionOngoing>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 83ba 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d824      	bhi.n	8001d36 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	3b02      	subs	r3, #2
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d81b      	bhi.n	8001d2e <HAL_ADC_ConfigChannel+0x86>
 8001cf6:	a201      	add	r2, pc, #4	; (adr r2, 8001cfc <HAL_ADC_ConfigChannel+0x54>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d0d 	.word	0x08001d0d
 8001d00:	08001d15 	.word	0x08001d15
 8001d04:	08001d1d 	.word	0x08001d1d
 8001d08:	08001d25 	.word	0x08001d25
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	220c      	movs	r2, #12
 8001d10:	605a      	str	r2, [r3, #4]
          break;
 8001d12:	e011      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2212      	movs	r2, #18
 8001d18:	605a      	str	r2, [r3, #4]
          break;
 8001d1a:	e00d      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2218      	movs	r2, #24
 8001d20:	605a      	str	r2, [r3, #4]
          break;
 8001d22:	e009      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2a:	605a      	str	r2, [r3, #4]
          break;
 8001d2c:	e004      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2206      	movs	r2, #6
 8001d32:	605a      	str	r2, [r3, #4]
          break;
 8001d34:	e000      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d36:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f7ff fd5f 	bl	8001808 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fe37 	bl	80019c2 <LL_ADC_REG_IsConversionOngoing>
 8001d54:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fe43 	bl	80019e8 <LL_ADC_INJ_IsConversionOngoing>
 8001d62:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 81c1 	bne.w	80020f2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f040 81bc 	bne.w	80020f2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d82:	d10f      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7ff fd66 	bl	8001860 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fd20 	bl	80017e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001da2:	e00e      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6819      	ldr	r1, [r3, #0]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	461a      	mov	r2, r3
 8001db2:	f7ff fd55 	bl	8001860 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fd10 	bl	80017e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	08db      	lsrs	r3, r3, #3
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d00a      	beq.n	8001dfa <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6919      	ldr	r1, [r3, #16]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001df4:	f7ff fca0 	bl	8001738 <LL_ADC_SetOffset>
 8001df8:	e17b      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fcbd 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10a      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x17e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fcb2 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	0e9b      	lsrs	r3, r3, #26
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	e01e      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x1bc>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fca7 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001e54:	2320      	movs	r3, #32
 8001e56:	e004      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x1d4>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	e018      	b.n	8001eae <HAL_ADC_ConfigChannel+0x206>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	e004      	b.n	8001eae <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d106      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fc76 	bl	80017ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fc5a 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10a      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x244>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2101      	movs	r1, #1
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fc4f 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	0e9b      	lsrs	r3, r3, #26
 8001ee6:	f003 021f 	and.w	r2, r3, #31
 8001eea:	e01e      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x282>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fc44 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	e004      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001f1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d105      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x29a>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0e9b      	lsrs	r3, r3, #26
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	e018      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x2cc>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001f66:	2320      	movs	r3, #32
 8001f68:	e004      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001f6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d106      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fc13 	bl	80017ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fbf7 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x30a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fbec 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	0e9b      	lsrs	r3, r3, #26
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	e01e      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x348>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fbe1 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e004      	b.n	8001fee <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001fe4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x360>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	e016      	b.n	8002036 <HAL_ADC_ConfigChannel+0x38e>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800201a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800201c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002028:	2320      	movs	r3, #32
 800202a:	e004      	b.n	8002036 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800202c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002036:	429a      	cmp	r2, r3
 8002038:	d106      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	2102      	movs	r1, #2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fbb2 	bl	80017ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2103      	movs	r1, #3
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fb96 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10a      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x3cc>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2103      	movs	r1, #3
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fb8b 	bl	8001780 <LL_ADC_GetOffsetChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	f003 021f 	and.w	r2, r3, #31
 8002072:	e017      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x3fc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2103      	movs	r1, #3
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fb80 	bl	8001780 <LL_ADC_GetOffsetChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800208c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800208e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002096:	2320      	movs	r3, #32
 8002098:	e003      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800209a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d105      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x414>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	e011      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x438>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80020d4:	2320      	movs	r3, #32
 80020d6:	e003      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80020d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d106      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	2103      	movs	r1, #3
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fb5d 	bl	80017ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fc50 	bl	800199c <LL_ADC_IsEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 8140 	bne.w	8002384 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6819      	ldr	r1, [r3, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	461a      	mov	r2, r3
 8002112:	f7ff fbd1 	bl	80018b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4a8f      	ldr	r2, [pc, #572]	; (8002358 <HAL_ADC_ConfigChannel+0x6b0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	f040 8131 	bne.w	8002384 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10b      	bne.n	800214a <HAL_ADC_ConfigChannel+0x4a2>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	3301      	adds	r3, #1
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2b09      	cmp	r3, #9
 8002140:	bf94      	ite	ls
 8002142:	2301      	movls	r3, #1
 8002144:	2300      	movhi	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	e019      	b.n	800217e <HAL_ADC_ConfigChannel+0x4d6>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002152:	fa93 f3a3 	rbit	r3, r3
 8002156:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800215a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800215c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002162:	2320      	movs	r3, #32
 8002164:	e003      	b.n	800216e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	2b09      	cmp	r3, #9
 8002176:	bf94      	ite	ls
 8002178:	2301      	movls	r3, #1
 800217a:	2300      	movhi	r3, #0
 800217c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800217e:	2b00      	cmp	r3, #0
 8002180:	d079      	beq.n	8002276 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218a:	2b00      	cmp	r3, #0
 800218c:	d107      	bne.n	800219e <HAL_ADC_ConfigChannel+0x4f6>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	3301      	adds	r3, #1
 8002196:	069b      	lsls	r3, r3, #26
 8002198:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219c:	e015      	b.n	80021ca <HAL_ADC_ConfigChannel+0x522>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80021b6:	2320      	movs	r3, #32
 80021b8:	e003      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80021ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	069b      	lsls	r3, r3, #26
 80021c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x542>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0e9b      	lsrs	r3, r3, #26
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	e017      	b.n	800221a <HAL_ADC_ConfigChannel+0x572>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002202:	2320      	movs	r3, #32
 8002204:	e003      	b.n	800220e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	3301      	adds	r3, #1
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	ea42 0103 	orr.w	r1, r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10a      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x598>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	3301      	adds	r3, #1
 8002232:	f003 021f 	and.w	r2, r3, #31
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	051b      	lsls	r3, r3, #20
 800223e:	e018      	b.n	8002272 <HAL_ADC_ConfigChannel+0x5ca>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800224e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e003      	b.n	8002264 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800225c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f003 021f 	and.w	r2, r3, #31
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002272:	430b      	orrs	r3, r1
 8002274:	e081      	b.n	800237a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227e:	2b00      	cmp	r3, #0
 8002280:	d107      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x5ea>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	0e9b      	lsrs	r3, r3, #26
 8002288:	3301      	adds	r3, #1
 800228a:	069b      	lsls	r3, r3, #26
 800228c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002290:	e015      	b.n	80022be <HAL_ADC_ConfigChannel+0x616>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80022aa:	2320      	movs	r3, #32
 80022ac:	e003      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	069b      	lsls	r3, r3, #26
 80022ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_ADC_ConfigChannel+0x636>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0e9b      	lsrs	r3, r3, #26
 80022d0:	3301      	adds	r3, #1
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	e017      	b.n	800230e <HAL_ADC_ConfigChannel+0x666>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	61fb      	str	r3, [r7, #28]
  return result;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80022f6:	2320      	movs	r3, #32
 80022f8:	e003      	b.n	8002302 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	fab3 f383 	clz	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	ea42 0103 	orr.w	r1, r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_ADC_ConfigChannel+0x692>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0e9b      	lsrs	r3, r3, #26
 8002324:	3301      	adds	r3, #1
 8002326:	f003 021f 	and.w	r2, r3, #31
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	3b1e      	subs	r3, #30
 8002332:	051b      	lsls	r3, r3, #20
 8002334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002338:	e01e      	b.n	8002378 <HAL_ADC_ConfigChannel+0x6d0>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa93 f3a3 	rbit	r3, r3
 8002346:	613b      	str	r3, [r7, #16]
  return result;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d104      	bne.n	800235c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002352:	2320      	movs	r3, #32
 8002354:	e006      	b.n	8002364 <HAL_ADC_ConfigChannel+0x6bc>
 8002356:	bf00      	nop
 8002358:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	f003 021f 	and.w	r2, r3, #31
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	3b1e      	subs	r3, #30
 8002372:	051b      	lsls	r3, r3, #20
 8002374:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002378:	430b      	orrs	r3, r1
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	6892      	ldr	r2, [r2, #8]
 800237e:	4619      	mov	r1, r3
 8002380:	f7ff fa6e 	bl	8001860 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_ADC_ConfigChannel+0x7d8>)
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d06c      	beq.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002390:	483c      	ldr	r0, [pc, #240]	; (8002484 <HAL_ADC_ConfigChannel+0x7dc>)
 8002392:	f7ff f9c3 	bl	800171c <LL_ADC_GetCommonPathInternalCh>
 8002396:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <HAL_ADC_ConfigChannel+0x7e0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d127      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d121      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a35      	ldr	r2, [pc, #212]	; (800248c <HAL_ADC_ConfigChannel+0x7e4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d157      	bne.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023c2:	4619      	mov	r1, r3
 80023c4:	482f      	ldr	r0, [pc, #188]	; (8002484 <HAL_ADC_ConfigChannel+0x7dc>)
 80023c6:	f7ff f996 	bl	80016f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_ADC_ConfigChannel+0x7e8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	4a30      	ldr	r2, [pc, #192]	; (8002494 <HAL_ADC_ConfigChannel+0x7ec>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	099b      	lsrs	r3, r3, #6
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023e4:	e002      	b.n	80023ec <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023f2:	e03a      	b.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a27      	ldr	r2, [pc, #156]	; (8002498 <HAL_ADC_ConfigChannel+0x7f0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d113      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x77e>
 80023fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1f      	ldr	r2, [pc, #124]	; (800248c <HAL_ADC_ConfigChannel+0x7e4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d12a      	bne.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002418:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241c:	4619      	mov	r1, r3
 800241e:	4819      	ldr	r0, [pc, #100]	; (8002484 <HAL_ADC_ConfigChannel+0x7dc>)
 8002420:	f7ff f969 	bl	80016f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002424:	e021      	b.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1c      	ldr	r2, [pc, #112]	; (800249c <HAL_ADC_ConfigChannel+0x7f4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d11c      	bne.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d116      	bne.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a12      	ldr	r2, [pc, #72]	; (800248c <HAL_ADC_ConfigChannel+0x7e4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d111      	bne.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800244a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800244e:	4619      	mov	r1, r3
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <HAL_ADC_ConfigChannel+0x7dc>)
 8002452:	f7ff f950 	bl	80016f6 <LL_ADC_SetCommonPathInternalCh>
 8002456:	e008      	b.n	800246a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002472:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002476:	4618      	mov	r0, r3
 8002478:	37d8      	adds	r7, #216	; 0xd8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	80080000 	.word	0x80080000
 8002484:	50040300 	.word	0x50040300
 8002488:	c7520000 	.word	0xc7520000
 800248c:	50040000 	.word	0x50040000
 8002490:	20000000 	.word	0x20000000
 8002494:	053e2d63 	.word	0x053e2d63
 8002498:	cb840000 	.word	0xcb840000
 800249c:	80000001 	.word	0x80000001

080024a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024bc:	4013      	ands	r3, r2
 80024be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024d2:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <__NVIC_SetPriorityGrouping+0x44>)
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	60d3      	str	r3, [r2, #12]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <__NVIC_GetPriorityGrouping+0x18>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	0a1b      	lsrs	r3, r3, #8
 80024f2:	f003 0307 	and.w	r3, r3, #7
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	2b00      	cmp	r3, #0
 8002514:	db0b      	blt.n	800252e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	f003 021f 	and.w	r2, r3, #31
 800251c:	4907      	ldr	r1, [pc, #28]	; (800253c <__NVIC_EnableIRQ+0x38>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	095b      	lsrs	r3, r3, #5
 8002524:	2001      	movs	r0, #1
 8002526:	fa00 f202 	lsl.w	r2, r0, r2
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e100 	.word	0xe000e100

08002540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	2b00      	cmp	r3, #0
 8002552:	db0a      	blt.n	800256a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	490c      	ldr	r1, [pc, #48]	; (800258c <__NVIC_SetPriority+0x4c>)
 800255a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255e:	0112      	lsls	r2, r2, #4
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	440b      	add	r3, r1
 8002564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002568:	e00a      	b.n	8002580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4908      	ldr	r1, [pc, #32]	; (8002590 <__NVIC_SetPriority+0x50>)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	3b04      	subs	r3, #4
 8002578:	0112      	lsls	r2, r2, #4
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	440b      	add	r3, r1
 800257e:	761a      	strb	r2, [r3, #24]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000e100 	.word	0xe000e100
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f1c3 0307 	rsb	r3, r3, #7
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	bf28      	it	cs
 80025b2:	2304      	movcs	r3, #4
 80025b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3304      	adds	r3, #4
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d902      	bls.n	80025c4 <NVIC_EncodePriority+0x30>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3b03      	subs	r3, #3
 80025c2:	e000      	b.n	80025c6 <NVIC_EncodePriority+0x32>
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c8:	f04f 32ff 	mov.w	r2, #4294967295
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43da      	mvns	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	401a      	ands	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa01 f303 	lsl.w	r3, r1, r3
 80025e6:	43d9      	mvns	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	4313      	orrs	r3, r2
         );
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800260c:	d301      	bcc.n	8002612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260e:	2301      	movs	r3, #1
 8002610:	e00f      	b.n	8002632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002612:	4a0a      	ldr	r2, [pc, #40]	; (800263c <SysTick_Config+0x40>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261a:	210f      	movs	r1, #15
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f7ff ff8e 	bl	8002540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <SysTick_Config+0x40>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262a:	4b04      	ldr	r3, [pc, #16]	; (800263c <SysTick_Config+0x40>)
 800262c:	2207      	movs	r2, #7
 800262e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	e000e010 	.word	0xe000e010

08002640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff29 	bl	80024a0 <__NVIC_SetPriorityGrouping>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	4603      	mov	r3, r0
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002668:	f7ff ff3e 	bl	80024e8 <__NVIC_GetPriorityGrouping>
 800266c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	6978      	ldr	r0, [r7, #20]
 8002674:	f7ff ff8e 	bl	8002594 <NVIC_EncodePriority>
 8002678:	4602      	mov	r2, r0
 800267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff5d 	bl	8002540 <__NVIC_SetPriority>
}
 8002686:	bf00      	nop
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff31 	bl	8002504 <__NVIC_EnableIRQ>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ffa2 	bl	80025fc <SysTick_Config>
 80026b8:	4603      	mov	r3, r0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0ac      	b.n	8002830 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f9d2 	bl	8002a84 <DFSDM_GetChannelFromInstance>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4a55      	ldr	r2, [pc, #340]	; (8002838 <HAL_DFSDM_ChannelInit+0x174>)
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e09f      	b.n	8002830 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7fe fc17 	bl	8000f24 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80026f6:	4b51      	ldr	r3, [pc, #324]	; (800283c <HAL_DFSDM_ChannelInit+0x178>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	4a4f      	ldr	r2, [pc, #316]	; (800283c <HAL_DFSDM_ChannelInit+0x178>)
 80026fe:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002700:	4b4e      	ldr	r3, [pc, #312]	; (800283c <HAL_DFSDM_ChannelInit+0x178>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d125      	bne.n	8002754 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002708:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <HAL_DFSDM_ChannelInit+0x17c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a4c      	ldr	r2, [pc, #304]	; (8002840 <HAL_DFSDM_ChannelInit+0x17c>)
 800270e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002712:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002714:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <HAL_DFSDM_ChannelInit+0x17c>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4948      	ldr	r1, [pc, #288]	; (8002840 <HAL_DFSDM_ChannelInit+0x17c>)
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002722:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_DFSDM_ChannelInit+0x17c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a46      	ldr	r2, [pc, #280]	; (8002840 <HAL_DFSDM_ChannelInit+0x17c>)
 8002728:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800272c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	791b      	ldrb	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d108      	bne.n	8002748 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002736:	4b42      	ldr	r3, [pc, #264]	; (8002840 <HAL_DFSDM_ChannelInit+0x17c>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	3b01      	subs	r3, #1
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	493f      	ldr	r1, [pc, #252]	; (8002840 <HAL_DFSDM_ChannelInit+0x17c>)
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002748:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_DFSDM_ChannelInit+0x17c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3c      	ldr	r2, [pc, #240]	; (8002840 <HAL_DFSDM_ChannelInit+0x17c>)
 800274e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002752:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002762:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6819      	ldr	r1, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002772:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002778:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 020f 	bic.w	r2, r2, #15
 8002790:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6819      	ldr	r1, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80027b8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6899      	ldr	r1, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f002 0207 	and.w	r2, r2, #7
 80027e4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002810:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f930 	bl	8002a84 <DFSDM_GetChannelFromInstance>
 8002824:	4602      	mov	r2, r0
 8002826:	4904      	ldr	r1, [pc, #16]	; (8002838 <HAL_DFSDM_ChannelInit+0x174>)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200001b8 	.word	0x200001b8
 800283c:	200001b4 	.word	0x200001b4
 8002840:	40016000 	.word	0x40016000

08002844 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0ca      	b.n	80029ec <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a66      	ldr	r2, [pc, #408]	; (80029f4 <HAL_DFSDM_FilterInit+0x1b0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d109      	bne.n	8002874 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002864:	2b01      	cmp	r3, #1
 8002866:	d003      	beq.n	8002870 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0bb      	b.n	80029ec <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7fe fadf 	bl	8000e50 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80028a0:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7a1b      	ldrb	r3, [r3, #8]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d108      	bne.n	80028bc <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e007      	b.n	80028cc <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80028ca:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7a5b      	ldrb	r3, [r3, #9]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d108      	bne.n	80028e6 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e007      	b.n	80028f6 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80028f4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002904:	f023 0308 	bic.w	r3, r3, #8
 8002908:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d108      	bne.n	8002924 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6819      	ldr	r1, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7c1b      	ldrb	r3, [r3, #16]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d108      	bne.n	800293e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0210 	orr.w	r2, r2, #16
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e007      	b.n	800294e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0210 	bic.w	r2, r2, #16
 800294c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7c5b      	ldrb	r3, [r3, #17]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0220 	orr.w	r2, r2, #32
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e007      	b.n	8002978 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0220 	bic.w	r2, r2, #32
 8002976:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8002986:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800298a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6959      	ldr	r1, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	3b01      	subs	r3, #1
 800299c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800299e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80029a6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699a      	ldr	r2, [r3, #24]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7c1a      	ldrb	r2, [r3, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40016100 	.word	0x40016100

080029f8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d02e      	beq.n	8002a70 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002a18:	2bff      	cmp	r3, #255	; 0xff
 8002a1a:	d029      	beq.n	8002a70 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10d      	bne.n	8002a52 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a44:	431a      	orrs	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e00a      	b.n	8002a68 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6819      	ldr	r1, [r3, #0]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a6e:	e001      	b.n	8002a74 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <DFSDM_GetChannelFromInstance+0x7c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d102      	bne.n	8002a9a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e02b      	b.n	8002af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a19      	ldr	r2, [pc, #100]	; (8002b04 <DFSDM_GetChannelFromInstance+0x80>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d102      	bne.n	8002aa8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	e024      	b.n	8002af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <DFSDM_GetChannelFromInstance+0x84>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d102      	bne.n	8002ab6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e01d      	b.n	8002af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <DFSDM_GetChannelFromInstance+0x88>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d102      	bne.n	8002ac4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e016      	b.n	8002af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <DFSDM_GetChannelFromInstance+0x8c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d102      	bne.n	8002ad2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002acc:	2305      	movs	r3, #5
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e00f      	b.n	8002af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <DFSDM_GetChannelFromInstance+0x90>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d102      	bne.n	8002ae0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002ada:	2306      	movs	r3, #6
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e008      	b.n	8002af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <DFSDM_GetChannelFromInstance+0x94>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d102      	bne.n	8002aee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002ae8:	2307      	movs	r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	e001      	b.n	8002af2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002aee:	2303      	movs	r3, #3
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40016000 	.word	0x40016000
 8002b04:	40016020 	.word	0x40016020
 8002b08:	40016040 	.word	0x40016040
 8002b0c:	40016080 	.word	0x40016080
 8002b10:	400160a0 	.word	0x400160a0
 8002b14:	400160c0 	.word	0x400160c0
 8002b18:	400160e0 	.word	0x400160e0

08002b1c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e08d      	b.n	8002c4a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <HAL_DMA_Init+0x138>)
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d80f      	bhi.n	8002b5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b45      	ldr	r3, [pc, #276]	; (8002c58 <HAL_DMA_Init+0x13c>)
 8002b42:	4413      	add	r3, r2
 8002b44:	4a45      	ldr	r2, [pc, #276]	; (8002c5c <HAL_DMA_Init+0x140>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	009a      	lsls	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <HAL_DMA_Init+0x144>)
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
 8002b58:	e00e      	b.n	8002b78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <HAL_DMA_Init+0x148>)
 8002b62:	4413      	add	r3, r2
 8002b64:	4a3d      	ldr	r2, [pc, #244]	; (8002c5c <HAL_DMA_Init+0x140>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	009a      	lsls	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a3c      	ldr	r2, [pc, #240]	; (8002c68 <HAL_DMA_Init+0x14c>)
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f8fe 	bl	8002dcc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd8:	d102      	bne.n	8002be0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bf4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d010      	beq.n	8002c20 <HAL_DMA_Init+0x104>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d80c      	bhi.n	8002c20 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f91e 	bl	8002e48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	e008      	b.n	8002c32 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40020407 	.word	0x40020407
 8002c58:	bffdfff8 	.word	0xbffdfff8
 8002c5c:	cccccccd 	.word	0xcccccccd
 8002c60:	40020000 	.word	0x40020000
 8002c64:	bffdfbf8 	.word	0xbffdfbf8
 8002c68:	40020400 	.word	0x40020400

08002c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f003 031c 	and.w	r3, r3, #28
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d026      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x7a>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d021      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0204 	bic.w	r2, r2, #4
 8002cbe:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	f003 021c 	and.w	r2, r3, #28
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	2104      	movs	r1, #4
 8002cce:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d071      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002ce4:	e06c      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f003 031c 	and.w	r3, r3, #28
 8002cee:	2202      	movs	r2, #2
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d02e      	beq.n	8002d58 <HAL_DMA_IRQHandler+0xec>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d029      	beq.n	8002d58 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 020a 	bic.w	r2, r2, #10
 8002d20:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f003 021c 	and.w	r2, r3, #28
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	2102      	movs	r1, #2
 8002d38:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d038      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d56:	e033      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	f003 031c 	and.w	r3, r3, #28
 8002d60:	2208      	movs	r2, #8
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d02a      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x156>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d025      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 020e 	bic.w	r2, r2, #14
 8002d84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f003 021c 	and.w	r2, r3, #28
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d004      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
}
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d80a      	bhi.n	8002df6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dec:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6493      	str	r3, [r2, #72]	; 0x48
 8002df4:	e007      	b.n	8002e06 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	009a      	lsls	r2, r3, #2
 8002dfe:	4b0f      	ldr	r3, [pc, #60]	; (8002e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e00:	4413      	add	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3b08      	subs	r3, #8
 8002e0e:	4a0c      	ldr	r2, [pc, #48]	; (8002e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	091b      	lsrs	r3, r3, #4
 8002e16:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	2201      	movs	r2, #1
 8002e26:	409a      	lsls	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	40020407 	.word	0x40020407
 8002e3c:	4002081c 	.word	0x4002081c
 8002e40:	cccccccd 	.word	0xcccccccd
 8002e44:	40020880 	.word	0x40020880

08002e48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	461a      	mov	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a08      	ldr	r2, [pc, #32]	; (8002e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e6a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2201      	movs	r2, #1
 8002e76:	409a      	lsls	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	1000823f 	.word	0x1000823f
 8002e8c:	40020940 	.word	0x40020940

08002e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e9e:	e166      	b.n	800316e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	4013      	ands	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8158 	beq.w	8003168 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d00b      	beq.n	8002ed8 <HAL_GPIO_Init+0x48>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d007      	beq.n	8002ed8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ecc:	2b11      	cmp	r3, #17
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b12      	cmp	r3, #18
 8002ed6:	d130      	bne.n	8002f3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	f003 0201 	and.w	r2, r3, #1
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0xea>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b12      	cmp	r3, #18
 8002f78:	d123      	bne.n	8002fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	08da      	lsrs	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3208      	adds	r2, #8
 8002f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220f      	movs	r2, #15
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	08da      	lsrs	r2, r3, #3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3208      	adds	r2, #8
 8002fbc:	6939      	ldr	r1, [r7, #16]
 8002fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	2203      	movs	r2, #3
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 0203 	and.w	r2, r3, #3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80b2 	beq.w	8003168 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003004:	4b61      	ldr	r3, [pc, #388]	; (800318c <HAL_GPIO_Init+0x2fc>)
 8003006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003008:	4a60      	ldr	r2, [pc, #384]	; (800318c <HAL_GPIO_Init+0x2fc>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6613      	str	r3, [r2, #96]	; 0x60
 8003010:	4b5e      	ldr	r3, [pc, #376]	; (800318c <HAL_GPIO_Init+0x2fc>)
 8003012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800301c:	4a5c      	ldr	r2, [pc, #368]	; (8003190 <HAL_GPIO_Init+0x300>)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	3302      	adds	r3, #2
 8003024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	220f      	movs	r2, #15
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003046:	d02b      	beq.n	80030a0 <HAL_GPIO_Init+0x210>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_GPIO_Init+0x304>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d025      	beq.n	800309c <HAL_GPIO_Init+0x20c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a51      	ldr	r2, [pc, #324]	; (8003198 <HAL_GPIO_Init+0x308>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d01f      	beq.n	8003098 <HAL_GPIO_Init+0x208>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a50      	ldr	r2, [pc, #320]	; (800319c <HAL_GPIO_Init+0x30c>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d019      	beq.n	8003094 <HAL_GPIO_Init+0x204>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a4f      	ldr	r2, [pc, #316]	; (80031a0 <HAL_GPIO_Init+0x310>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d013      	beq.n	8003090 <HAL_GPIO_Init+0x200>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a4e      	ldr	r2, [pc, #312]	; (80031a4 <HAL_GPIO_Init+0x314>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00d      	beq.n	800308c <HAL_GPIO_Init+0x1fc>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a4d      	ldr	r2, [pc, #308]	; (80031a8 <HAL_GPIO_Init+0x318>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <HAL_GPIO_Init+0x1f8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a4c      	ldr	r2, [pc, #304]	; (80031ac <HAL_GPIO_Init+0x31c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <HAL_GPIO_Init+0x1f4>
 8003080:	2307      	movs	r3, #7
 8003082:	e00e      	b.n	80030a2 <HAL_GPIO_Init+0x212>
 8003084:	2308      	movs	r3, #8
 8003086:	e00c      	b.n	80030a2 <HAL_GPIO_Init+0x212>
 8003088:	2306      	movs	r3, #6
 800308a:	e00a      	b.n	80030a2 <HAL_GPIO_Init+0x212>
 800308c:	2305      	movs	r3, #5
 800308e:	e008      	b.n	80030a2 <HAL_GPIO_Init+0x212>
 8003090:	2304      	movs	r3, #4
 8003092:	e006      	b.n	80030a2 <HAL_GPIO_Init+0x212>
 8003094:	2303      	movs	r3, #3
 8003096:	e004      	b.n	80030a2 <HAL_GPIO_Init+0x212>
 8003098:	2302      	movs	r3, #2
 800309a:	e002      	b.n	80030a2 <HAL_GPIO_Init+0x212>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <HAL_GPIO_Init+0x212>
 80030a0:	2300      	movs	r3, #0
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	f002 0203 	and.w	r2, r2, #3
 80030a8:	0092      	lsls	r2, r2, #2
 80030aa:	4093      	lsls	r3, r2
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030b2:	4937      	ldr	r1, [pc, #220]	; (8003190 <HAL_GPIO_Init+0x300>)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3302      	adds	r3, #2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030c0:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <HAL_GPIO_Init+0x320>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030e4:	4a32      	ldr	r2, [pc, #200]	; (80031b0 <HAL_GPIO_Init+0x320>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_GPIO_Init+0x320>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800310e:	4a28      	ldr	r2, [pc, #160]	; (80031b0 <HAL_GPIO_Init+0x320>)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003114:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <HAL_GPIO_Init+0x320>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003138:	4a1d      	ldr	r2, [pc, #116]	; (80031b0 <HAL_GPIO_Init+0x320>)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800313e:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <HAL_GPIO_Init+0x320>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003162:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <HAL_GPIO_Init+0x320>)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3301      	adds	r3, #1
 800316c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	fa22 f303 	lsr.w	r3, r2, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	f47f ae91 	bne.w	8002ea0 <HAL_GPIO_Init+0x10>
  }
}
 800317e:	bf00      	nop
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	40021000 	.word	0x40021000
 8003190:	40010000 	.word	0x40010000
 8003194:	48000400 	.word	0x48000400
 8003198:	48000800 	.word	0x48000800
 800319c:	48000c00 	.word	0x48000c00
 80031a0:	48001000 	.word	0x48001000
 80031a4:	48001400 	.word	0x48001400
 80031a8:	48001800 	.word	0x48001800
 80031ac:	48001c00 	.word	0x48001c00
 80031b0:	40010400 	.word	0x40010400

080031b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
 80031d0:	e001      	b.n	80031d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
 80031f0:	4613      	mov	r3, r2
 80031f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f4:	787b      	ldrb	r3, [r7, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003200:	e002      	b.n	8003208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4013      	ands	r3, r2
 800322c:	041a      	lsls	r2, r3, #16
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	43d9      	mvns	r1, r3
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	400b      	ands	r3, r1
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	619a      	str	r2, [r3, #24]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e081      	b.n	800335e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fe86 	bl	8000f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003298:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d107      	bne.n	80032c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	e006      	b.n	80032d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d104      	bne.n	80032e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003304:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691a      	ldr	r2, [r3, #16]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	ea42 0103 	orr.w	r1, r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	021a      	lsls	r2, r3, #8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69d9      	ldr	r1, [r3, #28]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b20      	cmp	r3, #32
 800337a:	d138      	bne.n	80033ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003386:	2302      	movs	r3, #2
 8003388:	e032      	b.n	80033f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2224      	movs	r2, #36	; 0x24
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e000      	b.n	80033f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
  }
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	d139      	bne.n	8003486 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800341c:	2302      	movs	r3, #2
 800341e:	e033      	b.n	8003488 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800344e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003496:	b08f      	sub	sp, #60	; 0x3c
 8003498:	af0a      	add	r7, sp, #40	; 0x28
 800349a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e116      	b.n	80036d4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f00a fb55 	bl	800db70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2203      	movs	r2, #3
 80034ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f007 f8e8 	bl	800a6ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	687e      	ldr	r6, [r7, #4]
 80034f2:	466d      	mov	r5, sp
 80034f4:	f106 0410 	add.w	r4, r6, #16
 80034f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003500:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003504:	e885 0003 	stmia.w	r5, {r0, r1}
 8003508:	1d33      	adds	r3, r6, #4
 800350a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800350c:	6838      	ldr	r0, [r7, #0]
 800350e:	f006 fffb 	bl	800a508 <USB_CoreInit>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0d7      	b.n	80036d4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f007 f8d6 	bl	800a6dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	e04a      	b.n	80035cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	333d      	adds	r3, #61	; 0x3d
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	333c      	adds	r3, #60	; 0x3c
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800355e:	7bfa      	ldrb	r2, [r7, #15]
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	b298      	uxth	r0, r3
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3342      	adds	r3, #66	; 0x42
 8003572:	4602      	mov	r2, r0
 8003574:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003576:	7bfa      	ldrb	r2, [r7, #15]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	333f      	adds	r3, #63	; 0x3f
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3344      	adds	r3, #68	; 0x44
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	3348      	adds	r3, #72	; 0x48
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	3350      	adds	r3, #80	; 0x50
 80035c2:	2200      	movs	r2, #0
 80035c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	3301      	adds	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3af      	bcc.n	8003536 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	73fb      	strb	r3, [r7, #15]
 80035da:	e044      	b.n	8003666 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800361a:	2200      	movs	r2, #0
 800361c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	3301      	adds	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	d3b5      	bcc.n	80035dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	687e      	ldr	r6, [r7, #4]
 8003678:	466d      	mov	r5, sp
 800367a:	f106 0410 	add.w	r4, r6, #16
 800367e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003686:	e894 0003 	ldmia.w	r4, {r0, r1}
 800368a:	e885 0003 	stmia.w	r5, {r0, r1}
 800368e:	1d33      	adds	r3, r6, #4
 8003690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	f007 f84c 	bl	800a730 <USB_DevInit>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e014      	b.n	80036d4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d102      	bne.n	80036c8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 ff62 	bl	800458c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f007 ffce 	bl	800b66e <USB_DevDisconnect>

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_PCD_Start+0x1c>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e01c      	b.n	8003732 <HAL_PCD_Start+0x56>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f006 ffbd 	bl	800a698 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f007 ff82 	bl	800b62c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800373a:	b590      	push	{r4, r7, lr}
 800373c:	b08d      	sub	sp, #52	; 0x34
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f008 f840 	bl	800b7d6 <USB_GetMode>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f040 838f 	bne.w	8003e7c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f007 ffa4 	bl	800b6b0 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8385 	beq.w	8003e7a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f007 ff9b 	bl	800b6b0 <USB_ReadInterrupts>
 800377a:	4603      	mov	r3, r0
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d107      	bne.n	8003794 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f002 0202 	and.w	r2, r2, #2
 8003792:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f007 ff89 	bl	800b6b0 <USB_ReadInterrupts>
 800379e:	4603      	mov	r3, r0
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d161      	bne.n	800386c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0210 	bic.w	r2, r2, #16
 80037b6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f003 020f 	and.w	r2, r3, #15
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	3304      	adds	r3, #4
 80037d6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	0c5b      	lsrs	r3, r3, #17
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d124      	bne.n	800382e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d035      	beq.n	800385c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037fe:	b29b      	uxth	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	6a38      	ldr	r0, [r7, #32]
 8003804:	f007 fdef 	bl	800b3e6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003814:	441a      	add	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003826:	441a      	add	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	619a      	str	r2, [r3, #24]
 800382c:	e016      	b.n	800385c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	0c5b      	lsrs	r3, r3, #17
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	2b06      	cmp	r3, #6
 8003838:	d110      	bne.n	800385c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003840:	2208      	movs	r2, #8
 8003842:	4619      	mov	r1, r3
 8003844:	6a38      	ldr	r0, [r7, #32]
 8003846:	f007 fdce 	bl	800b3e6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003856:	441a      	add	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0210 	orr.w	r2, r2, #16
 800386a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f007 ff1d 	bl	800b6b0 <USB_ReadInterrupts>
 8003876:	4603      	mov	r3, r0
 8003878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003880:	d16e      	bne.n	8003960 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f007 ff23 	bl	800b6d6 <USB_ReadDevAllOutEpInterrupt>
 8003890:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003892:	e062      	b.n	800395a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d057      	beq.n	800394e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	4611      	mov	r1, r2
 80038a8:	4618      	mov	r0, r3
 80038aa:	f007 ff48 	bl	800b73e <USB_ReadDevOutEPInterrupt>
 80038ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00c      	beq.n	80038d4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c6:	461a      	mov	r2, r3
 80038c8:	2301      	movs	r3, #1
 80038ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80038cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fd82 	bl	80043d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ea:	461a      	mov	r2, r3
 80038ec:	2308      	movs	r3, #8
 80038ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fdbe 	bl	8004474 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390e:	461a      	mov	r2, r3
 8003910:	2310      	movs	r3, #16
 8003912:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392a:	461a      	mov	r2, r3
 800392c:	2320      	movs	r3, #32
 800392e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003946:	461a      	mov	r2, r3
 8003948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800394c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	3301      	adds	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	2b00      	cmp	r3, #0
 800395e:	d199      	bne.n	8003894 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f007 fea3 	bl	800b6b0 <USB_ReadInterrupts>
 800396a:	4603      	mov	r3, r0
 800396c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003970:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003974:	f040 8087 	bne.w	8003a86 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f007 fec4 	bl	800b70a <USB_ReadDevAllInEpInterrupt>
 8003982:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003988:	e07a      	b.n	8003a80 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d06f      	beq.n	8003a74 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f007 feeb 	bl	800b77a <USB_ReadDevInEPInterrupt>
 80039a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	2201      	movs	r2, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69f9      	ldr	r1, [r7, #28]
 80039cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039d0:	4013      	ands	r3, r2
 80039d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e0:	461a      	mov	r2, r3
 80039e2:	2301      	movs	r3, #1
 80039e4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4619      	mov	r1, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f00a f952 	bl	800dc96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	461a      	mov	r2, r3
 8003a26:	2310      	movs	r3, #16
 8003a28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a40:	461a      	mov	r2, r3
 8003a42:	2340      	movs	r3, #64	; 0x40
 8003a44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2302      	movs	r3, #2
 8003a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fc29 	bl	80042c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	3301      	adds	r3, #1
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d181      	bne.n	800398a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f007 fe10 	bl	800b6b0 <USB_ReadInterrupts>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a9a:	d122      	bne.n	8003ae2 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d108      	bne.n	8003acc <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f00a fbfd 	bl	800e2c4 <HAL_PCDEx_LPM_Callback>
 8003aca:	e002      	b.n	8003ad2 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f00a f94f 	bl	800dd70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f007 fde2 	bl	800b6b0 <USB_ReadInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af6:	d112      	bne.n	8003b1e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d102      	bne.n	8003b0e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f00a f90b 	bl	800dd24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f007 fdc4 	bl	800b6b0 <USB_ReadInterrupts>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b32:	d121      	bne.n	8003b78 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003b42:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d111      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	f003 020f 	and.w	r2, r3, #15
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003b68:	2101      	movs	r1, #1
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f00a fbaa 	bl	800e2c4 <HAL_PCDEx_LPM_Callback>
 8003b70:	e002      	b.n	8003b78 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f00a f8d6 	bl	800dd24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f007 fd97 	bl	800b6b0 <USB_ReadInterrupts>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8c:	f040 80c5 	bne.w	8003d1a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2110      	movs	r1, #16
 8003baa:	4618      	mov	r0, r3
 8003bac:	f006 ff0c 	bl	800a9c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb4:	e056      	b.n	8003c64 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bc8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003be8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfa:	0151      	lsls	r1, r2, #5
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	440a      	add	r2, r1
 8003c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	461a      	mov	r2, r3
 8003c18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2e:	0151      	lsls	r1, r2, #5
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	440a      	add	r2, r1
 8003c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	3301      	adds	r3, #1
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d3a3      	bcc.n	8003bb6 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003c80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9a:	f043 030b 	orr.w	r3, r3, #11
 8003c9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb0:	f043 030b 	orr.w	r3, r3, #11
 8003cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb6:	e015      	b.n	8003ce4 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003cce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cde:	f043 030b 	orr.w	r3, r3, #11
 8003ce2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f007 fd97 	bl	800b838 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f007 fcc6 	bl	800b6b0 <USB_ReadInterrupts>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2e:	d124      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f007 fd5c 	bl	800b7f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f006 fea3 	bl	800aa8a <USB_GetDevSpeed>
 8003d44:	4603      	mov	r3, r0
 8003d46:	461a      	mov	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681c      	ldr	r4, [r3, #0]
 8003d50:	f001 fb10 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8003d54:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f006 fbfe 	bl	800a560 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f009 ffbe 	bl	800dce6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f007 fc96 	bl	800b6b0 <USB_ReadInterrupts>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d10a      	bne.n	8003da4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f009 ff9b 	bl	800dcca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f002 0208 	and.w	r2, r2, #8
 8003da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f007 fc81 	bl	800b6b0 <USB_ReadInterrupts>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db8:	d10f      	bne.n	8003dda <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f00a f80d 	bl	800dde4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f007 fc66 	bl	800b6b0 <USB_ReadInterrupts>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dee:	d10f      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f009 ffe0 	bl	800ddc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f007 fc4b 	bl	800b6b0 <USB_ReadInterrupts>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e24:	d10a      	bne.n	8003e3c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f009 ffee 	bl	800de08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f007 fc35 	bl	800b6b0 <USB_ReadInterrupts>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d115      	bne.n	8003e7c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f009 ffde 	bl	800de24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	e000      	b.n	8003e7c <HAL_PCD_IRQHandler+0x742>
      return;
 8003e7a:	bf00      	nop
    }
  }
}
 8003e7c:	3734      	adds	r7, #52	; 0x34
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd90      	pop	{r4, r7, pc}

08003e82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_PCD_SetAddress+0x1a>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e013      	b.n	8003ec4 <HAL_PCD_SetAddress+0x42>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f007 fb93 	bl	800b5e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4603      	mov	r3, r0
 8003edc:	70fb      	strb	r3, [r7, #3]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	803b      	strh	r3, [r7, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da0f      	bge.n	8003f12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	f003 020f 	and.w	r2, r3, #15
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	3338      	adds	r3, #56	; 0x38
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	3304      	adds	r3, #4
 8003f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	705a      	strb	r2, [r3, #1]
 8003f10:	e00f      	b.n	8003f32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	3304      	adds	r3, #4
 8003f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f3e:	883a      	ldrh	r2, [r7, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	78ba      	ldrb	r2, [r7, #2]
 8003f48:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	785b      	ldrb	r3, [r3, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d004      	beq.n	8003f5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f5c:	78bb      	ldrb	r3, [r7, #2]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d102      	bne.n	8003f68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_PCD_EP_Open+0xaa>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e00e      	b.n	8003f94 <HAL_PCD_EP_Open+0xc8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f006 fd9f 	bl	800aac8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003f92:	7afb      	ldrb	r3, [r7, #11]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da0f      	bge.n	8003fd0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	3338      	adds	r3, #56	; 0x38
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	705a      	strb	r2, [r3, #1]
 8003fce:	e00f      	b.n	8003ff0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	1a9b      	subs	r3, r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_PCD_EP_Close+0x6e>
 8004006:	2302      	movs	r3, #2
 8004008:	e00e      	b.n	8004028 <HAL_PCD_EP_Close+0x8c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	4618      	mov	r0, r3
 800401a:	f006 fddd 	bl	800abd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	460b      	mov	r3, r1
 800403e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004040:	7afb      	ldrb	r3, [r7, #11]
 8004042:	f003 020f 	and.w	r2, r3, #15
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	3304      	adds	r3, #4
 8004058:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2200      	movs	r2, #0
 8004070:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004072:	7afb      	ldrb	r3, [r7, #11]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	b2da      	uxtb	r2, r3
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800407e:	7afb      	ldrb	r3, [r7, #11]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6979      	ldr	r1, [r7, #20]
 800408e:	4618      	mov	r0, r3
 8004090:	f007 f85a 	bl	800b148 <USB_EP0StartXfer>
 8004094:	e005      	b.n	80040a2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6979      	ldr	r1, [r7, #20]
 800409c:	4618      	mov	r0, r3
 800409e:	f006 fe77 	bl	800ad90 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	460b      	mov	r3, r1
 80040ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ec:	7afb      	ldrb	r3, [r7, #11]
 80040ee:	f003 020f 	and.w	r2, r3, #15
 80040f2:	4613      	mov	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	3338      	adds	r3, #56	; 0x38
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	3304      	adds	r3, #4
 8004102:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2201      	movs	r2, #1
 800411a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800411c:	7afb      	ldrb	r3, [r7, #11]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	b2da      	uxtb	r2, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004128:	7afb      	ldrb	r3, [r7, #11]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6979      	ldr	r1, [r7, #20]
 8004138:	4618      	mov	r0, r3
 800413a:	f007 f805 	bl	800b148 <USB_EP0StartXfer>
 800413e:	e005      	b.n	800414c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6979      	ldr	r1, [r7, #20]
 8004146:	4618      	mov	r0, r3
 8004148:	f006 fe22 	bl	800ad90 <USB_EPStartXfer>
  }

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d901      	bls.n	8004174 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e04e      	b.n	8004212 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004178:	2b00      	cmp	r3, #0
 800417a:	da0f      	bge.n	800419c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	f003 020f 	and.w	r2, r3, #15
 8004182:	4613      	mov	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	3338      	adds	r3, #56	; 0x38
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4413      	add	r3, r2
 8004190:	3304      	adds	r3, #4
 8004192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	705a      	strb	r2, [r3, #1]
 800419a:	e00d      	b.n	80041b8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_PCD_EP_SetStall+0x82>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e01c      	b.n	8004212 <HAL_PCD_EP_SetStall+0xbc>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68f9      	ldr	r1, [r7, #12]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f007 f926 	bl	800b438 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d108      	bne.n	8004208 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f007 fb18 	bl	800b838 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	f003 020f 	and.w	r2, r3, #15
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	d901      	bls.n	8004238 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e042      	b.n	80042be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800423c:	2b00      	cmp	r3, #0
 800423e:	da0f      	bge.n	8004260 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	f003 020f 	and.w	r2, r3, #15
 8004246:	4613      	mov	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	3338      	adds	r3, #56	; 0x38
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	4413      	add	r3, r2
 8004254:	3304      	adds	r3, #4
 8004256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	705a      	strb	r2, [r3, #1]
 800425e:	e00f      	b.n	8004280 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	3304      	adds	r3, #4
 8004278:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_PCD_EP_ClrStall+0x86>
 800429c:	2302      	movs	r3, #2
 800429e:	e00e      	b.n	80042be <HAL_PCD_EP_ClrStall+0xa4>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68f9      	ldr	r1, [r7, #12]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f007 f930 	bl	800b514 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b088      	sub	sp, #32
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	3338      	adds	r3, #56	; 0x38
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	4413      	add	r3, r2
 80042ea:	3304      	adds	r3, #4
 80042ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699a      	ldr	r2, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d901      	bls.n	80042fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e067      	b.n	80043ce <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	695a      	ldr	r2, [r3, #20]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	429a      	cmp	r2, r3
 8004312:	d902      	bls.n	800431a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3303      	adds	r3, #3
 800431e:	089b      	lsrs	r3, r3, #2
 8004320:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004322:	e026      	b.n	8004372 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	429a      	cmp	r2, r3
 8004338:	d902      	bls.n	8004340 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	3303      	adds	r3, #3
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68d9      	ldr	r1, [r3, #12]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	b29b      	uxth	r3, r3
 8004354:	6978      	ldr	r0, [r7, #20]
 8004356:	f007 f815 	bl	800b384 <USB_WritePacket>

    ep->xfer_buff  += len;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	441a      	add	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	441a      	add	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	b29b      	uxth	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	429a      	cmp	r2, r3
 8004386:	d809      	bhi.n	800439c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004390:	429a      	cmp	r2, r3
 8004392:	d203      	bcs.n	800439c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1c3      	bne.n	8004324 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d811      	bhi.n	80043cc <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	2201      	movs	r2, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	6939      	ldr	r1, [r7, #16]
 80043c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043c8:	4013      	ands	r3, r2
 80043ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	333c      	adds	r3, #60	; 0x3c
 80043f0:	3304      	adds	r3, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a19      	ldr	r2, [pc, #100]	; (8004470 <PCD_EP_OutXfrComplete_int+0x98>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d124      	bne.n	8004458 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004424:	461a      	mov	r2, r3
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	6093      	str	r3, [r2, #8]
 800442c:	e01a      	b.n	8004464 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	461a      	mov	r2, r3
 8004446:	2320      	movs	r3, #32
 8004448:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	4619      	mov	r1, r3
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f009 fc05 	bl	800dc60 <HAL_PCD_DataOutStageCallback>
 8004456:	e005      	b.n	8004464 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	4619      	mov	r1, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f009 fbfe 	bl	800dc60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	4f54310a 	.word	0x4f54310a

08004474 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	333c      	adds	r3, #60	; 0x3c
 800448c:	3304      	adds	r3, #4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <PCD_EP_OutSetupPacket_int+0x64>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d90e      	bls.n	80044c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	461a      	mov	r2, r3
 80044c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f009 fbb7 	bl	800dc3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	4f54300a 	.word	0x4f54300a

080044dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
 80044e8:	4613      	mov	r3, r2
 80044ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044fa:	883b      	ldrh	r3, [r7, #0]
 80044fc:	0419      	lsls	r1, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	430a      	orrs	r2, r1
 8004506:	629a      	str	r2, [r3, #40]	; 0x28
 8004508:	e028      	b.n	800455c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	4413      	add	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004518:	2300      	movs	r3, #0
 800451a:	73fb      	strb	r3, [r7, #15]
 800451c:	e00d      	b.n	800453a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	3340      	adds	r3, #64	; 0x40
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	4413      	add	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	3301      	adds	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	7bfa      	ldrb	r2, [r7, #15]
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	3b01      	subs	r3, #1
 8004540:	429a      	cmp	r2, r3
 8004542:	d3ec      	bcc.n	800451e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004544:	883b      	ldrh	r3, [r7, #0]
 8004546:	0418      	lsls	r0, r3, #16
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	3b01      	subs	r3, #1
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	4302      	orrs	r2, r0
 8004554:	3340      	adds	r3, #64	; 0x40
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	887a      	ldrh	r2, [r7, #2]
 800457c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045be:	f043 0303 	orr.w	r3, r3, #3
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e2:	6013      	str	r3, [r2, #0]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40007000 	.word	0x40007000

080045f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <HAL_PWREx_GetVoltageRange+0x3c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004604:	d102      	bne.n	800460c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800460a:	e00b      	b.n	8004624 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <HAL_PWREx_GetVoltageRange+0x3c>)
 800460e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461a:	d102      	bne.n	8004622 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800461c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004620:	e000      	b.n	8004624 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004622:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	40007000 	.word	0x40007000

08004634 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d141      	bne.n	80046c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004642:	4b4b      	ldr	r3, [pc, #300]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464e:	d131      	bne.n	80046b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004650:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004656:	4a46      	ldr	r2, [pc, #280]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800465c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004660:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004668:	4a41      	ldr	r2, [pc, #260]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800466e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004670:	4b40      	ldr	r3, [pc, #256]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2232      	movs	r2, #50	; 0x32
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	4a3f      	ldr	r2, [pc, #252]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	0c9b      	lsrs	r3, r3, #18
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004686:	e002      	b.n	800468e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468e:	4b38      	ldr	r3, [pc, #224]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469a:	d102      	bne.n	80046a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f2      	bne.n	8004688 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046a2:	4b33      	ldr	r3, [pc, #204]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ae:	d158      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e057      	b.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b4:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ba:	4a2d      	ldr	r2, [pc, #180]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046c4:	e04d      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046cc:	d141      	bne.n	8004752 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ce:	4b28      	ldr	r3, [pc, #160]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d131      	bne.n	8004740 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046dc:	4b24      	ldr	r3, [pc, #144]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e2:	4a23      	ldr	r2, [pc, #140]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046f4:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80046fc:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2232      	movs	r2, #50	; 0x32
 8004702:	fb02 f303 	mul.w	r3, r2, r3
 8004706:	4a1c      	ldr	r2, [pc, #112]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004708:	fba2 2303 	umull	r2, r3, r2, r3
 800470c:	0c9b      	lsrs	r3, r3, #18
 800470e:	3301      	adds	r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004712:	e002      	b.n	800471a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b01      	subs	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004726:	d102      	bne.n	800472e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f2      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d112      	bne.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e011      	b.n	8004764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004740:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004746:	4a0a      	ldr	r2, [pc, #40]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004750:	e007      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800475a:	4a05      	ldr	r2, [pc, #20]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004760:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40007000 	.word	0x40007000
 8004774:	20000000 	.word	0x20000000
 8004778:	431bde83 	.word	0x431bde83

0800477c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478a:	6053      	str	r3, [r2, #4]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40007000 	.word	0x40007000

0800479c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047aa:	6053      	str	r3, [r2, #4]
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40007000 	.word	0x40007000

080047bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f000 bc16 	b.w	8004ffc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d0:	4ba0      	ldr	r3, [pc, #640]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047da:	4b9e      	ldr	r3, [pc, #632]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80e4 	beq.w	80049ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_RCC_OscConfig+0x4c>
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	f040 808b 	bne.w	8004916 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b01      	cmp	r3, #1
 8004804:	f040 8087 	bne.w	8004916 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004808:	4b92      	ldr	r3, [pc, #584]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_OscConfig+0x64>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e3ed      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	4b8b      	ldr	r3, [pc, #556]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_RCC_OscConfig+0x7e>
 8004830:	4b88      	ldr	r3, [pc, #544]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004838:	e005      	b.n	8004846 <HAL_RCC_OscConfig+0x8a>
 800483a:	4b86      	ldr	r3, [pc, #536]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 800483c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004846:	4293      	cmp	r3, r2
 8004848:	d223      	bcs.n	8004892 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fdc8 	bl	80053e4 <RCC_SetFlashLatencyFromMSIRange>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e3ce      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800485e:	4b7d      	ldr	r3, [pc, #500]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a7c      	ldr	r2, [pc, #496]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004864:	f043 0308 	orr.w	r3, r3, #8
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	4b7a      	ldr	r3, [pc, #488]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	4977      	ldr	r1, [pc, #476]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800487c:	4b75      	ldr	r3, [pc, #468]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	4972      	ldr	r1, [pc, #456]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]
 8004890:	e025      	b.n	80048de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004892:	4b70      	ldr	r3, [pc, #448]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a6f      	ldr	r2, [pc, #444]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004898:	f043 0308 	orr.w	r3, r3, #8
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b6d      	ldr	r3, [pc, #436]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	496a      	ldr	r1, [pc, #424]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b0:	4b68      	ldr	r3, [pc, #416]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	4965      	ldr	r1, [pc, #404]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fd88 	bl	80053e4 <RCC_SetFlashLatencyFromMSIRange>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e38e      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048de:	f000 fcbf 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b5b      	ldr	r3, [pc, #364]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	495a      	ldr	r1, [pc, #360]	; (8004a58 <HAL_RCC_OscConfig+0x29c>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	fa22 f303 	lsr.w	r3, r2, r3
 80048fa:	4a58      	ldr	r2, [pc, #352]	; (8004a5c <HAL_RCC_OscConfig+0x2a0>)
 80048fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048fe:	4b58      	ldr	r3, [pc, #352]	; (8004a60 <HAL_RCC_OscConfig+0x2a4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fc fe64 	bl	80015d0 <HAL_InitTick>
 8004908:	4603      	mov	r3, r0
 800490a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d052      	beq.n	80049b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	e372      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d032      	beq.n	8004984 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800491e:	4b4d      	ldr	r3, [pc, #308]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a4c      	ldr	r2, [pc, #304]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800492a:	f7fc fea1 	bl	8001670 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004932:	f7fc fe9d 	bl	8001670 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e35b      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004944:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004950:	4b40      	ldr	r3, [pc, #256]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3f      	ldr	r2, [pc, #252]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004956:	f043 0308 	orr.w	r3, r3, #8
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	4b3d      	ldr	r3, [pc, #244]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	493a      	ldr	r1, [pc, #232]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800496e:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	4935      	ldr	r1, [pc, #212]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]
 8004982:	e01a      	b.n	80049ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004984:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a32      	ldr	r2, [pc, #200]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004990:	f7fc fe6e 	bl	8001670 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004998:	f7fc fe6a 	bl	8001670 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e328      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049aa:	4b2a      	ldr	r3, [pc, #168]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x1dc>
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d073      	beq.n	8004aae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_OscConfig+0x21c>
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b0c      	cmp	r3, #12
 80049d0:	d10e      	bne.n	80049f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d10b      	bne.n	80049f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d063      	beq.n	8004aac <HAL_RCC_OscConfig+0x2f0>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d15f      	bne.n	8004aac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e305      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f8:	d106      	bne.n	8004a08 <HAL_RCC_OscConfig+0x24c>
 80049fa:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e01d      	b.n	8004a44 <HAL_RCC_OscConfig+0x288>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCC_OscConfig+0x270>
 8004a12:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a0f      	ldr	r2, [pc, #60]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e00b      	b.n	8004a44 <HAL_RCC_OscConfig+0x288>
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a05      	ldr	r2, [pc, #20]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 8004a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fc fe10 	bl	8001670 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a52:	e010      	b.n	8004a76 <HAL_RCC_OscConfig+0x2ba>
 8004a54:	40021000 	.word	0x40021000
 8004a58:	0800e454 	.word	0x0800e454
 8004a5c:	20000000 	.word	0x20000000
 8004a60:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a64:	f7fc fe04 	bl	8001670 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b64      	cmp	r3, #100	; 0x64
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e2c2      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a76:	4baf      	ldr	r3, [pc, #700]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x2a8>
 8004a82:	e014      	b.n	8004aae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fc fdf4 	bl	8001670 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a8c:	f7fc fdf0 	bl	8001670 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b64      	cmp	r3, #100	; 0x64
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e2ae      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a9e:	4ba5      	ldr	r3, [pc, #660]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x2d0>
 8004aaa:	e000      	b.n	8004aae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d060      	beq.n	8004b7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_OscConfig+0x310>
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b0c      	cmp	r3, #12
 8004ac4:	d119      	bne.n	8004afa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d116      	bne.n	8004afa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004acc:	4b99      	ldr	r3, [pc, #612]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x328>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e28b      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae4:	4b93      	ldr	r3, [pc, #588]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	061b      	lsls	r3, r3, #24
 8004af2:	4990      	ldr	r1, [pc, #576]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af8:	e040      	b.n	8004b7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d023      	beq.n	8004b4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b02:	4b8c      	ldr	r3, [pc, #560]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a8b      	ldr	r2, [pc, #556]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0e:	f7fc fdaf 	bl	8001670 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b16:	f7fc fdab 	bl	8001670 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e269      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b28:	4b82      	ldr	r3, [pc, #520]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b34:	4b7f      	ldr	r3, [pc, #508]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	061b      	lsls	r3, r3, #24
 8004b42:	497c      	ldr	r1, [pc, #496]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	604b      	str	r3, [r1, #4]
 8004b48:	e018      	b.n	8004b7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b4a:	4b7a      	ldr	r3, [pc, #488]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a79      	ldr	r2, [pc, #484]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b56:	f7fc fd8b 	bl	8001670 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5e:	f7fc fd87 	bl	8001670 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e245      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b70:	4b70      	ldr	r3, [pc, #448]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d03c      	beq.n	8004c02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01c      	beq.n	8004bca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b90:	4b68      	ldr	r3, [pc, #416]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b96:	4a67      	ldr	r2, [pc, #412]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba0:	f7fc fd66 	bl	8001670 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba8:	f7fc fd62 	bl	8001670 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e220      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bba:	4b5e      	ldr	r3, [pc, #376]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ef      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x3ec>
 8004bc8:	e01b      	b.n	8004c02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bca:	4b5a      	ldr	r3, [pc, #360]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd0:	4a58      	ldr	r2, [pc, #352]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bda:	f7fc fd49 	bl	8001670 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be2:	f7fc fd45 	bl	8001670 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e203      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bf4:	4b4f      	ldr	r3, [pc, #316]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1ef      	bne.n	8004be2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80a6 	beq.w	8004d5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c10:	2300      	movs	r3, #0
 8004c12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c14:	4b47      	ldr	r3, [pc, #284]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10d      	bne.n	8004c3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c20:	4b44      	ldr	r3, [pc, #272]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	4a43      	ldr	r2, [pc, #268]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c2c:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c3c:	4b3e      	ldr	r3, [pc, #248]	; (8004d38 <HAL_RCC_OscConfig+0x57c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d118      	bne.n	8004c7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c48:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <HAL_RCC_OscConfig+0x57c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a3a      	ldr	r2, [pc, #232]	; (8004d38 <HAL_RCC_OscConfig+0x57c>)
 8004c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c54:	f7fc fd0c 	bl	8001670 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5c:	f7fc fd08 	bl	8001670 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e1c6      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c6e:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <HAL_RCC_OscConfig+0x57c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d108      	bne.n	8004c94 <HAL_RCC_OscConfig+0x4d8>
 8004c82:	4b2c      	ldr	r3, [pc, #176]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	4a2a      	ldr	r2, [pc, #168]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c92:	e024      	b.n	8004cde <HAL_RCC_OscConfig+0x522>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b05      	cmp	r3, #5
 8004c9a:	d110      	bne.n	8004cbe <HAL_RCC_OscConfig+0x502>
 8004c9c:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	4a24      	ldr	r2, [pc, #144]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004ca4:	f043 0304 	orr.w	r3, r3, #4
 8004ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	4a20      	ldr	r2, [pc, #128]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cbc:	e00f      	b.n	8004cde <HAL_RCC_OscConfig+0x522>
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cce:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004cd6:	f023 0304 	bic.w	r3, r3, #4
 8004cda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce6:	f7fc fcc3 	bl	8001670 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fc fcbf 	bl	8001670 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e17b      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_RCC_OscConfig+0x578>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0ed      	beq.n	8004cee <HAL_RCC_OscConfig+0x532>
 8004d12:	e01a      	b.n	8004d4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fc fcac 	bl	8001670 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d1a:	e00f      	b.n	8004d3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fc fca8 	bl	8001670 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d906      	bls.n	8004d3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e164      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d3c:	4ba8      	ldr	r3, [pc, #672]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e8      	bne.n	8004d1c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d4a:	7ffb      	ldrb	r3, [r7, #31]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d105      	bne.n	8004d5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d50:	4ba3      	ldr	r3, [pc, #652]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d54:	4aa2      	ldr	r2, [pc, #648]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d03c      	beq.n	8004de2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01c      	beq.n	8004daa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d70:	4b9b      	ldr	r3, [pc, #620]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d76:	4a9a      	ldr	r2, [pc, #616]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fc fc76 	bl	8001670 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d88:	f7fc fc72 	bl	8001670 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e130      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d9a:	4b91      	ldr	r3, [pc, #580]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0ef      	beq.n	8004d88 <HAL_RCC_OscConfig+0x5cc>
 8004da8:	e01b      	b.n	8004de2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004daa:	4b8d      	ldr	r3, [pc, #564]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004db0:	4a8b      	ldr	r2, [pc, #556]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dba:	f7fc fc59 	bl	8001670 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dc2:	f7fc fc55 	bl	8001670 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e113      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dd4:	4b82      	ldr	r3, [pc, #520]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1ef      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 8107 	beq.w	8004ffa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	f040 80cb 	bne.w	8004f8c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004df6:	4b7a      	ldr	r3, [pc, #488]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f003 0203 	and.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d12c      	bne.n	8004e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	3b01      	subs	r3, #1
 8004e16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d123      	bne.n	8004e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d11b      	bne.n	8004e64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d113      	bne.n	8004e64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d109      	bne.n	8004e64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d06d      	beq.n	8004f40 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b0c      	cmp	r3, #12
 8004e68:	d068      	beq.n	8004f3c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e6a:	4b5d      	ldr	r3, [pc, #372]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d105      	bne.n	8004e82 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e76:	4b5a      	ldr	r3, [pc, #360]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e0ba      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e86:	4b56      	ldr	r3, [pc, #344]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a55      	ldr	r2, [pc, #340]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004e8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e92:	f7fc fbed 	bl	8001670 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9a:	f7fc fbe9 	bl	8001670 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e0a7      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eac:	4b4c      	ldr	r3, [pc, #304]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f0      	bne.n	8004e9a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb8:	4b49      	ldr	r3, [pc, #292]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	4b49      	ldr	r3, [pc, #292]	; (8004fe4 <HAL_RCC_OscConfig+0x828>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	0112      	lsls	r2, r2, #4
 8004ecc:	4311      	orrs	r1, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ed2:	0212      	lsls	r2, r2, #8
 8004ed4:	4311      	orrs	r1, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004eda:	0852      	lsrs	r2, r2, #1
 8004edc:	3a01      	subs	r2, #1
 8004ede:	0552      	lsls	r2, r2, #21
 8004ee0:	4311      	orrs	r1, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ee6:	0852      	lsrs	r2, r2, #1
 8004ee8:	3a01      	subs	r2, #1
 8004eea:	0652      	lsls	r2, r2, #25
 8004eec:	4311      	orrs	r1, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ef2:	06d2      	lsls	r2, r2, #27
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	493a      	ldr	r1, [pc, #232]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004efc:	4b38      	ldr	r3, [pc, #224]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a37      	ldr	r2, [pc, #220]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f08:	4b35      	ldr	r3, [pc, #212]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a34      	ldr	r2, [pc, #208]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f14:	f7fc fbac 	bl	8001670 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1c:	f7fc fba8 	bl	8001670 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e066      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2e:	4b2c      	ldr	r3, [pc, #176]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f3a:	e05e      	b.n	8004ffa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e05d      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f40:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d156      	bne.n	8004ffa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f4c:	4b24      	ldr	r3, [pc, #144]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f58:	4b21      	ldr	r3, [pc, #132]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a20      	ldr	r2, [pc, #128]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f64:	f7fc fb84 	bl	8001670 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fc fb80 	bl	8001670 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e03e      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f7e:	4b18      	ldr	r3, [pc, #96]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x7b0>
 8004f8a:	e036      	b.n	8004ffa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b0c      	cmp	r3, #12
 8004f90:	d031      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a12      	ldr	r2, [pc, #72]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d105      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004fb0:	f023 0303 	bic.w	r3, r3, #3
 8004fb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	4a09      	ldr	r2, [pc, #36]	; (8004fe0 <HAL_RCC_OscConfig+0x824>)
 8004fbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc6:	f7fc fb53 	bl	8001670 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fcc:	e00c      	b.n	8004fe8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fce:	f7fc fb4f 	bl	8001670 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d905      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e00d      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_RCC_OscConfig+0x848>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1ec      	bne.n	8004fce <HAL_RCC_OscConfig+0x812>
 8004ff4:	e001      	b.n	8004ffa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40021000 	.word	0x40021000

08005008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e10f      	b.n	8005240 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005020:	4b89      	ldr	r3, [pc, #548]	; (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d910      	bls.n	8005050 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b86      	ldr	r3, [pc, #536]	; (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 020f 	bic.w	r2, r3, #15
 8005036:	4984      	ldr	r1, [pc, #528]	; (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b82      	ldr	r3, [pc, #520]	; (8005248 <HAL_RCC_ClockConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0f7      	b.n	8005240 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 8089 	beq.w	8005170 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b03      	cmp	r3, #3
 8005064:	d133      	bne.n	80050ce <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005066:	4b79      	ldr	r3, [pc, #484]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0e4      	b.n	8005240 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005076:	f000 fa0f 	bl	8005498 <RCC_GetSysClockFreqFromPLLSource>
 800507a:	4603      	mov	r3, r0
 800507c:	4a74      	ldr	r2, [pc, #464]	; (8005250 <HAL_RCC_ClockConfig+0x248>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d955      	bls.n	800512e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005082:	4b72      	ldr	r3, [pc, #456]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800508e:	4b6f      	ldr	r3, [pc, #444]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005096:	4a6d      	ldr	r2, [pc, #436]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 8005098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800509e:	2380      	movs	r3, #128	; 0x80
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	e044      	b.n	800512e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d03e      	beq.n	800512e <HAL_RCC_ClockConfig+0x126>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d13a      	bne.n	800512e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050b8:	4b64      	ldr	r3, [pc, #400]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c0:	4a62      	ldr	r2, [pc, #392]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 80050c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	e02f      	b.n	800512e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d107      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050d6:	4b5d      	ldr	r3, [pc, #372]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d115      	bne.n	800510e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0ac      	b.n	8005240 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d107      	bne.n	80050fe <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050ee:	4b57      	ldr	r3, [pc, #348]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e0a0      	b.n	8005240 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050fe:	4b53      	ldr	r3, [pc, #332]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e098      	b.n	8005240 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800510e:	f000 f8a7 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8005112:	4603      	mov	r3, r0
 8005114:	4a4e      	ldr	r2, [pc, #312]	; (8005250 <HAL_RCC_ClockConfig+0x248>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d909      	bls.n	800512e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800511a:	4b4c      	ldr	r3, [pc, #304]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005122:	4a4a      	ldr	r2, [pc, #296]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 8005124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005128:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800512a:	2380      	movs	r3, #128	; 0x80
 800512c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800512e:	4b47      	ldr	r3, [pc, #284]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f023 0203 	bic.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4944      	ldr	r1, [pc, #272]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005140:	f7fc fa96 	bl	8001670 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	e00a      	b.n	800515e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005148:	f7fc fa92 	bl	8001670 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	; 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e070      	b.n	8005240 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515e:	4b3b      	ldr	r3, [pc, #236]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 020c 	and.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	429a      	cmp	r2, r3
 800516e:	d1eb      	bne.n	8005148 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d009      	beq.n	8005190 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800517c:	4b33      	ldr	r3, [pc, #204]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4930      	ldr	r1, [pc, #192]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
 800518e:	e008      	b.n	80051a2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b80      	cmp	r3, #128	; 0x80
 8005194:	d105      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005196:	4b2d      	ldr	r3, [pc, #180]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	4a2c      	ldr	r2, [pc, #176]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 800519c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051a0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051a2:	4b29      	ldr	r3, [pc, #164]	; (8005248 <HAL_RCC_ClockConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d210      	bcs.n	80051d2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <HAL_RCC_ClockConfig+0x240>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f023 020f 	bic.w	r2, r3, #15
 80051b8:	4923      	ldr	r1, [pc, #140]	; (8005248 <HAL_RCC_ClockConfig+0x240>)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	4313      	orrs	r3, r2
 80051be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c0:	4b21      	ldr	r3, [pc, #132]	; (8005248 <HAL_RCC_ClockConfig+0x240>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d001      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e036      	b.n	8005240 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051de:	4b1b      	ldr	r3, [pc, #108]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	4918      	ldr	r1, [pc, #96]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d009      	beq.n	8005210 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051fc:	4b13      	ldr	r3, [pc, #76]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4910      	ldr	r1, [pc, #64]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 800520c:	4313      	orrs	r3, r2
 800520e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005210:	f000 f826 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <HAL_RCC_ClockConfig+0x244>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	091b      	lsrs	r3, r3, #4
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	490c      	ldr	r1, [pc, #48]	; (8005254 <HAL_RCC_ClockConfig+0x24c>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
 800522c:	4a0a      	ldr	r2, [pc, #40]	; (8005258 <HAL_RCC_ClockConfig+0x250>)
 800522e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_RCC_ClockConfig+0x254>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f7fc f9cb 	bl	80015d0 <HAL_InitTick>
 800523a:	4603      	mov	r3, r0
 800523c:	73fb      	strb	r3, [r7, #15]

  return status;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40022000 	.word	0x40022000
 800524c:	40021000 	.word	0x40021000
 8005250:	04c4b400 	.word	0x04c4b400
 8005254:	0800e454 	.word	0x0800e454
 8005258:	20000000 	.word	0x20000000
 800525c:	20000004 	.word	0x20000004

08005260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005260:	b480      	push	{r7}
 8005262:	b089      	sub	sp, #36	; 0x24
 8005264:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526e:	4b3e      	ldr	r3, [pc, #248]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	4b3b      	ldr	r3, [pc, #236]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x34>
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0c      	cmp	r3, #12
 800528c:	d121      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d11e      	bne.n	80052d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005294:	4b34      	ldr	r3, [pc, #208]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d107      	bne.n	80052b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052a0:	4b31      	ldr	r3, [pc, #196]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	e005      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052b0:	4b2d      	ldr	r3, [pc, #180]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052bc:	4a2b      	ldr	r2, [pc, #172]	; (800536c <HAL_RCC_GetSysClockFreq+0x10c>)
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10d      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d102      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052d8:	4b25      	ldr	r3, [pc, #148]	; (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e004      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052e4:	4b22      	ldr	r3, [pc, #136]	; (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 80052e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d134      	bne.n	8005358 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052ee:	4b1e      	ldr	r3, [pc, #120]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d003      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0xa6>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b03      	cmp	r3, #3
 8005302:	d003      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0xac>
 8005304:	e005      	b.n	8005312 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 8005308:	617b      	str	r3, [r7, #20]
      break;
 800530a:	e005      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800530c:	4b18      	ldr	r3, [pc, #96]	; (8005370 <HAL_RCC_GetSysClockFreq+0x110>)
 800530e:	617b      	str	r3, [r7, #20]
      break;
 8005310:	e002      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	617b      	str	r3, [r7, #20]
      break;
 8005316:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005318:	4b13      	ldr	r3, [pc, #76]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	3301      	adds	r3, #1
 8005324:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	0a1b      	lsrs	r3, r3, #8
 800532c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	fb02 f203 	mul.w	r2, r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800533e:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <HAL_RCC_GetSysClockFreq+0x108>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	0e5b      	lsrs	r3, r3, #25
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	3301      	adds	r3, #1
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	fbb2 f3f3 	udiv	r3, r2, r3
 8005356:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005358:	69bb      	ldr	r3, [r7, #24]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	; 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
 800536c:	0800e46c 	.word	0x0800e46c
 8005370:	00f42400 	.word	0x00f42400

08005374 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <HAL_RCC_GetHCLKFreq+0x14>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000000 	.word	0x20000000

0800538c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005390:	f7ff fff0 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4904      	ldr	r1, [pc, #16]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000
 80053b4:	0800e464 	.word	0x0800e464

080053b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053bc:	f7ff ffda 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	0adb      	lsrs	r3, r3, #11
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4904      	ldr	r1, [pc, #16]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800e464 	.word	0x0800e464

080053e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053fc:	f7ff f8fa 	bl	80045f4 <HAL_PWREx_GetVoltageRange>
 8005400:	6178      	str	r0, [r7, #20]
 8005402:	e014      	b.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005404:	4b22      	ldr	r3, [pc, #136]	; (8005490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005408:	4a21      	ldr	r2, [pc, #132]	; (8005490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800540a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540e:	6593      	str	r3, [r2, #88]	; 0x58
 8005410:	4b1f      	ldr	r3, [pc, #124]	; (8005490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800541c:	f7ff f8ea 	bl	80045f4 <HAL_PWREx_GetVoltageRange>
 8005420:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005422:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005426:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005434:	d10b      	bne.n	800544e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b80      	cmp	r3, #128	; 0x80
 800543a:	d913      	bls.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2ba0      	cmp	r3, #160	; 0xa0
 8005440:	d902      	bls.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005442:	2302      	movs	r3, #2
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	e00d      	b.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005448:	2301      	movs	r3, #1
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	e00a      	b.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b7f      	cmp	r3, #127	; 0x7f
 8005452:	d902      	bls.n	800545a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005454:	2302      	movs	r3, #2
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	e004      	b.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b70      	cmp	r3, #112	; 0x70
 800545e:	d101      	bne.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005460:	2301      	movs	r3, #1
 8005462:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f023 020f 	bic.w	r2, r3, #15
 800546c:	4909      	ldr	r1, [pc, #36]	; (8005494 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005474:	4b07      	ldr	r3, [pc, #28]	; (8005494 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d001      	beq.n	8005486 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40021000 	.word	0x40021000
 8005494:	40022000 	.word	0x40022000

08005498 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80054a2:	4b2d      	ldr	r3, [pc, #180]	; (8005558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d118      	bne.n	80054e0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054ae:	4b2a      	ldr	r3, [pc, #168]	; (8005558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d107      	bne.n	80054ca <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054ba:	4b27      	ldr	r3, [pc, #156]	; (8005558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054c0:	0a1b      	lsrs	r3, r3, #8
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e005      	b.n	80054d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054ca:	4b23      	ldr	r3, [pc, #140]	; (8005558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	091b      	lsrs	r3, r3, #4
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054d6:	4a21      	ldr	r2, [pc, #132]	; (800555c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054de:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054e0:	4b1d      	ldr	r3, [pc, #116]	; (8005558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d003      	beq.n	80054f8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d003      	beq.n	80054fe <RCC_GetSysClockFreqFromPLLSource+0x66>
 80054f6:	e005      	b.n	8005504 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80054f8:	4b19      	ldr	r3, [pc, #100]	; (8005560 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80054fa:	613b      	str	r3, [r7, #16]
    break;
 80054fc:	e005      	b.n	800550a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80054fe:	4b18      	ldr	r3, [pc, #96]	; (8005560 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005500:	613b      	str	r3, [r7, #16]
    break;
 8005502:	e002      	b.n	800550a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	613b      	str	r3, [r7, #16]
    break;
 8005508:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800550a:	4b13      	ldr	r3, [pc, #76]	; (8005558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	f003 030f 	and.w	r3, r3, #15
 8005514:	3301      	adds	r3, #1
 8005516:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005518:	4b0f      	ldr	r3, [pc, #60]	; (8005558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	0a1b      	lsrs	r3, r3, #8
 800551e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	fb02 f203 	mul.w	r2, r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	fbb2 f3f3 	udiv	r3, r2, r3
 800552e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005530:	4b09      	ldr	r3, [pc, #36]	; (8005558 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	0e5b      	lsrs	r3, r3, #25
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	3301      	adds	r3, #1
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800554a:	683b      	ldr	r3, [r7, #0]
}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40021000 	.word	0x40021000
 800555c:	0800e46c 	.word	0x0800e46c
 8005560:	00f42400 	.word	0x00f42400

08005564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800556c:	2300      	movs	r3, #0
 800556e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005570:	2300      	movs	r3, #0
 8005572:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800557c:	2b00      	cmp	r3, #0
 800557e:	d040      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d02a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005588:	2b80      	cmp	r3, #128	; 0x80
 800558a:	d825      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800558c:	2b60      	cmp	r3, #96	; 0x60
 800558e:	d026      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005590:	2b60      	cmp	r3, #96	; 0x60
 8005592:	d821      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d006      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d81d      	bhi.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d009      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d010      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80055a4:	e018      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055a6:	4b89      	ldr	r3, [pc, #548]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4a88      	ldr	r2, [pc, #544]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055b2:	e015      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 fa7e 	bl	8006abc <RCCEx_PLLSAI1_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055c4:	e00c      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3320      	adds	r3, #32
 80055ca:	2100      	movs	r1, #0
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 fb69 	bl	8006ca4 <RCCEx_PLLSAI2_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055d6:	e003      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	74fb      	strb	r3, [r7, #19]
      break;
 80055dc:	e000      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80055de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e0:	7cfb      	ldrb	r3, [r7, #19]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055e6:	4b79      	ldr	r3, [pc, #484]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ec:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f4:	4975      	ldr	r1, [pc, #468]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80055fc:	e001      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fe:	7cfb      	ldrb	r3, [r7, #19]
 8005600:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d047      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005616:	d030      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800561c:	d82a      	bhi.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800561e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005622:	d02a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005628:	d824      	bhi.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800562a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562e:	d008      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005634:	d81e      	bhi.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800563a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563e:	d010      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005640:	e018      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005642:	4b62      	ldr	r3, [pc, #392]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	4a61      	ldr	r2, [pc, #388]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800564e:	e015      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f001 fa30 	bl	8006abc <RCCEx_PLLSAI1_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005660:	e00c      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3320      	adds	r3, #32
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f001 fb1b 	bl	8006ca4 <RCCEx_PLLSAI2_Config>
 800566e:	4603      	mov	r3, r0
 8005670:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005672:	e003      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	74fb      	strb	r3, [r7, #19]
      break;
 8005678:	e000      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800567a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800567c:	7cfb      	ldrb	r3, [r7, #19]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10b      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005682:	4b52      	ldr	r3, [pc, #328]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	494e      	ldr	r1, [pc, #312]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005698:	e001      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569a:	7cfb      	ldrb	r3, [r7, #19]
 800569c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 809f 	beq.w	80057ea <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ac:	2300      	movs	r3, #0
 80056ae:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056b0:	4b46      	ldr	r3, [pc, #280]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00d      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c6:	4b41      	ldr	r3, [pc, #260]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ca:	4a40      	ldr	r2, [pc, #256]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6593      	str	r3, [r2, #88]	; 0x58
 80056d2:	4b3e      	ldr	r3, [pc, #248]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056de:	2301      	movs	r3, #1
 80056e0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056e2:	4b3b      	ldr	r3, [pc, #236]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a3a      	ldr	r2, [pc, #232]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80056e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056ee:	f7fb ffbf 	bl	8001670 <HAL_GetTick>
 80056f2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056f4:	e009      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056f6:	f7fb ffbb 	bl	8001670 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d902      	bls.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	74fb      	strb	r3, [r7, #19]
        break;
 8005708:	e005      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0ef      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005716:	7cfb      	ldrb	r3, [r7, #19]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d15b      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800571c:	4b2b      	ldr	r3, [pc, #172]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005726:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01f      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	429a      	cmp	r2, r3
 8005738:	d019      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800573a:	4b24      	ldr	r3, [pc, #144]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005744:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005746:	4b21      	ldr	r3, [pc, #132]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574c:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800574e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005756:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575c:	4a1b      	ldr	r2, [pc, #108]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800575e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005766:	4a19      	ldr	r2, [pc, #100]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d016      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fb ff7a 	bl	8001670 <HAL_GetTick>
 800577c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800577e:	e00b      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005780:	f7fb ff76 	bl	8001670 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	f241 3288 	movw	r2, #5000	; 0x1388
 800578e:	4293      	cmp	r3, r2
 8005790:	d902      	bls.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	74fb      	strb	r3, [r7, #19]
            break;
 8005796:	e006      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0ec      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80057a6:	7cfb      	ldrb	r3, [r7, #19]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10c      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ac:	4b07      	ldr	r3, [pc, #28]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057bc:	4903      	ldr	r1, [pc, #12]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80057c4:	e008      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80057c6:	7cfb      	ldrb	r3, [r7, #19]
 80057c8:	74bb      	strb	r3, [r7, #18]
 80057ca:	e005      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80057cc:	40021000 	.word	0x40021000
 80057d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d4:	7cfb      	ldrb	r3, [r7, #19]
 80057d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057d8:	7c7b      	ldrb	r3, [r7, #17]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d105      	bne.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057de:	4ba0      	ldr	r3, [pc, #640]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e2:	4a9f      	ldr	r2, [pc, #636]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057f6:	4b9a      	ldr	r3, [pc, #616]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	f023 0203 	bic.w	r2, r3, #3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	4996      	ldr	r1, [pc, #600]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005818:	4b91      	ldr	r3, [pc, #580]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	f023 020c 	bic.w	r2, r3, #12
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	498e      	ldr	r1, [pc, #568]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800583a:	4b89      	ldr	r3, [pc, #548]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005840:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005848:	4985      	ldr	r1, [pc, #532]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800585c:	4b80      	ldr	r3, [pc, #512]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586a:	497d      	ldr	r1, [pc, #500]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0310 	and.w	r3, r3, #16
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800587e:	4b78      	ldr	r3, [pc, #480]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588c:	4974      	ldr	r1, [pc, #464]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058a0:	4b6f      	ldr	r3, [pc, #444]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ae:	496c      	ldr	r1, [pc, #432]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00a      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058c2:	4b67      	ldr	r3, [pc, #412]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d0:	4963      	ldr	r1, [pc, #396]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058e4:	4b5e      	ldr	r3, [pc, #376]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058f2:	495b      	ldr	r1, [pc, #364]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005906:	4b56      	ldr	r3, [pc, #344]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005914:	4952      	ldr	r1, [pc, #328]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005928:	4b4d      	ldr	r3, [pc, #308]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800592a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005936:	494a      	ldr	r1, [pc, #296]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800594a:	4b45      	ldr	r3, [pc, #276]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005958:	4941      	ldr	r1, [pc, #260]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800596c:	4b3c      	ldr	r3, [pc, #240]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800596e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597a:	4939      	ldr	r1, [pc, #228]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d028      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800598e:	4b34      	ldr	r3, [pc, #208]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800599c:	4930      	ldr	r1, [pc, #192]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ac:	d106      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ae:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	4a2b      	ldr	r2, [pc, #172]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b8:	60d3      	str	r3, [r2, #12]
 80059ba:	e011      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059c4:	d10c      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3304      	adds	r3, #4
 80059ca:	2101      	movs	r1, #1
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 f875 	bl	8006abc <RCCEx_PLLSAI1_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059d6:	7cfb      	ldrb	r3, [r7, #19]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80059dc:	7cfb      	ldrb	r3, [r7, #19]
 80059de:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d04d      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059f4:	d108      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80059f6:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059fc:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a02:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a06:	e012      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005a08:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a0e:	4a14      	ldr	r2, [pc, #80]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a14:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a18:	4b11      	ldr	r3, [pc, #68]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a26:	490e      	ldr	r1, [pc, #56]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a36:	d106      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a38:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a42:	60d3      	str	r3, [r2, #12]
 8005a44:	e020      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a4e:	d109      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4a02      	ldr	r2, [pc, #8]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5a:	60d3      	str	r3, [r2, #12]
 8005a5c:	e014      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005a5e:	bf00      	nop
 8005a60:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a6c:	d10c      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2101      	movs	r1, #1
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 f821 	bl	8006abc <RCCEx_PLLSAI1_Config>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d028      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a94:	4b7a      	ldr	r3, [pc, #488]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa2:	4977      	ldr	r1, [pc, #476]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab2:	d106      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab4:	4b72      	ldr	r3, [pc, #456]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	4a71      	ldr	r2, [pc, #452]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005abe:	60d3      	str	r3, [r2, #12]
 8005ac0:	e011      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aca:	d10c      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fff2 	bl	8006abc <RCCEx_PLLSAI1_Config>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005adc:	7cfb      	ldrb	r3, [r7, #19]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01e      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005af2:	4b63      	ldr	r3, [pc, #396]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b02:	495f      	ldr	r1, [pc, #380]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b14:	d10c      	bne.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	2102      	movs	r1, #2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 ffcd 	bl	8006abc <RCCEx_PLLSAI1_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b26:	7cfb      	ldrb	r3, [r7, #19]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005b2c:	7cfb      	ldrb	r3, [r7, #19]
 8005b2e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b3c:	4b50      	ldr	r3, [pc, #320]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b42:	f023 0204 	bic.w	r2, r3, #4
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4c:	494c      	ldr	r1, [pc, #304]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005b60:	4b47      	ldr	r3, [pc, #284]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b66:	f023 0218 	bic.w	r2, r3, #24
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b70:	4943      	ldr	r1, [pc, #268]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d035      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b84:	4b3e      	ldr	r3, [pc, #248]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3d      	ldr	r2, [pc, #244]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b90:	f7fb fd6e 	bl	8001670 <HAL_GetTick>
 8005b94:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b96:	e009      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b98:	f7fb fd6a 	bl	8001670 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d902      	bls.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	74fb      	strb	r3, [r7, #19]
        break;
 8005baa:	e005      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bac:	4b34      	ldr	r3, [pc, #208]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ef      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005bb8:	7cfb      	ldrb	r3, [r7, #19]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d113      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8005bbe:	4b30      	ldr	r3, [pc, #192]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bce:	492c      	ldr	r1, [pc, #176]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3320      	adds	r3, #32
 8005bda:	2102      	movs	r1, #2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 f861 	bl	8006ca4 <RCCEx_PLLSAI2_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
 8005bee:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01e      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005bfc:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c0c:	491c      	ldr	r1, [pc, #112]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1e:	d10c      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3320      	adds	r3, #32
 8005c24:	2101      	movs	r1, #1
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 f83c 	bl	8006ca4 <RCCEx_PLLSAI2_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005c36:	7cfb      	ldrb	r3, [r7, #19]
 8005c38:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d017      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c46:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c56:	490a      	ldr	r1, [pc, #40]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c68:	d105      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	4a04      	ldr	r2, [pc, #16]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c74:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c76:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40021000 	.word	0x40021000

08005c84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c96:	d13e      	bne.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c98:	4bbd      	ldr	r3, [pc, #756]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005caa:	d028      	beq.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cb2:	f200 86ec 	bhi.w	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbc:	d005      	beq.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc4:	d00e      	beq.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8005cc6:	f000 bee2 	b.w	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005cca:	4bb1      	ldr	r3, [pc, #708]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	f040 86e3 	bne.w	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
        frequency = LSE_VALUE;
 8005cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cde:	61fb      	str	r3, [r7, #28]
      break;
 8005ce0:	f000 bede 	b.w	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005ce4:	4baa      	ldr	r3, [pc, #680]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	f040 86d8 	bne.w	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
          frequency = LSI_VALUE;
 8005cf4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005cf8:	61fb      	str	r3, [r7, #28]
      break;
 8005cfa:	f000 bed3 	b.w	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cfe:	4ba4      	ldr	r3, [pc, #656]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d0a:	f040 86cd 	bne.w	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
        frequency = HSE_VALUE / 32U;
 8005d0e:	4ba1      	ldr	r3, [pc, #644]	; (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8005d10:	61fb      	str	r3, [r7, #28]
      break;
 8005d12:	f000 bec9 	b.w	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d16:	4b9e      	ldr	r3, [pc, #632]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d036      	beq.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d840      	bhi.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d003      	beq.n	8005d3a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d020      	beq.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005d38:	e039      	b.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005d3a:	4b95      	ldr	r3, [pc, #596]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d116      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005d46:	4b92      	ldr	r3, [pc, #584]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005d52:	4b8f      	ldr	r3, [pc, #572]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	091b      	lsrs	r3, r3, #4
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	e005      	b.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005d5e:	4b8c      	ldr	r3, [pc, #560]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d64:	0a1b      	lsrs	r3, r3, #8
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	4a8b      	ldr	r2, [pc, #556]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 8005d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005d72:	e01f      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
      break;
 8005d78:	e01c      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d7a:	4b85      	ldr	r3, [pc, #532]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d86:	d102      	bne.n	8005d8e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8005d88:	4b84      	ldr	r3, [pc, #528]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8005d8a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005d8c:	e012      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61bb      	str	r3, [r7, #24]
      break;
 8005d92:	e00f      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d94:	4b7e      	ldr	r3, [pc, #504]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005da0:	d102      	bne.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8005da2:	4b7e      	ldr	r3, [pc, #504]	; (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8005da4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8005da6:	e005      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61bb      	str	r3, [r7, #24]
      break;
 8005dac:	e002      	b.n	8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61bb      	str	r3, [r7, #24]
      break;
 8005db2:	bf00      	nop
    }

    switch(PeriphClk)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dba:	f000 85fe 	beq.w	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dc4:	f200 8672 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dce:	f000 8466 	beq.w	800669e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dd8:	f200 8668 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de2:	f000 852d 	beq.w	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dec:	f200 865e 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005df6:	f000 8183 	beq.w	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e00:	f200 8654 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e0a:	f000 80c9 	beq.w	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e14:	f200 864a 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1e:	f000 842d 	beq.w	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e28:	f200 8640 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e32:	f000 83e1 	beq.w	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e3c:	f200 8636 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e46:	f000 80ab 	beq.w	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e50:	f200 862c 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e5a:	f000 8091 	beq.w	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e64:	f200 8622 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6e:	d07f      	beq.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e76:	f200 8619 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e80:	f000 8551 	beq.w	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8a:	f200 860f 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e94:	f000 84fd 	beq.w	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e9e:	f200 8605 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea8:	f000 849e 	beq.w	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb2:	f200 85fb 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	f000 8463 	beq.w	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b80      	cmp	r3, #128	; 0x80
 8005ec2:	f200 85f3 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d84b      	bhi.n	8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 85ec 	beq.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	2b1f      	cmp	r3, #31
 8005eda:	f200 85e7 	bhi.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
 8005ede:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee4:	080062f3 	.word	0x080062f3
 8005ee8:	08006363 	.word	0x08006363
 8005eec:	08006aad 	.word	0x08006aad
 8005ef0:	080063f7 	.word	0x080063f7
 8005ef4:	08006aad 	.word	0x08006aad
 8005ef8:	08006aad 	.word	0x08006aad
 8005efc:	08006aad 	.word	0x08006aad
 8005f00:	0800646f 	.word	0x0800646f
 8005f04:	08006aad 	.word	0x08006aad
 8005f08:	08006aad 	.word	0x08006aad
 8005f0c:	08006aad 	.word	0x08006aad
 8005f10:	08006aad 	.word	0x08006aad
 8005f14:	08006aad 	.word	0x08006aad
 8005f18:	08006aad 	.word	0x08006aad
 8005f1c:	08006aad 	.word	0x08006aad
 8005f20:	080064e7 	.word	0x080064e7
 8005f24:	08006aad 	.word	0x08006aad
 8005f28:	08006aad 	.word	0x08006aad
 8005f2c:	08006aad 	.word	0x08006aad
 8005f30:	08006aad 	.word	0x08006aad
 8005f34:	08006aad 	.word	0x08006aad
 8005f38:	08006aad 	.word	0x08006aad
 8005f3c:	08006aad 	.word	0x08006aad
 8005f40:	08006aad 	.word	0x08006aad
 8005f44:	08006aad 	.word	0x08006aad
 8005f48:	08006aad 	.word	0x08006aad
 8005f4c:	08006aad 	.word	0x08006aad
 8005f50:	08006aad 	.word	0x08006aad
 8005f54:	08006aad 	.word	0x08006aad
 8005f58:	08006aad 	.word	0x08006aad
 8005f5c:	08006aad 	.word	0x08006aad
 8005f60:	08006577 	.word	0x08006577
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b40      	cmp	r3, #64	; 0x40
 8005f68:	f000 83e0 	beq.w	800672c <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8005f6c:	f000 bd9e 	b.w	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005f70:	69b9      	ldr	r1, [r7, #24]
 8005f72:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005f76:	f000 ff89 	bl	8006e8c <RCCEx_GetSAIxPeriphCLKFreq>
 8005f7a:	61f8      	str	r0, [r7, #28]
      break;
 8005f7c:	f000 bd99 	b.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8005f80:	69b9      	ldr	r1, [r7, #24]
 8005f82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005f86:	f000 ff81 	bl	8006e8c <RCCEx_GetSAIxPeriphCLKFreq>
 8005f8a:	61f8      	str	r0, [r7, #28]
      break;
 8005f8c:	f000 bd91 	b.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8005f90:	40021000 	.word	0x40021000
 8005f94:	0007a120 	.word	0x0007a120
 8005f98:	0800e46c 	.word	0x0800e46c
 8005f9c:	00f42400 	.word	0x00f42400
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8005fa0:	4bb0      	ldr	r3, [pc, #704]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005fb2:	d015      	beq.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005fba:	f200 8092 	bhi.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fc4:	d029      	beq.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fcc:	f200 8089 	bhi.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d07b      	beq.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fdc:	d04a      	beq.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
          break;
 8005fde:	e080      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005fe0:	4ba0      	ldr	r3, [pc, #640]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d17d      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005fec:	4b9d      	ldr	r3, [pc, #628]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8005ff8:	4b9a      	ldr	r3, [pc, #616]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	e005      	b.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 8006004:	4b97      	ldr	r3, [pc, #604]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800600a:	0a1b      	lsrs	r3, r3, #8
 800600c:	f003 030f 	and.w	r3, r3, #15
 8006010:	4a95      	ldr	r2, [pc, #596]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006016:	61fb      	str	r3, [r7, #28]
          break;
 8006018:	e066      	b.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800601a:	4b92      	ldr	r3, [pc, #584]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006026:	d162      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006028:	4b8e      	ldr	r3, [pc, #568]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006034:	d15b      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006036:	4b8b      	ldr	r3, [pc, #556]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006040:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	fb02 f203 	mul.w	r2, r2, r3
 800604a:	4b86      	ldr	r3, [pc, #536]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	091b      	lsrs	r3, r3, #4
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	3301      	adds	r3, #1
 8006056:	fbb2 f3f3 	udiv	r3, r2, r3
 800605a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800605c:	4b81      	ldr	r3, [pc, #516]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	0d5b      	lsrs	r3, r3, #21
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	3301      	adds	r3, #1
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	61fb      	str	r3, [r7, #28]
          break;
 8006072:	e03c      	b.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006074:	4b7b      	ldr	r3, [pc, #492]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800607c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006080:	d138      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006082:	4b78      	ldr	r3, [pc, #480]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800608a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608e:	d131      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006090:	4b74      	ldr	r3, [pc, #464]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	0a1b      	lsrs	r3, r3, #8
 8006096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	fb02 f203 	mul.w	r2, r2, r3
 80060a4:	4b6f      	ldr	r3, [pc, #444]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	091b      	lsrs	r3, r3, #4
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	3301      	adds	r3, #1
 80060b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80060b6:	4b6b      	ldr	r3, [pc, #428]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	0d5b      	lsrs	r3, r3, #21
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	3301      	adds	r3, #1
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ca:	61fb      	str	r3, [r7, #28]
          break;
 80060cc:	e012      	b.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80060ce:	4b65      	ldr	r3, [pc, #404]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80060d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d10e      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
            frequency = HSI48_VALUE;
 80060dc:	4b63      	ldr	r3, [pc, #396]	; (800626c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 80060de:	61fb      	str	r3, [r7, #28]
          break;
 80060e0:	e00b      	b.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
          break;
 80060e2:	bf00      	nop
 80060e4:	f000 bce5 	b.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80060e8:	bf00      	nop
 80060ea:	f000 bce2 	b.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80060ee:	bf00      	nop
 80060f0:	f000 bcdf 	b.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80060f4:	bf00      	nop
 80060f6:	f000 bcdc 	b.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80060fa:	bf00      	nop
        break;
 80060fc:	f000 bcd9 	b.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8006100:	4b58      	ldr	r3, [pc, #352]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006102:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800610e:	d13d      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x508>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006110:	4b54      	ldr	r3, [pc, #336]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800611c:	f040 84c8 	bne.w	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006120:	4b50      	ldr	r3, [pc, #320]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612c:	f040 84c0 	bne.w	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006130:	4b4c      	ldr	r3, [pc, #304]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	0a1b      	lsrs	r3, r3, #8
 8006136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800613a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	fb02 f203 	mul.w	r2, r2, r3
 8006144:	4b47      	ldr	r3, [pc, #284]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	3301      	adds	r3, #1
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006156:	4b43      	ldr	r3, [pc, #268]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	0edb      	lsrs	r3, r3, #27
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006168:	4b3e      	ldr	r3, [pc, #248]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
                pllp = 17U;
 8006174:	2311      	movs	r3, #17
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	e001      	b.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 7U;
 800617a:	2307      	movs	r3, #7
 800617c:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	61fb      	str	r3, [r7, #28]
      break;
 8006188:	f000 bc92 	b.w	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800618c:	4b35      	ldr	r3, [pc, #212]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800619e:	d016      	beq.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061a6:	f200 809a 	bhi.w	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061b0:	d02b      	beq.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061b8:	f200 8091 	bhi.w	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8083 	beq.w	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061ca:	d051      	beq.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          break;
 80061cc:	e087      	b.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80061ce:	4b25      	ldr	r3, [pc, #148]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	f040 8083 	bne.w	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80061dc:	4b21      	ldr	r3, [pc, #132]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
 80061e8:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	e005      	b.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 80061f4:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 80061f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061fa:	0a1b      	lsrs	r3, r3, #8
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	4a19      	ldr	r2, [pc, #100]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8006202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006206:	61fb      	str	r3, [r7, #28]
          break;
 8006208:	e06b      	b.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800620a:	4b16      	ldr	r3, [pc, #88]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006216:	d166      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006218:	4b12      	ldr	r3, [pc, #72]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006224:	d15f      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006226:	4b0f      	ldr	r3, [pc, #60]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006230:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	fb02 f203 	mul.w	r2, r2, r3
 800623a:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	091b      	lsrs	r3, r3, #4
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	3301      	adds	r3, #1
 8006246:	fbb2 f3f3 	udiv	r3, r2, r3
 800624a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	0d5b      	lsrs	r3, r3, #21
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	3301      	adds	r3, #1
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006260:	61fb      	str	r3, [r7, #28]
          break;
 8006262:	e040      	b.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 8006264:	40021000 	.word	0x40021000
 8006268:	0800e46c 	.word	0x0800e46c
 800626c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006270:	4bae      	ldr	r3, [pc, #696]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800627c:	d135      	bne.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x666>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800627e:	4bab      	ldr	r3, [pc, #684]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800628a:	d12e      	bne.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x666>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800628c:	4ba7      	ldr	r3, [pc, #668]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	0a1b      	lsrs	r3, r3, #8
 8006292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006296:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	fb02 f203 	mul.w	r2, r2, r3
 80062a0:	4ba2      	ldr	r3, [pc, #648]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	091b      	lsrs	r3, r3, #4
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	3301      	adds	r3, #1
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80062b2:	4b9e      	ldr	r3, [pc, #632]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	0d5b      	lsrs	r3, r3, #21
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	3301      	adds	r3, #1
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c6:	61fb      	str	r3, [r7, #28]
          break;
 80062c8:	e00f      	b.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80062ca:	4b98      	ldr	r3, [pc, #608]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80062cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d10a      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
            frequency = HSI48_VALUE;
 80062d8:	4b95      	ldr	r3, [pc, #596]	; (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80062da:	61fb      	str	r3, [r7, #28]
          break;
 80062dc:	e007      	b.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
          break;
 80062de:	bf00      	nop
 80062e0:	e3e6      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80062e2:	bf00      	nop
 80062e4:	e3e4      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80062e6:	bf00      	nop
 80062e8:	e3e2      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80062ea:	bf00      	nop
 80062ec:	e3e0      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80062ee:	bf00      	nop
      break;
 80062f0:	e3de      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80062f2:	4b8e      	ldr	r3, [pc, #568]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b03      	cmp	r3, #3
 8006302:	d828      	bhi.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8006304:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	0800631d 	.word	0x0800631d
 8006310:	08006325 	.word	0x08006325
 8006314:	0800632d 	.word	0x0800632d
 8006318:	08006341 	.word	0x08006341
          frequency = HAL_RCC_GetPCLK2Freq();
 800631c:	f7ff f84c 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 8006320:	61f8      	str	r0, [r7, #28]
          break;
 8006322:	e01d      	b.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8006324:	f7fe ff9c 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006328:	61f8      	str	r0, [r7, #28]
          break;
 800632a:	e019      	b.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800632c:	4b7f      	ldr	r3, [pc, #508]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006338:	d10f      	bne.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
            frequency = HSI_VALUE;
 800633a:	4b7e      	ldr	r3, [pc, #504]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 800633c:	61fb      	str	r3, [r7, #28]
          break;
 800633e:	e00c      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006340:	4b7a      	ldr	r3, [pc, #488]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b02      	cmp	r3, #2
 800634c:	d107      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = LSE_VALUE;
 800634e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006352:	61fb      	str	r3, [r7, #28]
          break;
 8006354:	e003      	b.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          break;
 8006356:	bf00      	nop
 8006358:	e3ab      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800635a:	bf00      	nop
 800635c:	e3a9      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800635e:	bf00      	nop
        break;
 8006360:	e3a7      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006362:	4b72      	ldr	r3, [pc, #456]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b0c      	cmp	r3, #12
 8006372:	d83a      	bhi.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 8006374:	a201      	add	r2, pc, #4	; (adr r2, 800637c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	080063b1 	.word	0x080063b1
 8006380:	080063eb 	.word	0x080063eb
 8006384:	080063eb 	.word	0x080063eb
 8006388:	080063eb 	.word	0x080063eb
 800638c:	080063b9 	.word	0x080063b9
 8006390:	080063eb 	.word	0x080063eb
 8006394:	080063eb 	.word	0x080063eb
 8006398:	080063eb 	.word	0x080063eb
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063eb 	.word	0x080063eb
 80063a4:	080063eb 	.word	0x080063eb
 80063a8:	080063eb 	.word	0x080063eb
 80063ac:	080063d5 	.word	0x080063d5
          frequency = HAL_RCC_GetPCLK1Freq();
 80063b0:	f7fe ffec 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 80063b4:	61f8      	str	r0, [r7, #28]
          break;
 80063b6:	e01d      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          frequency = HAL_RCC_GetSysClockFreq();
 80063b8:	f7fe ff52 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80063bc:	61f8      	str	r0, [r7, #28]
          break;
 80063be:	e019      	b.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063c0:	4b5a      	ldr	r3, [pc, #360]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063cc:	d10f      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
            frequency = HSI_VALUE;
 80063ce:	4b59      	ldr	r3, [pc, #356]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80063d0:	61fb      	str	r3, [r7, #28]
          break;
 80063d2:	e00c      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063d4:	4b55      	ldr	r3, [pc, #340]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d107      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = LSE_VALUE;
 80063e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e6:	61fb      	str	r3, [r7, #28]
          break;
 80063e8:	e003      	b.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          break;
 80063ea:	bf00      	nop
 80063ec:	e361      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063ee:	bf00      	nop
 80063f0:	e35f      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80063f2:	bf00      	nop
        break;
 80063f4:	e35d      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80063f6:	4b4d      	ldr	r3, [pc, #308]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80063f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b30      	cmp	r3, #48	; 0x30
 8006406:	d021      	beq.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b30      	cmp	r3, #48	; 0x30
 800640c:	d829      	bhi.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b20      	cmp	r3, #32
 8006412:	d011      	beq.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b20      	cmp	r3, #32
 8006418:	d823      	bhi.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b10      	cmp	r3, #16
 8006424:	d004      	beq.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          break;
 8006426:	e01c      	b.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006428:	f7fe ffb0 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 800642c:	61f8      	str	r0, [r7, #28]
          break;
 800642e:	e01d      	b.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          frequency = HAL_RCC_GetSysClockFreq();
 8006430:	f7fe ff16 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006434:	61f8      	str	r0, [r7, #28]
          break;
 8006436:	e019      	b.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006438:	4b3c      	ldr	r3, [pc, #240]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006444:	d10f      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
            frequency = HSI_VALUE;
 8006446:	4b3b      	ldr	r3, [pc, #236]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8006448:	61fb      	str	r3, [r7, #28]
          break;
 800644a:	e00c      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800644c:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b02      	cmp	r3, #2
 8006458:	d107      	bne.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = LSE_VALUE;
 800645a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645e:	61fb      	str	r3, [r7, #28]
          break;
 8006460:	e003      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          break;
 8006462:	bf00      	nop
 8006464:	e325      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006466:	bf00      	nop
 8006468:	e323      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800646a:	bf00      	nop
        break;
 800646c:	e321      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800646e:	4b2f      	ldr	r3, [pc, #188]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006474:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2bc0      	cmp	r3, #192	; 0xc0
 800647e:	d021      	beq.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2bc0      	cmp	r3, #192	; 0xc0
 8006484:	d829      	bhi.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b80      	cmp	r3, #128	; 0x80
 800648a:	d011      	beq.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b80      	cmp	r3, #128	; 0x80
 8006490:	d823      	bhi.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x856>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d003      	beq.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b40      	cmp	r3, #64	; 0x40
 800649c:	d004      	beq.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
          break;
 800649e:	e01c      	b.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x856>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064a0:	f7fe ff74 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 80064a4:	61f8      	str	r0, [r7, #28]
          break;
 80064a6:	e01d      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          frequency = HAL_RCC_GetSysClockFreq();
 80064a8:	f7fe feda 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80064ac:	61f8      	str	r0, [r7, #28]
          break;
 80064ae:	e019      	b.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80064b0:	4b1e      	ldr	r3, [pc, #120]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064bc:	d10f      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
            frequency = HSI_VALUE;
 80064be:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80064c0:	61fb      	str	r3, [r7, #28]
          break;
 80064c2:	e00c      	b.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x85a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064c4:	4b19      	ldr	r3, [pc, #100]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d107      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
            frequency = LSE_VALUE;
 80064d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d6:	61fb      	str	r3, [r7, #28]
          break;
 80064d8:	e003      	b.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
          break;
 80064da:	bf00      	nop
 80064dc:	e2e9      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80064de:	bf00      	nop
 80064e0:	e2e7      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80064e2:	bf00      	nop
        break;
 80064e4:	e2e5      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80064e6:	4b11      	ldr	r3, [pc, #68]	; (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80064e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f8:	d02c      	beq.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006500:	d833      	bhi.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006508:	d01a      	beq.n	8006540 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006510:	d82b      	bhi.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651e:	d00b      	beq.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          break;
 8006520:	e023      	b.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006522:	f7fe ff33 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8006526:	61f8      	str	r0, [r7, #28]
          break;
 8006528:	e024      	b.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 800652a:	bf00      	nop
 800652c:	40021000 	.word	0x40021000
 8006530:	02dc6c00 	.word	0x02dc6c00
 8006534:	00f42400 	.word	0x00f42400
          frequency = HAL_RCC_GetSysClockFreq();
 8006538:	f7fe fe92 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800653c:	61f8      	str	r0, [r7, #28]
          break;
 800653e:	e019      	b.n	8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006540:	4ba6      	ldr	r3, [pc, #664]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654c:	d10f      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            frequency = HSI_VALUE;
 800654e:	4ba4      	ldr	r3, [pc, #656]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006550:	61fb      	str	r3, [r7, #28]
          break;
 8006552:	e00c      	b.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006554:	4ba1      	ldr	r3, [pc, #644]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d107      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = LSE_VALUE;
 8006562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006566:	61fb      	str	r3, [r7, #28]
          break;
 8006568:	e003      	b.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800656a:	bf00      	nop
 800656c:	e2a1      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800656e:	bf00      	nop
 8006570:	e29f      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006572:	bf00      	nop
        break;
 8006574:	e29d      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006576:	4b99      	ldr	r3, [pc, #612]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006580:	60fb      	str	r3, [r7, #12]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006588:	d025      	beq.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006590:	d82c      	bhi.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006598:	d013      	beq.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a0:	d824      	bhi.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x968>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d004      	beq.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ae:	d004      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          break;
 80065b0:	e01c      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x968>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b2:	f7fe feeb 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 80065b6:	61f8      	str	r0, [r7, #28]
          break;
 80065b8:	e01d      	b.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          frequency = HAL_RCC_GetSysClockFreq();
 80065ba:	f7fe fe51 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80065be:	61f8      	str	r0, [r7, #28]
          break;
 80065c0:	e019      	b.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065c2:	4b86      	ldr	r3, [pc, #536]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ce:	d10f      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            frequency = HSI_VALUE;
 80065d0:	4b83      	ldr	r3, [pc, #524]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80065d2:	61fb      	str	r3, [r7, #28]
          break;
 80065d4:	e00c      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065d6:	4b81      	ldr	r3, [pc, #516]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d107      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
            frequency = LSE_VALUE;
 80065e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e8:	61fb      	str	r3, [r7, #28]
          break;
 80065ea:	e003      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          break;
 80065ec:	bf00      	nop
 80065ee:	e260      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80065f0:	bf00      	nop
 80065f2:	e25e      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80065f4:	bf00      	nop
        break;
 80065f6:	e25c      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80065f8:	4b78      	ldr	r3, [pc, #480]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800660a:	d007      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006612:	d12f      	bne.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x9f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006614:	f7fe fe24 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006618:	61f8      	str	r0, [r7, #28]
          break;
 800661a:	e02e      	b.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800661c:	4b6f      	ldr	r3, [pc, #444]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006628:	d126      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800662a:	4b6c      	ldr	r3, [pc, #432]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d020      	beq.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006636:	4b69      	ldr	r3, [pc, #420]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	0a1b      	lsrs	r3, r3, #8
 800663c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006640:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	fb02 f203 	mul.w	r2, r2, r3
 800664a:	4b64      	ldr	r3, [pc, #400]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	091b      	lsrs	r3, r3, #4
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	3301      	adds	r3, #1
 8006656:	fbb2 f3f3 	udiv	r3, r2, r3
 800665a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800665c:	4b5f      	ldr	r3, [pc, #380]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	0e5b      	lsrs	r3, r3, #25
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	3301      	adds	r3, #1
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006670:	61fb      	str	r3, [r7, #28]
          break;
 8006672:	e001      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
          break;
 8006674:	bf00      	nop
 8006676:	e21c      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006678:	bf00      	nop
        break;
 800667a:	e21a      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800667c:	4b57      	ldr	r3, [pc, #348]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800667e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d103      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
          frequency = HAL_RCC_GetPCLK2Freq();
 800668e:	f7fe fe93 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 8006692:	61f8      	str	r0, [r7, #28]
        break;
 8006694:	e20d      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006696:	f7fe fde3 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800669a:	61f8      	str	r0, [r7, #28]
        break;
 800669c:	e209      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800669e:	4b4f      	ldr	r3, [pc, #316]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066a4:	f003 0318 	and.w	r3, r3, #24
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b10      	cmp	r3, #16
 80066ae:	d010      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b10      	cmp	r3, #16
 80066b4:	d834      	bhi.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d024      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
          break;
 80066c2:	e02d      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80066c4:	69b9      	ldr	r1, [r7, #24]
 80066c6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80066ca:	f000 fbdf 	bl	8006e8c <RCCEx_GetSAIxPeriphCLKFreq>
 80066ce:	61f8      	str	r0, [r7, #28]
          break;
 80066d0:	e02b      	b.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80066d2:	4b42      	ldr	r3, [pc, #264]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d122      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80066de:	4b3f      	ldr	r3, [pc, #252]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80066ea:	4b3c      	ldr	r3, [pc, #240]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	091b      	lsrs	r3, r3, #4
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	e005      	b.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 80066f6:	4b39      	ldr	r3, [pc, #228]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80066f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066fc:	0a1b      	lsrs	r3, r3, #8
 80066fe:	f003 030f 	and.w	r3, r3, #15
 8006702:	4a38      	ldr	r2, [pc, #224]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>)
 8006704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006708:	61fb      	str	r3, [r7, #28]
          break;
 800670a:	e00b      	b.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800670c:	4b33      	ldr	r3, [pc, #204]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006718:	d106      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
            frequency = HSI_VALUE;
 800671a:	4b31      	ldr	r3, [pc, #196]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 800671c:	61fb      	str	r3, [r7, #28]
          break;
 800671e:	e003      	b.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          break;
 8006720:	bf00      	nop
 8006722:	e1c6      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006724:	bf00      	nop
 8006726:	e1c4      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006728:	bf00      	nop
        break;
 800672a:	e1c2      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800672c:	4b2b      	ldr	r3, [pc, #172]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006732:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673e:	d013      	beq.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006746:	d819      	bhi.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d004      	beq.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006754:	d004      	beq.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
          break;
 8006756:	e011      	b.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006758:	f7fe fe18 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 800675c:	61f8      	str	r0, [r7, #28]
          break;
 800675e:	e010      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          frequency = HAL_RCC_GetSysClockFreq();
 8006760:	f7fe fd7e 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006764:	61f8      	str	r0, [r7, #28]
          break;
 8006766:	e00c      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006768:	4b1c      	ldr	r3, [pc, #112]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006774:	d104      	bne.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
            frequency = HSI_VALUE;
 8006776:	4b1a      	ldr	r3, [pc, #104]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 8006778:	61fb      	str	r3, [r7, #28]
          break;
 800677a:	e001      	b.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
          break;
 800677c:	bf00      	nop
 800677e:	e198      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006780:	bf00      	nop
        break;
 8006782:	e196      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006784:	4b15      	ldr	r3, [pc, #84]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006796:	d013      	beq.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800679e:	d819      	bhi.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ac:	d004      	beq.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 80067ae:	e011      	b.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HAL_RCC_GetPCLK1Freq();
 80067b0:	f7fe fdec 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 80067b4:	61f8      	str	r0, [r7, #28]
          break;
 80067b6:	e010      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          frequency = HAL_RCC_GetSysClockFreq();
 80067b8:	f7fe fd52 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80067bc:	61f8      	str	r0, [r7, #28]
          break;
 80067be:	e00c      	b.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0xb58>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067cc:	d104      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
            frequency = HSI_VALUE;
 80067ce:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>)
 80067d0:	61fb      	str	r3, [r7, #28]
          break;
 80067d2:	e001      	b.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
          break;
 80067d4:	bf00      	nop
 80067d6:	e16c      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80067d8:	bf00      	nop
        break;
 80067da:	e16a      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 80067dc:	40021000 	.word	0x40021000
 80067e0:	00f42400 	.word	0x00f42400
 80067e4:	0800e46c 	.word	0x0800e46c
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80067e8:	4baa      	ldr	r3, [pc, #680]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067fa:	d013      	beq.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006802:	d819      	bhi.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d004      	beq.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006810:	d004      	beq.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
          break;
 8006812:	e011      	b.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006814:	f7fe fdba 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8006818:	61f8      	str	r0, [r7, #28]
          break;
 800681a:	e010      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = HAL_RCC_GetSysClockFreq();
 800681c:	f7fe fd20 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006820:	61f8      	str	r0, [r7, #28]
          break;
 8006822:	e00c      	b.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006824:	4b9b      	ldr	r3, [pc, #620]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006830:	d104      	bne.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
            frequency = HSI_VALUE;
 8006832:	4b99      	ldr	r3, [pc, #612]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006834:	61fb      	str	r3, [r7, #28]
          break;
 8006836:	e001      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          break;
 8006838:	bf00      	nop
 800683a:	e13a      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800683c:	bf00      	nop
        break;
 800683e:	e138      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006840:	4b94      	ldr	r3, [pc, #592]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b02      	cmp	r3, #2
 8006850:	d011      	beq.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b02      	cmp	r3, #2
 8006856:	d818      	bhi.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d004      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
          break;
 8006864:	e011      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006866:	f7fe fd91 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 800686a:	61f8      	str	r0, [r7, #28]
          break;
 800686c:	e010      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          frequency = HAL_RCC_GetSysClockFreq();
 800686e:	f7fe fcf7 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 8006872:	61f8      	str	r0, [r7, #28]
          break;
 8006874:	e00c      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006876:	4b87      	ldr	r3, [pc, #540]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006882:	d104      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
            frequency = HSI_VALUE;
 8006884:	4b84      	ldr	r3, [pc, #528]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006886:	61fb      	str	r3, [r7, #28]
          break;
 8006888:	e001      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          break;
 800688a:	bf00      	nop
 800688c:	e111      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800688e:	bf00      	nop
        break;
 8006890:	e10f      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006892:	4b80      	ldr	r3, [pc, #512]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80068a4:	d02c      	beq.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80068ac:	d833      	bhi.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068b4:	d01a      	beq.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068bc:	d82b      	bhi.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d004      	beq.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068ca:	d004      	beq.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          break;
 80068cc:	e023      	b.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xc92>
          frequency = HAL_RCC_GetPCLK1Freq();
 80068ce:	f7fe fd5d 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 80068d2:	61f8      	str	r0, [r7, #28]
          break;
 80068d4:	e026      	b.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0xca0>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80068d6:	4b6f      	ldr	r3, [pc, #444]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80068d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d11a      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
              frequency = LSI_VALUE;
 80068e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068e8:	61fb      	str	r3, [r7, #28]
          break;
 80068ea:	e016      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068ec:	4b69      	ldr	r3, [pc, #420]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f8:	d111      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
            frequency = HSI_VALUE;
 80068fa:	4b67      	ldr	r3, [pc, #412]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 80068fc:	61fb      	str	r3, [r7, #28]
          break;
 80068fe:	e00e      	b.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006900:	4b64      	ldr	r3, [pc, #400]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b02      	cmp	r3, #2
 800690c:	d109      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = LSE_VALUE;
 800690e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006912:	61fb      	str	r3, [r7, #28]
          break;
 8006914:	e005      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          break;
 8006916:	bf00      	nop
 8006918:	e0cb      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800691a:	bf00      	nop
 800691c:	e0c9      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800691e:	bf00      	nop
 8006920:	e0c7      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006922:	bf00      	nop
        break;
 8006924:	e0c5      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006926:	4b5b      	ldr	r3, [pc, #364]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006938:	d02c      	beq.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006940:	d833      	bhi.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006948:	d01a      	beq.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006950:	d82b      	bhi.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800695e:	d004      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
          break;
 8006960:	e023      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xd26>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006962:	f7fe fd13 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8006966:	61f8      	str	r0, [r7, #28]
          break;
 8006968:	e026      	b.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800696a:	4b4a      	ldr	r3, [pc, #296]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 800696c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b02      	cmp	r3, #2
 8006976:	d11a      	bne.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
              frequency = LSI_VALUE;
 8006978:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800697c:	61fb      	str	r3, [r7, #28]
          break;
 800697e:	e016      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006980:	4b44      	ldr	r3, [pc, #272]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800698c:	d111      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
            frequency = HSI_VALUE;
 800698e:	4b42      	ldr	r3, [pc, #264]	; (8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>)
 8006990:	61fb      	str	r3, [r7, #28]
          break;
 8006992:	e00e      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006994:	4b3f      	ldr	r3, [pc, #252]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d109      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
            frequency = LSE_VALUE;
 80069a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a6:	61fb      	str	r3, [r7, #28]
          break;
 80069a8:	e005      	b.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          break;
 80069aa:	bf00      	nop
 80069ac:	e081      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069ae:	bf00      	nop
 80069b0:	e07f      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069b2:	bf00      	nop
 80069b4:	e07d      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80069b6:	bf00      	nop
        break;
 80069b8:	e07b      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80069ba:	4b36      	ldr	r3, [pc, #216]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069cc:	d02c      	beq.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069d4:	d855      	bhi.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d004      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069e2:	d004      	beq.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
          break;
 80069e4:	e04d      	b.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
          frequency = HAL_RCC_GetSysClockFreq();
 80069e6:	f7fe fc3b 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 80069ea:	61f8      	str	r0, [r7, #28]
          break;
 80069ec:	e04e      	b.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80069ee:	4b29      	ldr	r3, [pc, #164]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d145      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80069fa:	4b26      	ldr	r3, [pc, #152]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006a06:	4b23      	ldr	r3, [pc, #140]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	091b      	lsrs	r3, r3, #4
 8006a0c:	f003 030f 	and.w	r3, r3, #15
 8006a10:	e005      	b.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 8006a12:	4b20      	ldr	r3, [pc, #128]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	4a1f      	ldr	r2, [pc, #124]	; (8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>)
 8006a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a24:	61fb      	str	r3, [r7, #28]
          break;
 8006a26:	e02e      	b.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006a28:	4b1a      	ldr	r3, [pc, #104]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a34:	d129      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006a36:	4b17      	ldr	r3, [pc, #92]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a42:	d122      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a44:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a4e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	fb02 f203 	mul.w	r2, r2, r3
 8006a58:	4b0e      	ldr	r3, [pc, #56]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	091b      	lsrs	r3, r3, #4
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	3301      	adds	r3, #1
 8006a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a68:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	0d5b      	lsrs	r3, r3, #21
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	3301      	adds	r3, #1
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7e:	61fb      	str	r3, [r7, #28]
          break;
 8006a80:	e003      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
          break;
 8006a82:	bf00      	nop
 8006a84:	e015      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a86:	bf00      	nop
 8006a88:	e013      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8006a8a:	bf00      	nop
        break;
 8006a8c:	e011      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006a8e:	bf00      	nop
 8006a90:	e00f      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8006a92:	bf00      	nop
 8006a94:	40021000 	.word	0x40021000
 8006a98:	00f42400 	.word	0x00f42400
 8006a9c:	0800e46c 	.word	0x0800e46c
      break;
 8006aa0:	bf00      	nop
 8006aa2:	e006      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006aa4:	bf00      	nop
 8006aa6:	e004      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006aa8:	bf00      	nop
 8006aaa:	e002      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006aac:	bf00      	nop
 8006aae:	e000      	b.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
      break;
 8006ab0:	bf00      	nop
    }
  }

  return(frequency);
 8006ab2:	69fb      	ldr	r3, [r7, #28]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3720      	adds	r7, #32
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006aca:	4b72      	ldr	r3, [pc, #456]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00e      	beq.n	8006af4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006ad6:	4b6f      	ldr	r3, [pc, #444]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f003 0203 	and.w	r2, r3, #3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d103      	bne.n	8006aee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d142      	bne.n	8006b74 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	73fb      	strb	r3, [r7, #15]
 8006af2:	e03f      	b.n	8006b74 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d018      	beq.n	8006b2e <RCCEx_PLLSAI1_Config+0x72>
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	d825      	bhi.n	8006b4c <RCCEx_PLLSAI1_Config+0x90>
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d002      	beq.n	8006b0a <RCCEx_PLLSAI1_Config+0x4e>
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d009      	beq.n	8006b1c <RCCEx_PLLSAI1_Config+0x60>
 8006b08:	e020      	b.n	8006b4c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b0a:	4b62      	ldr	r3, [pc, #392]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d11d      	bne.n	8006b52 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b1a:	e01a      	b.n	8006b52 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b1c:	4b5d      	ldr	r3, [pc, #372]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d116      	bne.n	8006b56 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b2c:	e013      	b.n	8006b56 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b2e:	4b59      	ldr	r3, [pc, #356]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10f      	bne.n	8006b5a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b3a:	4b56      	ldr	r3, [pc, #344]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b4a:	e006      	b.n	8006b5a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b50:	e004      	b.n	8006b5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b52:	bf00      	nop
 8006b54:	e002      	b.n	8006b5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b56:	bf00      	nop
 8006b58:	e000      	b.n	8006b5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d108      	bne.n	8006b74 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006b62:	4b4c      	ldr	r3, [pc, #304]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f023 0203 	bic.w	r2, r3, #3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4949      	ldr	r1, [pc, #292]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 8086 	bne.w	8006c88 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b7c:	4b45      	ldr	r3, [pc, #276]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a44      	ldr	r2, [pc, #272]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b88:	f7fa fd72 	bl	8001670 <HAL_GetTick>
 8006b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b8e:	e009      	b.n	8006ba4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b90:	f7fa fd6e 	bl	8001670 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d902      	bls.n	8006ba4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8006ba2:	e005      	b.n	8006bb0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ba4:	4b3b      	ldr	r3, [pc, #236]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1ef      	bne.n	8006b90 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d168      	bne.n	8006c88 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d113      	bne.n	8006be4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bbc:	4b35      	ldr	r3, [pc, #212]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	4b35      	ldr	r3, [pc, #212]	; (8006c98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6892      	ldr	r2, [r2, #8]
 8006bc8:	0211      	lsls	r1, r2, #8
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	68d2      	ldr	r2, [r2, #12]
 8006bce:	06d2      	lsls	r2, r2, #27
 8006bd0:	4311      	orrs	r1, r2
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6852      	ldr	r2, [r2, #4]
 8006bd6:	3a01      	subs	r2, #1
 8006bd8:	0112      	lsls	r2, r2, #4
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	492d      	ldr	r1, [pc, #180]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	610b      	str	r3, [r1, #16]
 8006be2:	e02d      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d115      	bne.n	8006c16 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bea:	4b2a      	ldr	r3, [pc, #168]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	4b2b      	ldr	r3, [pc, #172]	; (8006c9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6892      	ldr	r2, [r2, #8]
 8006bf6:	0211      	lsls	r1, r2, #8
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6912      	ldr	r2, [r2, #16]
 8006bfc:	0852      	lsrs	r2, r2, #1
 8006bfe:	3a01      	subs	r2, #1
 8006c00:	0552      	lsls	r2, r2, #21
 8006c02:	4311      	orrs	r1, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6852      	ldr	r2, [r2, #4]
 8006c08:	3a01      	subs	r2, #1
 8006c0a:	0112      	lsls	r2, r2, #4
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	4921      	ldr	r1, [pc, #132]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	610b      	str	r3, [r1, #16]
 8006c14:	e014      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c16:	4b1f      	ldr	r3, [pc, #124]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	4b21      	ldr	r3, [pc, #132]	; (8006ca0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6892      	ldr	r2, [r2, #8]
 8006c22:	0211      	lsls	r1, r2, #8
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6952      	ldr	r2, [r2, #20]
 8006c28:	0852      	lsrs	r2, r2, #1
 8006c2a:	3a01      	subs	r2, #1
 8006c2c:	0652      	lsls	r2, r2, #25
 8006c2e:	4311      	orrs	r1, r2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6852      	ldr	r2, [r2, #4]
 8006c34:	3a01      	subs	r2, #1
 8006c36:	0112      	lsls	r2, r2, #4
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	4916      	ldr	r1, [pc, #88]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c40:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a13      	ldr	r2, [pc, #76]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c4c:	f7fa fd10 	bl	8001670 <HAL_GetTick>
 8006c50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c52:	e009      	b.n	8006c68 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c54:	f7fa fd0c 	bl	8001670 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d902      	bls.n	8006c68 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	73fb      	strb	r3, [r7, #15]
          break;
 8006c66:	e005      	b.n	8006c74 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c68:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0ef      	beq.n	8006c54 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c7a:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c7c:	691a      	ldr	r2, [r3, #16]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	4904      	ldr	r1, [pc, #16]	; (8006c94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40021000 	.word	0x40021000
 8006c98:	07ff800f 	.word	0x07ff800f
 8006c9c:	ff9f800f 	.word	0xff9f800f
 8006ca0:	f9ff800f 	.word	0xf9ff800f

08006ca4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006cb2:	4b72      	ldr	r3, [pc, #456]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00e      	beq.n	8006cdc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006cbe:	4b6f      	ldr	r3, [pc, #444]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f003 0203 	and.w	r2, r3, #3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d103      	bne.n	8006cd6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
       ||
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d142      	bne.n	8006d5c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	73fb      	strb	r3, [r7, #15]
 8006cda:	e03f      	b.n	8006d5c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d018      	beq.n	8006d16 <RCCEx_PLLSAI2_Config+0x72>
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d825      	bhi.n	8006d34 <RCCEx_PLLSAI2_Config+0x90>
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d002      	beq.n	8006cf2 <RCCEx_PLLSAI2_Config+0x4e>
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d009      	beq.n	8006d04 <RCCEx_PLLSAI2_Config+0x60>
 8006cf0:	e020      	b.n	8006d34 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cf2:	4b62      	ldr	r3, [pc, #392]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d11d      	bne.n	8006d3a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d02:	e01a      	b.n	8006d3a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d04:	4b5d      	ldr	r3, [pc, #372]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d116      	bne.n	8006d3e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d14:	e013      	b.n	8006d3e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d16:	4b59      	ldr	r3, [pc, #356]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10f      	bne.n	8006d42 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d22:	4b56      	ldr	r3, [pc, #344]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d109      	bne.n	8006d42 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d32:	e006      	b.n	8006d42 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	73fb      	strb	r3, [r7, #15]
      break;
 8006d38:	e004      	b.n	8006d44 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d3a:	bf00      	nop
 8006d3c:	e002      	b.n	8006d44 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d3e:	bf00      	nop
 8006d40:	e000      	b.n	8006d44 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006d42:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d108      	bne.n	8006d5c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006d4a:	4b4c      	ldr	r3, [pc, #304]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f023 0203 	bic.w	r2, r3, #3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4949      	ldr	r1, [pc, #292]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 8086 	bne.w	8006e70 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d64:	4b45      	ldr	r3, [pc, #276]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a44      	ldr	r2, [pc, #272]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d70:	f7fa fc7e 	bl	8001670 <HAL_GetTick>
 8006d74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d76:	e009      	b.n	8006d8c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d78:	f7fa fc7a 	bl	8001670 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d902      	bls.n	8006d8c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	73fb      	strb	r3, [r7, #15]
        break;
 8006d8a:	e005      	b.n	8006d98 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d8c:	4b3b      	ldr	r3, [pc, #236]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1ef      	bne.n	8006d78 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d168      	bne.n	8006e70 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d113      	bne.n	8006dcc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006da4:	4b35      	ldr	r3, [pc, #212]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006da6:	695a      	ldr	r2, [r3, #20]
 8006da8:	4b35      	ldr	r3, [pc, #212]	; (8006e80 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6892      	ldr	r2, [r2, #8]
 8006db0:	0211      	lsls	r1, r2, #8
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	68d2      	ldr	r2, [r2, #12]
 8006db6:	06d2      	lsls	r2, r2, #27
 8006db8:	4311      	orrs	r1, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6852      	ldr	r2, [r2, #4]
 8006dbe:	3a01      	subs	r2, #1
 8006dc0:	0112      	lsls	r2, r2, #4
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	492d      	ldr	r1, [pc, #180]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	614b      	str	r3, [r1, #20]
 8006dca:	e02d      	b.n	8006e28 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d115      	bne.n	8006dfe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006dd2:	4b2a      	ldr	r3, [pc, #168]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dd4:	695a      	ldr	r2, [r3, #20]
 8006dd6:	4b2b      	ldr	r3, [pc, #172]	; (8006e84 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6892      	ldr	r2, [r2, #8]
 8006dde:	0211      	lsls	r1, r2, #8
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6912      	ldr	r2, [r2, #16]
 8006de4:	0852      	lsrs	r2, r2, #1
 8006de6:	3a01      	subs	r2, #1
 8006de8:	0552      	lsls	r2, r2, #21
 8006dea:	4311      	orrs	r1, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6852      	ldr	r2, [r2, #4]
 8006df0:	3a01      	subs	r2, #1
 8006df2:	0112      	lsls	r2, r2, #4
 8006df4:	430a      	orrs	r2, r1
 8006df6:	4921      	ldr	r1, [pc, #132]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	614b      	str	r3, [r1, #20]
 8006dfc:	e014      	b.n	8006e28 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006dfe:	4b1f      	ldr	r3, [pc, #124]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e00:	695a      	ldr	r2, [r3, #20]
 8006e02:	4b21      	ldr	r3, [pc, #132]	; (8006e88 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6892      	ldr	r2, [r2, #8]
 8006e0a:	0211      	lsls	r1, r2, #8
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6952      	ldr	r2, [r2, #20]
 8006e10:	0852      	lsrs	r2, r2, #1
 8006e12:	3a01      	subs	r2, #1
 8006e14:	0652      	lsls	r2, r2, #25
 8006e16:	4311      	orrs	r1, r2
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6852      	ldr	r2, [r2, #4]
 8006e1c:	3a01      	subs	r2, #1
 8006e1e:	0112      	lsls	r2, r2, #4
 8006e20:	430a      	orrs	r2, r1
 8006e22:	4916      	ldr	r1, [pc, #88]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e28:	4b14      	ldr	r3, [pc, #80]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a13      	ldr	r2, [pc, #76]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e34:	f7fa fc1c 	bl	8001670 <HAL_GetTick>
 8006e38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e3a:	e009      	b.n	8006e50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e3c:	f7fa fc18 	bl	8001670 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d902      	bls.n	8006e50 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	73fb      	strb	r3, [r7, #15]
          break;
 8006e4e:	e005      	b.n	8006e5c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e50:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0ef      	beq.n	8006e3c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e62:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	4904      	ldr	r1, [pc, #16]	; (8006e7c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40021000 	.word	0x40021000
 8006e80:	07ff800f 	.word	0x07ff800f
 8006e84:	ff9f800f 	.word	0xff9f800f
 8006e88:	f9ff800f 	.word	0xf9ff800f

08006e8c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b089      	sub	sp, #36	; 0x24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea8:	d10b      	bne.n	8006ec2 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006eaa:	4b7e      	ldr	r3, [pc, #504]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eb0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006eb4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b60      	cmp	r3, #96	; 0x60
 8006eba:	d112      	bne.n	8006ee2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ebc:	4b7a      	ldr	r3, [pc, #488]	; (80070a8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	e00f      	b.n	8006ee2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec8:	d10b      	bne.n	8006ee2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006eca:	4b76      	ldr	r3, [pc, #472]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006ecc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ed4:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006edc:	d101      	bne.n	8006ee2 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8006ede:	4b72      	ldr	r3, [pc, #456]	; (80070a8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8006ee0:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 80d6 	bne.w	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	2b40      	cmp	r3, #64	; 0x40
 8006ef2:	d003      	beq.n	8006efc <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006efa:	d13b      	bne.n	8006f74 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006efc:	4b69      	ldr	r3, [pc, #420]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f08:	f040 80c4 	bne.w	8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8006f0c:	4b65      	ldr	r3, [pc, #404]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 80bd 	beq.w	8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006f1a:	4b62      	ldr	r3, [pc, #392]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	091b      	lsrs	r3, r3, #4
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	3301      	adds	r3, #1
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006f2e:	4b5d      	ldr	r3, [pc, #372]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f38:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006f3a:	4b5a      	ldr	r3, [pc, #360]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	0edb      	lsrs	r3, r3, #27
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006f4c:	4b55      	ldr	r3, [pc, #340]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8006f58:	2311      	movs	r3, #17
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	e001      	b.n	8006f62 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8006f5e:	2307      	movs	r3, #7
 8006f60:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	fb02 f203 	mul.w	r2, r2, r3
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f70:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8006f72:	e08f      	b.n	8007094 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d13a      	bne.n	8006ff0 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8006f7a:	4b4a      	ldr	r3, [pc, #296]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f86:	f040 8086 	bne.w	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8006f8a:	4b46      	ldr	r3, [pc, #280]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d07f      	beq.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006f96:	4b43      	ldr	r3, [pc, #268]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	091b      	lsrs	r3, r3, #4
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006faa:	4b3e      	ldr	r3, [pc, #248]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006fb6:	4b3b      	ldr	r3, [pc, #236]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	0edb      	lsrs	r3, r3, #27
 8006fbc:	f003 031f 	and.w	r3, r3, #31
 8006fc0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006fc8:	4b36      	ldr	r3, [pc, #216]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8006fd4:	2311      	movs	r3, #17
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	e001      	b.n	8006fde <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8006fda:	2307      	movs	r3, #7
 8006fdc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	fb02 f203 	mul.w	r2, r2, r3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	e052      	b.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	2b80      	cmp	r3, #128	; 0x80
 8006ff4:	d003      	beq.n	8006ffe <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ffc:	d109      	bne.n	8007012 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ffe:	4b29      	ldr	r3, [pc, #164]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800700a:	d144      	bne.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800700c:	4b27      	ldr	r3, [pc, #156]	; (80070ac <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800700e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007010:	e041      	b.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b20      	cmp	r3, #32
 8007016:	d003      	beq.n	8007020 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701e:	d13a      	bne.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8007020:	4b20      	ldr	r3, [pc, #128]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800702c:	d133      	bne.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800702e:	4b1d      	ldr	r3, [pc, #116]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d02d      	beq.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800703a:	4b1a      	ldr	r3, [pc, #104]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	091b      	lsrs	r3, r3, #4
 8007040:	f003 030f 	and.w	r3, r3, #15
 8007044:	3301      	adds	r3, #1
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	fbb2 f3f3 	udiv	r3, r2, r3
 800704c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800704e:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	0a1b      	lsrs	r3, r3, #8
 8007054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007058:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800705a:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	0edb      	lsrs	r3, r3, #27
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10a      	bne.n	8007082 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800706c:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8007078:	2311      	movs	r3, #17
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e001      	b.n	8007082 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800707e:	2307      	movs	r3, #7
 8007080:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	fb02 f203 	mul.w	r2, r2, r3
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	e000      	b.n	8007096 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007094:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007096:	69fb      	ldr	r3, [r7, #28]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3724      	adds	r7, #36	; 0x24
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	40021000 	.word	0x40021000
 80070a8:	001fff68 	.word	0x001fff68
 80070ac:	00f42400 	.word	0x00f42400

080070b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d06c      	beq.n	800719c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7f9 ffca 	bl	8001070 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	22ca      	movs	r2, #202	; 0xca
 80070ea:	625a      	str	r2, [r3, #36]	; 0x24
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2253      	movs	r2, #83	; 0x53
 80070f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f9a0 	bl	800743a <RTC_EnterInitMode>
 80070fa:	4603      	mov	r3, r0
 80070fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d14b      	bne.n	800719c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007116:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6899      	ldr	r1, [r3, #8]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68d2      	ldr	r2, [r2, #12]
 800713e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6919      	ldr	r1, [r3, #16]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	041a      	lsls	r2, r3, #16
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f9a3 	bl	80074a0 <RTC_ExitInitMode>
 800715a:	4603      	mov	r3, r0
 800715c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800715e:	7bfb      	ldrb	r3, [r7, #15]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d11b      	bne.n	800719c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0203 	bic.w	r2, r2, #3
 8007172:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69da      	ldr	r2, [r3, #28]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	22ff      	movs	r2, #255	; 0xff
 8007192:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071a6:	b590      	push	{r4, r7, lr}
 80071a8:	b087      	sub	sp, #28
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_RTC_SetTime+0x1a>
 80071bc:	2302      	movs	r3, #2
 80071be:	e08b      	b.n	80072d8 <HAL_RTC_SetTime+0x132>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	22ca      	movs	r2, #202	; 0xca
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2253      	movs	r2, #83	; 0x53
 80071de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f92a 	bl	800743a <RTC_EnterInitMode>
 80071e6:	4603      	mov	r3, r0
 80071e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80071ea:	7cfb      	ldrb	r3, [r7, #19]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d163      	bne.n	80072b8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d126      	bne.n	8007244 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2200      	movs	r2, #0
 8007208:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f984 	bl	800751c <RTC_ByteToBcd2>
 8007214:	4603      	mov	r3, r0
 8007216:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	785b      	ldrb	r3, [r3, #1]
 800721c:	4618      	mov	r0, r3
 800721e:	f000 f97d 	bl	800751c <RTC_ByteToBcd2>
 8007222:	4603      	mov	r3, r0
 8007224:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007226:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	789b      	ldrb	r3, [r3, #2]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f975 	bl	800751c <RTC_ByteToBcd2>
 8007232:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007234:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	78db      	ldrb	r3, [r3, #3]
 800723c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	e018      	b.n	8007276 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2200      	movs	r2, #0
 8007256:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007264:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800726a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	78db      	ldrb	r3, [r3, #3]
 8007270:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007280:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007284:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007294:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6899      	ldr	r1, [r3, #8]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	431a      	orrs	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f8f6 	bl	80074a0 <RTC_ExitInitMode>
 80072b4:	4603      	mov	r3, r0
 80072b6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	22ff      	movs	r2, #255	; 0xff
 80072be:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80072c0:	7cfb      	ldrb	r3, [r7, #19]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d103      	bne.n	80072ce <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80072d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd90      	pop	{r4, r7, pc}

080072e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d101      	bne.n	80072fa <HAL_RTC_SetDate+0x1a>
 80072f6:	2302      	movs	r3, #2
 80072f8:	e075      	b.n	80073e6 <HAL_RTC_SetDate+0x106>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2202      	movs	r2, #2
 8007306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10e      	bne.n	800732e <HAL_RTC_SetDate+0x4e>
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	f023 0310 	bic.w	r3, r3, #16
 8007324:	b2db      	uxtb	r3, r3
 8007326:	330a      	adds	r3, #10
 8007328:	b2da      	uxtb	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d11c      	bne.n	800736e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	78db      	ldrb	r3, [r3, #3]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 f8ef 	bl	800751c <RTC_ByteToBcd2>
 800733e:	4603      	mov	r3, r0
 8007340:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	4618      	mov	r0, r3
 8007348:	f000 f8e8 	bl	800751c <RTC_ByteToBcd2>
 800734c:	4603      	mov	r3, r0
 800734e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007350:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	789b      	ldrb	r3, [r3, #2]
 8007356:	4618      	mov	r0, r3
 8007358:	f000 f8e0 	bl	800751c <RTC_ByteToBcd2>
 800735c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800735e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	e00e      	b.n	800738c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	78db      	ldrb	r3, [r3, #3]
 8007372:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800737a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007380:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	22ca      	movs	r2, #202	; 0xca
 8007392:	625a      	str	r2, [r3, #36]	; 0x24
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2253      	movs	r2, #83	; 0x53
 800739a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 f84c 	bl	800743a <RTC_EnterInitMode>
 80073a2:	4603      	mov	r3, r0
 80073a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80073a6:	7cfb      	ldrb	r3, [r7, #19]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10c      	bne.n	80073c6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073ba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f86f 	bl	80074a0 <RTC_ExitInitMode>
 80073c2:	4603      	mov	r3, r0
 80073c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	22ff      	movs	r2, #255	; 0xff
 80073cc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80073ce:	7cfb      	ldrb	r3, [r7, #19]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d103      	bne.n	80073dc <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80073e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd90      	pop	{r4, r7, pc}

080073ee <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007404:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007406:	f7fa f933 	bl	8001670 <HAL_GetTick>
 800740a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800740c:	e009      	b.n	8007422 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800740e:	f7fa f92f 	bl	8001670 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800741c:	d901      	bls.n	8007422 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e007      	b.n	8007432 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0ee      	beq.n	800740e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	d120      	bne.n	8007496 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f04f 32ff 	mov.w	r2, #4294967295
 800745c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800745e:	f7fa f907 	bl	8001670 <HAL_GetTick>
 8007462:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007464:	e00d      	b.n	8007482 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007466:	f7fa f903 	bl	8001670 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007474:	d905      	bls.n	8007482 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2203      	movs	r2, #3
 800747e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748c:	2b00      	cmp	r3, #0
 800748e:	d102      	bne.n	8007496 <RTC_EnterInitMode+0x5c>
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	2b03      	cmp	r3, #3
 8007494:	d1e7      	bne.n	8007466 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80074ac:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <RTC_ExitInitMode+0x78>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	4a19      	ldr	r2, [pc, #100]	; (8007518 <RTC_ExitInitMode+0x78>)
 80074b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80074b8:	4b17      	ldr	r3, [pc, #92]	; (8007518 <RTC_ExitInitMode+0x78>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f003 0320 	and.w	r3, r3, #32
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10c      	bne.n	80074de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7ff ff92 	bl	80073ee <HAL_RTC_WaitForSynchro>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01e      	beq.n	800750e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2203      	movs	r2, #3
 80074d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	73fb      	strb	r3, [r7, #15]
 80074dc:	e017      	b.n	800750e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80074de:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <RTC_ExitInitMode+0x78>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	4a0d      	ldr	r2, [pc, #52]	; (8007518 <RTC_ExitInitMode+0x78>)
 80074e4:	f023 0320 	bic.w	r3, r3, #32
 80074e8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff ff7f 	bl	80073ee <HAL_RTC_WaitForSynchro>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2203      	movs	r2, #3
 80074fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007502:	4b05      	ldr	r3, [pc, #20]	; (8007518 <RTC_ExitInitMode+0x78>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	4a04      	ldr	r2, [pc, #16]	; (8007518 <RTC_ExitInitMode+0x78>)
 8007508:	f043 0320 	orr.w	r3, r3, #32
 800750c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800750e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	40002800 	.word	0x40002800

0800751c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800752e:	e005      	b.n	800753c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3301      	adds	r3, #1
 8007534:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007536:	7afb      	ldrb	r3, [r7, #11]
 8007538:	3b0a      	subs	r3, #10
 800753a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800753c:	7afb      	ldrb	r3, [r7, #11]
 800753e:	2b09      	cmp	r3, #9
 8007540:	d8f6      	bhi.n	8007530 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	b2da      	uxtb	r2, r3
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	4313      	orrs	r3, r2
 800754e:	b2db      	uxtb	r3, r3
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08a      	sub	sp, #40	; 0x28
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e078      	b.n	8007660 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d105      	bne.n	8007586 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7f9 fd91 	bl	80010a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2203      	movs	r2, #3
 800758a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 f86a 	bl	8007668 <HAL_SD_InitCard>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e060      	b.n	8007660 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800759e:	f107 0308 	add.w	r3, r7, #8
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fdc7 	bl	8008138 <HAL_SD_GetCardStatus>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e055      	b.n	8007660 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80075b4:	7e3b      	ldrb	r3, [r7, #24]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80075ba:	7e7b      	ldrb	r3, [r7, #25]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d10a      	bne.n	80075de <HAL_SD_Init+0x82>
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d102      	bne.n	80075d4 <HAL_SD_Init+0x78>
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075da:	65da      	str	r2, [r3, #92]	; 0x5c
 80075dc:	e00b      	b.n	80075f6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d104      	bne.n	80075f0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80075ee:	e002      	b.n	80075f6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fe7d 	bl	80082fc <HAL_SD_ConfigWideBusOperation>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e029      	b.n	8007660 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800760c:	f7fa f830 	bl	8001670 <HAL_GetTick>
 8007610:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007612:	e014      	b.n	800763e <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007614:	f7fa f82c 	bl	8001670 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007622:	d10c      	bne.n	800763e <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800762a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e010      	b.n	8007660 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 ff70 	bl	8008524 <HAL_SD_GetCardState>
 8007644:	4603      	mov	r3, r0
 8007646:	2b04      	cmp	r3, #4
 8007648:	d1e4      	bne.n	8007614 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3728      	adds	r7, #40	; 0x28
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007668:	b5b0      	push	{r4, r5, r7, lr}
 800766a:	b090      	sub	sp, #64	; 0x40
 800766c:	af04      	add	r7, sp, #16
 800766e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007674:	2300      	movs	r3, #0
 8007676:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800767c:	2300      	movs	r3, #0
 800767e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007680:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007684:	f7fe fafe 	bl	8005c84 <HAL_RCCEx_GetPeriphCLKFreq>
 8007688:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (sdmmc_clk == 0U)
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d109      	bne.n	80076a4 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e08b      	b.n	80077bc <HAL_SD_InitCard+0x154>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	0a1b      	lsrs	r3, r3, #8
 80076a8:	4a46      	ldr	r2, [pc, #280]	; (80077c4 <HAL_SD_InitCard+0x15c>)
 80076aa:	fba2 2303 	umull	r2, r3, r2, r3
 80076ae:	091b      	lsrs	r3, r3, #4
 80076b0:	61fb      	str	r3, [r7, #28]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	623b      	str	r3, [r7, #32]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d107      	bne.n	80076d0 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0210 	orr.w	r2, r2, #16
 80076ce:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681d      	ldr	r5, [r3, #0]
 80076d4:	466c      	mov	r4, sp
 80076d6:	f107 0318 	add.w	r3, r7, #24
 80076da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076e2:	f107 030c 	add.w	r3, r7, #12
 80076e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076e8:	4628      	mov	r0, r5
 80076ea:	f002 f927 	bl	800993c <SDMMC_Init>
 80076ee:	4603      	mov	r3, r0
 80076f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 80076f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <HAL_SD_InitCard+0x98>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e05d      	b.n	80077bc <HAL_SD_InitCard+0x154>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f002 f961 	bl	80099cc <SDMMC_PowerState_ON>
 800770a:	4603      	mov	r3, r0
 800770c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if(status != HAL_OK)
 8007710:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <HAL_SD_InitCard+0xb4>
  {
    return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e04f      	b.n	80077bc <HAL_SD_InitCard+0x154>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007722:	fbb2 f3f3 	udiv	r3, r2, r3
 8007726:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007728:	4a27      	ldr	r2, [pc, #156]	; (80077c8 <HAL_SD_InitCard+0x160>)
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007730:	3301      	adds	r3, #1
 8007732:	4618      	mov	r0, r3
 8007734:	f7f9 ffa8 	bl	8001688 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 ffd1 	bl	80086e0 <SD_PowerON>
 800773e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00b      	beq.n	800775e <HAL_SD_InitCard+0xf6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e02e      	b.n	80077bc <HAL_SD_InitCard+0x154>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 ff00 	bl	8008564 <SD_InitCard>
 8007764:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <HAL_SD_InitCard+0x11c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	431a      	orrs	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e01b      	b.n	80077bc <HAL_SD_InitCard+0x154>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800778c:	4618      	mov	r0, r3
 800778e:	f002 f9b3 	bl	8009af8 <SDMMC_CmdBlockLength>
 8007792:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00f      	beq.n	80077ba <HAL_SD_InitCard+0x152>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a0b      	ldr	r2, [pc, #44]	; (80077cc <HAL_SD_InitCard+0x164>)
 80077a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e000      	b.n	80077bc <HAL_SD_InitCard+0x154>
  }

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3730      	adds	r7, #48	; 0x30
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bdb0      	pop	{r4, r5, r7, pc}
 80077c4:	014f8b59 	.word	0x014f8b59
 80077c8:	00012110 	.word	0x00012110
 80077cc:	1fe00fff 	.word	0x1fe00fff

080077d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08c      	sub	sp, #48	; 0x30
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d107      	bne.n	80077f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e08d      	b.n	8007914 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	f040 8086 	bne.w	8007912 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800780c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	441a      	add	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007816:	429a      	cmp	r2, r3
 8007818:	d907      	bls.n	800782a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e074      	b.n	8007914 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2203      	movs	r2, #3
 800782e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2200      	movs	r2, #0
 8007838:	62da      	str	r2, [r3, #44]	; 0x2c
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
#else
      hsd->pRxBuffPtr = pData;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	025a      	lsls	r2, r3, #9
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784c:	2b01      	cmp	r3, #1
 800784e:	d002      	beq.n	8007856 <HAL_SD_ReadBlocks_DMA+0x86>
      {
        add *= 512U;
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	025b      	lsls	r3, r3, #9
 8007854:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007856:	f04f 33ff 	mov.w	r3, #4294967295
 800785a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	025b      	lsls	r3, r3, #9
 8007860:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007862:	2390      	movs	r3, #144	; 0x90
 8007864:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007866:	2302      	movs	r3, #2
 8007868:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800786a:	2300      	movs	r3, #0
 800786c:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
 800786e:	2300      	movs	r3, #0
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f107 0210 	add.w	r2, r7, #16
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f002 f90f 	bl	8009aa0 <SDMMC_ConfigData>

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)

      __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007890:	60da      	str	r2, [r3, #12]
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	659a      	str	r2, [r3, #88]	; 0x58
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2201      	movs	r2, #1
 80078a0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d90a      	bls.n	80078be <HAL_SD_ReadBlocks_DMA+0xee>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2282      	movs	r2, #130	; 0x82
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078b4:	4618      	mov	r0, r3
 80078b6:	f002 f965 	bl	8009b84 <SDMMC_CmdReadMultiBlock>
 80078ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 80078bc:	e009      	b.n	80078d2 <HAL_SD_ReadBlocks_DMA+0x102>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2281      	movs	r2, #129	; 0x81
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078ca:	4618      	mov	r0, r3
 80078cc:	f002 f937 	bl	8009b3e <SDMMC_CmdReadSingleBlock>
 80078d0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80078d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d012      	beq.n	80078fe <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a0f      	ldr	r2, [pc, #60]	; (800791c <HAL_SD_ReadBlocks_DMA+0x14c>)
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	431a      	orrs	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e00a      	b.n	8007914 <HAL_SD_ReadBlocks_DMA+0x144>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800790c:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	e000      	b.n	8007914 <HAL_SD_ReadBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007912:	2302      	movs	r3, #2
  }
}
 8007914:	4618      	mov	r0, r3
 8007916:	3730      	adds	r7, #48	; 0x30
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	1fe00fff 	.word	0x1fe00fff

08007920 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08c      	sub	sp, #48	; 0x30
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d107      	bne.n	8007948 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e08d      	b.n	8007a64 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b01      	cmp	r3, #1
 8007952:	f040 8086 	bne.w	8007a62 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800795c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	441a      	add	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007966:	429a      	cmp	r2, r3
 8007968:	d907      	bls.n	800797a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e074      	b.n	8007a64 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2203      	movs	r2, #3
 800797e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2200      	movs	r2, #0
 8007988:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	025a      	lsls	r2, r3, #9
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799c:	2b01      	cmp	r3, #1
 800799e:	d002      	beq.n	80079a6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	025b      	lsls	r3, r3, #9
 80079a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079a6:	f04f 33ff 	mov.w	r3, #4294967295
 80079aa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	025b      	lsls	r3, r3, #9
 80079b0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80079b2:	2390      	movs	r3, #144	; 0x90
 80079b4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80079be:	2300      	movs	r3, #0
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f107 0210 	add.w	r2, r7, #16
 80079ca:	4611      	mov	r1, r2
 80079cc:	4618      	mov	r0, r3
 80079ce:	f002 f867 	bl	8009aa0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079e0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2201      	movs	r2, #1
 80079f0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d90a      	bls.n	8007a0e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	22a0      	movs	r2, #160	; 0xa0
 80079fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a04:	4618      	mov	r0, r3
 8007a06:	f002 f903 	bl	8009c10 <SDMMC_CmdWriteMultiBlock>
 8007a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007a0c:	e009      	b.n	8007a22 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2290      	movs	r2, #144	; 0x90
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f002 f8d5 	bl	8009bca <SDMMC_CmdWriteSingleBlock>
 8007a20:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d012      	beq.n	8007a4e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a0f      	ldr	r2, [pc, #60]	; (8007a6c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a36:	431a      	orrs	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e00a      	b.n	8007a64 <HAL_SD_WriteBlocks_DMA+0x144>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007a5c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e000      	b.n	8007a64 <HAL_SD_WriteBlocks_DMA+0x144>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8007a62:	2302      	movs	r3, #2
  }
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3730      	adds	r7, #48	; 0x30
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	1fe00fff 	.word	0x1fe00fff

08007a70 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <HAL_SD_IRQHandler+0x2e>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f003 0308 	and.w	r3, r3, #8
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 f98c 	bl	8008db4 <SD_Read_IT>
 8007a9c:	e199      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 80ae 	beq.w	8007c0a <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ab6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007ac6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007aca:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007ada:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aea:	60da      	str	r2, [r3, #12]
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d038      	beq.n	8007b68 <HAL_SD_IRQHandler+0xf8>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d104      	bne.n	8007b0a <HAL_SD_IRQHandler+0x9a>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d011      	beq.n	8007b2e <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f002 f8a2 	bl	8009c58 <SDMMC_CmdStopTransfer>
 8007b14:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d008      	beq.n	8007b2e <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f957 	bl	8007ddc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4aa0      	ldr	r2, [pc, #640]	; (8007db4 <HAL_SD_IRQHandler+0x344>)
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <HAL_SD_IRQHandler+0xe8>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f003 ff7d 	bl	800ba58 <HAL_SD_RxCpltCallback>
 8007b5e:	e138      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f003 ff6f 	bl	800ba44 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8007b66:	e134      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f000 812f 	beq.w	8007dd2 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2200      	movs	r2, #0
 8007b82:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <HAL_SD_IRQHandler+0x130>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d011      	beq.n	8007bc4 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f002 f857 	bl	8009c58 <SDMMC_CmdStopTransfer>
 8007baa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d008      	beq.n	8007bc4 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f90c 	bl	8007ddc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d104      	bne.n	8007be6 <HAL_SD_IRQHandler+0x176>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f003 ff2c 	bl	800ba44 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d105      	bne.n	8007c02 <HAL_SD_IRQHandler+0x192>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 80e8 	beq.w	8007dd2 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f003 ff28 	bl	800ba58 <HAL_SD_RxCpltCallback>
}
 8007c08:	e0e3      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <HAL_SD_IRQHandler+0x1ba>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f003 0308 	and.w	r3, r3, #8
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 f917 	bl	8008e56 <SD_Write_IT>
 8007c28:	e0d3      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c30:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 809d 	beq.w	8007d74 <HAL_SD_IRQHandler+0x304>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	f043 0202 	orr.w	r2, r3, #2
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	f043 0208 	orr.w	r2, r3, #8
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c74:	f003 0320 	and.w	r3, r3, #32
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	f043 0220 	orr.w	r2, r3, #32
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d005      	beq.n	8007ca2 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	f043 0210 	orr.w	r2, r3, #16
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a43      	ldr	r2, [pc, #268]	; (8007db4 <HAL_SD_IRQHandler+0x344>)
 8007ca8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007cb8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc8:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cd8:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ce8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 ffb2 	bl	8009c58 <SDMMC_CmdStopTransfer>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d0e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f852 	bl	8007ddc <HAL_SD_ErrorCallback>
}
 8007d38:	e04b      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d046      	beq.n	8007dd2 <HAL_SD_IRQHandler+0x362>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d042      	beq.n	8007dd2 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007d5a:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2200      	movs	r2, #0
 8007d62:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f835 	bl	8007ddc <HAL_SD_ErrorCallback>
}
 8007d72:	e02e      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d027      	beq.n	8007dd2 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d92:	f003 0304 	and.w	r3, r3, #4
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10e      	bne.n	8007db8 <HAL_SD_IRQHandler+0x348>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f003 0320 	and.w	r3, r3, #32
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <HAL_SD_IRQHandler+0x33c>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 f8d4 	bl	8008f52 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
}
 8007daa:	e012      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 f8bc 	bl	8008f2a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
}
 8007db2:	e00e      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
 8007db4:	18000f3a 	.word	0x18000f3a
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 f8bb 	bl	8008f3e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
}
 8007dc8:	e003      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 f8a3 	bl	8008f16 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
}
 8007dd0:	e7ff      	b.n	8007dd2 <HAL_SD_IRQHandler+0x362>
 8007dd2:	bf00      	nop
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop

08007ddc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfe:	0f9b      	lsrs	r3, r3, #30
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0a:	0e9b      	lsrs	r3, r3, #26
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	f003 030f 	and.w	r3, r3, #15
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1c:	0e1b      	lsrs	r3, r3, #24
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f003 0303 	and.w	r3, r3, #3
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2e:	0c1b      	lsrs	r3, r3, #16
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e3a:	0a1b      	lsrs	r3, r3, #8
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e50:	0d1b      	lsrs	r3, r3, #20
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5c:	0c1b      	lsrs	r3, r3, #16
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e6e:	0bdb      	lsrs	r3, r3, #15
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e80:	0b9b      	lsrs	r3, r3, #14
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 0301 	and.w	r3, r3, #1
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e92:	0b5b      	lsrs	r3, r3, #13
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea4:	0b1b      	lsrs	r3, r3, #12
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d163      	bne.n	8007f88 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ec4:	009a      	lsls	r2, r3, #2
 8007ec6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007eca:	4013      	ands	r3, r2
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ed0:	0f92      	lsrs	r2, r2, #30
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007edc:	0edb      	lsrs	r3, r3, #27
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eee:	0e1b      	lsrs	r3, r3, #24
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	f003 0307 	and.w	r3, r3, #7
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f00:	0d5b      	lsrs	r3, r3, #21
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f12:	0c9b      	lsrs	r3, r3, #18
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f24:	0bdb      	lsrs	r3, r3, #15
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f003 0307 	and.w	r3, r3, #7
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	7e1b      	ldrb	r3, [r3, #24]
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	3302      	adds	r3, #2
 8007f48:	2201      	movs	r2, #1
 8007f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f52:	fb02 f203 	mul.w	r2, r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	7a1b      	ldrb	r3, [r3, #8]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	2201      	movs	r2, #1
 8007f66:	409a      	lsls	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f74:	0a52      	lsrs	r2, r2, #9
 8007f76:	fb02 f203 	mul.w	r2, r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f84:	659a      	str	r2, [r3, #88]	; 0x58
 8007f86:	e031      	b.n	8007fec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d11d      	bne.n	8007fcc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f94:	041b      	lsls	r3, r3, #16
 8007f96:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f9e:	0c1b      	lsrs	r3, r3, #16
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	3301      	adds	r3, #1
 8007fac:	029a      	lsls	r2, r3, #10
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fc0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	659a      	str	r2, [r3, #88]	; 0x58
 8007fca:	e00f      	b.n	8007fec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a58      	ldr	r2, [pc, #352]	; (8008134 <HAL_SD_GetCardCSD+0x344>)
 8007fd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e09d      	b.n	8008128 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ff0:	0b9b      	lsrs	r3, r3, #14
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008002:	09db      	lsrs	r3, r3, #7
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800800a:	b2da      	uxtb	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008014:	b2db      	uxtb	r3, r3
 8008016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800801a:	b2da      	uxtb	r2, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008024:	0fdb      	lsrs	r3, r3, #31
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008030:	0f5b      	lsrs	r3, r3, #29
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0303 	and.w	r3, r3, #3
 8008038:	b2da      	uxtb	r2, r3
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008042:	0e9b      	lsrs	r3, r3, #26
 8008044:	b2db      	uxtb	r3, r3
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	b2da      	uxtb	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008054:	0d9b      	lsrs	r3, r3, #22
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	b2da      	uxtb	r2, r3
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008066:	0d5b      	lsrs	r3, r3, #21
 8008068:	b2db      	uxtb	r3, r3
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	b2da      	uxtb	r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008082:	0c1b      	lsrs	r3, r3, #16
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	b2da      	uxtb	r2, r3
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008096:	0bdb      	lsrs	r3, r3, #15
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080aa:	0b9b      	lsrs	r3, r3, #14
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080be:	0b5b      	lsrs	r3, r3, #13
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d2:	0b1b      	lsrs	r3, r3, #12
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080e6:	0a9b      	lsrs	r3, r3, #10
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	f003 0303 	and.w	r3, r3, #3
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080fa:	0a1b      	lsrs	r3, r3, #8
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	b2da      	uxtb	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800810e:	085b      	lsrs	r3, r3, #1
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008116:	b2da      	uxtb	r2, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	1fe00fff 	.word	0x1fe00fff

08008138 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b094      	sub	sp, #80	; 0x50
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008148:	f107 0308 	add.w	r3, r7, #8
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fbd2 	bl	80088f8 <SD_SendSDStatus>
 8008154:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008158:	2b00      	cmp	r3, #0
 800815a:	d011      	beq.n	8008180 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a4f      	ldr	r2, [pc, #316]	; (80082a0 <HAL_SD_GetCardStatus+0x168>)
 8008162:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800817e:	e070      	b.n	8008262 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	099b      	lsrs	r3, r3, #6
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	b2da      	uxtb	r2, r3
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	095b      	lsrs	r3, r3, #5
 8008194:	b2db      	uxtb	r3, r3
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	b2da      	uxtb	r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	0a1b      	lsrs	r3, r3, #8
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	0e1b      	lsrs	r3, r3, #24
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4313      	orrs	r3, r2
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	061a      	lsls	r2, r3, #24
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081c6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	0a1b      	lsrs	r3, r3, #8
 80081cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80081d0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	0e1b      	lsrs	r3, r3, #24
 80081d6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	0d1b      	lsrs	r3, r3, #20
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	0c1b      	lsrs	r3, r3, #16
 8008202:	b29b      	uxth	r3, r3
 8008204:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008208:	b29a      	uxth	r2, r3
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	b29b      	uxth	r3, r3
 800820e:	b2db      	uxtb	r3, r3
 8008210:	b29b      	uxth	r3, r3
 8008212:	4313      	orrs	r3, r2
 8008214:	b29a      	uxth	r2, r3
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	0a9b      	lsrs	r3, r3, #10
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008224:	b2da      	uxtb	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f003 0303 	and.w	r3, r3, #3
 8008234:	b2da      	uxtb	r2, r3
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	091b      	lsrs	r3, r3, #4
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 030f 	and.w	r3, r3, #15
 8008244:	b2da      	uxtb	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 030f 	and.w	r3, r3, #15
 8008252:	b2da      	uxtb	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	0e1b      	lsrs	r3, r3, #24
 800825c:	b2da      	uxtb	r2, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800826a:	4618      	mov	r0, r3
 800826c:	f001 fc44 	bl	8009af8 <SDMMC_CmdBlockLength>
 8008270:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00d      	beq.n	8008294 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a08      	ldr	r2, [pc, #32]	; (80082a0 <HAL_SD_GetCardStatus+0x168>)
 800827e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008284:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008294:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008298:	4618      	mov	r0, r3
 800829a:	3750      	adds	r7, #80	; 0x50
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	1fe00fff 	.word	0x1fe00fff

080082a4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80082fc:	b5b0      	push	{r4, r5, r7, lr}
 80082fe:	b090      	sub	sp, #64	; 0x40
 8008300:	af04      	add	r7, sp, #16
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2203      	movs	r2, #3
 8008310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008318:	2b03      	cmp	r3, #3
 800831a:	d02e      	beq.n	800837a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008322:	d106      	bne.n	8008332 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	639a      	str	r2, [r3, #56]	; 0x38
 8008330:	e029      	b.n	8008386 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008338:	d10a      	bne.n	8008350 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fbd4 	bl	8008ae8 <SD_WideBus_Enable>
 8008340:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	431a      	orrs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	639a      	str	r2, [r3, #56]	; 0x38
 800834e:	e01a      	b.n	8008386 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fc11 	bl	8008b7e <SD_WideBus_Disable>
 800835c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	431a      	orrs	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	639a      	str	r2, [r3, #56]	; 0x38
 800836a:	e00c      	b.n	8008386 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008370:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	639a      	str	r2, [r3, #56]	; 0x38
 8008378:	e005      	b.n	8008386 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	2b00      	cmp	r3, #0
 800838c:	d007      	beq.n	800839e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a60      	ldr	r2, [pc, #384]	; (8008514 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008394:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800839c:	e097      	b.n	80084ce <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800839e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80083a2:	f7fd fc6f 	bl	8005c84 <HAL_RCCEx_GetPeriphCLKFreq>
 80083a6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 8086 	beq.w	80084bc <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	695a      	ldr	r2, [r3, #20]
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	4952      	ldr	r1, [pc, #328]	; (8008518 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80083ce:	fba1 1303 	umull	r1, r3, r1, r3
 80083d2:	0e1b      	lsrs	r3, r3, #24
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d303      	bcc.n	80083e0 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	61fb      	str	r3, [r7, #28]
 80083de:	e05a      	b.n	8008496 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e8:	d103      	bne.n	80083f2 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	61fb      	str	r3, [r7, #28]
 80083f0:	e051      	b.n	8008496 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083fa:	d126      	bne.n	800844a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10e      	bne.n	8008422 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	4a45      	ldr	r2, [pc, #276]	; (800851c <HAL_SD_ConfigWideBusOperation+0x220>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d906      	bls.n	800841a <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	4a42      	ldr	r2, [pc, #264]	; (8008518 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008410:	fba2 2303 	umull	r2, r3, r2, r3
 8008414:	0e5b      	lsrs	r3, r3, #25
 8008416:	61fb      	str	r3, [r7, #28]
 8008418:	e03d      	b.n	8008496 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e039      	b.n	8008496 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842a:	fbb2 f3f3 	udiv	r3, r2, r3
 800842e:	4a3b      	ldr	r2, [pc, #236]	; (800851c <HAL_SD_ConfigWideBusOperation+0x220>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d906      	bls.n	8008442 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	4a38      	ldr	r2, [pc, #224]	; (8008518 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008438:	fba2 2303 	umull	r2, r3, r2, r3
 800843c:	0e5b      	lsrs	r3, r3, #25
 800843e:	61fb      	str	r3, [r7, #28]
 8008440:	e029      	b.n	8008496 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	61fb      	str	r3, [r7, #28]
 8008448:	e025      	b.n	8008496 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10e      	bne.n	8008470 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	4a32      	ldr	r2, [pc, #200]	; (8008520 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d906      	bls.n	8008468 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	4a2e      	ldr	r2, [pc, #184]	; (8008518 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800845e:	fba2 2303 	umull	r2, r3, r2, r3
 8008462:	0e1b      	lsrs	r3, r3, #24
 8008464:	61fb      	str	r3, [r7, #28]
 8008466:	e016      	b.n	8008496 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	e012      	b.n	8008496 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008478:	fbb2 f3f3 	udiv	r3, r2, r3
 800847c:	4a28      	ldr	r2, [pc, #160]	; (8008520 <HAL_SD_ConfigWideBusOperation+0x224>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d906      	bls.n	8008490 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	4a24      	ldr	r2, [pc, #144]	; (8008518 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008486:	fba2 2303 	umull	r2, r3, r2, r3
 800848a:	0e1b      	lsrs	r3, r3, #24
 800848c:	61fb      	str	r3, [r7, #28]
 800848e:	e002      	b.n	8008496 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681d      	ldr	r5, [r3, #0]
 80084a0:	466c      	mov	r4, sp
 80084a2:	f107 0318 	add.w	r3, r7, #24
 80084a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80084aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084ae:	f107 030c 	add.w	r3, r7, #12
 80084b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084b4:	4628      	mov	r0, r5
 80084b6:	f001 fa41 	bl	800993c <SDMMC_Init>
 80084ba:	e008      	b.n	80084ce <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fb0e 	bl	8009af8 <SDMMC_CmdBlockLength>
 80084dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80084de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00c      	beq.n	80084fe <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a0a      	ldr	r2, [pc, #40]	; (8008514 <HAL_SD_ConfigWideBusOperation+0x218>)
 80084ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	431a      	orrs	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800850a:	4618      	mov	r0, r3
 800850c:	3730      	adds	r7, #48	; 0x30
 800850e:	46bd      	mov	sp, r7
 8008510:	bdb0      	pop	{r4, r5, r7, pc}
 8008512:	bf00      	nop
 8008514:	1fe00fff 	.word	0x1fe00fff
 8008518:	55e63b89 	.word	0x55e63b89
 800851c:	02faf080 	.word	0x02faf080
 8008520:	017d7840 	.word	0x017d7840

08008524 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008530:	f107 030c 	add.w	r3, r7, #12
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 faae 	bl	8008a98 <SD_SendStatus>
 800853c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	0a5b      	lsrs	r3, r3, #9
 8008554:	f003 030f 	and.w	r3, r3, #15
 8008558:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800855a:	693b      	ldr	r3, [r7, #16]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b090      	sub	sp, #64	; 0x40
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800856c:	2301      	movs	r3, #1
 800856e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4618      	mov	r0, r3
 8008576:	f001 fa3b 	bl	80099f0 <SDMMC_GetPowerState>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d102      	bne.n	8008586 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008580:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008584:	e0a7      	b.n	80086d6 <SD_InitCard+0x172>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858a:	2b03      	cmp	r3, #3
 800858c:	d02e      	beq.n	80085ec <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f001 fc80 	bl	8009e98 <SDMMC_CmdSendCID>
 8008598:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800859a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80085a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a2:	e098      	b.n	80086d6 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 fa65 	bl	8009a7a <SDMMC_GetResponse>
 80085b0:	4602      	mov	r2, r0
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2104      	movs	r1, #4
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 fa5c 	bl	8009a7a <SDMMC_GetResponse>
 80085c2:	4602      	mov	r2, r0
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2108      	movs	r1, #8
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 fa53 	bl	8009a7a <SDMMC_GetResponse>
 80085d4:	4602      	mov	r2, r0
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	210c      	movs	r1, #12
 80085e0:	4618      	mov	r0, r3
 80085e2:	f001 fa4a 	bl	8009a7a <SDMMC_GetResponse>
 80085e6:	4602      	mov	r2, r0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d00d      	beq.n	8008610 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f107 020e 	add.w	r2, r7, #14
 80085fc:	4611      	mov	r1, r2
 80085fe:	4618      	mov	r0, r3
 8008600:	f001 fc89 	bl	8009f16 <SDMMC_CmdSetRelAdd>
 8008604:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <SD_InitCard+0xac>
    {
      return errorstate;
 800860c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860e:	e062      	b.n	80086d6 <SD_InitCard+0x172>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008614:	2b03      	cmp	r3, #3
 8008616:	d036      	beq.n	8008686 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008618:	89fb      	ldrh	r3, [r7, #14]
 800861a:	461a      	mov	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008628:	041b      	lsls	r3, r3, #16
 800862a:	4619      	mov	r1, r3
 800862c:	4610      	mov	r0, r2
 800862e:	f001 fc52 	bl	8009ed6 <SDMMC_CmdSendCSD>
 8008632:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <SD_InitCard+0xda>
    {
      return errorstate;
 800863a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800863c:	e04b      	b.n	80086d6 <SD_InitCard+0x172>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2100      	movs	r1, #0
 8008644:	4618      	mov	r0, r3
 8008646:	f001 fa18 	bl	8009a7a <SDMMC_GetResponse>
 800864a:	4602      	mov	r2, r0
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2104      	movs	r1, #4
 8008656:	4618      	mov	r0, r3
 8008658:	f001 fa0f 	bl	8009a7a <SDMMC_GetResponse>
 800865c:	4602      	mov	r2, r0
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2108      	movs	r1, #8
 8008668:	4618      	mov	r0, r3
 800866a:	f001 fa06 	bl	8009a7a <SDMMC_GetResponse>
 800866e:	4602      	mov	r2, r0
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	210c      	movs	r1, #12
 800867a:	4618      	mov	r0, r3
 800867c:	f001 f9fd 	bl	8009a7a <SDMMC_GetResponse>
 8008680:	4602      	mov	r2, r0
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2104      	movs	r1, #4
 800868c:	4618      	mov	r0, r3
 800868e:	f001 f9f4 	bl	8009a7a <SDMMC_GetResponse>
 8008692:	4603      	mov	r3, r0
 8008694:	0d1a      	lsrs	r2, r3, #20
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800869a:	f107 0310 	add.w	r3, r7, #16
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fba5 	bl	8007df0 <HAL_SD_GetCardCSD>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086b0:	e011      	b.n	80086d6 <SD_InitCard+0x172>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6819      	ldr	r1, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ba:	041b      	lsls	r3, r3, #16
 80086bc:	461a      	mov	r2, r3
 80086be:	f04f 0300 	mov.w	r3, #0
 80086c2:	4608      	mov	r0, r1
 80086c4:	f001 fafe 	bl	8009cc4 <SDMMC_CmdSelDesel>
 80086c8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <SD_InitCard+0x170>
  {
    return errorstate;
 80086d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d2:	e000      	b.n	80086d6 <SD_InitCard+0x172>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3740      	adds	r7, #64	; 0x40
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	61fb      	str	r3, [r7, #28]
 80086f0:	2300      	movs	r3, #0
 80086f2:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 80086f4:	f7f8 ffbc 	bl	8001670 <HAL_GetTick>
 80086f8:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4618      	mov	r0, r3
 8008700:	f001 fb04 	bl	8009d0c <SDMMC_CmdGoIdleState>
 8008704:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <SD_PowerON+0x30>
  {
    return errorstate;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	e0ed      	b.n	80088ec <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f001 fb17 	bl	8009d48 <SDMMC_CmdOperCond>
 800871a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00d      	beq.n	800873e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4618      	mov	r0, r3
 800872e:	f001 faed 	bl	8009d0c <SDMMC_CmdGoIdleState>
 8008732:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d004      	beq.n	8008744 <SD_PowerON+0x64>
    {
      return errorstate;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	e0d6      	b.n	80088ec <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	2b01      	cmp	r3, #1
 800874a:	d137      	bne.n	80087bc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2100      	movs	r1, #0
 8008752:	4618      	mov	r0, r3
 8008754:	f001 fb18 	bl	8009d88 <SDMMC_CmdAppCommand>
 8008758:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d02d      	beq.n	80087bc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008760:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008764:	e0c2      	b.n	80088ec <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f001 fb0b 	bl	8009d88 <SDMMC_CmdAppCommand>
 8008772:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <SD_PowerON+0x9e>
    {
      return errorstate;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	e0b6      	b.n	80088ec <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	495c      	ldr	r1, [pc, #368]	; (80088f4 <SD_PowerON+0x214>)
 8008784:	4618      	mov	r0, r3
 8008786:	f001 fb22 	bl	8009dce <SDMMC_CmdAppOperCommand>
 800878a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008796:	e0a9      	b.n	80088ec <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2100      	movs	r1, #0
 800879e:	4618      	mov	r0, r3
 80087a0:	f001 f96b 	bl	8009a7a <SDMMC_GetResponse>
 80087a4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	0fdb      	lsrs	r3, r3, #31
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d101      	bne.n	80087b2 <SD_PowerON+0xd2>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e000      	b.n	80087b4 <SD_PowerON+0xd4>
 80087b2:	2300      	movs	r3, #0
 80087b4:	61bb      	str	r3, [r7, #24]

    count++;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3301      	adds	r3, #1
 80087ba:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d802      	bhi.n	80087cc <SD_PowerON+0xec>
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d0cc      	beq.n	8008766 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d902      	bls.n	80087dc <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087da:	e087      	b.n	80088ec <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d07e      	beq.n	80088e4 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d17a      	bne.n	80088ea <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d075      	beq.n	80088ea <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008804:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0208 	orr.w	r2, r2, #8
 8008814:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f001 fbe2 	bl	8009fe4 <SDMMC_CmdVoltageSwitch>
 8008820:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00c      	beq.n	8008842 <SD_PowerON+0x162>
        {
          return errorstate;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	e05f      	b.n	80088ec <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800882c:	f7f8 ff20 	bl	8001670 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883a:	d102      	bne.n	8008842 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800883c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008840:	e054      	b.n	80088ec <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800884c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008850:	d1ec      	bne.n	800882c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800885a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800886a:	d002      	beq.n	8008872 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800886c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008870:	e03c      	b.n	80088ec <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8008872:	2001      	movs	r0, #1
 8008874:	f000 fb44 	bl	8008f00 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0204 	orr.w	r2, r2, #4
 8008886:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008888:	e00a      	b.n	80088a0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800888a:	f7f8 fef1 	bl	8001670 <HAL_GetTick>
 800888e:	4602      	mov	r2, r0
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008898:	d102      	bne.n	80088a0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800889a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800889e:	e025      	b.n	80088ec <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ae:	d1ec      	bne.n	800888a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088c8:	d102      	bne.n	80088d0 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80088ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088ce:	e00d      	b.n	80088ec <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2213      	movs	r2, #19
 80088d6:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f04f 32ff 	mov.w	r2, #4294967295
 80088e0:	639a      	str	r2, [r3, #56]	; 0x38
 80088e2:	e002      	b.n	80088ea <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3720      	adds	r7, #32
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	c1100000 	.word	0xc1100000

080088f8 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08c      	sub	sp, #48	; 0x30
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008902:	f7f8 feb5 	bl	8001670 <HAL_GetTick>
 8008906:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2100      	movs	r1, #0
 8008912:	4618      	mov	r0, r3
 8008914:	f001 f8b1 	bl	8009a7a <SDMMC_GetResponse>
 8008918:	4603      	mov	r3, r0
 800891a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008922:	d102      	bne.n	800892a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008928:	e0b0      	b.n	8008a8c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2140      	movs	r1, #64	; 0x40
 8008930:	4618      	mov	r0, r3
 8008932:	f001 f8e1 	bl	8009af8 <SDMMC_CmdBlockLength>
 8008936:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d005      	beq.n	800894a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	e0a0      	b.n	8008a8c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008952:	041b      	lsls	r3, r3, #16
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f001 fa16 	bl	8009d88 <SDMMC_CmdAppCommand>
 800895c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d005      	beq.n	8008970 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	e08d      	b.n	8008a8c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008970:	f04f 33ff 	mov.w	r3, #4294967295
 8008974:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008976:	2340      	movs	r3, #64	; 0x40
 8008978:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800897a:	2360      	movs	r3, #96	; 0x60
 800897c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800897e:	2302      	movs	r3, #2
 8008980:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008982:	2300      	movs	r3, #0
 8008984:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008986:	2301      	movs	r3, #1
 8008988:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f107 0208 	add.w	r2, r7, #8
 8008992:	4611      	mov	r1, r2
 8008994:	4618      	mov	r0, r3
 8008996:	f001 f883 	bl	8009aa0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f001 fafe 	bl	8009fa0 <SDMMC_CmdStatusRegister>
 80089a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d02b      	beq.n	8008a04 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	e069      	b.n	8008a8c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d013      	beq.n	80089ee <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80089c6:	2300      	movs	r3, #0
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ca:	e00d      	b.n	80089e8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4618      	mov	r0, r3
 80089d2:	f000 ffdd 	bl	8009990 <SDMMC_ReadFIFO>
 80089d6:	4602      	mov	r2, r0
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	601a      	str	r2, [r3, #0]
        pData++;
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	3304      	adds	r3, #4
 80089e0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 80089e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e4:	3301      	adds	r3, #1
 80089e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	2b07      	cmp	r3, #7
 80089ec:	d9ee      	bls.n	80089cc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089ee:	f7f8 fe3f 	bl	8001670 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d102      	bne.n	8008a04 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a02:	e043      	b.n	8008a8c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0d2      	beq.n	80089b8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a18:	f003 0308 	and.w	r3, r3, #8
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a20:	2308      	movs	r3, #8
 8008a22:	e033      	b.n	8008a8c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a32:	2302      	movs	r3, #2
 8008a34:	e02a      	b.n	8008a8c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	f003 0320 	and.w	r3, r3, #32
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d017      	beq.n	8008a74 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008a44:	2320      	movs	r3, #32
 8008a46:	e021      	b.n	8008a8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 ff9f 	bl	8009990 <SDMMC_ReadFIFO>
 8008a52:	4602      	mov	r2, r0
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	601a      	str	r2, [r3, #0]
    pData++;
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a5e:	f7f8 fe07 	bl	8001670 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6c:	d102      	bne.n	8008a74 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a72:	e00b      	b.n	8008a8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e2      	bne.n	8008a48 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a03      	ldr	r2, [pc, #12]	; (8008a94 <SD_SendSDStatus+0x19c>)
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3730      	adds	r7, #48	; 0x30
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	18000f3a 	.word	0x18000f3a

08008a98 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d102      	bne.n	8008aae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008aa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008aac:	e018      	b.n	8008ae0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ab6:	041b      	lsls	r3, r3, #16
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4610      	mov	r0, r2
 8008abc:	f001 fa4d 	bl	8009f5a <SDMMC_CmdSendStatus>
 8008ac0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <SD_SendStatus+0x34>
  {
    return errorstate;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	e009      	b.n	8008ae0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 ffd1 	bl	8009a7a <SDMMC_GetResponse>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	2300      	movs	r3, #0
 8008af6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2100      	movs	r1, #0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 ffbb 	bl	8009a7a <SDMMC_GetResponse>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b0e:	d102      	bne.n	8008b16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b14:	e02f      	b.n	8008b76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b16:	f107 030c 	add.w	r3, r7, #12
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f879 	bl	8008c14 <SD_FindSCR>
 8008b22:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	e023      	b.n	8008b76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01c      	beq.n	8008b72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b40:	041b      	lsls	r3, r3, #16
 8008b42:	4619      	mov	r1, r3
 8008b44:	4610      	mov	r0, r2
 8008b46:	f001 f91f 	bl	8009d88 <SDMMC_CmdAppCommand>
 8008b4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	e00f      	b.n	8008b76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2102      	movs	r1, #2
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f001 f956 	bl	8009e0e <SDMMC_CmdBusWidth>
 8008b62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	e003      	b.n	8008b76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e001      	b.n	8008b76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2100      	movs	r1, #0
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 ff70 	bl	8009a7a <SDMMC_GetResponse>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ba4:	d102      	bne.n	8008bac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008baa:	e02f      	b.n	8008c0c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008bac:	f107 030c 	add.w	r3, r7, #12
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f82e 	bl	8008c14 <SD_FindSCR>
 8008bb8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	e023      	b.n	8008c0c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d01c      	beq.n	8008c08 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bd6:	041b      	lsls	r3, r3, #16
 8008bd8:	4619      	mov	r1, r3
 8008bda:	4610      	mov	r0, r2
 8008bdc:	f001 f8d4 	bl	8009d88 <SDMMC_CmdAppCommand>
 8008be0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	e00f      	b.n	8008c0c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 f90b 	bl	8009e0e <SDMMC_CmdBusWidth>
 8008bf8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	e003      	b.n	8008c0c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c04:	2300      	movs	r3, #0
 8008c06:	e001      	b.n	8008c0c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08e      	sub	sp, #56	; 0x38
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c1e:	f7f8 fd27 	bl	8001670 <HAL_GetTick>
 8008c22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60bb      	str	r3, [r7, #8]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2108      	movs	r1, #8
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 ff5c 	bl	8009af8 <SDMMC_CmdBlockLength>
 8008c40:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	e0ad      	b.n	8008da8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c54:	041b      	lsls	r3, r3, #16
 8008c56:	4619      	mov	r1, r3
 8008c58:	4610      	mov	r0, r2
 8008c5a:	f001 f895 	bl	8009d88 <SDMMC_CmdAppCommand>
 8008c5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	e09e      	b.n	8008da8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c70:	2308      	movs	r3, #8
 8008c72:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008c74:	2330      	movs	r3, #48	; 0x30
 8008c76:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c80:	2301      	movs	r3, #1
 8008c82:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f107 0210 	add.w	r2, r7, #16
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 ff06 	bl	8009aa0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 f8db 	bl	8009e54 <SDMMC_CmdSendSCR>
 8008c9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d027      	beq.n	8008cf6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	e07e      	b.n	8008da8 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d113      	bne.n	8008ce0 <SD_FindSCR+0xcc>
 8008cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d110      	bne.n	8008ce0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 fe64 	bl	8009990 <SDMMC_ReadFIFO>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fe5d 	bl	8009990 <SDMMC_ReadFIFO>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	60fb      	str	r3, [r7, #12]
      index++;
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	3301      	adds	r3, #1
 8008cde:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ce0:	f7f8 fcc6 	bl	8001670 <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	d102      	bne.n	8008cf6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cf4:	e058      	b.n	8008da8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cfc:	f240 532a 	movw	r3, #1322	; 0x52a
 8008d00:	4013      	ands	r3, r2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0d1      	beq.n	8008caa <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0c:	f003 0308 	and.w	r3, r3, #8
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2208      	movs	r2, #8
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d1c:	2308      	movs	r3, #8
 8008d1e:	e043      	b.n	8008da8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d005      	beq.n	8008d3a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2202      	movs	r2, #2
 8008d34:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d36:	2302      	movs	r3, #2
 8008d38:	e036      	b.n	8008da8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d40:	f003 0320 	and.w	r3, r3, #32
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d50:	2320      	movs	r3, #32
 8008d52:	e029      	b.n	8008da8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a15      	ldr	r2, [pc, #84]	; (8008db0 <SD_FindSCR+0x19c>)
 8008d5a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	061a      	lsls	r2, r3, #24
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	021b      	lsls	r3, r3, #8
 8008d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	0a1b      	lsrs	r3, r3, #8
 8008d6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d72:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	0e1b      	lsrs	r3, r3, #24
 8008d78:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	601a      	str	r2, [r3, #0]
    scr++;
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	3304      	adds	r3, #4
 8008d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	061a      	lsls	r2, r3, #24
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	021b      	lsls	r3, r3, #8
 8008d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	0a1b      	lsrs	r3, r3, #8
 8008d96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d9a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	0e1b      	lsrs	r3, r3, #24
 8008da0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3738      	adds	r7, #56	; 0x38
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	18000f3a 	.word	0x18000f3a

08008db4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d03f      	beq.n	8008e4e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]
 8008dd2:	e033      	b.n	8008e3c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fdd9 	bl	8009990 <SDMMC_ReadFIFO>
 8008dde:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	0a1b      	lsrs	r3, r3, #8
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	0c1b      	lsrs	r3, r3, #16
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3301      	adds	r3, #1
 8008e18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	0e1b      	lsrs	r3, r3, #24
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	3b01      	subs	r3, #1
 8008e34:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2b07      	cmp	r3, #7
 8008e40:	d9c8      	bls.n	8008dd4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008e4e:	bf00      	nop
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b086      	sub	sp, #24
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d043      	beq.n	8008ef8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	e037      	b.n	8008ee6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	021a      	lsls	r2, r3, #8
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3301      	adds	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	041a      	lsls	r2, r3, #16
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	061a      	lsls	r2, r3, #24
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f107 0208 	add.w	r2, r7, #8
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 fd65 	bl	80099aa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	617b      	str	r3, [r7, #20]
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2b07      	cmp	r3, #7
 8008eea:	d9c4      	bls.n	8008e76 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008ef8:	bf00      	nop
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuffer1CpltCallback can be implemented in the user file
   */
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b083      	sub	sp, #12
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008f46:	bf00      	nop
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuffer0CpltCallback can be implemented in the user file
   */
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e095      	b.n	80090a4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d108      	bne.n	8008f92 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f88:	d009      	beq.n	8008f9e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	61da      	str	r2, [r3, #28]
 8008f90:	e005      	b.n	8008f9e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d106      	bne.n	8008fbe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f7f8 f90f 	bl	80011dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fd4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fde:	d902      	bls.n	8008fe6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	e002      	b.n	8008fec <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008ff4:	d007      	beq.n	8009006 <HAL_SPI_Init+0xa0>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ffe:	d002      	beq.n	8009006 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	f003 0302 	and.w	r3, r3, #2
 8009020:	431a      	orrs	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	431a      	orrs	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009034:	431a      	orrs	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800903e:	431a      	orrs	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009048:	ea42 0103 	orr.w	r1, r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009050:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	430a      	orrs	r2, r1
 800905a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	0c1b      	lsrs	r3, r3, #16
 8009062:	f003 0204 	and.w	r2, r3, #4
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	f003 0310 	and.w	r3, r3, #16
 800906e:	431a      	orrs	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	431a      	orrs	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009082:	ea42 0103 	orr.w	r1, r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	430a      	orrs	r2, r1
 8009092:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e049      	b.n	8009152 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d106      	bne.n	80090d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f7f8 f96a 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2202      	movs	r2, #2
 80090dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4619      	mov	r1, r3
 80090ea:	4610      	mov	r0, r2
 80090ec:	f000 fa4c 	bl	8009588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	f003 0302 	and.w	r3, r3, #2
 800916c:	2b02      	cmp	r3, #2
 800916e:	d122      	bne.n	80091b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f003 0302 	and.w	r3, r3, #2
 800917a:	2b02      	cmp	r3, #2
 800917c:	d11b      	bne.n	80091b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f06f 0202 	mvn.w	r2, #2
 8009186:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	699b      	ldr	r3, [r3, #24]
 8009194:	f003 0303 	and.w	r3, r3, #3
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f9d5 	bl	800954c <HAL_TIM_IC_CaptureCallback>
 80091a2:	e005      	b.n	80091b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f9c7 	bl	8009538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f9d8 	bl	8009560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	f003 0304 	and.w	r3, r3, #4
 80091c0:	2b04      	cmp	r3, #4
 80091c2:	d122      	bne.n	800920a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f003 0304 	and.w	r3, r3, #4
 80091ce:	2b04      	cmp	r3, #4
 80091d0:	d11b      	bne.n	800920a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f06f 0204 	mvn.w	r2, #4
 80091da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2202      	movs	r2, #2
 80091e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d003      	beq.n	80091f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f9ab 	bl	800954c <HAL_TIM_IC_CaptureCallback>
 80091f6:	e005      	b.n	8009204 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 f99d 	bl	8009538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f9ae 	bl	8009560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	f003 0308 	and.w	r3, r3, #8
 8009214:	2b08      	cmp	r3, #8
 8009216:	d122      	bne.n	800925e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	f003 0308 	and.w	r3, r3, #8
 8009222:	2b08      	cmp	r3, #8
 8009224:	d11b      	bne.n	800925e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f06f 0208 	mvn.w	r2, #8
 800922e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2204      	movs	r2, #4
 8009234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	f003 0303 	and.w	r3, r3, #3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f981 	bl	800954c <HAL_TIM_IC_CaptureCallback>
 800924a:	e005      	b.n	8009258 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f973 	bl	8009538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f984 	bl	8009560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	f003 0310 	and.w	r3, r3, #16
 8009268:	2b10      	cmp	r3, #16
 800926a:	d122      	bne.n	80092b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b10      	cmp	r3, #16
 8009278:	d11b      	bne.n	80092b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f06f 0210 	mvn.w	r2, #16
 8009282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2208      	movs	r2, #8
 8009288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f957 	bl	800954c <HAL_TIM_IC_CaptureCallback>
 800929e:	e005      	b.n	80092ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f949 	bl	8009538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f95a 	bl	8009560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d10e      	bne.n	80092de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d107      	bne.n	80092de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f06f 0201 	mvn.w	r2, #1
 80092d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f923 	bl	8009524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e8:	2b80      	cmp	r3, #128	; 0x80
 80092ea:	d10e      	bne.n	800930a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f6:	2b80      	cmp	r3, #128	; 0x80
 80092f8:	d107      	bne.n	800930a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fb05 	bl	8009914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009318:	d10e      	bne.n	8009338 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009324:	2b80      	cmp	r3, #128	; 0x80
 8009326:	d107      	bne.n	8009338 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 faf8 	bl	8009928 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009342:	2b40      	cmp	r3, #64	; 0x40
 8009344:	d10e      	bne.n	8009364 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009350:	2b40      	cmp	r3, #64	; 0x40
 8009352:	d107      	bne.n	8009364 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800935c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f908 	bl	8009574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b20      	cmp	r3, #32
 8009370:	d10e      	bne.n	8009390 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f003 0320 	and.w	r3, r3, #32
 800937c:	2b20      	cmp	r3, #32
 800937e:	d107      	bne.n	8009390 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f06f 0220 	mvn.w	r2, #32
 8009388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fab8 	bl	8009900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d101      	bne.n	80093b0 <HAL_TIM_ConfigClockSource+0x18>
 80093ac:	2302      	movs	r3, #2
 80093ae:	e0b5      	b.n	800951c <HAL_TIM_ConfigClockSource+0x184>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80093d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ec:	d03e      	beq.n	800946c <HAL_TIM_ConfigClockSource+0xd4>
 80093ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093f2:	f200 8087 	bhi.w	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 80093f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093fa:	f000 8085 	beq.w	8009508 <HAL_TIM_ConfigClockSource+0x170>
 80093fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009402:	d87f      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009404:	2b70      	cmp	r3, #112	; 0x70
 8009406:	d01a      	beq.n	800943e <HAL_TIM_ConfigClockSource+0xa6>
 8009408:	2b70      	cmp	r3, #112	; 0x70
 800940a:	d87b      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 800940c:	2b60      	cmp	r3, #96	; 0x60
 800940e:	d050      	beq.n	80094b2 <HAL_TIM_ConfigClockSource+0x11a>
 8009410:	2b60      	cmp	r3, #96	; 0x60
 8009412:	d877      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009414:	2b50      	cmp	r3, #80	; 0x50
 8009416:	d03c      	beq.n	8009492 <HAL_TIM_ConfigClockSource+0xfa>
 8009418:	2b50      	cmp	r3, #80	; 0x50
 800941a:	d873      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 800941c:	2b40      	cmp	r3, #64	; 0x40
 800941e:	d058      	beq.n	80094d2 <HAL_TIM_ConfigClockSource+0x13a>
 8009420:	2b40      	cmp	r3, #64	; 0x40
 8009422:	d86f      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009424:	2b30      	cmp	r3, #48	; 0x30
 8009426:	d064      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009428:	2b30      	cmp	r3, #48	; 0x30
 800942a:	d86b      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 800942c:	2b20      	cmp	r3, #32
 800942e:	d060      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009430:	2b20      	cmp	r3, #32
 8009432:	d867      	bhi.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
 8009434:	2b00      	cmp	r3, #0
 8009436:	d05c      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009438:	2b10      	cmp	r3, #16
 800943a:	d05a      	beq.n	80094f2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800943c:	e062      	b.n	8009504 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	6899      	ldr	r1, [r3, #8]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f000 f9af 	bl	80097b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009460:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	609a      	str	r2, [r3, #8]
      break;
 800946a:	e04e      	b.n	800950a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	6899      	ldr	r1, [r3, #8]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f000 f998 	bl	80097b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689a      	ldr	r2, [r3, #8]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800948e:	609a      	str	r2, [r3, #8]
      break;
 8009490:	e03b      	b.n	800950a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6818      	ldr	r0, [r3, #0]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	6859      	ldr	r1, [r3, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	461a      	mov	r2, r3
 80094a0:	f000 f90c 	bl	80096bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2150      	movs	r1, #80	; 0x50
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 f965 	bl	800977a <TIM_ITRx_SetConfig>
      break;
 80094b0:	e02b      	b.n	800950a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6818      	ldr	r0, [r3, #0]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	6859      	ldr	r1, [r3, #4]
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	461a      	mov	r2, r3
 80094c0:	f000 f92b 	bl	800971a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2160      	movs	r1, #96	; 0x60
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f955 	bl	800977a <TIM_ITRx_SetConfig>
      break;
 80094d0:	e01b      	b.n	800950a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6818      	ldr	r0, [r3, #0]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	6859      	ldr	r1, [r3, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	461a      	mov	r2, r3
 80094e0:	f000 f8ec 	bl	80096bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2140      	movs	r1, #64	; 0x40
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 f945 	bl	800977a <TIM_ITRx_SetConfig>
      break;
 80094f0:	e00b      	b.n	800950a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4619      	mov	r1, r3
 80094fc:	4610      	mov	r0, r2
 80094fe:	f000 f93c 	bl	800977a <TIM_ITRx_SetConfig>
        break;
 8009502:	e002      	b.n	800950a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8009504:	bf00      	nop
 8009506:	e000      	b.n	800950a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8009508:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a40      	ldr	r2, [pc, #256]	; (800969c <TIM_Base_SetConfig+0x114>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d013      	beq.n	80095c8 <TIM_Base_SetConfig+0x40>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a6:	d00f      	beq.n	80095c8 <TIM_Base_SetConfig+0x40>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a3d      	ldr	r2, [pc, #244]	; (80096a0 <TIM_Base_SetConfig+0x118>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00b      	beq.n	80095c8 <TIM_Base_SetConfig+0x40>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a3c      	ldr	r2, [pc, #240]	; (80096a4 <TIM_Base_SetConfig+0x11c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d007      	beq.n	80095c8 <TIM_Base_SetConfig+0x40>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a3b      	ldr	r2, [pc, #236]	; (80096a8 <TIM_Base_SetConfig+0x120>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d003      	beq.n	80095c8 <TIM_Base_SetConfig+0x40>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a3a      	ldr	r2, [pc, #232]	; (80096ac <TIM_Base_SetConfig+0x124>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d108      	bne.n	80095da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a2f      	ldr	r2, [pc, #188]	; (800969c <TIM_Base_SetConfig+0x114>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d01f      	beq.n	8009622 <TIM_Base_SetConfig+0x9a>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e8:	d01b      	beq.n	8009622 <TIM_Base_SetConfig+0x9a>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a2c      	ldr	r2, [pc, #176]	; (80096a0 <TIM_Base_SetConfig+0x118>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d017      	beq.n	8009622 <TIM_Base_SetConfig+0x9a>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a2b      	ldr	r2, [pc, #172]	; (80096a4 <TIM_Base_SetConfig+0x11c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d013      	beq.n	8009622 <TIM_Base_SetConfig+0x9a>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a2a      	ldr	r2, [pc, #168]	; (80096a8 <TIM_Base_SetConfig+0x120>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d00f      	beq.n	8009622 <TIM_Base_SetConfig+0x9a>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a29      	ldr	r2, [pc, #164]	; (80096ac <TIM_Base_SetConfig+0x124>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d00b      	beq.n	8009622 <TIM_Base_SetConfig+0x9a>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a28      	ldr	r2, [pc, #160]	; (80096b0 <TIM_Base_SetConfig+0x128>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d007      	beq.n	8009622 <TIM_Base_SetConfig+0x9a>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a27      	ldr	r2, [pc, #156]	; (80096b4 <TIM_Base_SetConfig+0x12c>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d003      	beq.n	8009622 <TIM_Base_SetConfig+0x9a>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a26      	ldr	r2, [pc, #152]	; (80096b8 <TIM_Base_SetConfig+0x130>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d108      	bne.n	8009634 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	4313      	orrs	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	4313      	orrs	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	689a      	ldr	r2, [r3, #8]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a10      	ldr	r2, [pc, #64]	; (800969c <TIM_Base_SetConfig+0x114>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00f      	beq.n	8009680 <TIM_Base_SetConfig+0xf8>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a12      	ldr	r2, [pc, #72]	; (80096ac <TIM_Base_SetConfig+0x124>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d00b      	beq.n	8009680 <TIM_Base_SetConfig+0xf8>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a11      	ldr	r2, [pc, #68]	; (80096b0 <TIM_Base_SetConfig+0x128>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d007      	beq.n	8009680 <TIM_Base_SetConfig+0xf8>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a10      	ldr	r2, [pc, #64]	; (80096b4 <TIM_Base_SetConfig+0x12c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d003      	beq.n	8009680 <TIM_Base_SetConfig+0xf8>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a0f      	ldr	r2, [pc, #60]	; (80096b8 <TIM_Base_SetConfig+0x130>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d103      	bne.n	8009688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	691a      	ldr	r2, [r3, #16]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	615a      	str	r2, [r3, #20]
}
 800968e:	bf00      	nop
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	40012c00 	.word	0x40012c00
 80096a0:	40000400 	.word	0x40000400
 80096a4:	40000800 	.word	0x40000800
 80096a8:	40000c00 	.word	0x40000c00
 80096ac:	40013400 	.word	0x40013400
 80096b0:	40014000 	.word	0x40014000
 80096b4:	40014400 	.word	0x40014400
 80096b8:	40014800 	.word	0x40014800

080096bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	f023 0201 	bic.w	r2, r3, #1
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	011b      	lsls	r3, r3, #4
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f023 030a 	bic.w	r3, r3, #10
 80096f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4313      	orrs	r3, r2
 8009700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	697a      	ldr	r2, [r7, #20]
 800970c:	621a      	str	r2, [r3, #32]
}
 800970e:	bf00      	nop
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800971a:	b480      	push	{r7}
 800971c:	b087      	sub	sp, #28
 800971e:	af00      	add	r7, sp, #0
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	f023 0210 	bic.w	r2, r3, #16
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	031b      	lsls	r3, r3, #12
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	4313      	orrs	r3, r2
 800974e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	621a      	str	r2, [r3, #32]
}
 800976e:	bf00      	nop
 8009770:	371c      	adds	r7, #28
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800977a:	b480      	push	{r7}
 800977c:	b085      	sub	sp, #20
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4313      	orrs	r3, r2
 8009798:	f043 0307 	orr.w	r3, r3, #7
 800979c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	609a      	str	r2, [r3, #8]
}
 80097a4:	bf00      	nop
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	021a      	lsls	r2, r3, #8
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	431a      	orrs	r2, r3
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	4313      	orrs	r3, r2
 80097dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	609a      	str	r2, [r3, #8]
}
 80097e4:	bf00      	nop
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009800:	2b01      	cmp	r3, #1
 8009802:	d101      	bne.n	8009808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009804:	2302      	movs	r3, #2
 8009806:	e068      	b.n	80098da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2202      	movs	r2, #2
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a2e      	ldr	r2, [pc, #184]	; (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d004      	beq.n	800983c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a2d      	ldr	r2, [pc, #180]	; (80098ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d108      	bne.n	800984e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009842:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	4313      	orrs	r3, r2
 800984c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009854:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	4313      	orrs	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a1e      	ldr	r2, [pc, #120]	; (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d01d      	beq.n	80098ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800987a:	d018      	beq.n	80098ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a1b      	ldr	r2, [pc, #108]	; (80098f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d013      	beq.n	80098ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a1a      	ldr	r2, [pc, #104]	; (80098f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d00e      	beq.n	80098ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a18      	ldr	r2, [pc, #96]	; (80098f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d009      	beq.n	80098ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a13      	ldr	r2, [pc, #76]	; (80098ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d004      	beq.n	80098ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a14      	ldr	r2, [pc, #80]	; (80098fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d10c      	bne.n	80098c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	68ba      	ldr	r2, [r7, #8]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3714      	adds	r7, #20
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	40012c00 	.word	0x40012c00
 80098ec:	40013400 	.word	0x40013400
 80098f0:	40000400 	.word	0x40000400
 80098f4:	40000800 	.word	0x40000800
 80098f8:	40000c00 	.word	0x40000c00
 80098fc:	40014000 	.word	0x40014000

08009900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009908:	bf00      	nop
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800993c:	b084      	sub	sp, #16
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	f107 001c 	add.w	r0, r7, #28
 800994a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 8009952:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009954:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009956:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800995a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800995e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8009962:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	4b07      	ldr	r3, [pc, #28]	; (800998c <SDMMC_Init+0x50>)
 8009970:	4013      	ands	r3, r2
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	431a      	orrs	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	b004      	add	sp, #16
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	ffc02c00 	.word	0xffc02c00

08009990 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f043 0203 	orr.w	r2, r3, #3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80099e0:	2002      	movs	r0, #2
 80099e2:	f7f7 fe51 	bl	8001688 <HAL_Delay>

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0303 	and.w	r3, r3, #3
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009a30:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009a36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	4b06      	ldr	r3, [pc, #24]	; (8009a5c <SDMMC_SendCommand+0x50>)
 8009a44:	4013      	ands	r3, r2
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	fffee0c0 	.word	0xfffee0c0

08009a60 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	b2db      	uxtb	r3, r3
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b085      	sub	sp, #20
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3314      	adds	r3, #20
 8009a88:	461a      	mov	r2, r3
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ac6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009acc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009ad2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0

}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009b06:	2310      	movs	r3, #16
 8009b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b10:	2300      	movs	r3, #0
 8009b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b1a:	f107 0308 	add.w	r3, r7, #8
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7ff ff73 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b2a:	2110      	movs	r1, #16
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fa7b 	bl	800a028 <SDMMC_GetCmdResp1>
 8009b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b34:	69fb      	ldr	r3, [r7, #28]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3720      	adds	r7, #32
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b088      	sub	sp, #32
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009b4c:	2311      	movs	r3, #17
 8009b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b56:	2300      	movs	r3, #0
 8009b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b60:	f107 0308 	add.w	r3, r7, #8
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff ff50 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b70:	2111      	movs	r1, #17
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa58 	bl	800a028 <SDMMC_GetCmdResp1>
 8009b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b7a:	69fb      	ldr	r3, [r7, #28]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3720      	adds	r7, #32
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009b92:	2312      	movs	r3, #18
 8009b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ba4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ba6:	f107 0308 	add.w	r3, r7, #8
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff ff2d 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bb6:	2112      	movs	r1, #18
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fa35 	bl	800a028 <SDMMC_GetCmdResp1>
 8009bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bc0:	69fb      	ldr	r3, [r7, #28]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b088      	sub	sp, #32
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009bd8:	2318      	movs	r3, #24
 8009bda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009be2:	2300      	movs	r3, #0
 8009be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bec:	f107 0308 	add.w	r3, r7, #8
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7ff ff0a 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bfc:	2118      	movs	r1, #24
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fa12 	bl	800a028 <SDMMC_GetCmdResp1>
 8009c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c06:	69fb      	ldr	r3, [r7, #28]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3720      	adds	r7, #32
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009c1e:	2319      	movs	r3, #25
 8009c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c32:	f107 0308 	add.w	r3, r7, #8
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff fee7 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c42:	2119      	movs	r1, #25
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f9ef 	bl	800a028 <SDMMC_GetCmdResp1>
 8009c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3720      	adds	r7, #32
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009c64:	230c      	movs	r3, #12
 8009c66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c76:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff feb8 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009c9c:	4a08      	ldr	r2, [pc, #32]	; (8009cc0 <SDMMC_CmdStopTransfer+0x68>)
 8009c9e:	210c      	movs	r1, #12
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f9c1 	bl	800a028 <SDMMC_GetCmdResp1>
 8009ca6:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8009cb4:	69fb      	ldr	r3, [r7, #28]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3720      	adds	r7, #32
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	05f5e100 	.word	0x05f5e100

08009cc4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b08a      	sub	sp, #40	; 0x28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009cd4:	2307      	movs	r3, #7
 8009cd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cdc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce6:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ce8:	f107 0310 	add.w	r3, r7, #16
 8009cec:	4619      	mov	r1, r3
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f7ff fe8c 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf8:	2107      	movs	r1, #7
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 f994 	bl	800a028 <SDMMC_GetCmdResp1>
 8009d00:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3728      	adds	r7, #40	; 0x28
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009d14:	2300      	movs	r3, #0
 8009d16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d20:	2300      	movs	r3, #0
 8009d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d2a:	f107 0308 	add.w	r3, r7, #8
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff fe6b 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fbb8 	bl	800a4ac <SDMMC_GetCmdError>
 8009d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d3e:	69fb      	ldr	r3, [r7, #28]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3720      	adds	r7, #32
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b088      	sub	sp, #32
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009d50:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009d54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d56:	2308      	movs	r3, #8
 8009d58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d60:	2300      	movs	r3, #0
 8009d62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d6a:	f107 0308 	add.w	r3, r7, #8
 8009d6e:	4619      	mov	r1, r3
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff fe4b 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fb4a 	bl	800a410 <SDMMC_GetCmdResp7>
 8009d7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d7e:	69fb      	ldr	r3, [r7, #28]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3720      	adds	r7, #32
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b088      	sub	sp, #32
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009d96:	2337      	movs	r3, #55	; 0x37
 8009d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009da0:	2300      	movs	r3, #0
 8009da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009da8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009daa:	f107 0308 	add.w	r3, r7, #8
 8009dae:	4619      	mov	r1, r3
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff fe2b 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dba:	2137      	movs	r1, #55	; 0x37
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f933 	bl	800a028 <SDMMC_GetCmdResp1>
 8009dc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dc4:	69fb      	ldr	r3, [r7, #28]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3720      	adds	r7, #32
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b088      	sub	sp, #32
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009ddc:	2329      	movs	r3, #41	; 0x29
 8009dde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009de6:	2300      	movs	r3, #0
 8009de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009df0:	f107 0308 	add.w	r3, r7, #8
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7ff fe08 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fa4f 	bl	800a2a0 <SDMMC_GetCmdResp3>
 8009e02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e04:	69fb      	ldr	r3, [r7, #28]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3720      	adds	r7, #32
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b088      	sub	sp, #32
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009e1c:	2306      	movs	r3, #6
 8009e1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e26:	2300      	movs	r3, #0
 8009e28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e30:	f107 0308 	add.w	r3, r7, #8
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7ff fde8 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e40:	2106      	movs	r1, #6
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f8f0 	bl	800a028 <SDMMC_GetCmdResp1>
 8009e48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e4a:	69fb      	ldr	r3, [r7, #28]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3720      	adds	r7, #32
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009e60:	2333      	movs	r3, #51	; 0x33
 8009e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e74:	f107 0308 	add.w	r3, r7, #8
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff fdc6 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e84:	2133      	movs	r1, #51	; 0x33
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f8ce 	bl	800a028 <SDMMC_GetCmdResp1>
 8009e8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e8e:	69fb      	ldr	r3, [r7, #28]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3720      	adds	r7, #32
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ea8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009eac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eb8:	f107 0308 	add.w	r3, r7, #8
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7ff fda4 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f9a1 	bl	800a20c <SDMMC_GetCmdResp2>
 8009eca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ecc:	69fb      	ldr	r3, [r7, #28]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3720      	adds	r7, #32
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b088      	sub	sp, #32
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009ee4:	2309      	movs	r3, #9
 8009ee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ee8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009eec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ef6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ef8:	f107 0308 	add.w	r3, r7, #8
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff fd84 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f981 	bl	800a20c <SDMMC_GetCmdResp2>
 8009f0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3720      	adds	r7, #32
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b088      	sub	sp, #32
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009f24:	2303      	movs	r3, #3
 8009f26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f38:	f107 0308 	add.w	r3, r7, #8
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff fd64 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	2103      	movs	r1, #3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f9e9 	bl	800a320 <SDMMC_GetCmdResp6>
 8009f4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f50:	69fb      	ldr	r3, [r7, #28]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3720      	adds	r7, #32
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b088      	sub	sp, #32
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f68:	230d      	movs	r3, #13
 8009f6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f72:	2300      	movs	r3, #0
 8009f74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f7c:	f107 0308 	add.w	r3, r7, #8
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7ff fd42 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f8c:	210d      	movs	r1, #13
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f84a 	bl	800a028 <SDMMC_GetCmdResp1>
 8009f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f96:	69fb      	ldr	r3, [r7, #28]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3720      	adds	r7, #32
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b088      	sub	sp, #32
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009fac:	230d      	movs	r3, #13
 8009fae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fc0:	f107 0308 	add.w	r3, r7, #8
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff fd20 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fd0:	210d      	movs	r1, #13
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f828 	bl	800a028 <SDMMC_GetCmdResp1>
 8009fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fda:	69fb      	ldr	r3, [r7, #28]
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3720      	adds	r7, #32
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8009fec:	2300      	movs	r3, #0
 8009fee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8009ff0:	230b      	movs	r3, #11
 8009ff2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a004:	f107 0308 	add.w	r3, r7, #8
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7ff fcfe 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800a010:	f241 3288 	movw	r2, #5000	; 0x1388
 800a014:	210b      	movs	r1, #11
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f806 	bl	800a028 <SDMMC_GetCmdResp1>
 800a01c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a01e:	69fb      	ldr	r3, [r7, #28]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b088      	sub	sp, #32
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	460b      	mov	r3, r1
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a036:	4b70      	ldr	r3, [pc, #448]	; (800a1f8 <SDMMC_GetCmdResp1+0x1d0>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a70      	ldr	r2, [pc, #448]	; (800a1fc <SDMMC_GetCmdResp1+0x1d4>)
 800a03c:	fba2 2303 	umull	r2, r3, r2, r3
 800a040:	0a5a      	lsrs	r2, r3, #9
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	fb02 f303 	mul.w	r3, r2, r3
 800a048:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	1e5a      	subs	r2, r3, #1
 800a04e:	61fa      	str	r2, [r7, #28]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d102      	bne.n	800a05a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a054:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a058:	e0c9      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	4b67      	ldr	r3, [pc, #412]	; (800a200 <SDMMC_GetCmdResp1+0x1d8>)
 800a064:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0ef      	beq.n	800a04a <SDMMC_GetCmdResp1+0x22>
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1ea      	bne.n	800a04a <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d004      	beq.n	800a08a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2204      	movs	r2, #4
 800a084:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a086:	2304      	movs	r3, #4
 800a088:	e0b1      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	2b00      	cmp	r3, #0
 800a094:	d004      	beq.n	800a0a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e0a6      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	4a58      	ldr	r2, [pc, #352]	; (800a204 <SDMMC_GetCmdResp1+0x1dc>)
 800a0a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7ff fcda 	bl	8009a60 <SDMMC_GetCommandResponse>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	7afb      	ldrb	r3, [r7, #11]
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d001      	beq.n	800a0ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e099      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f7ff fcdc 	bl	8009a7a <SDMMC_GetResponse>
 800a0c2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	4b50      	ldr	r3, [pc, #320]	; (800a208 <SDMMC_GetCmdResp1+0x1e0>)
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	e08d      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	da02      	bge.n	800a0de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a0d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0dc:	e087      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0e8:	2340      	movs	r3, #64	; 0x40
 800a0ea:	e080      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0f6:	2380      	movs	r3, #128	; 0x80
 800a0f8:	e079      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a104:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a108:	e071      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a114:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a118:	e069      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a128:	e061      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a134:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a138:	e059      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a148:	e051      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a158:	e049      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a168:	e041      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a178:	e039      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a188:	e031      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a194:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a198:	e029      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a1a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a1a8:	e021      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a1b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a1b8:	e019      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a1c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a1c8:	e011      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a1d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a1d8:	e009      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f003 0308 	and.w	r3, r3, #8
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a1e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a1e8:	e001      	b.n	800a1ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a1ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3720      	adds	r7, #32
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20000000 	.word	0x20000000
 800a1fc:	10624dd3 	.word	0x10624dd3
 800a200:	00200045 	.word	0x00200045
 800a204:	002000c5 	.word	0x002000c5
 800a208:	fdffe008 	.word	0xfdffe008

0800a20c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a214:	4b1f      	ldr	r3, [pc, #124]	; (800a294 <SDMMC_GetCmdResp2+0x88>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a1f      	ldr	r2, [pc, #124]	; (800a298 <SDMMC_GetCmdResp2+0x8c>)
 800a21a:	fba2 2303 	umull	r2, r3, r2, r3
 800a21e:	0a5b      	lsrs	r3, r3, #9
 800a220:	f241 3288 	movw	r2, #5000	; 0x1388
 800a224:	fb02 f303 	mul.w	r3, r2, r3
 800a228:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	1e5a      	subs	r2, r3, #1
 800a22e:	60fa      	str	r2, [r7, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d102      	bne.n	800a23a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a234:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a238:	e026      	b.n	800a288 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0ef      	beq.n	800a22a <SDMMC_GetCmdResp2+0x1e>
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1ea      	bne.n	800a22a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a258:	f003 0304 	and.w	r3, r3, #4
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d004      	beq.n	800a26a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2204      	movs	r2, #4
 800a264:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a266:	2304      	movs	r3, #4
 800a268:	e00e      	b.n	800a288 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b00      	cmp	r3, #0
 800a274:	d004      	beq.n	800a280 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e003      	b.n	800a288 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a06      	ldr	r2, [pc, #24]	; (800a29c <SDMMC_GetCmdResp2+0x90>)
 800a284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	20000000 	.word	0x20000000
 800a298:	10624dd3 	.word	0x10624dd3
 800a29c:	002000c5 	.word	0x002000c5

0800a2a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2a8:	4b1a      	ldr	r3, [pc, #104]	; (800a314 <SDMMC_GetCmdResp3+0x74>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a1a      	ldr	r2, [pc, #104]	; (800a318 <SDMMC_GetCmdResp3+0x78>)
 800a2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b2:	0a5b      	lsrs	r3, r3, #9
 800a2b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2b8:	fb02 f303 	mul.w	r3, r2, r3
 800a2bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	1e5a      	subs	r2, r3, #1
 800a2c2:	60fa      	str	r2, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d102      	bne.n	800a2ce <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2cc:	e01b      	b.n	800a306 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d0ef      	beq.n	800a2be <SDMMC_GetCmdResp3+0x1e>
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d1ea      	bne.n	800a2be <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d004      	beq.n	800a2fe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2204      	movs	r2, #4
 800a2f8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2fa:	2304      	movs	r3, #4
 800a2fc:	e003      	b.n	800a306 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a06      	ldr	r2, [pc, #24]	; (800a31c <SDMMC_GetCmdResp3+0x7c>)
 800a302:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3714      	adds	r7, #20
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20000000 	.word	0x20000000
 800a318:	10624dd3 	.word	0x10624dd3
 800a31c:	002000c5 	.word	0x002000c5

0800a320 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	460b      	mov	r3, r1
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a32e:	4b35      	ldr	r3, [pc, #212]	; (800a404 <SDMMC_GetCmdResp6+0xe4>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a35      	ldr	r2, [pc, #212]	; (800a408 <SDMMC_GetCmdResp6+0xe8>)
 800a334:	fba2 2303 	umull	r2, r3, r2, r3
 800a338:	0a5b      	lsrs	r3, r3, #9
 800a33a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a33e:	fb02 f303 	mul.w	r3, r2, r3
 800a342:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	1e5a      	subs	r2, r3, #1
 800a348:	61fa      	str	r2, [r7, #28]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d102      	bne.n	800a354 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a34e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a352:	e052      	b.n	800a3fa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a358:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a360:	2b00      	cmp	r3, #0
 800a362:	d0ef      	beq.n	800a344 <SDMMC_GetCmdResp6+0x24>
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1ea      	bne.n	800a344 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a372:	f003 0304 	and.w	r3, r3, #4
 800a376:	2b00      	cmp	r3, #0
 800a378:	d004      	beq.n	800a384 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2204      	movs	r2, #4
 800a37e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a380:	2304      	movs	r3, #4
 800a382:	e03a      	b.n	800a3fa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d004      	beq.n	800a39a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2201      	movs	r2, #1
 800a394:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a396:	2301      	movs	r3, #1
 800a398:	e02f      	b.n	800a3fa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f7ff fb60 	bl	8009a60 <SDMMC_GetCommandResponse>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	7afb      	ldrb	r3, [r7, #11]
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d001      	beq.n	800a3ae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e025      	b.n	800a3fa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4a16      	ldr	r2, [pc, #88]	; (800a40c <SDMMC_GetCmdResp6+0xec>)
 800a3b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7ff fb5f 	bl	8009a7a <SDMMC_GetResponse>
 800a3bc:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d106      	bne.n	800a3d6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	0c1b      	lsrs	r3, r3, #16
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	e011      	b.n	800a3fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a3e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3e4:	e009      	b.n	800a3fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d002      	beq.n	800a3f6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3f4:	e001      	b.n	800a3fa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3720      	adds	r7, #32
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	20000000 	.word	0x20000000
 800a408:	10624dd3 	.word	0x10624dd3
 800a40c:	002000c5 	.word	0x002000c5

0800a410 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a418:	4b22      	ldr	r3, [pc, #136]	; (800a4a4 <SDMMC_GetCmdResp7+0x94>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a22      	ldr	r2, [pc, #136]	; (800a4a8 <SDMMC_GetCmdResp7+0x98>)
 800a41e:	fba2 2303 	umull	r2, r3, r2, r3
 800a422:	0a5b      	lsrs	r3, r3, #9
 800a424:	f241 3288 	movw	r2, #5000	; 0x1388
 800a428:	fb02 f303 	mul.w	r3, r2, r3
 800a42c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	1e5a      	subs	r2, r3, #1
 800a432:	60fa      	str	r2, [r7, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d102      	bne.n	800a43e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a43c:	e02c      	b.n	800a498 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a442:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0ef      	beq.n	800a42e <SDMMC_GetCmdResp7+0x1e>
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1ea      	bne.n	800a42e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b00      	cmp	r3, #0
 800a462:	d004      	beq.n	800a46e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2204      	movs	r2, #4
 800a468:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a46a:	2304      	movs	r3, #4
 800a46c:	e014      	b.n	800a498 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d004      	beq.n	800a484 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a480:	2301      	movs	r3, #1
 800a482:	e009      	b.n	800a498 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2240      	movs	r2, #64	; 0x40
 800a494:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a496:	2300      	movs	r3, #0

}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	20000000 	.word	0x20000000
 800a4a8:	10624dd3 	.word	0x10624dd3

0800a4ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4b4:	4b11      	ldr	r3, [pc, #68]	; (800a4fc <SDMMC_GetCmdError+0x50>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a11      	ldr	r2, [pc, #68]	; (800a500 <SDMMC_GetCmdError+0x54>)
 800a4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a4be:	0a5b      	lsrs	r3, r3, #9
 800a4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c4:	fb02 f303 	mul.w	r3, r2, r3
 800a4c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	1e5a      	subs	r2, r3, #1
 800a4ce:	60fa      	str	r2, [r7, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4d8:	e009      	b.n	800a4ee <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0f1      	beq.n	800a4ca <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a06      	ldr	r2, [pc, #24]	; (800a504 <SDMMC_GetCmdError+0x58>)
 800a4ea:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20000000 	.word	0x20000000
 800a500:	10624dd3 	.word	0x10624dd3
 800a504:	002000c5 	.word	0x002000c5

0800a508 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a508:	b084      	sub	sp, #16
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	f107 001c 	add.w	r0, r7, #28
 800a516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f001 f9ce 	bl	800b8c8 <USB_CoreReset>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	d106      	bne.n	800a544 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	639a      	str	r2, [r3, #56]	; 0x38
 800a542:	e005      	b.n	800a550 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a548:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800a550:	7bfb      	ldrb	r3, [r7, #15]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a55c:	b004      	add	sp, #16
 800a55e:	4770      	bx	lr

0800a560 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	4613      	mov	r3, r2
 800a56c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d165      	bne.n	800a640 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	4a3e      	ldr	r2, [pc, #248]	; (800a670 <USB_SetTurnaroundTime+0x110>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d906      	bls.n	800a58a <USB_SetTurnaroundTime+0x2a>
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	4a3d      	ldr	r2, [pc, #244]	; (800a674 <USB_SetTurnaroundTime+0x114>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d202      	bcs.n	800a58a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a584:	230f      	movs	r3, #15
 800a586:	617b      	str	r3, [r7, #20]
 800a588:	e05c      	b.n	800a644 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	4a39      	ldr	r2, [pc, #228]	; (800a674 <USB_SetTurnaroundTime+0x114>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d306      	bcc.n	800a5a0 <USB_SetTurnaroundTime+0x40>
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4a38      	ldr	r2, [pc, #224]	; (800a678 <USB_SetTurnaroundTime+0x118>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d202      	bcs.n	800a5a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a59a:	230e      	movs	r3, #14
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	e051      	b.n	800a644 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	4a35      	ldr	r2, [pc, #212]	; (800a678 <USB_SetTurnaroundTime+0x118>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d306      	bcc.n	800a5b6 <USB_SetTurnaroundTime+0x56>
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	4a34      	ldr	r2, [pc, #208]	; (800a67c <USB_SetTurnaroundTime+0x11c>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d202      	bcs.n	800a5b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a5b0:	230d      	movs	r3, #13
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	e046      	b.n	800a644 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	4a30      	ldr	r2, [pc, #192]	; (800a67c <USB_SetTurnaroundTime+0x11c>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d306      	bcc.n	800a5cc <USB_SetTurnaroundTime+0x6c>
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	4a2f      	ldr	r2, [pc, #188]	; (800a680 <USB_SetTurnaroundTime+0x120>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d802      	bhi.n	800a5cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	617b      	str	r3, [r7, #20]
 800a5ca:	e03b      	b.n	800a644 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	4a2c      	ldr	r2, [pc, #176]	; (800a680 <USB_SetTurnaroundTime+0x120>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d906      	bls.n	800a5e2 <USB_SetTurnaroundTime+0x82>
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4a2b      	ldr	r2, [pc, #172]	; (800a684 <USB_SetTurnaroundTime+0x124>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d802      	bhi.n	800a5e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a5dc:	230b      	movs	r3, #11
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	e030      	b.n	800a644 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	4a27      	ldr	r2, [pc, #156]	; (800a684 <USB_SetTurnaroundTime+0x124>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d906      	bls.n	800a5f8 <USB_SetTurnaroundTime+0x98>
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	4a26      	ldr	r2, [pc, #152]	; (800a688 <USB_SetTurnaroundTime+0x128>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d802      	bhi.n	800a5f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a5f2:	230a      	movs	r3, #10
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	e025      	b.n	800a644 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	4a23      	ldr	r2, [pc, #140]	; (800a688 <USB_SetTurnaroundTime+0x128>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d906      	bls.n	800a60e <USB_SetTurnaroundTime+0xae>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4a22      	ldr	r2, [pc, #136]	; (800a68c <USB_SetTurnaroundTime+0x12c>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d202      	bcs.n	800a60e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a608:	2309      	movs	r3, #9
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	e01a      	b.n	800a644 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	4a1e      	ldr	r2, [pc, #120]	; (800a68c <USB_SetTurnaroundTime+0x12c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d306      	bcc.n	800a624 <USB_SetTurnaroundTime+0xc4>
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	4a1d      	ldr	r2, [pc, #116]	; (800a690 <USB_SetTurnaroundTime+0x130>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d802      	bhi.n	800a624 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a61e:	2308      	movs	r3, #8
 800a620:	617b      	str	r3, [r7, #20]
 800a622:	e00f      	b.n	800a644 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	4a1a      	ldr	r2, [pc, #104]	; (800a690 <USB_SetTurnaroundTime+0x130>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d906      	bls.n	800a63a <USB_SetTurnaroundTime+0xda>
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4a19      	ldr	r2, [pc, #100]	; (800a694 <USB_SetTurnaroundTime+0x134>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d202      	bcs.n	800a63a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a634:	2307      	movs	r3, #7
 800a636:	617b      	str	r3, [r7, #20]
 800a638:	e004      	b.n	800a644 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a63a:	2306      	movs	r3, #6
 800a63c:	617b      	str	r3, [r7, #20]
 800a63e:	e001      	b.n	800a644 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a640:	2309      	movs	r3, #9
 800a642:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	68da      	ldr	r2, [r3, #12]
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	029b      	lsls	r3, r3, #10
 800a658:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a65c:	431a      	orrs	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	371c      	adds	r7, #28
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	00d8acbf 	.word	0x00d8acbf
 800a674:	00e4e1c0 	.word	0x00e4e1c0
 800a678:	00f42400 	.word	0x00f42400
 800a67c:	01067380 	.word	0x01067380
 800a680:	011a499f 	.word	0x011a499f
 800a684:	01312cff 	.word	0x01312cff
 800a688:	014ca43f 	.word	0x014ca43f
 800a68c:	016e3600 	.word	0x016e3600
 800a690:	01a6ab1f 	.word	0x01a6ab1f
 800a694:	01e84800 	.word	0x01e84800

0800a698 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f043 0201 	orr.w	r2, r3, #1
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	b083      	sub	sp, #12
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	f023 0201 	bic.w	r2, r3, #1
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d106      	bne.n	800a708 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	60da      	str	r2, [r3, #12]
 800a706:	e00b      	b.n	800a720 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a708:	78fb      	ldrb	r3, [r7, #3]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d106      	bne.n	800a71c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	60da      	str	r2, [r3, #12]
 800a71a:	e001      	b.n	800a720 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e003      	b.n	800a728 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a720:	2032      	movs	r0, #50	; 0x32
 800a722:	f7f6 ffb1 	bl	8001688 <HAL_Delay>

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a730:	b084      	sub	sp, #16
 800a732:	b580      	push	{r7, lr}
 800a734:	b086      	sub	sp, #24
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a73e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a742:	2300      	movs	r3, #0
 800a744:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a74a:	2300      	movs	r3, #0
 800a74c:	613b      	str	r3, [r7, #16]
 800a74e:	e009      	b.n	800a764 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	3340      	adds	r3, #64	; 0x40
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	2200      	movs	r2, #0
 800a75c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	3301      	adds	r3, #1
 800a762:	613b      	str	r3, [r7, #16]
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	2b0e      	cmp	r3, #14
 800a768:	d9f2      	bls.n	800a750 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d11c      	bne.n	800a7aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a77e:	f043 0302 	orr.w	r3, r3, #2
 800a782:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a788:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	e005      	b.n	800a7b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7bc:	461a      	mov	r2, r3
 800a7be:	2300      	movs	r3, #0
 800a7c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	680b      	ldr	r3, [r1, #0]
 800a7d4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a7d6:	2103      	movs	r1, #3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f93d 	bl	800aa58 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a7de:	2110      	movs	r1, #16
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 f8f1 	bl	800a9c8 <USB_FlushTxFifo>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f90f 	bl	800aa14 <USB_FlushRxFifo>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a806:	461a      	mov	r2, r3
 800a808:	2300      	movs	r3, #0
 800a80a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a812:	461a      	mov	r2, r3
 800a814:	2300      	movs	r3, #0
 800a816:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a81e:	461a      	mov	r2, r3
 800a820:	2300      	movs	r3, #0
 800a822:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a824:	2300      	movs	r3, #0
 800a826:	613b      	str	r3, [r7, #16]
 800a828:	e043      	b.n	800a8b2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	015a      	lsls	r2, r3, #5
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	4413      	add	r3, r2
 800a832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a83c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a840:	d118      	bne.n	800a874 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10a      	bne.n	800a85e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a854:	461a      	mov	r2, r3
 800a856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a85a:	6013      	str	r3, [r2, #0]
 800a85c:	e013      	b.n	800a886 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	4413      	add	r3, r2
 800a866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86a:	461a      	mov	r2, r3
 800a86c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a870:	6013      	str	r3, [r2, #0]
 800a872:	e008      	b.n	800a886 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a880:	461a      	mov	r2, r3
 800a882:	2300      	movs	r3, #0
 800a884:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a892:	461a      	mov	r2, r3
 800a894:	2300      	movs	r3, #0
 800a896:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	613b      	str	r3, [r7, #16]
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d3b7      	bcc.n	800a82a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	613b      	str	r3, [r7, #16]
 800a8be:	e043      	b.n	800a948 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	015a      	lsls	r2, r3, #5
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8d6:	d118      	bne.n	800a90a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10a      	bne.n	800a8f4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	015a      	lsls	r2, r3, #5
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	e013      	b.n	800a91c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a900:	461a      	mov	r2, r3
 800a902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a906:	6013      	str	r3, [r2, #0]
 800a908:	e008      	b.n	800a91c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	015a      	lsls	r2, r3, #5
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	4413      	add	r3, r2
 800a912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a916:	461a      	mov	r2, r3
 800a918:	2300      	movs	r3, #0
 800a91a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a928:	461a      	mov	r2, r3
 800a92a:	2300      	movs	r3, #0
 800a92c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	015a      	lsls	r2, r3, #5
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	4413      	add	r3, r2
 800a936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a93a:	461a      	mov	r2, r3
 800a93c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a940:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	3301      	adds	r3, #1
 800a946:	613b      	str	r3, [r7, #16]
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d3b7      	bcc.n	800a8c0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a95e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a962:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a970:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	f043 0210 	orr.w	r2, r3, #16
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	699a      	ldr	r2, [r3, #24]
 800a982:	4b10      	ldr	r3, [pc, #64]	; (800a9c4 <USB_DevInit+0x294>)
 800a984:	4313      	orrs	r3, r2
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d005      	beq.n	800a99c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	f043 0208 	orr.w	r2, r3, #8
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d107      	bne.n	800a9b2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9aa:	f043 0304 	orr.w	r3, r3, #4
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3718      	adds	r7, #24
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9be:	b004      	add	sp, #16
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	803c3800 	.word	0x803c3800

0800a9c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	019b      	lsls	r3, r3, #6
 800a9da:	f043 0220 	orr.w	r2, r3, #32
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	60fb      	str	r3, [r7, #12]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4a09      	ldr	r2, [pc, #36]	; (800aa10 <USB_FlushTxFifo+0x48>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d901      	bls.n	800a9f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e006      	b.n	800aa02 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	f003 0320 	and.w	r3, r3, #32
 800a9fc:	2b20      	cmp	r3, #32
 800a9fe:	d0f0      	beq.n	800a9e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	00030d40 	.word	0x00030d40

0800aa14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2210      	movs	r2, #16
 800aa24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4a09      	ldr	r2, [pc, #36]	; (800aa54 <USB_FlushRxFifo+0x40>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d901      	bls.n	800aa38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	e006      	b.n	800aa46 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	691b      	ldr	r3, [r3, #16]
 800aa3c:	f003 0310 	and.w	r3, r3, #16
 800aa40:	2b10      	cmp	r3, #16
 800aa42:	d0f0      	beq.n	800aa26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	00030d40 	.word	0x00030d40

0800aa58 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	68f9      	ldr	r1, [r7, #12]
 800aa74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3714      	adds	r7, #20
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b087      	sub	sp, #28
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f003 0306 	and.w	r3, r3, #6
 800aaa2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d002      	beq.n	800aab0 <USB_GetDevSpeed+0x26>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2b06      	cmp	r3, #6
 800aaae:	d102      	bne.n	800aab6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aab0:	2302      	movs	r3, #2
 800aab2:	75fb      	strb	r3, [r7, #23]
 800aab4:	e001      	b.n	800aaba <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800aab6:	230f      	movs	r3, #15
 800aab8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	371c      	adds	r7, #28
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	785b      	ldrb	r3, [r3, #1]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d13a      	bne.n	800ab5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaea:	69da      	ldr	r2, [r3, #28]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	f003 030f 	and.w	r3, r3, #15
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	fa01 f303 	lsl.w	r3, r1, r3
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	68f9      	ldr	r1, [r7, #12]
 800aafe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab02:	4313      	orrs	r3, r2
 800ab04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d155      	bne.n	800abc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	78db      	ldrb	r3, [r3, #3]
 800ab36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	059b      	lsls	r3, r3, #22
 800ab3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab40:	4313      	orrs	r3, r2
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	0151      	lsls	r1, r2, #5
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	440a      	add	r2, r1
 800ab4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	e036      	b.n	800abc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab60:	69da      	ldr	r2, [r3, #28]
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	f003 030f 	and.w	r3, r3, #15
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab70:	041b      	lsls	r3, r3, #16
 800ab72:	68f9      	ldr	r1, [r7, #12]
 800ab74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d11a      	bne.n	800abc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	78db      	ldrb	r3, [r3, #3]
 800abac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800abae:	430b      	orrs	r3, r1
 800abb0:	4313      	orrs	r3, r2
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	0151      	lsls	r1, r2, #5
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	440a      	add	r2, r1
 800abba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
	...

0800abd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	785b      	ldrb	r3, [r3, #1]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d161      	bne.n	800acb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac0a:	d11f      	bne.n	800ac4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	015a      	lsls	r2, r3, #5
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	4413      	add	r3, r2
 800ac14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	0151      	lsls	r1, r2, #5
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	440a      	add	r2, r1
 800ac22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	015a      	lsls	r2, r3, #5
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	4413      	add	r3, r2
 800ac34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	0151      	lsls	r1, r2, #5
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	440a      	add	r2, r1
 800ac42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	f003 030f 	and.w	r3, r3, #15
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	43db      	mvns	r3, r3
 800ac66:	68f9      	ldr	r1, [r7, #12]
 800ac68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac76:	69da      	ldr	r2, [r3, #28]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	f003 030f 	and.w	r3, r3, #15
 800ac80:	2101      	movs	r1, #1
 800ac82:	fa01 f303 	lsl.w	r3, r1, r3
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	43db      	mvns	r3, r3
 800ac8a:	68f9      	ldr	r1, [r7, #12]
 800ac8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac90:	4013      	ands	r3, r2
 800ac92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	015a      	lsls	r2, r3, #5
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	0159      	lsls	r1, r3, #5
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	440b      	add	r3, r1
 800acaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acae:	4619      	mov	r1, r3
 800acb0:	4b35      	ldr	r3, [pc, #212]	; (800ad88 <USB_DeactivateEndpoint+0x1b0>)
 800acb2:	4013      	ands	r3, r2
 800acb4:	600b      	str	r3, [r1, #0]
 800acb6:	e060      	b.n	800ad7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	015a      	lsls	r2, r3, #5
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	4413      	add	r3, r2
 800acc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acce:	d11f      	bne.n	800ad10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	015a      	lsls	r2, r3, #5
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	0151      	lsls	r1, r2, #5
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	440a      	add	r2, r1
 800ace6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800acee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	0151      	lsls	r1, r2, #5
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	440a      	add	r2, r1
 800ad06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	f003 030f 	and.w	r3, r3, #15
 800ad20:	2101      	movs	r1, #1
 800ad22:	fa01 f303 	lsl.w	r3, r1, r3
 800ad26:	041b      	lsls	r3, r3, #16
 800ad28:	43db      	mvns	r3, r3
 800ad2a:	68f9      	ldr	r1, [r7, #12]
 800ad2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad30:	4013      	ands	r3, r2
 800ad32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3a:	69da      	ldr	r2, [r3, #28]
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	f003 030f 	and.w	r3, r3, #15
 800ad44:	2101      	movs	r1, #1
 800ad46:	fa01 f303 	lsl.w	r3, r1, r3
 800ad4a:	041b      	lsls	r3, r3, #16
 800ad4c:	43db      	mvns	r3, r3
 800ad4e:	68f9      	ldr	r1, [r7, #12]
 800ad50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad54:	4013      	ands	r3, r2
 800ad56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	0159      	lsls	r1, r3, #5
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	440b      	add	r3, r1
 800ad6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad72:	4619      	mov	r1, r3
 800ad74:	4b05      	ldr	r3, [pc, #20]	; (800ad8c <USB_DeactivateEndpoint+0x1b4>)
 800ad76:	4013      	ands	r3, r2
 800ad78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	ec337800 	.word	0xec337800
 800ad8c:	eff37800 	.word	0xeff37800

0800ad90 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	785b      	ldrb	r3, [r3, #1]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	f040 810a 	bne.w	800afc2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	695b      	ldr	r3, [r3, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d132      	bne.n	800ae1c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	015a      	lsls	r2, r3, #5
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	4413      	add	r3, r2
 800adbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	0151      	lsls	r1, r2, #5
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	440a      	add	r2, r1
 800adcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800add0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800add4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800add8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	015a      	lsls	r2, r3, #5
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	4413      	add	r3, r2
 800ade2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	0151      	lsls	r1, r2, #5
 800adec:	697a      	ldr	r2, [r7, #20]
 800adee:	440a      	add	r2, r1
 800adf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	015a      	lsls	r2, r3, #5
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	4413      	add	r3, r2
 800ae02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	0151      	lsls	r1, r2, #5
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	440a      	add	r2, r1
 800ae10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae14:	0cdb      	lsrs	r3, r3, #19
 800ae16:	04db      	lsls	r3, r3, #19
 800ae18:	6113      	str	r3, [r2, #16]
 800ae1a:	e074      	b.n	800af06 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	015a      	lsls	r2, r3, #5
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	4413      	add	r3, r2
 800ae24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	693a      	ldr	r2, [r7, #16]
 800ae2c:	0151      	lsls	r1, r2, #5
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	440a      	add	r2, r1
 800ae32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae36:	0cdb      	lsrs	r3, r3, #19
 800ae38:	04db      	lsls	r3, r3, #19
 800ae3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	0151      	lsls	r1, r2, #5
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	440a      	add	r2, r1
 800ae52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	015a      	lsls	r2, r3, #5
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	4413      	add	r3, r2
 800ae68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae6c:	691a      	ldr	r2, [r3, #16]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	6959      	ldr	r1, [r3, #20]
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	440b      	add	r3, r1
 800ae78:	1e59      	subs	r1, r3, #1
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae82:	04d9      	lsls	r1, r3, #19
 800ae84:	4baf      	ldr	r3, [pc, #700]	; (800b144 <USB_EPStartXfer+0x3b4>)
 800ae86:	400b      	ands	r3, r1
 800ae88:	6939      	ldr	r1, [r7, #16]
 800ae8a:	0148      	lsls	r0, r1, #5
 800ae8c:	6979      	ldr	r1, [r7, #20]
 800ae8e:	4401      	add	r1, r0
 800ae90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae94:	4313      	orrs	r3, r2
 800ae96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	015a      	lsls	r2, r3, #5
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea4:	691a      	ldr	r2, [r3, #16]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aeae:	6939      	ldr	r1, [r7, #16]
 800aeb0:	0148      	lsls	r0, r1, #5
 800aeb2:	6979      	ldr	r1, [r7, #20]
 800aeb4:	4401      	add	r1, r0
 800aeb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aeba:	4313      	orrs	r3, r2
 800aebc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	78db      	ldrb	r3, [r3, #3]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d11f      	bne.n	800af06 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	015a      	lsls	r2, r3, #5
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	4413      	add	r3, r2
 800aece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	0151      	lsls	r1, r2, #5
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	440a      	add	r2, r1
 800aedc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aee0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aee4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	015a      	lsls	r2, r3, #5
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	4413      	add	r3, r2
 800aeee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	0151      	lsls	r1, r2, #5
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	440a      	add	r2, r1
 800aefc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af04:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	015a      	lsls	r2, r3, #5
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	4413      	add	r3, r2
 800af0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	0151      	lsls	r1, r2, #5
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	440a      	add	r2, r1
 800af1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af24:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	78db      	ldrb	r3, [r3, #3]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d015      	beq.n	800af5a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 8100 	beq.w	800b138 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	f003 030f 	and.w	r3, r3, #15
 800af48:	2101      	movs	r1, #1
 800af4a:	fa01 f303 	lsl.w	r3, r1, r3
 800af4e:	6979      	ldr	r1, [r7, #20]
 800af50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af54:	4313      	orrs	r3, r2
 800af56:	634b      	str	r3, [r1, #52]	; 0x34
 800af58:	e0ee      	b.n	800b138 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af66:	2b00      	cmp	r3, #0
 800af68:	d110      	bne.n	800af8c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	0151      	lsls	r1, r2, #5
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	440a      	add	r2, r1
 800af80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af88:	6013      	str	r3, [r2, #0]
 800af8a:	e00f      	b.n	800afac <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	015a      	lsls	r2, r3, #5
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	4413      	add	r3, r2
 800af94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	0151      	lsls	r1, r2, #5
 800af9e:	697a      	ldr	r2, [r7, #20]
 800afa0:	440a      	add	r2, r1
 800afa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afaa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	68d9      	ldr	r1, [r3, #12]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	781a      	ldrb	r2, [r3, #0]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	b29b      	uxth	r3, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f9e2 	bl	800b384 <USB_WritePacket>
 800afc0:	e0ba      	b.n	800b138 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	0151      	lsls	r1, r2, #5
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	440a      	add	r2, r1
 800afd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afdc:	0cdb      	lsrs	r3, r3, #19
 800afde:	04db      	lsls	r3, r3, #19
 800afe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	015a      	lsls	r2, r3, #5
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	4413      	add	r3, r2
 800afea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	0151      	lsls	r1, r2, #5
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	440a      	add	r2, r1
 800aff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800affc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b000:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b004:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	695b      	ldr	r3, [r3, #20]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d123      	bne.n	800b056 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	015a      	lsls	r2, r3, #5
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	4413      	add	r3, r2
 800b016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01a:	691a      	ldr	r2, [r3, #16]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b024:	6939      	ldr	r1, [r7, #16]
 800b026:	0148      	lsls	r0, r1, #5
 800b028:	6979      	ldr	r1, [r7, #20]
 800b02a:	4401      	add	r1, r0
 800b02c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b030:	4313      	orrs	r3, r2
 800b032:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	0151      	lsls	r1, r2, #5
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	440a      	add	r2, r1
 800b04a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b04e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b052:	6113      	str	r3, [r2, #16]
 800b054:	e033      	b.n	800b0be <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	695a      	ldr	r2, [r3, #20]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	4413      	add	r3, r2
 800b060:	1e5a      	subs	r2, r3, #1
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	fbb2 f3f3 	udiv	r3, r2, r3
 800b06a:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	4413      	add	r3, r2
 800b074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b078:	691a      	ldr	r2, [r3, #16]
 800b07a:	89fb      	ldrh	r3, [r7, #14]
 800b07c:	04d9      	lsls	r1, r3, #19
 800b07e:	4b31      	ldr	r3, [pc, #196]	; (800b144 <USB_EPStartXfer+0x3b4>)
 800b080:	400b      	ands	r3, r1
 800b082:	6939      	ldr	r1, [r7, #16]
 800b084:	0148      	lsls	r0, r1, #5
 800b086:	6979      	ldr	r1, [r7, #20]
 800b088:	4401      	add	r1, r0
 800b08a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b08e:	4313      	orrs	r3, r2
 800b090:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b09e:	691a      	ldr	r2, [r3, #16]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	89f9      	ldrh	r1, [r7, #14]
 800b0a6:	fb01 f303 	mul.w	r3, r1, r3
 800b0aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0ae:	6939      	ldr	r1, [r7, #16]
 800b0b0:	0148      	lsls	r0, r1, #5
 800b0b2:	6979      	ldr	r1, [r7, #20]
 800b0b4:	4401      	add	r1, r0
 800b0b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	78db      	ldrb	r3, [r3, #3]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d128      	bne.n	800b118 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d110      	bne.n	800b0f8 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	0151      	lsls	r1, r2, #5
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	440a      	add	r2, r1
 800b0ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0f4:	6013      	str	r3, [r2, #0]
 800b0f6:	e00f      	b.n	800b118 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	015a      	lsls	r2, r3, #5
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	0151      	lsls	r1, r2, #5
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	440a      	add	r2, r1
 800b10e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b116:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	0151      	lsls	r1, r2, #5
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	440a      	add	r2, r1
 800b12e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b136:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3718      	adds	r7, #24
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	1ff80000 	.word	0x1ff80000

0800b148 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	785b      	ldrb	r3, [r3, #1]
 800b160:	2b01      	cmp	r3, #1
 800b162:	f040 80ab 	bne.w	800b2bc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d132      	bne.n	800b1d4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	0151      	lsls	r1, r2, #5
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	440a      	add	r2, r1
 800b184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b188:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b18c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	015a      	lsls	r2, r3, #5
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	4413      	add	r3, r2
 800b19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	0151      	lsls	r1, r2, #5
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	440a      	add	r2, r1
 800b1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	015a      	lsls	r2, r3, #5
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	0151      	lsls	r1, r2, #5
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	440a      	add	r2, r1
 800b1c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1cc:	0cdb      	lsrs	r3, r3, #19
 800b1ce:	04db      	lsls	r3, r3, #19
 800b1d0:	6113      	str	r3, [r2, #16]
 800b1d2:	e04e      	b.n	800b272 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	015a      	lsls	r2, r3, #5
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	0151      	lsls	r1, r2, #5
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	440a      	add	r2, r1
 800b1ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ee:	0cdb      	lsrs	r3, r3, #19
 800b1f0:	04db      	lsls	r3, r3, #19
 800b1f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	0151      	lsls	r1, r2, #5
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	440a      	add	r2, r1
 800b20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b20e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b212:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b216:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	695a      	ldr	r2, [r3, #20]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	429a      	cmp	r2, r3
 800b222:	d903      	bls.n	800b22c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	689a      	ldr	r2, [r3, #8]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	4413      	add	r3, r2
 800b234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	0151      	lsls	r1, r2, #5
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	440a      	add	r2, r1
 800b242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b24a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b258:	691a      	ldr	r2, [r3, #16]
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b262:	68b9      	ldr	r1, [r7, #8]
 800b264:	0148      	lsls	r0, r1, #5
 800b266:	68f9      	ldr	r1, [r7, #12]
 800b268:	4401      	add	r1, r0
 800b26a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b26e:	4313      	orrs	r3, r2
 800b270:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	0151      	lsls	r1, r2, #5
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	440a      	add	r2, r1
 800b288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b28c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b290:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	695b      	ldr	r3, [r3, #20]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d06d      	beq.n	800b376 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	f003 030f 	and.w	r3, r3, #15
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b0:	68f9      	ldr	r1, [r7, #12]
 800b2b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	634b      	str	r3, [r1, #52]	; 0x34
 800b2ba:	e05c      	b.n	800b376 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	0151      	lsls	r1, r2, #5
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	440a      	add	r2, r1
 800b2d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2d6:	0cdb      	lsrs	r3, r3, #19
 800b2d8:	04db      	lsls	r3, r3, #19
 800b2da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	015a      	lsls	r2, r3, #5
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	0151      	lsls	r1, r2, #5
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	440a      	add	r2, r1
 800b2f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b2fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b2fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d003      	beq.n	800b310 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	689a      	ldr	r2, [r3, #8]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	4413      	add	r3, r2
 800b318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	0151      	lsls	r1, r2, #5
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	440a      	add	r2, r1
 800b326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b32a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b32e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	015a      	lsls	r2, r3, #5
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	4413      	add	r3, r2
 800b338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33c:	691a      	ldr	r2, [r3, #16]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b346:	68b9      	ldr	r1, [r7, #8]
 800b348:	0148      	lsls	r0, r1, #5
 800b34a:	68f9      	ldr	r1, [r7, #12]
 800b34c:	4401      	add	r1, r0
 800b34e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b352:	4313      	orrs	r3, r2
 800b354:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	0151      	lsls	r1, r2, #5
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	440a      	add	r2, r1
 800b36c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b370:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b374:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800b384:	b480      	push	{r7}
 800b386:	b089      	sub	sp, #36	; 0x24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	4611      	mov	r1, r2
 800b390:	461a      	mov	r2, r3
 800b392:	460b      	mov	r3, r1
 800b394:	71fb      	strb	r3, [r7, #7]
 800b396:	4613      	mov	r3, r2
 800b398:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800b3a2:	88bb      	ldrh	r3, [r7, #4]
 800b3a4:	3303      	adds	r3, #3
 800b3a6:	089b      	lsrs	r3, r3, #2
 800b3a8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	61bb      	str	r3, [r7, #24]
 800b3ae:	e00f      	b.n	800b3d0 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b3b0:	79fb      	ldrb	r3, [r7, #7]
 800b3b2:	031a      	lsls	r2, r3, #12
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3bc:	461a      	mov	r2, r3
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6013      	str	r3, [r2, #0]
    pSrc++;
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	61bb      	str	r3, [r7, #24]
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d3eb      	bcc.n	800b3b0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3724      	adds	r7, #36	; 0x24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b089      	sub	sp, #36	; 0x24
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	60f8      	str	r0, [r7, #12]
 800b3ee:	60b9      	str	r1, [r7, #8]
 800b3f0:	4613      	mov	r3, r2
 800b3f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b3fc:	88fb      	ldrh	r3, [r7, #6]
 800b3fe:	3303      	adds	r3, #3
 800b400:	089b      	lsrs	r3, r3, #2
 800b402:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b404:	2300      	movs	r3, #0
 800b406:	61bb      	str	r3, [r7, #24]
 800b408:	e00b      	b.n	800b422 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	601a      	str	r2, [r3, #0]
    pDest++;
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	3304      	adds	r3, #4
 800b41a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	3301      	adds	r3, #1
 800b420:	61bb      	str	r3, [r7, #24]
 800b422:	69ba      	ldr	r2, [r7, #24]
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	429a      	cmp	r2, r3
 800b428:	d3ef      	bcc.n	800b40a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b42a:	69fb      	ldr	r3, [r7, #28]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3724      	adds	r7, #36	; 0x24
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	785b      	ldrb	r3, [r3, #1]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d12c      	bne.n	800b4ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	015a      	lsls	r2, r3, #5
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	4413      	add	r3, r2
 800b45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	db12      	blt.n	800b48c <USB_EPSetStall+0x54>
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00f      	beq.n	800b48c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	015a      	lsls	r2, r3, #5
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4413      	add	r3, r2
 800b474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	0151      	lsls	r1, r2, #5
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	440a      	add	r2, r1
 800b482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b486:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b48a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	0151      	lsls	r1, r2, #5
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	440a      	add	r2, r1
 800b4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	e02b      	b.n	800b506 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	db12      	blt.n	800b4e6 <USB_EPSetStall+0xae>
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00f      	beq.n	800b4e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	0151      	lsls	r1, r2, #5
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	440a      	add	r2, r1
 800b4dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b4e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	015a      	lsls	r2, r3, #5
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68ba      	ldr	r2, [r7, #8]
 800b4f6:	0151      	lsls	r1, r2, #5
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	440a      	add	r2, r1
 800b4fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b504:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	785b      	ldrb	r3, [r3, #1]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d128      	bne.n	800b582 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	4413      	add	r3, r2
 800b538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	0151      	lsls	r1, r2, #5
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	440a      	add	r2, r1
 800b546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b54a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b54e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	78db      	ldrb	r3, [r3, #3]
 800b554:	2b03      	cmp	r3, #3
 800b556:	d003      	beq.n	800b560 <USB_EPClearStall+0x4c>
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	78db      	ldrb	r3, [r3, #3]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d138      	bne.n	800b5d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	0151      	lsls	r1, r2, #5
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	440a      	add	r2, r1
 800b576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b57a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b57e:	6013      	str	r3, [r2, #0]
 800b580:	e027      	b.n	800b5d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	015a      	lsls	r2, r3, #5
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	4413      	add	r3, r2
 800b58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	0151      	lsls	r1, r2, #5
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	440a      	add	r2, r1
 800b598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b59c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	78db      	ldrb	r3, [r3, #3]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d003      	beq.n	800b5b2 <USB_EPClearStall+0x9e>
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	78db      	ldrb	r3, [r3, #3]
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d10f      	bne.n	800b5d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	015a      	lsls	r2, r3, #5
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	0151      	lsls	r1, r2, #5
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	440a      	add	r2, r1
 800b5c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b602:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	78fb      	ldrb	r3, [r7, #3]
 800b60e:	011b      	lsls	r3, r3, #4
 800b610:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b614:	68f9      	ldr	r1, [r7, #12]
 800b616:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b61a:	4313      	orrs	r3, r2
 800b61c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b646:	f023 0303 	bic.w	r3, r3, #3
 800b64a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b65a:	f023 0302 	bic.w	r3, r3, #2
 800b65e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b66e:	b480      	push	{r7}
 800b670:	b085      	sub	sp, #20
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b688:	f023 0303 	bic.w	r3, r3, #3
 800b68c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b69c:	f043 0302 	orr.w	r3, r3, #2
 800b6a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3714      	adds	r7, #20
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr

0800b6d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b085      	sub	sp, #20
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6f2:	69db      	ldr	r3, [r3, #28]
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	4013      	ands	r3, r2
 800b6f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	0c1b      	lsrs	r3, r3, #16
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b085      	sub	sp, #20
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b726:	69db      	ldr	r3, [r3, #28]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	4013      	ands	r3, r2
 800b72c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	b29b      	uxth	r3, r3
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b73e:	b480      	push	{r7}
 800b740:	b085      	sub	sp, #20
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	460b      	mov	r3, r1
 800b748:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b74e:	78fb      	ldrb	r3, [r7, #3]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	4413      	add	r3, r2
 800b756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	4013      	ands	r3, r2
 800b76a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b76c:	68bb      	ldr	r3, [r7, #8]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b087      	sub	sp, #28
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	460b      	mov	r3, r1
 800b784:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b79e:	78fb      	ldrb	r3, [r7, #3]
 800b7a0:	f003 030f 	and.w	r3, r3, #15
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7aa:	01db      	lsls	r3, r3, #7
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b7b4:	78fb      	ldrb	r3, [r7, #3]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	f003 0301 	and.w	r3, r3, #1
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b085      	sub	sp, #20
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b80c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b810:	f023 0307 	bic.w	r3, r3, #7
 800b814:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b828:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	333c      	adds	r3, #60	; 0x3c
 800b84a:	3304      	adds	r3, #4
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	4a1c      	ldr	r2, [pc, #112]	; (800b8c4 <USB_EP0_OutStart+0x8c>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d90a      	bls.n	800b86e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b868:	d101      	bne.n	800b86e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	e024      	b.n	800b8b8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b874:	461a      	mov	r2, r3
 800b876:	2300      	movs	r3, #0
 800b878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b88c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b89c:	f043 0318 	orr.w	r3, r3, #24
 800b8a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b8b4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr
 800b8c4:	4f54300a 	.word	0x4f54300a

0800b8c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	4a13      	ldr	r2, [pc, #76]	; (800b92c <USB_CoreReset+0x64>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d901      	bls.n	800b8e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	e01b      	b.n	800b91e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	daf2      	bge.n	800b8d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	f043 0201 	orr.w	r2, r3, #1
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3301      	adds	r3, #1
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	4a09      	ldr	r2, [pc, #36]	; (800b92c <USB_CoreReset+0x64>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d901      	bls.n	800b910 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e006      	b.n	800b91e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	f003 0301 	and.w	r3, r3, #1
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d0f0      	beq.n	800b8fe <USB_CoreReset+0x36>

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	00030d40 	.word	0x00030d40

0800b930 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b934:	4904      	ldr	r1, [pc, #16]	; (800b948 <MX_FATFS_Init+0x18>)
 800b936:	4805      	ldr	r0, [pc, #20]	; (800b94c <MX_FATFS_Init+0x1c>)
 800b938:	f001 ff18 	bl	800d76c <FATFS_LinkDriver>
 800b93c:	4603      	mov	r3, r0
 800b93e:	461a      	mov	r2, r3
 800b940:	4b03      	ldr	r3, [pc, #12]	; (800b950 <MX_FATFS_Init+0x20>)
 800b942:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b944:	bf00      	nop
 800b946:	bd80      	pop	{r7, pc}
 800b948:	200008b8 	.word	0x200008b8
 800b94c:	0800e49c 	.word	0x0800e49c
 800b950:	200008b4 	.word	0x200008b4

0800b954 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b95a:	2300      	movs	r3, #0
 800b95c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b95e:	f000 f885 	bl	800ba6c <BSP_SD_IsDetected>
 800b962:	4603      	mov	r3, r0
 800b964:	2b01      	cmp	r3, #1
 800b966:	d001      	beq.n	800b96c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b968:	2302      	movs	r3, #2
 800b96a:	e012      	b.n	800b992 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b96c:	480b      	ldr	r0, [pc, #44]	; (800b99c <BSP_SD_Init+0x48>)
 800b96e:	f7fb fdf5 	bl	800755c <HAL_SD_Init>
 800b972:	4603      	mov	r3, r0
 800b974:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b976:	79fb      	ldrb	r3, [r7, #7]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d109      	bne.n	800b990 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b97c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b980:	4806      	ldr	r0, [pc, #24]	; (800b99c <BSP_SD_Init+0x48>)
 800b982:	f7fc fcbb 	bl	80082fc <HAL_SD_ConfigWideBusOperation>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d001      	beq.n	800b990 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b990:	79fb      	ldrb	r3, [r7, #7]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20000560 	.word	0x20000560

0800b9a0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	68f9      	ldr	r1, [r7, #12]
 800b9b6:	4806      	ldr	r0, [pc, #24]	; (800b9d0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b9b8:	f7fb ff0a 	bl	80077d0 <HAL_SD_ReadBlocks_DMA>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3718      	adds	r7, #24
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20000560 	.word	0x20000560

0800b9d4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	68ba      	ldr	r2, [r7, #8]
 800b9e8:	68f9      	ldr	r1, [r7, #12]
 800b9ea:	4806      	ldr	r0, [pc, #24]	; (800ba04 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b9ec:	f7fb ff98 	bl	8007920 <HAL_SD_WriteBlocks_DMA>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	20000560 	.word	0x20000560

0800ba08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ba0c:	4805      	ldr	r0, [pc, #20]	; (800ba24 <BSP_SD_GetCardState+0x1c>)
 800ba0e:	f7fc fd89 	bl	8008524 <HAL_SD_GetCardState>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b04      	cmp	r3, #4
 800ba16:	bf14      	ite	ne
 800ba18:	2301      	movne	r3, #1
 800ba1a:	2300      	moveq	r3, #0
 800ba1c:	b2db      	uxtb	r3, r3
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	20000560 	.word	0x20000560

0800ba28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ba30:	6879      	ldr	r1, [r7, #4]
 800ba32:	4803      	ldr	r0, [pc, #12]	; (800ba40 <BSP_SD_GetCardInfo+0x18>)
 800ba34:	f7fc fc36 	bl	80082a4 <HAL_SD_GetCardInfo>
}
 800ba38:	bf00      	nop
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	20000560 	.word	0x20000560

0800ba44 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ba4c:	f000 f9a0 	bl	800bd90 <BSP_SD_WriteCpltCallback>
}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ba60:	f000 f9a2 	bl	800bda8 <BSP_SD_ReadCpltCallback>
}
 800ba64:	bf00      	nop
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ba72:	2301      	movs	r3, #1
 800ba74:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ba76:	f000 f80b 	bl	800ba90 <BSP_PlatformIsDetected>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d101      	bne.n	800ba84 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ba80:	2300      	movs	r3, #0
 800ba82:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ba84:	79fb      	ldrb	r3, [r7, #7]
 800ba86:	b2db      	uxtb	r3, r3
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ba96:	2301      	movs	r3, #1
 800ba98:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ba9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba9e:	4806      	ldr	r0, [pc, #24]	; (800bab8 <BSP_PlatformIsDetected+0x28>)
 800baa0:	f7f7 fb88 	bl	80031b4 <HAL_GPIO_ReadPin>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800baaa:	2300      	movs	r3, #0
 800baac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800baae:	79fb      	ldrb	r3, [r7, #7]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	48000400 	.word	0x48000400

0800babc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bac4:	f7f5 fdd4 	bl	8001670 <HAL_GetTick>
 800bac8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800baca:	e006      	b.n	800bada <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bacc:	f7ff ff9c 	bl	800ba08 <BSP_SD_GetCardState>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	e009      	b.n	800baee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bada:	f7f5 fdc9 	bl	8001670 <HAL_GetTick>
 800bade:	4602      	mov	r2, r0
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d8f0      	bhi.n	800bacc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800baea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
	...

0800baf8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bb02:	4b0b      	ldr	r3, [pc, #44]	; (800bb30 <SD_CheckStatus+0x38>)
 800bb04:	2201      	movs	r2, #1
 800bb06:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bb08:	f7ff ff7e 	bl	800ba08 <BSP_SD_GetCardState>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d107      	bne.n	800bb22 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bb12:	4b07      	ldr	r3, [pc, #28]	; (800bb30 <SD_CheckStatus+0x38>)
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	f023 0301 	bic.w	r3, r3, #1
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	4b04      	ldr	r3, [pc, #16]	; (800bb30 <SD_CheckStatus+0x38>)
 800bb20:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bb22:	4b03      	ldr	r3, [pc, #12]	; (800bb30 <SD_CheckStatus+0x38>)
 800bb24:	781b      	ldrb	r3, [r3, #0]
 800bb26:	b2db      	uxtb	r3, r3
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	20000009 	.word	0x20000009

0800bb34 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bb3e:	f7ff ff09 	bl	800b954 <BSP_SD_Init>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d107      	bne.n	800bb58 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bb48:	79fb      	ldrb	r3, [r7, #7]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff ffd4 	bl	800baf8 <SD_CheckStatus>
 800bb50:	4603      	mov	r3, r0
 800bb52:	461a      	mov	r2, r3
 800bb54:	4b04      	ldr	r3, [pc, #16]	; (800bb68 <SD_initialize+0x34>)
 800bb56:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bb58:	4b03      	ldr	r3, [pc, #12]	; (800bb68 <SD_initialize+0x34>)
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	b2db      	uxtb	r3, r3
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20000009 	.word	0x20000009

0800bb6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	4603      	mov	r3, r0
 800bb74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bb76:	79fb      	ldrb	r3, [r7, #7]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff ffbd 	bl	800baf8 <SD_CheckStatus>
 800bb7e:	4603      	mov	r3, r0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60b9      	str	r1, [r7, #8]
 800bb90:	607a      	str	r2, [r7, #4]
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	4603      	mov	r3, r0
 800bb96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bb9c:	f247 5030 	movw	r0, #30000	; 0x7530
 800bba0:	f7ff ff8c 	bl	800babc <SD_CheckStatusWithTimeout>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	da01      	bge.n	800bbae <SD_read+0x26>
  {
    return res;
 800bbaa:	7dfb      	ldrb	r3, [r7, #23]
 800bbac:	e03b      	b.n	800bc26 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	6879      	ldr	r1, [r7, #4]
 800bbb2:	68b8      	ldr	r0, [r7, #8]
 800bbb4:	f7ff fef4 	bl	800b9a0 <BSP_SD_ReadBlocks_DMA>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d132      	bne.n	800bc24 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bbbe:	4b1c      	ldr	r3, [pc, #112]	; (800bc30 <SD_read+0xa8>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bbc4:	f7f5 fd54 	bl	8001670 <HAL_GetTick>
 800bbc8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bbca:	bf00      	nop
 800bbcc:	4b18      	ldr	r3, [pc, #96]	; (800bc30 <SD_read+0xa8>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d108      	bne.n	800bbe6 <SD_read+0x5e>
 800bbd4:	f7f5 fd4c 	bl	8001670 <HAL_GetTick>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	1ad3      	subs	r3, r2, r3
 800bbde:	f247 522f 	movw	r2, #29999	; 0x752f
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d9f2      	bls.n	800bbcc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800bbe6:	4b12      	ldr	r3, [pc, #72]	; (800bc30 <SD_read+0xa8>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d102      	bne.n	800bbf4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	75fb      	strb	r3, [r7, #23]
 800bbf2:	e017      	b.n	800bc24 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bbf4:	4b0e      	ldr	r3, [pc, #56]	; (800bc30 <SD_read+0xa8>)
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bbfa:	f7f5 fd39 	bl	8001670 <HAL_GetTick>
 800bbfe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bc00:	e007      	b.n	800bc12 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc02:	f7ff ff01 	bl	800ba08 <BSP_SD_GetCardState>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d102      	bne.n	800bc12 <SD_read+0x8a>
          {
            res = RES_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bc10:	e008      	b.n	800bc24 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bc12:	f7f5 fd2d 	bl	8001670 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d9ee      	bls.n	800bc02 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3718      	adds	r7, #24
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	200001dc 	.word	0x200001dc

0800bc34 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60b9      	str	r1, [r7, #8]
 800bc3c:	607a      	str	r2, [r7, #4]
 800bc3e:	603b      	str	r3, [r7, #0]
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bc48:	4b24      	ldr	r3, [pc, #144]	; (800bcdc <SD_write+0xa8>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bc4e:	f247 5030 	movw	r0, #30000	; 0x7530
 800bc52:	f7ff ff33 	bl	800babc <SD_CheckStatusWithTimeout>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	da01      	bge.n	800bc60 <SD_write+0x2c>
  {
    return res;
 800bc5c:	7dfb      	ldrb	r3, [r7, #23]
 800bc5e:	e038      	b.n	800bcd2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	6879      	ldr	r1, [r7, #4]
 800bc64:	68b8      	ldr	r0, [r7, #8]
 800bc66:	f7ff feb5 	bl	800b9d4 <BSP_SD_WriteBlocks_DMA>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d12f      	bne.n	800bcd0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bc70:	f7f5 fcfe 	bl	8001670 <HAL_GetTick>
 800bc74:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bc76:	bf00      	nop
 800bc78:	4b18      	ldr	r3, [pc, #96]	; (800bcdc <SD_write+0xa8>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d108      	bne.n	800bc92 <SD_write+0x5e>
 800bc80:	f7f5 fcf6 	bl	8001670 <HAL_GetTick>
 800bc84:	4602      	mov	r2, r0
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d9f2      	bls.n	800bc78 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800bc92:	4b12      	ldr	r3, [pc, #72]	; (800bcdc <SD_write+0xa8>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d102      	bne.n	800bca0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	75fb      	strb	r3, [r7, #23]
 800bc9e:	e017      	b.n	800bcd0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800bca0:	4b0e      	ldr	r3, [pc, #56]	; (800bcdc <SD_write+0xa8>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bca6:	f7f5 fce3 	bl	8001670 <HAL_GetTick>
 800bcaa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bcac:	e007      	b.n	800bcbe <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bcae:	f7ff feab 	bl	800ba08 <BSP_SD_GetCardState>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d102      	bne.n	800bcbe <SD_write+0x8a>
          {
            res = RES_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	75fb      	strb	r3, [r7, #23]
            break;
 800bcbc:	e008      	b.n	800bcd0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bcbe:	f7f5 fcd7 	bl	8001670 <HAL_GetTick>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	f247 522f 	movw	r2, #29999	; 0x752f
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d9ee      	bls.n	800bcae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800bcd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	200001d8 	.word	0x200001d8

0800bce0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b08c      	sub	sp, #48	; 0x30
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	603a      	str	r2, [r7, #0]
 800bcea:	71fb      	strb	r3, [r7, #7]
 800bcec:	460b      	mov	r3, r1
 800bcee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bcf6:	4b25      	ldr	r3, [pc, #148]	; (800bd8c <SD_ioctl+0xac>)
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	f003 0301 	and.w	r3, r3, #1
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <SD_ioctl+0x28>
 800bd04:	2303      	movs	r3, #3
 800bd06:	e03c      	b.n	800bd82 <SD_ioctl+0xa2>

  switch (cmd)
 800bd08:	79bb      	ldrb	r3, [r7, #6]
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d834      	bhi.n	800bd78 <SD_ioctl+0x98>
 800bd0e:	a201      	add	r2, pc, #4	; (adr r2, 800bd14 <SD_ioctl+0x34>)
 800bd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd14:	0800bd25 	.word	0x0800bd25
 800bd18:	0800bd2d 	.word	0x0800bd2d
 800bd1c:	0800bd45 	.word	0x0800bd45
 800bd20:	0800bd5f 	.word	0x0800bd5f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd2a:	e028      	b.n	800bd7e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd2c:	f107 0308 	add.w	r3, r7, #8
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff fe79 	bl	800ba28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bd36:	6a3a      	ldr	r2, [r7, #32]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd42:	e01c      	b.n	800bd7e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd44:	f107 0308 	add.w	r3, r7, #8
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7ff fe6d 	bl	800ba28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd5c:	e00f      	b.n	800bd7e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd5e:	f107 0308 	add.w	r3, r7, #8
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff fe60 	bl	800ba28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6a:	0a5a      	lsrs	r2, r3, #9
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd76:	e002      	b.n	800bd7e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bd78:	2304      	movs	r3, #4
 800bd7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bd7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3730      	adds	r7, #48	; 0x30
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20000009 	.word	0x20000009

0800bd90 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bd90:	b480      	push	{r7}
 800bd92:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800bd94:	4b03      	ldr	r3, [pc, #12]	; (800bda4 <BSP_SD_WriteCpltCallback+0x14>)
 800bd96:	2201      	movs	r2, #1
 800bd98:	601a      	str	r2, [r3, #0]
}
 800bd9a:	bf00      	nop
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr
 800bda4:	200001d8 	.word	0x200001d8

0800bda8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800bdac:	4b03      	ldr	r3, [pc, #12]	; (800bdbc <BSP_SD_ReadCpltCallback+0x14>)
 800bdae:	2201      	movs	r2, #1
 800bdb0:	601a      	str	r2, [r3, #0]
}
 800bdb2:	bf00      	nop
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	200001dc 	.word	0x200001dc

0800bdc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	460b      	mov	r3, r1
 800bdca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bdcc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bdd0:	f002 fac6 	bl	800e360 <USBD_static_malloc>
 800bdd4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d105      	bne.n	800bde8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bde4:	2302      	movs	r3, #2
 800bde6:	e066      	b.n	800beb6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	7c1b      	ldrb	r3, [r3, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d119      	bne.n	800be2c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bdf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdfc:	2202      	movs	r2, #2
 800bdfe:	2181      	movs	r1, #129	; 0x81
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f002 f899 	bl	800df38 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2201      	movs	r2, #1
 800be0a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be10:	2202      	movs	r2, #2
 800be12:	2101      	movs	r1, #1
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f002 f88f 	bl	800df38 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2210      	movs	r2, #16
 800be26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800be2a:	e016      	b.n	800be5a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800be2c:	2340      	movs	r3, #64	; 0x40
 800be2e:	2202      	movs	r2, #2
 800be30:	2181      	movs	r1, #129	; 0x81
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f002 f880 	bl	800df38 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800be3e:	2340      	movs	r3, #64	; 0x40
 800be40:	2202      	movs	r2, #2
 800be42:	2101      	movs	r1, #1
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f002 f877 	bl	800df38 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2210      	movs	r2, #16
 800be56:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800be5a:	2308      	movs	r3, #8
 800be5c:	2203      	movs	r2, #3
 800be5e:	2182      	movs	r1, #130	; 0x82
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f002 f869 	bl	800df38 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2200      	movs	r2, #0
 800be7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2200      	movs	r2, #0
 800be84:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	7c1b      	ldrb	r3, [r3, #16]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d109      	bne.n	800bea4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be9a:	2101      	movs	r1, #1
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f002 f9c5 	bl	800e22c <USBD_LL_PrepareReceive>
 800bea2:	e007      	b.n	800beb4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800beaa:	2340      	movs	r3, #64	; 0x40
 800beac:	2101      	movs	r1, #1
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f002 f9bc 	bl	800e22c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	460b      	mov	r3, r1
 800bec8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800beca:	2181      	movs	r1, #129	; 0x81
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f002 f871 	bl	800dfb4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bed8:	2101      	movs	r1, #1
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f002 f86a 	bl	800dfb4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bee8:	2182      	movs	r1, #130	; 0x82
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f002 f862 	bl	800dfb4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00e      	beq.n	800bf28 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f002 fa2e 	bl	800e37c <USBD_static_free>
    pdev->pClassData = NULL;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
	...

0800bf34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bf46:	2300      	movs	r3, #0
 800bf48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e0af      	b.n	800c0bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d03f      	beq.n	800bfe8 <USBD_CDC_Setup+0xb4>
 800bf68:	2b20      	cmp	r3, #32
 800bf6a:	f040 809f 	bne.w	800c0ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	88db      	ldrh	r3, [r3, #6]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d02e      	beq.n	800bfd4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	b25b      	sxtb	r3, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	da16      	bge.n	800bfae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	683a      	ldr	r2, [r7, #0]
 800bf8a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bf8c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	88d2      	ldrh	r2, [r2, #6]
 800bf92:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	88db      	ldrh	r3, [r3, #6]
 800bf98:	2b07      	cmp	r3, #7
 800bf9a:	bf28      	it	cs
 800bf9c:	2307      	movcs	r3, #7
 800bf9e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	89fa      	ldrh	r2, [r7, #14]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f001 fb13 	bl	800d5d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bfac:	e085      	b.n	800c0ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	785a      	ldrb	r2, [r3, #1]
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	88db      	ldrh	r3, [r3, #6]
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bfc4:	6939      	ldr	r1, [r7, #16]
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	88db      	ldrh	r3, [r3, #6]
 800bfca:	461a      	mov	r2, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f001 fb2c 	bl	800d62a <USBD_CtlPrepareRx>
      break;
 800bfd2:	e072      	b.n	800c0ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	7850      	ldrb	r0, [r2, #1]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	4798      	blx	r3
      break;
 800bfe6:	e068      	b.n	800c0ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	785b      	ldrb	r3, [r3, #1]
 800bfec:	2b0b      	cmp	r3, #11
 800bfee:	d852      	bhi.n	800c096 <USBD_CDC_Setup+0x162>
 800bff0:	a201      	add	r2, pc, #4	; (adr r2, 800bff8 <USBD_CDC_Setup+0xc4>)
 800bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c029 	.word	0x0800c029
 800bffc:	0800c0a5 	.word	0x0800c0a5
 800c000:	0800c097 	.word	0x0800c097
 800c004:	0800c097 	.word	0x0800c097
 800c008:	0800c097 	.word	0x0800c097
 800c00c:	0800c097 	.word	0x0800c097
 800c010:	0800c097 	.word	0x0800c097
 800c014:	0800c097 	.word	0x0800c097
 800c018:	0800c097 	.word	0x0800c097
 800c01c:	0800c097 	.word	0x0800c097
 800c020:	0800c053 	.word	0x0800c053
 800c024:	0800c07d 	.word	0x0800c07d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b03      	cmp	r3, #3
 800c032:	d107      	bne.n	800c044 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c034:	f107 030a 	add.w	r3, r7, #10
 800c038:	2202      	movs	r2, #2
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f001 fac8 	bl	800d5d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c042:	e032      	b.n	800c0aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f001 fa52 	bl	800d4f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800c04c:	2303      	movs	r3, #3
 800c04e:	75fb      	strb	r3, [r7, #23]
          break;
 800c050:	e02b      	b.n	800c0aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	2b03      	cmp	r3, #3
 800c05c:	d107      	bne.n	800c06e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c05e:	f107 030d 	add.w	r3, r7, #13
 800c062:	2201      	movs	r2, #1
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f001 fab3 	bl	800d5d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c06c:	e01d      	b.n	800c0aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c06e:	6839      	ldr	r1, [r7, #0]
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f001 fa3d 	bl	800d4f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800c076:	2303      	movs	r3, #3
 800c078:	75fb      	strb	r3, [r7, #23]
          break;
 800c07a:	e016      	b.n	800c0aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c082:	b2db      	uxtb	r3, r3
 800c084:	2b03      	cmp	r3, #3
 800c086:	d00f      	beq.n	800c0a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f001 fa30 	bl	800d4f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800c090:	2303      	movs	r3, #3
 800c092:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c094:	e008      	b.n	800c0a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 fa29 	bl	800d4f0 <USBD_CtlError>
          ret = USBD_FAIL;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	75fb      	strb	r3, [r7, #23]
          break;
 800c0a2:	e002      	b.n	800c0aa <USBD_CDC_Setup+0x176>
          break;
 800c0a4:	bf00      	nop
 800c0a6:	e008      	b.n	800c0ba <USBD_CDC_Setup+0x186>
          break;
 800c0a8:	bf00      	nop
      }
      break;
 800c0aa:	e006      	b.n	800c0ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c0ac:	6839      	ldr	r1, [r7, #0]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f001 fa1e 	bl	800d4f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	75fb      	strb	r3, [r7, #23]
      break;
 800c0b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800c0ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d101      	bne.n	800c0e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	e04f      	b.n	800c186 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c0ee:	78fa      	ldrb	r2, [r7, #3]
 800c0f0:	6879      	ldr	r1, [r7, #4]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	440b      	add	r3, r1
 800c0fc:	3318      	adds	r3, #24
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d029      	beq.n	800c158 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c104:	78fa      	ldrb	r2, [r7, #3]
 800c106:	6879      	ldr	r1, [r7, #4]
 800c108:	4613      	mov	r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	440b      	add	r3, r1
 800c112:	3318      	adds	r3, #24
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	78f9      	ldrb	r1, [r7, #3]
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	460b      	mov	r3, r1
 800c11c:	00db      	lsls	r3, r3, #3
 800c11e:	1a5b      	subs	r3, r3, r1
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4403      	add	r3, r0
 800c124:	3344      	adds	r3, #68	; 0x44
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	fbb2 f1f3 	udiv	r1, r2, r3
 800c12c:	fb03 f301 	mul.w	r3, r3, r1
 800c130:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c132:	2b00      	cmp	r3, #0
 800c134:	d110      	bne.n	800c158 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c136:	78fa      	ldrb	r2, [r7, #3]
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	4613      	mov	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4413      	add	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	440b      	add	r3, r1
 800c144:	3318      	adds	r3, #24
 800c146:	2200      	movs	r2, #0
 800c148:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c14a:	78f9      	ldrb	r1, [r7, #3]
 800c14c:	2300      	movs	r3, #0
 800c14e:	2200      	movs	r2, #0
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f002 f833 	bl	800e1bc <USBD_LL_Transmit>
 800c156:	e015      	b.n	800c184 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00b      	beq.n	800c184 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	68ba      	ldr	r2, [r7, #8]
 800c176:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c17a:	68ba      	ldr	r2, [r7, #8]
 800c17c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c180:	78fa      	ldrb	r2, [r7, #3]
 800c182:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	460b      	mov	r3, r1
 800c198:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d101      	bne.n	800c1b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1ac:	2303      	movs	r3, #3
 800c1ae:	e015      	b.n	800c1dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c1b0:	78fb      	ldrb	r3, [r7, #3]
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f002 f871 	bl	800e29c <USBD_LL_GetRxDataSize>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1c8:	68db      	ldr	r3, [r3, #12]
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c1fa:	2303      	movs	r3, #3
 800c1fc:	e01b      	b.n	800c236 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d015      	beq.n	800c234 <USBD_CDC_EP0_RxReady+0x50>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c20e:	2bff      	cmp	r3, #255	; 0xff
 800c210:	d010      	beq.n	800c234 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c220:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c228:	b292      	uxth	r2, r2
 800c22a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	22ff      	movs	r2, #255	; 0xff
 800c230:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
	...

0800c240 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2243      	movs	r2, #67	; 0x43
 800c24c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c24e:	4b03      	ldr	r3, [pc, #12]	; (800c25c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c250:	4618      	mov	r0, r3
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	20000094 	.word	0x20000094

0800c260 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2243      	movs	r2, #67	; 0x43
 800c26c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c26e:	4b03      	ldr	r3, [pc, #12]	; (800c27c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c270:	4618      	mov	r0, r3
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr
 800c27c:	20000050 	.word	0x20000050

0800c280 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2243      	movs	r2, #67	; 0x43
 800c28c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c28e:	4b03      	ldr	r3, [pc, #12]	; (800c29c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c290:	4618      	mov	r0, r3
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	200000d8 	.word	0x200000d8

0800c2a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	220a      	movs	r2, #10
 800c2ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c2ae:	4b03      	ldr	r3, [pc, #12]	; (800c2bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	2000000c 	.word	0x2000000c

0800c2c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d101      	bne.n	800c2d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	e004      	b.n	800c2de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b087      	sub	sp, #28
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d101      	bne.n	800c308 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c304:	2303      	movs	r3, #3
 800c306:	e008      	b.n	800c31a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c326:	b480      	push	{r7}
 800c328:	b085      	sub	sp, #20
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c336:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d101      	bne.n	800c342 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c33e:	2303      	movs	r3, #3
 800c340:	e004      	b.n	800c34c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3714      	adds	r7, #20
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c366:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d101      	bne.n	800c376 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c372:	2303      	movs	r3, #3
 800c374:	e016      	b.n	800c3a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7c1b      	ldrb	r3, [r3, #16]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d109      	bne.n	800c392 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c384:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c388:	2101      	movs	r1, #1
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f001 ff4e 	bl	800e22c <USBD_LL_PrepareReceive>
 800c390:	e007      	b.n	800c3a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c398:	2340      	movs	r3, #64	; 0x40
 800c39a:	2101      	movs	r1, #1
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f001 ff45 	bl	800e22c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	e01f      	b.n	800c404 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d003      	beq.n	800c3ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	79fa      	ldrb	r2, [r7, #7]
 800c3f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f001 fd21 	bl	800de40 <USBD_LL_Init>
 800c3fe:	4603      	mov	r3, r0
 800c400:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c402:	7dfb      	ldrb	r3, [r7, #23]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c416:	2300      	movs	r3, #0
 800c418:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c420:	2303      	movs	r3, #3
 800c422:	e016      	b.n	800c452 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00b      	beq.n	800c450 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	f107 020e 	add.w	r2, r7, #14
 800c444:	4610      	mov	r0, r2
 800c446:	4798      	blx	r3
 800c448:	4602      	mov	r2, r0
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b082      	sub	sp, #8
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f001 fd36 	bl	800ded4 <USBD_LL_Start>
 800c468:	4603      	mov	r3, r0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c472:	b480      	push	{r7}
 800c474:	b083      	sub	sp, #12
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	460b      	mov	r3, r1
 800c492:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c494:	2303      	movs	r3, #3
 800c496:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d009      	beq.n	800c4b6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	78fa      	ldrb	r2, [r7, #3]
 800c4ac:	4611      	mov	r1, r2
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	4798      	blx	r3
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d007      	beq.n	800c4e6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	78fa      	ldrb	r2, [r7, #3]
 800c4e0:	4611      	mov	r1, r2
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	4798      	blx	r3
  }

  return USBD_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	4618      	mov	r0, r3
 800c504:	f000 ffba 	bl	800d47c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c516:	461a      	mov	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c524:	f003 031f 	and.w	r3, r3, #31
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d01a      	beq.n	800c562 <USBD_LL_SetupStage+0x72>
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d822      	bhi.n	800c576 <USBD_LL_SetupStage+0x86>
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <USBD_LL_SetupStage+0x4a>
 800c534:	2b01      	cmp	r3, #1
 800c536:	d00a      	beq.n	800c54e <USBD_LL_SetupStage+0x5e>
 800c538:	e01d      	b.n	800c576 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fa62 	bl	800ca0c <USBD_StdDevReq>
 800c548:	4603      	mov	r3, r0
 800c54a:	73fb      	strb	r3, [r7, #15]
      break;
 800c54c:	e020      	b.n	800c590 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c554:	4619      	mov	r1, r3
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fac6 	bl	800cae8 <USBD_StdItfReq>
 800c55c:	4603      	mov	r3, r0
 800c55e:	73fb      	strb	r3, [r7, #15]
      break;
 800c560:	e016      	b.n	800c590 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c568:	4619      	mov	r1, r3
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 fb05 	bl	800cb7a <USBD_StdEPReq>
 800c570:	4603      	mov	r3, r0
 800c572:	73fb      	strb	r3, [r7, #15]
      break;
 800c574:	e00c      	b.n	800c590 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c57c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c580:	b2db      	uxtb	r3, r3
 800c582:	4619      	mov	r1, r3
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f001 fd4b 	bl	800e020 <USBD_LL_StallEP>
 800c58a:	4603      	mov	r3, r0
 800c58c:	73fb      	strb	r3, [r7, #15]
      break;
 800c58e:	bf00      	nop
  }

  return ret;
 800c590:	7bfb      	ldrb	r3, [r7, #15]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b086      	sub	sp, #24
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	607a      	str	r2, [r7, #4]
 800c5a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c5a8:	7afb      	ldrb	r3, [r7, #11]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d138      	bne.n	800c620 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c5b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c5bc:	2b03      	cmp	r3, #3
 800c5be:	d14a      	bne.n	800c656 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	689a      	ldr	r2, [r3, #8]
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d913      	bls.n	800c5f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	689a      	ldr	r2, [r3, #8]
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	1ad2      	subs	r2, r2, r3
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	68da      	ldr	r2, [r3, #12]
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	bf28      	it	cs
 800c5e6:	4613      	movcs	r3, r2
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	6879      	ldr	r1, [r7, #4]
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f001 f839 	bl	800d664 <USBD_CtlContinueRx>
 800c5f2:	e030      	b.n	800c656 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b03      	cmp	r3, #3
 800c5fe:	d10b      	bne.n	800c618 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c606:	691b      	ldr	r3, [r3, #16]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d005      	beq.n	800c618 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f001 f834 	bl	800d686 <USBD_CtlSendStatus>
 800c61e:	e01a      	b.n	800c656 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b03      	cmp	r3, #3
 800c62a:	d114      	bne.n	800c656 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00e      	beq.n	800c656 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	7afa      	ldrb	r2, [r7, #11]
 800c642:	4611      	mov	r1, r2
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	4798      	blx	r3
 800c648:	4603      	mov	r3, r0
 800c64a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c64c:	7dfb      	ldrb	r3, [r7, #23]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c652:	7dfb      	ldrb	r3, [r7, #23]
 800c654:	e000      	b.n	800c658 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	460b      	mov	r3, r1
 800c66a:	607a      	str	r2, [r7, #4]
 800c66c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c66e:	7afb      	ldrb	r3, [r7, #11]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d16b      	bne.n	800c74c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	3314      	adds	r3, #20
 800c678:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c680:	2b02      	cmp	r3, #2
 800c682:	d156      	bne.n	800c732 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	689a      	ldr	r2, [r3, #8]
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d914      	bls.n	800c6ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	689a      	ldr	r2, [r3, #8]
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	1ad2      	subs	r2, r2, r3
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	6879      	ldr	r1, [r7, #4]
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f000 ffae 	bl	800d608 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f001 fdba 	bl	800e22c <USBD_LL_PrepareReceive>
 800c6b8:	e03b      	b.n	800c732 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	68da      	ldr	r2, [r3, #12]
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d11c      	bne.n	800c700 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	685a      	ldr	r2, [r3, #4]
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d316      	bcc.n	800c700 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	685a      	ldr	r2, [r3, #4]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d20f      	bcs.n	800c700 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f000 ff8f 	bl	800d608 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	68f8      	ldr	r0, [r7, #12]
 800c6fa:	f001 fd97 	bl	800e22c <USBD_LL_PrepareReceive>
 800c6fe:	e018      	b.n	800c732 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c706:	b2db      	uxtb	r3, r3
 800c708:	2b03      	cmp	r3, #3
 800c70a:	d10b      	bne.n	800c724 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d005      	beq.n	800c724 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c724:	2180      	movs	r1, #128	; 0x80
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	f001 fc7a 	bl	800e020 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f000 ffbd 	bl	800d6ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d122      	bne.n	800c782 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f7ff fe98 	bl	800c472 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c74a:	e01a      	b.n	800c782 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c752:	b2db      	uxtb	r3, r3
 800c754:	2b03      	cmp	r3, #3
 800c756:	d114      	bne.n	800c782 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00e      	beq.n	800c782 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	7afa      	ldrb	r2, [r7, #11]
 800c76e:	4611      	mov	r1, r2
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	4798      	blx	r3
 800c774:	4603      	mov	r3, r0
 800c776:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c778:	7dfb      	ldrb	r3, [r7, #23]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c77e:	7dfb      	ldrb	r3, [r7, #23]
 800c780:	e000      	b.n	800c784 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	3718      	adds	r7, #24
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d101      	bne.n	800c7c0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e02f      	b.n	800c820 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00f      	beq.n	800c7ea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d009      	beq.n	800c7ea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	6852      	ldr	r2, [r2, #4]
 800c7e2:	b2d2      	uxtb	r2, r2
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c7ea:	2340      	movs	r3, #64	; 0x40
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f001 fba1 	bl	800df38 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2240      	movs	r2, #64	; 0x40
 800c802:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c806:	2340      	movs	r3, #64	; 0x40
 800c808:	2200      	movs	r2, #0
 800c80a:	2180      	movs	r1, #128	; 0x80
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f001 fb93 	bl	800df38 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2201      	movs	r2, #1
 800c816:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2240      	movs	r2, #64	; 0x40
 800c81c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3708      	adds	r7, #8
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	78fa      	ldrb	r2, [r7, #3]
 800c838:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c856:	b2da      	uxtb	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2204      	movs	r2, #4
 800c862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c882:	b2db      	uxtb	r3, r3
 800c884:	2b04      	cmp	r3, #4
 800c886:	d106      	bne.n	800c896 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d101      	bne.n	800c8ba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	e012      	b.n	800c8e0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d10b      	bne.n	800c8de <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8cc:	69db      	ldr	r3, [r3, #28]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d005      	beq.n	800c8de <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d8:	69db      	ldr	r3, [r3, #28]
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c8fe:	2303      	movs	r3, #3
 800c900:	e014      	b.n	800c92c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	d10d      	bne.n	800c92a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d007      	beq.n	800c92a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c920:	6a1b      	ldr	r3, [r3, #32]
 800c922:	78fa      	ldrb	r2, [r7, #3]
 800c924:	4611      	mov	r1, r2
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c92a:	2300      	movs	r3, #0
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c946:	2b00      	cmp	r3, #0
 800c948:	d101      	bne.n	800c94e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c94a:	2303      	movs	r3, #3
 800c94c:	e014      	b.n	800c978 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c954:	b2db      	uxtb	r3, r3
 800c956:	2b03      	cmp	r3, #3
 800c958:	d10d      	bne.n	800c976 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c962:	2b00      	cmp	r3, #0
 800c964:	d007      	beq.n	800c976 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96e:	78fa      	ldrb	r2, [r7, #3]
 800c970:	4611      	mov	r1, r2
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	370c      	adds	r7, #12
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr

0800c996 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b082      	sub	sp, #8
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d009      	beq.n	800c9c4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	6852      	ldr	r2, [r2, #4]
 800c9bc:	b2d2      	uxtb	r2, r2
 800c9be:	4611      	mov	r1, r2
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	4798      	blx	r3
  }

  return USBD_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b087      	sub	sp, #28
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c9ec:	8a3b      	ldrh	r3, [r7, #16]
 800c9ee:	021b      	lsls	r3, r3, #8
 800c9f0:	b21a      	sxth	r2, r3
 800c9f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	b21b      	sxth	r3, r3
 800c9fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c9fc:	89fb      	ldrh	r3, [r7, #14]
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	371c      	adds	r7, #28
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
	...

0800ca0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca16:	2300      	movs	r3, #0
 800ca18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca22:	2b40      	cmp	r3, #64	; 0x40
 800ca24:	d005      	beq.n	800ca32 <USBD_StdDevReq+0x26>
 800ca26:	2b40      	cmp	r3, #64	; 0x40
 800ca28:	d853      	bhi.n	800cad2 <USBD_StdDevReq+0xc6>
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00b      	beq.n	800ca46 <USBD_StdDevReq+0x3a>
 800ca2e:	2b20      	cmp	r3, #32
 800ca30:	d14f      	bne.n	800cad2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	4798      	blx	r3
 800ca40:	4603      	mov	r3, r0
 800ca42:	73fb      	strb	r3, [r7, #15]
      break;
 800ca44:	e04a      	b.n	800cadc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	785b      	ldrb	r3, [r3, #1]
 800ca4a:	2b09      	cmp	r3, #9
 800ca4c:	d83b      	bhi.n	800cac6 <USBD_StdDevReq+0xba>
 800ca4e:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <USBD_StdDevReq+0x48>)
 800ca50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca54:	0800caa9 	.word	0x0800caa9
 800ca58:	0800cabd 	.word	0x0800cabd
 800ca5c:	0800cac7 	.word	0x0800cac7
 800ca60:	0800cab3 	.word	0x0800cab3
 800ca64:	0800cac7 	.word	0x0800cac7
 800ca68:	0800ca87 	.word	0x0800ca87
 800ca6c:	0800ca7d 	.word	0x0800ca7d
 800ca70:	0800cac7 	.word	0x0800cac7
 800ca74:	0800ca9f 	.word	0x0800ca9f
 800ca78:	0800ca91 	.word	0x0800ca91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f000 f9de 	bl	800ce40 <USBD_GetDescriptor>
          break;
 800ca84:	e024      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 fb6d 	bl	800d168 <USBD_SetAddress>
          break;
 800ca8e:	e01f      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fbac 	bl	800d1f0 <USBD_SetConfig>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	73fb      	strb	r3, [r7, #15]
          break;
 800ca9c:	e018      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ca9e:	6839      	ldr	r1, [r7, #0]
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fc4b 	bl	800d33c <USBD_GetConfig>
          break;
 800caa6:	e013      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fc7c 	bl	800d3a8 <USBD_GetStatus>
          break;
 800cab0:	e00e      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fcab 	bl	800d410 <USBD_SetFeature>
          break;
 800caba:	e009      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cabc:	6839      	ldr	r1, [r7, #0]
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fcba 	bl	800d438 <USBD_ClrFeature>
          break;
 800cac4:	e004      	b.n	800cad0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cac6:	6839      	ldr	r1, [r7, #0]
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 fd11 	bl	800d4f0 <USBD_CtlError>
          break;
 800cace:	bf00      	nop
      }
      break;
 800cad0:	e004      	b.n	800cadc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fd0b 	bl	800d4f0 <USBD_CtlError>
      break;
 800cada:	bf00      	nop
  }

  return ret;
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop

0800cae8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cafe:	2b40      	cmp	r3, #64	; 0x40
 800cb00:	d005      	beq.n	800cb0e <USBD_StdItfReq+0x26>
 800cb02:	2b40      	cmp	r3, #64	; 0x40
 800cb04:	d82f      	bhi.n	800cb66 <USBD_StdItfReq+0x7e>
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <USBD_StdItfReq+0x26>
 800cb0a:	2b20      	cmp	r3, #32
 800cb0c:	d12b      	bne.n	800cb66 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	3b01      	subs	r3, #1
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d81d      	bhi.n	800cb58 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	889b      	ldrh	r3, [r3, #4]
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d813      	bhi.n	800cb4e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	6839      	ldr	r1, [r7, #0]
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	4798      	blx	r3
 800cb34:	4603      	mov	r3, r0
 800cb36:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	88db      	ldrh	r3, [r3, #6]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d110      	bne.n	800cb62 <USBD_StdItfReq+0x7a>
 800cb40:	7bfb      	ldrb	r3, [r7, #15]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10d      	bne.n	800cb62 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fd9d 	bl	800d686 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cb4c:	e009      	b.n	800cb62 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 fccd 	bl	800d4f0 <USBD_CtlError>
          break;
 800cb56:	e004      	b.n	800cb62 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cb58:	6839      	ldr	r1, [r7, #0]
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 fcc8 	bl	800d4f0 <USBD_CtlError>
          break;
 800cb60:	e000      	b.n	800cb64 <USBD_StdItfReq+0x7c>
          break;
 800cb62:	bf00      	nop
      }
      break;
 800cb64:	e004      	b.n	800cb70 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 fcc1 	bl	800d4f0 <USBD_CtlError>
      break;
 800cb6e:	bf00      	nop
  }

  return ret;
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b084      	sub	sp, #16
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
 800cb82:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	889b      	ldrh	r3, [r3, #4]
 800cb8c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb96:	2b40      	cmp	r3, #64	; 0x40
 800cb98:	d007      	beq.n	800cbaa <USBD_StdEPReq+0x30>
 800cb9a:	2b40      	cmp	r3, #64	; 0x40
 800cb9c:	f200 8145 	bhi.w	800ce2a <USBD_StdEPReq+0x2b0>
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00c      	beq.n	800cbbe <USBD_StdEPReq+0x44>
 800cba4:	2b20      	cmp	r3, #32
 800cba6:	f040 8140 	bne.w	800ce2a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbb0:	689b      	ldr	r3, [r3, #8]
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	4798      	blx	r3
 800cbb8:	4603      	mov	r3, r0
 800cbba:	73fb      	strb	r3, [r7, #15]
      break;
 800cbbc:	e13a      	b.n	800ce34 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	785b      	ldrb	r3, [r3, #1]
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d007      	beq.n	800cbd6 <USBD_StdEPReq+0x5c>
 800cbc6:	2b03      	cmp	r3, #3
 800cbc8:	f300 8129 	bgt.w	800ce1e <USBD_StdEPReq+0x2a4>
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d07f      	beq.n	800ccd0 <USBD_StdEPReq+0x156>
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d03c      	beq.n	800cc4e <USBD_StdEPReq+0xd4>
 800cbd4:	e123      	b.n	800ce1e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d002      	beq.n	800cbe8 <USBD_StdEPReq+0x6e>
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d016      	beq.n	800cc14 <USBD_StdEPReq+0x9a>
 800cbe6:	e02c      	b.n	800cc42 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00d      	beq.n	800cc0a <USBD_StdEPReq+0x90>
 800cbee:	7bbb      	ldrb	r3, [r7, #14]
 800cbf0:	2b80      	cmp	r3, #128	; 0x80
 800cbf2:	d00a      	beq.n	800cc0a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbf4:	7bbb      	ldrb	r3, [r7, #14]
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f001 fa11 	bl	800e020 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbfe:	2180      	movs	r1, #128	; 0x80
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f001 fa0d 	bl	800e020 <USBD_LL_StallEP>
 800cc06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc08:	e020      	b.n	800cc4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cc0a:	6839      	ldr	r1, [r7, #0]
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fc6f 	bl	800d4f0 <USBD_CtlError>
              break;
 800cc12:	e01b      	b.n	800cc4c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	885b      	ldrh	r3, [r3, #2]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10e      	bne.n	800cc3a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cc1c:	7bbb      	ldrb	r3, [r7, #14]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d00b      	beq.n	800cc3a <USBD_StdEPReq+0xc0>
 800cc22:	7bbb      	ldrb	r3, [r7, #14]
 800cc24:	2b80      	cmp	r3, #128	; 0x80
 800cc26:	d008      	beq.n	800cc3a <USBD_StdEPReq+0xc0>
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	88db      	ldrh	r3, [r3, #6]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d104      	bne.n	800cc3a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc30:	7bbb      	ldrb	r3, [r7, #14]
 800cc32:	4619      	mov	r1, r3
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f001 f9f3 	bl	800e020 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fd23 	bl	800d686 <USBD_CtlSendStatus>

              break;
 800cc40:	e004      	b.n	800cc4c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fc53 	bl	800d4f0 <USBD_CtlError>
              break;
 800cc4a:	bf00      	nop
          }
          break;
 800cc4c:	e0ec      	b.n	800ce28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d002      	beq.n	800cc60 <USBD_StdEPReq+0xe6>
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d016      	beq.n	800cc8c <USBD_StdEPReq+0x112>
 800cc5e:	e030      	b.n	800ccc2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc60:	7bbb      	ldrb	r3, [r7, #14]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00d      	beq.n	800cc82 <USBD_StdEPReq+0x108>
 800cc66:	7bbb      	ldrb	r3, [r7, #14]
 800cc68:	2b80      	cmp	r3, #128	; 0x80
 800cc6a:	d00a      	beq.n	800cc82 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f001 f9d5 	bl	800e020 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc76:	2180      	movs	r1, #128	; 0x80
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f001 f9d1 	bl	800e020 <USBD_LL_StallEP>
 800cc7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc80:	e025      	b.n	800ccce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cc82:	6839      	ldr	r1, [r7, #0]
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 fc33 	bl	800d4f0 <USBD_CtlError>
              break;
 800cc8a:	e020      	b.n	800ccce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	885b      	ldrh	r3, [r3, #2]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d11b      	bne.n	800cccc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc94:	7bbb      	ldrb	r3, [r7, #14]
 800cc96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d004      	beq.n	800cca8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
 800cca0:	4619      	mov	r1, r3
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f001 f9f2 	bl	800e08c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fcec 	bl	800d686 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccb4:	689b      	ldr	r3, [r3, #8]
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	4798      	blx	r3
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ccc0:	e004      	b.n	800cccc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fc13 	bl	800d4f0 <USBD_CtlError>
              break;
 800ccca:	e000      	b.n	800ccce <USBD_StdEPReq+0x154>
              break;
 800cccc:	bf00      	nop
          }
          break;
 800ccce:	e0ab      	b.n	800ce28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	2b02      	cmp	r3, #2
 800ccda:	d002      	beq.n	800cce2 <USBD_StdEPReq+0x168>
 800ccdc:	2b03      	cmp	r3, #3
 800ccde:	d032      	beq.n	800cd46 <USBD_StdEPReq+0x1cc>
 800cce0:	e097      	b.n	800ce12 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d007      	beq.n	800ccf8 <USBD_StdEPReq+0x17e>
 800cce8:	7bbb      	ldrb	r3, [r7, #14]
 800ccea:	2b80      	cmp	r3, #128	; 0x80
 800ccec:	d004      	beq.n	800ccf8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fbfd 	bl	800d4f0 <USBD_CtlError>
                break;
 800ccf6:	e091      	b.n	800ce1c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	da0b      	bge.n	800cd18 <USBD_StdEPReq+0x19e>
 800cd00:	7bbb      	ldrb	r3, [r7, #14]
 800cd02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd06:	4613      	mov	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	3310      	adds	r3, #16
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	4413      	add	r3, r2
 800cd14:	3304      	adds	r3, #4
 800cd16:	e00b      	b.n	800cd30 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd18:	7bbb      	ldrb	r3, [r7, #14]
 800cd1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd1e:	4613      	mov	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	3304      	adds	r3, #4
 800cd30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	2200      	movs	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	2202      	movs	r2, #2
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fc47 	bl	800d5d2 <USBD_CtlSendData>
              break;
 800cd44:	e06a      	b.n	800ce1c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	da11      	bge.n	800cd72 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd4e:	7bbb      	ldrb	r3, [r7, #14]
 800cd50:	f003 020f 	and.w	r2, r3, #15
 800cd54:	6879      	ldr	r1, [r7, #4]
 800cd56:	4613      	mov	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	4413      	add	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	440b      	add	r3, r1
 800cd60:	3324      	adds	r3, #36	; 0x24
 800cd62:	881b      	ldrh	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d117      	bne.n	800cd98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fbc0 	bl	800d4f0 <USBD_CtlError>
                  break;
 800cd70:	e054      	b.n	800ce1c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd72:	7bbb      	ldrb	r3, [r7, #14]
 800cd74:	f003 020f 	and.w	r2, r3, #15
 800cd78:	6879      	ldr	r1, [r7, #4]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	440b      	add	r3, r1
 800cd84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d104      	bne.n	800cd98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fbad 	bl	800d4f0 <USBD_CtlError>
                  break;
 800cd96:	e041      	b.n	800ce1c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	da0b      	bge.n	800cdb8 <USBD_StdEPReq+0x23e>
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
 800cda2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cda6:	4613      	mov	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4413      	add	r3, r2
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	3310      	adds	r3, #16
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	e00b      	b.n	800cdd0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cdb8:	7bbb      	ldrb	r3, [r7, #14]
 800cdba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	4413      	add	r3, r2
 800cdce:	3304      	adds	r3, #4
 800cdd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cdd2:	7bbb      	ldrb	r3, [r7, #14]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <USBD_StdEPReq+0x264>
 800cdd8:	7bbb      	ldrb	r3, [r7, #14]
 800cdda:	2b80      	cmp	r3, #128	; 0x80
 800cddc:	d103      	bne.n	800cde6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2200      	movs	r2, #0
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	e00e      	b.n	800ce04 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
 800cde8:	4619      	mov	r1, r3
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f001 f984 	bl	800e0f8 <USBD_LL_IsStallEP>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d003      	beq.n	800cdfe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	601a      	str	r2, [r3, #0]
 800cdfc:	e002      	b.n	800ce04 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	2200      	movs	r2, #0
 800ce02:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2202      	movs	r2, #2
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fbe1 	bl	800d5d2 <USBD_CtlSendData>
              break;
 800ce10:	e004      	b.n	800ce1c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ce12:	6839      	ldr	r1, [r7, #0]
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 fb6b 	bl	800d4f0 <USBD_CtlError>
              break;
 800ce1a:	bf00      	nop
          }
          break;
 800ce1c:	e004      	b.n	800ce28 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ce1e:	6839      	ldr	r1, [r7, #0]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 fb65 	bl	800d4f0 <USBD_CtlError>
          break;
 800ce26:	bf00      	nop
      }
      break;
 800ce28:	e004      	b.n	800ce34 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ce2a:	6839      	ldr	r1, [r7, #0]
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fb5f 	bl	800d4f0 <USBD_CtlError>
      break;
 800ce32:	bf00      	nop
  }

  return ret;
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce52:	2300      	movs	r3, #0
 800ce54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	885b      	ldrh	r3, [r3, #2]
 800ce5a:	0a1b      	lsrs	r3, r3, #8
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	2b0e      	cmp	r3, #14
 800ce62:	f200 8152 	bhi.w	800d10a <USBD_GetDescriptor+0x2ca>
 800ce66:	a201      	add	r2, pc, #4	; (adr r2, 800ce6c <USBD_GetDescriptor+0x2c>)
 800ce68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6c:	0800cedd 	.word	0x0800cedd
 800ce70:	0800cef5 	.word	0x0800cef5
 800ce74:	0800cf35 	.word	0x0800cf35
 800ce78:	0800d10b 	.word	0x0800d10b
 800ce7c:	0800d10b 	.word	0x0800d10b
 800ce80:	0800d0ab 	.word	0x0800d0ab
 800ce84:	0800d0d7 	.word	0x0800d0d7
 800ce88:	0800d10b 	.word	0x0800d10b
 800ce8c:	0800d10b 	.word	0x0800d10b
 800ce90:	0800d10b 	.word	0x0800d10b
 800ce94:	0800d10b 	.word	0x0800d10b
 800ce98:	0800d10b 	.word	0x0800d10b
 800ce9c:	0800d10b 	.word	0x0800d10b
 800cea0:	0800d10b 	.word	0x0800d10b
 800cea4:	0800cea9 	.word	0x0800cea9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceae:	69db      	ldr	r3, [r3, #28]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00b      	beq.n	800cecc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceba:	69db      	ldr	r3, [r3, #28]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	7c12      	ldrb	r2, [r2, #16]
 800cec0:	f107 0108 	add.w	r1, r7, #8
 800cec4:	4610      	mov	r0, r2
 800cec6:	4798      	blx	r3
 800cec8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ceca:	e126      	b.n	800d11a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cecc:	6839      	ldr	r1, [r7, #0]
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fb0e 	bl	800d4f0 <USBD_CtlError>
        err++;
 800ced4:	7afb      	ldrb	r3, [r7, #11]
 800ced6:	3301      	adds	r3, #1
 800ced8:	72fb      	strb	r3, [r7, #11]
      break;
 800ceda:	e11e      	b.n	800d11a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	687a      	ldr	r2, [r7, #4]
 800cee6:	7c12      	ldrb	r2, [r2, #16]
 800cee8:	f107 0108 	add.w	r1, r7, #8
 800ceec:	4610      	mov	r0, r2
 800ceee:	4798      	blx	r3
 800cef0:	60f8      	str	r0, [r7, #12]
      break;
 800cef2:	e112      	b.n	800d11a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	7c1b      	ldrb	r3, [r3, #16]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10d      	bne.n	800cf18 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf04:	f107 0208 	add.w	r2, r7, #8
 800cf08:	4610      	mov	r0, r2
 800cf0a:	4798      	blx	r3
 800cf0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3301      	adds	r3, #1
 800cf12:	2202      	movs	r2, #2
 800cf14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cf16:	e100      	b.n	800d11a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	f107 0208 	add.w	r2, r7, #8
 800cf24:	4610      	mov	r0, r2
 800cf26:	4798      	blx	r3
 800cf28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	2202      	movs	r2, #2
 800cf30:	701a      	strb	r2, [r3, #0]
      break;
 800cf32:	e0f2      	b.n	800d11a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	885b      	ldrh	r3, [r3, #2]
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b05      	cmp	r3, #5
 800cf3c:	f200 80ac 	bhi.w	800d098 <USBD_GetDescriptor+0x258>
 800cf40:	a201      	add	r2, pc, #4	; (adr r2, 800cf48 <USBD_GetDescriptor+0x108>)
 800cf42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf46:	bf00      	nop
 800cf48:	0800cf61 	.word	0x0800cf61
 800cf4c:	0800cf95 	.word	0x0800cf95
 800cf50:	0800cfc9 	.word	0x0800cfc9
 800cf54:	0800cffd 	.word	0x0800cffd
 800cf58:	0800d031 	.word	0x0800d031
 800cf5c:	0800d065 	.word	0x0800d065
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00b      	beq.n	800cf84 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	7c12      	ldrb	r2, [r2, #16]
 800cf78:	f107 0108 	add.w	r1, r7, #8
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	4798      	blx	r3
 800cf80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf82:	e091      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fab2 	bl	800d4f0 <USBD_CtlError>
            err++;
 800cf8c:	7afb      	ldrb	r3, [r7, #11]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	72fb      	strb	r3, [r7, #11]
          break;
 800cf92:	e089      	b.n	800d0a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00b      	beq.n	800cfb8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	7c12      	ldrb	r2, [r2, #16]
 800cfac:	f107 0108 	add.w	r1, r7, #8
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	4798      	blx	r3
 800cfb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfb6:	e077      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fa98 	bl	800d4f0 <USBD_CtlError>
            err++;
 800cfc0:	7afb      	ldrb	r3, [r7, #11]
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	72fb      	strb	r3, [r7, #11]
          break;
 800cfc6:	e06f      	b.n	800d0a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00b      	beq.n	800cfec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	7c12      	ldrb	r2, [r2, #16]
 800cfe0:	f107 0108 	add.w	r1, r7, #8
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	4798      	blx	r3
 800cfe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfea:	e05d      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfec:	6839      	ldr	r1, [r7, #0]
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 fa7e 	bl	800d4f0 <USBD_CtlError>
            err++;
 800cff4:	7afb      	ldrb	r3, [r7, #11]
 800cff6:	3301      	adds	r3, #1
 800cff8:	72fb      	strb	r3, [r7, #11]
          break;
 800cffa:	e055      	b.n	800d0a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00b      	beq.n	800d020 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	7c12      	ldrb	r2, [r2, #16]
 800d014:	f107 0108 	add.w	r1, r7, #8
 800d018:	4610      	mov	r0, r2
 800d01a:	4798      	blx	r3
 800d01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d01e:	e043      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fa64 	bl	800d4f0 <USBD_CtlError>
            err++;
 800d028:	7afb      	ldrb	r3, [r7, #11]
 800d02a:	3301      	adds	r3, #1
 800d02c:	72fb      	strb	r3, [r7, #11]
          break;
 800d02e:	e03b      	b.n	800d0a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d036:	695b      	ldr	r3, [r3, #20]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00b      	beq.n	800d054 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	7c12      	ldrb	r2, [r2, #16]
 800d048:	f107 0108 	add.w	r1, r7, #8
 800d04c:	4610      	mov	r0, r2
 800d04e:	4798      	blx	r3
 800d050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d052:	e029      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 fa4a 	bl	800d4f0 <USBD_CtlError>
            err++;
 800d05c:	7afb      	ldrb	r3, [r7, #11]
 800d05e:	3301      	adds	r3, #1
 800d060:	72fb      	strb	r3, [r7, #11]
          break;
 800d062:	e021      	b.n	800d0a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00b      	beq.n	800d088 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	7c12      	ldrb	r2, [r2, #16]
 800d07c:	f107 0108 	add.w	r1, r7, #8
 800d080:	4610      	mov	r0, r2
 800d082:	4798      	blx	r3
 800d084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d086:	e00f      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 fa30 	bl	800d4f0 <USBD_CtlError>
            err++;
 800d090:	7afb      	ldrb	r3, [r7, #11]
 800d092:	3301      	adds	r3, #1
 800d094:	72fb      	strb	r3, [r7, #11]
          break;
 800d096:	e007      	b.n	800d0a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 fa28 	bl	800d4f0 <USBD_CtlError>
          err++;
 800d0a0:	7afb      	ldrb	r3, [r7, #11]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d0a6:	bf00      	nop
      }
      break;
 800d0a8:	e037      	b.n	800d11a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	7c1b      	ldrb	r3, [r3, #16]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d109      	bne.n	800d0c6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ba:	f107 0208 	add.w	r2, r7, #8
 800d0be:	4610      	mov	r0, r2
 800d0c0:	4798      	blx	r3
 800d0c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0c4:	e029      	b.n	800d11a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fa11 	bl	800d4f0 <USBD_CtlError>
        err++;
 800d0ce:	7afb      	ldrb	r3, [r7, #11]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	72fb      	strb	r3, [r7, #11]
      break;
 800d0d4:	e021      	b.n	800d11a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	7c1b      	ldrb	r3, [r3, #16]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10d      	bne.n	800d0fa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e6:	f107 0208 	add.w	r2, r7, #8
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	4798      	blx	r3
 800d0ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	2207      	movs	r2, #7
 800d0f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0f8:	e00f      	b.n	800d11a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0fa:	6839      	ldr	r1, [r7, #0]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 f9f7 	bl	800d4f0 <USBD_CtlError>
        err++;
 800d102:	7afb      	ldrb	r3, [r7, #11]
 800d104:	3301      	adds	r3, #1
 800d106:	72fb      	strb	r3, [r7, #11]
      break;
 800d108:	e007      	b.n	800d11a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d10a:	6839      	ldr	r1, [r7, #0]
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 f9ef 	bl	800d4f0 <USBD_CtlError>
      err++;
 800d112:	7afb      	ldrb	r3, [r7, #11]
 800d114:	3301      	adds	r3, #1
 800d116:	72fb      	strb	r3, [r7, #11]
      break;
 800d118:	bf00      	nop
  }

  if (err != 0U)
 800d11a:	7afb      	ldrb	r3, [r7, #11]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d11e      	bne.n	800d15e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	88db      	ldrh	r3, [r3, #6]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d016      	beq.n	800d156 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d128:	893b      	ldrh	r3, [r7, #8]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00e      	beq.n	800d14c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	88da      	ldrh	r2, [r3, #6]
 800d132:	893b      	ldrh	r3, [r7, #8]
 800d134:	4293      	cmp	r3, r2
 800d136:	bf28      	it	cs
 800d138:	4613      	movcs	r3, r2
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d13e:	893b      	ldrh	r3, [r7, #8]
 800d140:	461a      	mov	r2, r3
 800d142:	68f9      	ldr	r1, [r7, #12]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 fa44 	bl	800d5d2 <USBD_CtlSendData>
 800d14a:	e009      	b.n	800d160 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f9ce 	bl	800d4f0 <USBD_CtlError>
 800d154:	e004      	b.n	800d160 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fa95 	bl	800d686 <USBD_CtlSendStatus>
 800d15c:	e000      	b.n	800d160 <USBD_GetDescriptor+0x320>
    return;
 800d15e:	bf00      	nop
  }
}
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop

0800d168 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	889b      	ldrh	r3, [r3, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d131      	bne.n	800d1de <USBD_SetAddress+0x76>
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	88db      	ldrh	r3, [r3, #6]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d12d      	bne.n	800d1de <USBD_SetAddress+0x76>
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	885b      	ldrh	r3, [r3, #2]
 800d186:	2b7f      	cmp	r3, #127	; 0x7f
 800d188:	d829      	bhi.n	800d1de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	885b      	ldrh	r3, [r3, #2]
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d194:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	2b03      	cmp	r3, #3
 800d1a0:	d104      	bne.n	800d1ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d1a2:	6839      	ldr	r1, [r7, #0]
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 f9a3 	bl	800d4f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1aa:	e01d      	b.n	800d1e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	7bfa      	ldrb	r2, [r7, #15]
 800d1b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 ffc9 	bl	800e150 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 fa61 	bl	800d686 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d004      	beq.n	800d1d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2202      	movs	r2, #2
 800d1ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1d2:	e009      	b.n	800d1e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1dc:	e004      	b.n	800d1e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f985 	bl	800d4f0 <USBD_CtlError>
  }
}
 800d1e6:	bf00      	nop
 800d1e8:	bf00      	nop
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	885b      	ldrh	r3, [r3, #2]
 800d202:	b2da      	uxtb	r2, r3
 800d204:	4b4c      	ldr	r3, [pc, #304]	; (800d338 <USBD_SetConfig+0x148>)
 800d206:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d208:	4b4b      	ldr	r3, [pc, #300]	; (800d338 <USBD_SetConfig+0x148>)
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d905      	bls.n	800d21c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d210:	6839      	ldr	r1, [r7, #0]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f96c 	bl	800d4f0 <USBD_CtlError>
    return USBD_FAIL;
 800d218:	2303      	movs	r3, #3
 800d21a:	e088      	b.n	800d32e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b02      	cmp	r3, #2
 800d226:	d002      	beq.n	800d22e <USBD_SetConfig+0x3e>
 800d228:	2b03      	cmp	r3, #3
 800d22a:	d025      	beq.n	800d278 <USBD_SetConfig+0x88>
 800d22c:	e071      	b.n	800d312 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d22e:	4b42      	ldr	r3, [pc, #264]	; (800d338 <USBD_SetConfig+0x148>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d01c      	beq.n	800d270 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d236:	4b40      	ldr	r3, [pc, #256]	; (800d338 <USBD_SetConfig+0x148>)
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d240:	4b3d      	ldr	r3, [pc, #244]	; (800d338 <USBD_SetConfig+0x148>)
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	4619      	mov	r1, r3
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff f91e 	bl	800c488 <USBD_SetClassConfig>
 800d24c:	4603      	mov	r3, r0
 800d24e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d250:	7bfb      	ldrb	r3, [r7, #15]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d004      	beq.n	800d260 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f949 	bl	800d4f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d25e:	e065      	b.n	800d32c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 fa10 	bl	800d686 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2203      	movs	r2, #3
 800d26a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d26e:	e05d      	b.n	800d32c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 fa08 	bl	800d686 <USBD_CtlSendStatus>
      break;
 800d276:	e059      	b.n	800d32c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d278:	4b2f      	ldr	r3, [pc, #188]	; (800d338 <USBD_SetConfig+0x148>)
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d112      	bne.n	800d2a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2202      	movs	r2, #2
 800d284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d288:	4b2b      	ldr	r3, [pc, #172]	; (800d338 <USBD_SetConfig+0x148>)
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	461a      	mov	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d292:	4b29      	ldr	r3, [pc, #164]	; (800d338 <USBD_SetConfig+0x148>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	4619      	mov	r1, r3
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f7ff f911 	bl	800c4c0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 f9f1 	bl	800d686 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d2a4:	e042      	b.n	800d32c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d2a6:	4b24      	ldr	r3, [pc, #144]	; (800d338 <USBD_SetConfig+0x148>)
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d02a      	beq.n	800d30a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7ff f8ff 	bl	800c4c0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d2c2:	4b1d      	ldr	r3, [pc, #116]	; (800d338 <USBD_SetConfig+0x148>)
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	461a      	mov	r2, r3
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d2cc:	4b1a      	ldr	r3, [pc, #104]	; (800d338 <USBD_SetConfig+0x148>)
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7ff f8d8 	bl	800c488 <USBD_SetClassConfig>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d2dc:	7bfb      	ldrb	r3, [r7, #15]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00f      	beq.n	800d302 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f903 	bl	800d4f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7ff f8e4 	bl	800c4c0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d300:	e014      	b.n	800d32c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 f9bf 	bl	800d686 <USBD_CtlSendStatus>
      break;
 800d308:	e010      	b.n	800d32c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f9bb 	bl	800d686 <USBD_CtlSendStatus>
      break;
 800d310:	e00c      	b.n	800d32c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d312:	6839      	ldr	r1, [r7, #0]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f8eb 	bl	800d4f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d31a:	4b07      	ldr	r3, [pc, #28]	; (800d338 <USBD_SetConfig+0x148>)
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7ff f8cd 	bl	800c4c0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d326:	2303      	movs	r3, #3
 800d328:	73fb      	strb	r3, [r7, #15]
      break;
 800d32a:	bf00      	nop
  }

  return ret;
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3710      	adds	r7, #16
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	200001e0 	.word	0x200001e0

0800d33c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	88db      	ldrh	r3, [r3, #6]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d004      	beq.n	800d358 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d34e:	6839      	ldr	r1, [r7, #0]
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f8cd 	bl	800d4f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d356:	e023      	b.n	800d3a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	2b02      	cmp	r3, #2
 800d362:	dc02      	bgt.n	800d36a <USBD_GetConfig+0x2e>
 800d364:	2b00      	cmp	r3, #0
 800d366:	dc03      	bgt.n	800d370 <USBD_GetConfig+0x34>
 800d368:	e015      	b.n	800d396 <USBD_GetConfig+0x5a>
 800d36a:	2b03      	cmp	r3, #3
 800d36c:	d00b      	beq.n	800d386 <USBD_GetConfig+0x4a>
 800d36e:	e012      	b.n	800d396 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	3308      	adds	r3, #8
 800d37a:	2201      	movs	r2, #1
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f927 	bl	800d5d2 <USBD_CtlSendData>
        break;
 800d384:	e00c      	b.n	800d3a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	3304      	adds	r3, #4
 800d38a:	2201      	movs	r2, #1
 800d38c:	4619      	mov	r1, r3
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f91f 	bl	800d5d2 <USBD_CtlSendData>
        break;
 800d394:	e004      	b.n	800d3a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d396:	6839      	ldr	r1, [r7, #0]
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f8a9 	bl	800d4f0 <USBD_CtlError>
        break;
 800d39e:	bf00      	nop
}
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	3b01      	subs	r3, #1
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d81e      	bhi.n	800d3fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	88db      	ldrh	r3, [r3, #6]
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d004      	beq.n	800d3d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d3c8:	6839      	ldr	r1, [r7, #0]
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f890 	bl	800d4f0 <USBD_CtlError>
        break;
 800d3d0:	e01a      	b.n	800d408 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d005      	beq.n	800d3ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	f043 0202 	orr.w	r2, r3, #2
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	330c      	adds	r3, #12
 800d3f2:	2202      	movs	r2, #2
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f8eb 	bl	800d5d2 <USBD_CtlSendData>
      break;
 800d3fc:	e004      	b.n	800d408 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 f875 	bl	800d4f0 <USBD_CtlError>
      break;
 800d406:	bf00      	nop
  }
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	885b      	ldrh	r3, [r3, #2]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d106      	bne.n	800d430 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f92b 	bl	800d686 <USBD_CtlSendStatus>
  }
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	3b01      	subs	r3, #1
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	d80b      	bhi.n	800d468 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	885b      	ldrh	r3, [r3, #2]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d10c      	bne.n	800d472 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 f910 	bl	800d686 <USBD_CtlSendStatus>
      }
      break;
 800d466:	e004      	b.n	800d472 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d468:	6839      	ldr	r1, [r7, #0]
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f840 	bl	800d4f0 <USBD_CtlError>
      break;
 800d470:	e000      	b.n	800d474 <USBD_ClrFeature+0x3c>
      break;
 800d472:	bf00      	nop
  }
}
 800d474:	bf00      	nop
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	781a      	ldrb	r2, [r3, #0]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3301      	adds	r3, #1
 800d496:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	781a      	ldrb	r2, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f7ff fa91 	bl	800c9ce <SWAPBYTE>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f7ff fa84 	bl	800c9ce <SWAPBYTE>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d4da:	68f8      	ldr	r0, [r7, #12]
 800d4dc:	f7ff fa77 	bl	800c9ce <SWAPBYTE>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	80da      	strh	r2, [r3, #6]
}
 800d4e8:	bf00      	nop
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4fa:	2180      	movs	r1, #128	; 0x80
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 fd8f 	bl	800e020 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d502:	2100      	movs	r1, #0
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fd8b 	bl	800e020 <USBD_LL_StallEP>
}
 800d50a:	bf00      	nop
 800d50c:	3708      	adds	r7, #8
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b086      	sub	sp, #24
 800d516:	af00      	add	r7, sp, #0
 800d518:	60f8      	str	r0, [r7, #12]
 800d51a:	60b9      	str	r1, [r7, #8]
 800d51c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d51e:	2300      	movs	r3, #0
 800d520:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d036      	beq.n	800d596 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d52c:	6938      	ldr	r0, [r7, #16]
 800d52e:	f000 f836 	bl	800d59e <USBD_GetLen>
 800d532:	4603      	mov	r3, r0
 800d534:	3301      	adds	r3, #1
 800d536:	b29b      	uxth	r3, r3
 800d538:	005b      	lsls	r3, r3, #1
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d540:	7dfb      	ldrb	r3, [r7, #23]
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	4413      	add	r3, r2
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	7812      	ldrb	r2, [r2, #0]
 800d54a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d54c:	7dfb      	ldrb	r3, [r7, #23]
 800d54e:	3301      	adds	r3, #1
 800d550:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d552:	7dfb      	ldrb	r3, [r7, #23]
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	4413      	add	r3, r2
 800d558:	2203      	movs	r2, #3
 800d55a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d55c:	7dfb      	ldrb	r3, [r7, #23]
 800d55e:	3301      	adds	r3, #1
 800d560:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d562:	e013      	b.n	800d58c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d564:	7dfb      	ldrb	r3, [r7, #23]
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	4413      	add	r3, r2
 800d56a:	693a      	ldr	r2, [r7, #16]
 800d56c:	7812      	ldrb	r2, [r2, #0]
 800d56e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	3301      	adds	r3, #1
 800d574:	613b      	str	r3, [r7, #16]
    idx++;
 800d576:	7dfb      	ldrb	r3, [r7, #23]
 800d578:	3301      	adds	r3, #1
 800d57a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
 800d57e:	68ba      	ldr	r2, [r7, #8]
 800d580:	4413      	add	r3, r2
 800d582:	2200      	movs	r2, #0
 800d584:	701a      	strb	r2, [r3, #0]
    idx++;
 800d586:	7dfb      	ldrb	r3, [r7, #23]
 800d588:	3301      	adds	r3, #1
 800d58a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1e7      	bne.n	800d564 <USBD_GetString+0x52>
 800d594:	e000      	b.n	800d598 <USBD_GetString+0x86>
    return;
 800d596:	bf00      	nop
  }
}
 800d598:	3718      	adds	r7, #24
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d59e:	b480      	push	{r7}
 800d5a0:	b085      	sub	sp, #20
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d5ae:	e005      	b.n	800d5bc <USBD_GetLen+0x1e>
  {
    len++;
 800d5b0:	7bfb      	ldrb	r3, [r7, #15]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1f5      	bne.n	800d5b0 <USBD_GetLen+0x12>
  }

  return len;
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b084      	sub	sp, #16
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	60f8      	str	r0, [r7, #12]
 800d5da:	60b9      	str	r1, [r7, #8]
 800d5dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2202      	movs	r2, #2
 800d5e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f000 fddf 	bl	800e1bc <USBD_LL_Transmit>

  return USBD_OK;
 800d5fe:	2300      	movs	r3, #0
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	60b9      	str	r1, [r7, #8]
 800d612:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	2100      	movs	r1, #0
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f000 fdce 	bl	800e1bc <USBD_LL_Transmit>

  return USBD_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b084      	sub	sp, #16
 800d62e:	af00      	add	r7, sp, #0
 800d630:	60f8      	str	r0, [r7, #12]
 800d632:	60b9      	str	r1, [r7, #8]
 800d634:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2203      	movs	r2, #3
 800d63a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	2100      	movs	r1, #0
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f000 fde9 	bl	800e22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	2100      	movs	r1, #0
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f000 fdd8 	bl	800e22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d67c:	2300      	movs	r3, #0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b082      	sub	sp, #8
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2204      	movs	r2, #4
 800d692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d696:	2300      	movs	r3, #0
 800d698:	2200      	movs	r2, #0
 800d69a:	2100      	movs	r1, #0
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 fd8d 	bl	800e1bc <USBD_LL_Transmit>

  return USBD_OK;
 800d6a2:	2300      	movs	r3, #0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2205      	movs	r2, #5
 800d6b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6bc:	2300      	movs	r3, #0
 800d6be:	2200      	movs	r2, #0
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 fdb2 	bl	800e22c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
	...

0800d6d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b087      	sub	sp, #28
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6ea:	4b1f      	ldr	r3, [pc, #124]	; (800d768 <FATFS_LinkDriverEx+0x94>)
 800d6ec:	7a5b      	ldrb	r3, [r3, #9]
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d131      	bne.n	800d758 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6f4:	4b1c      	ldr	r3, [pc, #112]	; (800d768 <FATFS_LinkDriverEx+0x94>)
 800d6f6:	7a5b      	ldrb	r3, [r3, #9]
 800d6f8:	b2db      	uxtb	r3, r3
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	4b1a      	ldr	r3, [pc, #104]	; (800d768 <FATFS_LinkDriverEx+0x94>)
 800d6fe:	2100      	movs	r1, #0
 800d700:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d702:	4b19      	ldr	r3, [pc, #100]	; (800d768 <FATFS_LinkDriverEx+0x94>)
 800d704:	7a5b      	ldrb	r3, [r3, #9]
 800d706:	b2db      	uxtb	r3, r3
 800d708:	4a17      	ldr	r2, [pc, #92]	; (800d768 <FATFS_LinkDriverEx+0x94>)
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	4413      	add	r3, r2
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d712:	4b15      	ldr	r3, [pc, #84]	; (800d768 <FATFS_LinkDriverEx+0x94>)
 800d714:	7a5b      	ldrb	r3, [r3, #9]
 800d716:	b2db      	uxtb	r3, r3
 800d718:	461a      	mov	r2, r3
 800d71a:	4b13      	ldr	r3, [pc, #76]	; (800d768 <FATFS_LinkDriverEx+0x94>)
 800d71c:	4413      	add	r3, r2
 800d71e:	79fa      	ldrb	r2, [r7, #7]
 800d720:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d722:	4b11      	ldr	r3, [pc, #68]	; (800d768 <FATFS_LinkDriverEx+0x94>)
 800d724:	7a5b      	ldrb	r3, [r3, #9]
 800d726:	b2db      	uxtb	r3, r3
 800d728:	1c5a      	adds	r2, r3, #1
 800d72a:	b2d1      	uxtb	r1, r2
 800d72c:	4a0e      	ldr	r2, [pc, #56]	; (800d768 <FATFS_LinkDriverEx+0x94>)
 800d72e:	7251      	strb	r1, [r2, #9]
 800d730:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d732:	7dbb      	ldrb	r3, [r7, #22]
 800d734:	3330      	adds	r3, #48	; 0x30
 800d736:	b2da      	uxtb	r2, r3
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	3301      	adds	r3, #1
 800d740:	223a      	movs	r2, #58	; 0x3a
 800d742:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	3302      	adds	r3, #2
 800d748:	222f      	movs	r2, #47	; 0x2f
 800d74a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	3303      	adds	r3, #3
 800d750:	2200      	movs	r2, #0
 800d752:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d754:	2300      	movs	r3, #0
 800d756:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d758:	7dfb      	ldrb	r3, [r7, #23]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	371c      	adds	r7, #28
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	200001e4 	.word	0x200001e4

0800d76c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d776:	2200      	movs	r2, #0
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7ff ffaa 	bl	800d6d4 <FATFS_LinkDriverEx>
 800d780:	4603      	mov	r3, r0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
	...

0800d78c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d790:	2200      	movs	r2, #0
 800d792:	4912      	ldr	r1, [pc, #72]	; (800d7dc <MX_USB_DEVICE_Init+0x50>)
 800d794:	4812      	ldr	r0, [pc, #72]	; (800d7e0 <MX_USB_DEVICE_Init+0x54>)
 800d796:	f7fe fe09 	bl	800c3ac <USBD_Init>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d7a0:	f7f3 fad4 	bl	8000d4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d7a4:	490f      	ldr	r1, [pc, #60]	; (800d7e4 <MX_USB_DEVICE_Init+0x58>)
 800d7a6:	480e      	ldr	r0, [pc, #56]	; (800d7e0 <MX_USB_DEVICE_Init+0x54>)
 800d7a8:	f7fe fe30 	bl	800c40c <USBD_RegisterClass>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d001      	beq.n	800d7b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d7b2:	f7f3 facb 	bl	8000d4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d7b6:	490c      	ldr	r1, [pc, #48]	; (800d7e8 <MX_USB_DEVICE_Init+0x5c>)
 800d7b8:	4809      	ldr	r0, [pc, #36]	; (800d7e0 <MX_USB_DEVICE_Init+0x54>)
 800d7ba:	f7fe fd81 	bl	800c2c0 <USBD_CDC_RegisterInterface>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d7c4:	f7f3 fac2 	bl	8000d4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d7c8:	4805      	ldr	r0, [pc, #20]	; (800d7e0 <MX_USB_DEVICE_Init+0x54>)
 800d7ca:	f7fe fe46 	bl	800c45a <USBD_Start>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d7d4:	f7f3 faba 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d7d8:	bf00      	nop
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	20000130 	.word	0x20000130
 800d7e0:	20000d20 	.word	0x20000d20
 800d7e4:	20000018 	.word	0x20000018
 800d7e8:	2000011c 	.word	0x2000011c

0800d7ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	4905      	ldr	r1, [pc, #20]	; (800d808 <CDC_Init_FS+0x1c>)
 800d7f4:	4805      	ldr	r0, [pc, #20]	; (800d80c <CDC_Init_FS+0x20>)
 800d7f6:	f7fe fd78 	bl	800c2ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d7fa:	4905      	ldr	r1, [pc, #20]	; (800d810 <CDC_Init_FS+0x24>)
 800d7fc:	4803      	ldr	r0, [pc, #12]	; (800d80c <CDC_Init_FS+0x20>)
 800d7fe:	f7fe fd92 	bl	800c326 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d802:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d804:	4618      	mov	r0, r3
 800d806:	bd80      	pop	{r7, pc}
 800d808:	200017f0 	.word	0x200017f0
 800d80c:	20000d20 	.word	0x20000d20
 800d810:	20000ff0 	.word	0x20000ff0

0800d814 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d818:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	6039      	str	r1, [r7, #0]
 800d82e:	71fb      	strb	r3, [r7, #7]
 800d830:	4613      	mov	r3, r2
 800d832:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d834:	79fb      	ldrb	r3, [r7, #7]
 800d836:	2b23      	cmp	r3, #35	; 0x23
 800d838:	d84a      	bhi.n	800d8d0 <CDC_Control_FS+0xac>
 800d83a:	a201      	add	r2, pc, #4	; (adr r2, 800d840 <CDC_Control_FS+0x1c>)
 800d83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d840:	0800d8d1 	.word	0x0800d8d1
 800d844:	0800d8d1 	.word	0x0800d8d1
 800d848:	0800d8d1 	.word	0x0800d8d1
 800d84c:	0800d8d1 	.word	0x0800d8d1
 800d850:	0800d8d1 	.word	0x0800d8d1
 800d854:	0800d8d1 	.word	0x0800d8d1
 800d858:	0800d8d1 	.word	0x0800d8d1
 800d85c:	0800d8d1 	.word	0x0800d8d1
 800d860:	0800d8d1 	.word	0x0800d8d1
 800d864:	0800d8d1 	.word	0x0800d8d1
 800d868:	0800d8d1 	.word	0x0800d8d1
 800d86c:	0800d8d1 	.word	0x0800d8d1
 800d870:	0800d8d1 	.word	0x0800d8d1
 800d874:	0800d8d1 	.word	0x0800d8d1
 800d878:	0800d8d1 	.word	0x0800d8d1
 800d87c:	0800d8d1 	.word	0x0800d8d1
 800d880:	0800d8d1 	.word	0x0800d8d1
 800d884:	0800d8d1 	.word	0x0800d8d1
 800d888:	0800d8d1 	.word	0x0800d8d1
 800d88c:	0800d8d1 	.word	0x0800d8d1
 800d890:	0800d8d1 	.word	0x0800d8d1
 800d894:	0800d8d1 	.word	0x0800d8d1
 800d898:	0800d8d1 	.word	0x0800d8d1
 800d89c:	0800d8d1 	.word	0x0800d8d1
 800d8a0:	0800d8d1 	.word	0x0800d8d1
 800d8a4:	0800d8d1 	.word	0x0800d8d1
 800d8a8:	0800d8d1 	.word	0x0800d8d1
 800d8ac:	0800d8d1 	.word	0x0800d8d1
 800d8b0:	0800d8d1 	.word	0x0800d8d1
 800d8b4:	0800d8d1 	.word	0x0800d8d1
 800d8b8:	0800d8d1 	.word	0x0800d8d1
 800d8bc:	0800d8d1 	.word	0x0800d8d1
 800d8c0:	0800d8d1 	.word	0x0800d8d1
 800d8c4:	0800d8d1 	.word	0x0800d8d1
 800d8c8:	0800d8d1 	.word	0x0800d8d1
 800d8cc:	0800d8d1 	.word	0x0800d8d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d8d0:	bf00      	nop
  }

  return (USBD_OK);
 800d8d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d8ea:	6879      	ldr	r1, [r7, #4]
 800d8ec:	4805      	ldr	r0, [pc, #20]	; (800d904 <CDC_Receive_FS+0x24>)
 800d8ee:	f7fe fd1a 	bl	800c326 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d8f2:	4804      	ldr	r0, [pc, #16]	; (800d904 <CDC_Receive_FS+0x24>)
 800d8f4:	f7fe fd30 	bl	800c358 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d8f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	20000d20 	.word	0x20000d20

0800d908 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d908:	b480      	push	{r7}
 800d90a:	b087      	sub	sp, #28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	4613      	mov	r3, r2
 800d914:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d91a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	371c      	adds	r7, #28
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
	...

0800d92c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	4603      	mov	r3, r0
 800d934:	6039      	str	r1, [r7, #0]
 800d936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	2212      	movs	r2, #18
 800d93c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d93e:	4b03      	ldr	r3, [pc, #12]	; (800d94c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d940:	4618      	mov	r0, r3
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	20000150 	.word	0x20000150

0800d950 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	4603      	mov	r3, r0
 800d958:	6039      	str	r1, [r7, #0]
 800d95a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	2204      	movs	r2, #4
 800d960:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d962:	4b03      	ldr	r3, [pc, #12]	; (800d970 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d964:	4618      	mov	r0, r3
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr
 800d970:	20000170 	.word	0x20000170

0800d974 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	4603      	mov	r3, r0
 800d97c:	6039      	str	r1, [r7, #0]
 800d97e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d980:	79fb      	ldrb	r3, [r7, #7]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d105      	bne.n	800d992 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d986:	683a      	ldr	r2, [r7, #0]
 800d988:	4907      	ldr	r1, [pc, #28]	; (800d9a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d98a:	4808      	ldr	r0, [pc, #32]	; (800d9ac <USBD_FS_ProductStrDescriptor+0x38>)
 800d98c:	f7ff fdc1 	bl	800d512 <USBD_GetString>
 800d990:	e004      	b.n	800d99c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d992:	683a      	ldr	r2, [r7, #0]
 800d994:	4904      	ldr	r1, [pc, #16]	; (800d9a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d996:	4805      	ldr	r0, [pc, #20]	; (800d9ac <USBD_FS_ProductStrDescriptor+0x38>)
 800d998:	f7ff fdbb 	bl	800d512 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d99c:	4b02      	ldr	r3, [pc, #8]	; (800d9a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3708      	adds	r7, #8
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	20001ff0 	.word	0x20001ff0
 800d9ac:	0800e40c 	.word	0x0800e40c

0800d9b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	6039      	str	r1, [r7, #0]
 800d9ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	4904      	ldr	r1, [pc, #16]	; (800d9d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d9c0:	4804      	ldr	r0, [pc, #16]	; (800d9d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d9c2:	f7ff fda6 	bl	800d512 <USBD_GetString>
  return USBD_StrDesc;
 800d9c6:	4b02      	ldr	r3, [pc, #8]	; (800d9d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	20001ff0 	.word	0x20001ff0
 800d9d4:	0800e424 	.word	0x0800e424

0800d9d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	4603      	mov	r3, r0
 800d9e0:	6039      	str	r1, [r7, #0]
 800d9e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	221a      	movs	r2, #26
 800d9e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d9ea:	f000 f855 	bl	800da98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d9ee:	4b02      	ldr	r3, [pc, #8]	; (800d9f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	20000174 	.word	0x20000174

0800d9fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	4603      	mov	r3, r0
 800da04:	6039      	str	r1, [r7, #0]
 800da06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800da08:	79fb      	ldrb	r3, [r7, #7]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d105      	bne.n	800da1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da0e:	683a      	ldr	r2, [r7, #0]
 800da10:	4907      	ldr	r1, [pc, #28]	; (800da30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800da12:	4808      	ldr	r0, [pc, #32]	; (800da34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800da14:	f7ff fd7d 	bl	800d512 <USBD_GetString>
 800da18:	e004      	b.n	800da24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	4904      	ldr	r1, [pc, #16]	; (800da30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800da1e:	4805      	ldr	r0, [pc, #20]	; (800da34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800da20:	f7ff fd77 	bl	800d512 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da24:	4b02      	ldr	r3, [pc, #8]	; (800da30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800da26:	4618      	mov	r0, r3
 800da28:	3708      	adds	r7, #8
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	20001ff0 	.word	0x20001ff0
 800da34:	0800e438 	.word	0x0800e438

0800da38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	6039      	str	r1, [r7, #0]
 800da42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da44:	79fb      	ldrb	r3, [r7, #7]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d105      	bne.n	800da56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	4907      	ldr	r1, [pc, #28]	; (800da6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da4e:	4808      	ldr	r0, [pc, #32]	; (800da70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da50:	f7ff fd5f 	bl	800d512 <USBD_GetString>
 800da54:	e004      	b.n	800da60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da56:	683a      	ldr	r2, [r7, #0]
 800da58:	4904      	ldr	r1, [pc, #16]	; (800da6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da5a:	4805      	ldr	r0, [pc, #20]	; (800da70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da5c:	f7ff fd59 	bl	800d512 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da60:	4b02      	ldr	r3, [pc, #8]	; (800da6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800da62:	4618      	mov	r0, r3
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	20001ff0 	.word	0x20001ff0
 800da70:	0800e444 	.word	0x0800e444

0800da74 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	4603      	mov	r3, r0
 800da7c:	6039      	str	r1, [r7, #0]
 800da7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	220c      	movs	r2, #12
 800da84:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800da86:	4b03      	ldr	r3, [pc, #12]	; (800da94 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800da88:	4618      	mov	r0, r3
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr
 800da94:	20000164 	.word	0x20000164

0800da98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800da9e:	4b0f      	ldr	r3, [pc, #60]	; (800dadc <Get_SerialNum+0x44>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800daa4:	4b0e      	ldr	r3, [pc, #56]	; (800dae0 <Get_SerialNum+0x48>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800daaa:	4b0e      	ldr	r3, [pc, #56]	; (800dae4 <Get_SerialNum+0x4c>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4413      	add	r3, r2
 800dab6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d009      	beq.n	800dad2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dabe:	2208      	movs	r2, #8
 800dac0:	4909      	ldr	r1, [pc, #36]	; (800dae8 <Get_SerialNum+0x50>)
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f000 f814 	bl	800daf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dac8:	2204      	movs	r2, #4
 800daca:	4908      	ldr	r1, [pc, #32]	; (800daec <Get_SerialNum+0x54>)
 800dacc:	68b8      	ldr	r0, [r7, #8]
 800dace:	f000 f80f 	bl	800daf0 <IntToUnicode>
  }
}
 800dad2:	bf00      	nop
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	1fff7590 	.word	0x1fff7590
 800dae0:	1fff7594 	.word	0x1fff7594
 800dae4:	1fff7598 	.word	0x1fff7598
 800dae8:	20000176 	.word	0x20000176
 800daec:	20000186 	.word	0x20000186

0800daf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b087      	sub	sp, #28
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	4613      	mov	r3, r2
 800dafc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dafe:	2300      	movs	r3, #0
 800db00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800db02:	2300      	movs	r3, #0
 800db04:	75fb      	strb	r3, [r7, #23]
 800db06:	e027      	b.n	800db58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	0f1b      	lsrs	r3, r3, #28
 800db0c:	2b09      	cmp	r3, #9
 800db0e:	d80b      	bhi.n	800db28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	0f1b      	lsrs	r3, r3, #28
 800db14:	b2da      	uxtb	r2, r3
 800db16:	7dfb      	ldrb	r3, [r7, #23]
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	4619      	mov	r1, r3
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	440b      	add	r3, r1
 800db20:	3230      	adds	r2, #48	; 0x30
 800db22:	b2d2      	uxtb	r2, r2
 800db24:	701a      	strb	r2, [r3, #0]
 800db26:	e00a      	b.n	800db3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	0f1b      	lsrs	r3, r3, #28
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	7dfb      	ldrb	r3, [r7, #23]
 800db30:	005b      	lsls	r3, r3, #1
 800db32:	4619      	mov	r1, r3
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	440b      	add	r3, r1
 800db38:	3237      	adds	r2, #55	; 0x37
 800db3a:	b2d2      	uxtb	r2, r2
 800db3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	011b      	lsls	r3, r3, #4
 800db42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800db44:	7dfb      	ldrb	r3, [r7, #23]
 800db46:	005b      	lsls	r3, r3, #1
 800db48:	3301      	adds	r3, #1
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	4413      	add	r3, r2
 800db4e:	2200      	movs	r2, #0
 800db50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800db52:	7dfb      	ldrb	r3, [r7, #23]
 800db54:	3301      	adds	r3, #1
 800db56:	75fb      	strb	r3, [r7, #23]
 800db58:	7dfa      	ldrb	r2, [r7, #23]
 800db5a:	79fb      	ldrb	r3, [r7, #7]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d3d3      	bcc.n	800db08 <IntToUnicode+0x18>
  }
}
 800db60:	bf00      	nop
 800db62:	bf00      	nop
 800db64:	371c      	adds	r7, #28
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
	...

0800db70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b08a      	sub	sp, #40	; 0x28
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db78:	f107 0314 	add.w	r3, r7, #20
 800db7c:	2200      	movs	r2, #0
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	605a      	str	r2, [r3, #4]
 800db82:	609a      	str	r2, [r3, #8]
 800db84:	60da      	str	r2, [r3, #12]
 800db86:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800db90:	d14e      	bne.n	800dc30 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db92:	4b29      	ldr	r3, [pc, #164]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800db94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db96:	4a28      	ldr	r2, [pc, #160]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800db98:	f043 0301 	orr.w	r3, r3, #1
 800db9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800db9e:	4b26      	ldr	r3, [pc, #152]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800dba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dba2:	f003 0301 	and.w	r3, r3, #1
 800dba6:	613b      	str	r3, [r7, #16]
 800dba8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTG_DP_Pin|USB_OTG_DM_Pin;
 800dbaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dbae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbb8:	2303      	movs	r3, #3
 800dbba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dbbc:	230a      	movs	r3, #10
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbc0:	f107 0314 	add.w	r3, r7, #20
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dbca:	f7f5 f961 	bl	8002e90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dbce:	4b1a      	ldr	r3, [pc, #104]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800dbd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbd2:	4a19      	ldr	r2, [pc, #100]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800dbd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dbd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dbda:	4b17      	ldr	r3, [pc, #92]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800dbdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dbe2:	60fb      	str	r3, [r7, #12]
 800dbe4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dbe6:	4b14      	ldr	r3, [pc, #80]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800dbe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d114      	bne.n	800dc1c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dbf2:	4b11      	ldr	r3, [pc, #68]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800dbf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbf6:	4a10      	ldr	r2, [pc, #64]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800dbf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbfc:	6593      	str	r3, [r2, #88]	; 0x58
 800dbfe:	4b0e      	ldr	r3, [pc, #56]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800dc00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc06:	60bb      	str	r3, [r7, #8]
 800dc08:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800dc0a:	f7f6 fdb7 	bl	800477c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc0e:	4b0a      	ldr	r3, [pc, #40]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800dc10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc12:	4a09      	ldr	r2, [pc, #36]	; (800dc38 <HAL_PCD_MspInit+0xc8>)
 800dc14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc18:	6593      	str	r3, [r2, #88]	; 0x58
 800dc1a:	e001      	b.n	800dc20 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800dc1c:	f7f6 fdae 	bl	800477c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dc20:	2200      	movs	r2, #0
 800dc22:	2100      	movs	r1, #0
 800dc24:	2043      	movs	r0, #67	; 0x43
 800dc26:	f7f4 fd16 	bl	8002656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dc2a:	2043      	movs	r0, #67	; 0x43
 800dc2c:	f7f4 fd2f 	bl	800268e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dc30:	bf00      	nop
 800dc32:	3728      	adds	r7, #40	; 0x28
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	40021000 	.word	0x40021000

0800dc3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800dc50:	4619      	mov	r1, r3
 800dc52:	4610      	mov	r0, r2
 800dc54:	f7fe fc4c 	bl	800c4f0 <USBD_LL_SetupStage>
}
 800dc58:	bf00      	nop
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dc72:	78fa      	ldrb	r2, [r7, #3]
 800dc74:	6879      	ldr	r1, [r7, #4]
 800dc76:	4613      	mov	r3, r2
 800dc78:	00db      	lsls	r3, r3, #3
 800dc7a:	1a9b      	subs	r3, r3, r2
 800dc7c:	009b      	lsls	r3, r3, #2
 800dc7e:	440b      	add	r3, r1
 800dc80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	78fb      	ldrb	r3, [r7, #3]
 800dc88:	4619      	mov	r1, r3
 800dc8a:	f7fe fc86 	bl	800c59a <USBD_LL_DataOutStage>
}
 800dc8e:	bf00      	nop
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b082      	sub	sp, #8
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800dca8:	78fa      	ldrb	r2, [r7, #3]
 800dcaa:	6879      	ldr	r1, [r7, #4]
 800dcac:	4613      	mov	r3, r2
 800dcae:	00db      	lsls	r3, r3, #3
 800dcb0:	1a9b      	subs	r3, r3, r2
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	440b      	add	r3, r1
 800dcb6:	3348      	adds	r3, #72	; 0x48
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	78fb      	ldrb	r3, [r7, #3]
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	f7fe fccf 	bl	800c660 <USBD_LL_DataInStage>
}
 800dcc2:	bf00      	nop
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b082      	sub	sp, #8
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fe fde3 	bl	800c8a4 <USBD_LL_SOF>
}
 800dcde:	bf00      	nop
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b084      	sub	sp, #16
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	68db      	ldr	r3, [r3, #12]
 800dcf6:	2b02      	cmp	r3, #2
 800dcf8:	d001      	beq.n	800dcfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dcfa:	f7f3 f827 	bl	8000d4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dd04:	7bfa      	ldrb	r2, [r7, #15]
 800dd06:	4611      	mov	r1, r2
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7fe fd8d 	bl	800c828 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fe fd39 	bl	800c78c <USBD_LL_Reset>
}
 800dd1a:	bf00      	nop
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
	...

0800dd24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	6812      	ldr	r2, [r2, #0]
 800dd3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd3e:	f043 0301 	orr.w	r3, r3, #1
 800dd42:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fe fd7c 	bl	800c848 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6a1b      	ldr	r3, [r3, #32]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d005      	beq.n	800dd64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd58:	4b04      	ldr	r3, [pc, #16]	; (800dd6c <HAL_PCD_SuspendCallback+0x48>)
 800dd5a:	691b      	ldr	r3, [r3, #16]
 800dd5c:	4a03      	ldr	r2, [pc, #12]	; (800dd6c <HAL_PCD_SuspendCallback+0x48>)
 800dd5e:	f043 0306 	orr.w	r3, r3, #6
 800dd62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	e000ed00 	.word	0xe000ed00

0800dd70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	6812      	ldr	r2, [r2, #0]
 800dd86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd8a:	f023 0301 	bic.w	r3, r3, #1
 800dd8e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a1b      	ldr	r3, [r3, #32]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d007      	beq.n	800dda8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd98:	4b08      	ldr	r3, [pc, #32]	; (800ddbc <HAL_PCD_ResumeCallback+0x4c>)
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	4a07      	ldr	r2, [pc, #28]	; (800ddbc <HAL_PCD_ResumeCallback+0x4c>)
 800dd9e:	f023 0306 	bic.w	r3, r3, #6
 800dda2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dda4:	f000 faf4 	bl	800e390 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe fd60 	bl	800c874 <USBD_LL_Resume>
}
 800ddb4:	bf00      	nop
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	e000ed00 	.word	0xe000ed00

0800ddc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddd2:	78fa      	ldrb	r2, [r7, #3]
 800ddd4:	4611      	mov	r1, r2
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fe fdac 	bl	800c934 <USBD_LL_IsoOUTIncomplete>
}
 800dddc:	bf00      	nop
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ddf6:	78fa      	ldrb	r2, [r7, #3]
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7fe fd74 	bl	800c8e8 <USBD_LL_IsoINIncomplete>
}
 800de00:	bf00      	nop
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de16:	4618      	mov	r0, r3
 800de18:	f7fe fdb2 	bl	800c980 <USBD_LL_DevConnected>
}
 800de1c:	bf00      	nop
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe fdaf 	bl	800c996 <USBD_LL_DevDisconnected>
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d139      	bne.n	800dec4 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800de50:	4a1f      	ldr	r2, [pc, #124]	; (800ded0 <USBD_LL_Init+0x90>)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a1d      	ldr	r2, [pc, #116]	; (800ded0 <USBD_LL_Init+0x90>)
 800de5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de60:	4b1b      	ldr	r3, [pc, #108]	; (800ded0 <USBD_LL_Init+0x90>)
 800de62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800de66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800de68:	4b19      	ldr	r3, [pc, #100]	; (800ded0 <USBD_LL_Init+0x90>)
 800de6a:	2206      	movs	r2, #6
 800de6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800de6e:	4b18      	ldr	r3, [pc, #96]	; (800ded0 <USBD_LL_Init+0x90>)
 800de70:	2202      	movs	r2, #2
 800de72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800de74:	4b16      	ldr	r3, [pc, #88]	; (800ded0 <USBD_LL_Init+0x90>)
 800de76:	2200      	movs	r2, #0
 800de78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800de7a:	4b15      	ldr	r3, [pc, #84]	; (800ded0 <USBD_LL_Init+0x90>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800de80:	4b13      	ldr	r3, [pc, #76]	; (800ded0 <USBD_LL_Init+0x90>)
 800de82:	2200      	movs	r2, #0
 800de84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800de86:	4b12      	ldr	r3, [pc, #72]	; (800ded0 <USBD_LL_Init+0x90>)
 800de88:	2201      	movs	r2, #1
 800de8a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800de8c:	4b10      	ldr	r3, [pc, #64]	; (800ded0 <USBD_LL_Init+0x90>)
 800de8e:	2200      	movs	r2, #0
 800de90:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800de92:	4b0f      	ldr	r3, [pc, #60]	; (800ded0 <USBD_LL_Init+0x90>)
 800de94:	2200      	movs	r2, #0
 800de96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800de98:	480d      	ldr	r0, [pc, #52]	; (800ded0 <USBD_LL_Init+0x90>)
 800de9a:	f7f5 fafb 	bl	8003494 <HAL_PCD_Init>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d001      	beq.n	800dea8 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800dea4:	f7f2 ff52 	bl	8000d4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dea8:	2180      	movs	r1, #128	; 0x80
 800deaa:	4809      	ldr	r0, [pc, #36]	; (800ded0 <USBD_LL_Init+0x90>)
 800deac:	f7f6 fb5d 	bl	800456a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800deb0:	2240      	movs	r2, #64	; 0x40
 800deb2:	2100      	movs	r1, #0
 800deb4:	4806      	ldr	r0, [pc, #24]	; (800ded0 <USBD_LL_Init+0x90>)
 800deb6:	f7f6 fb11 	bl	80044dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800deba:	2280      	movs	r2, #128	; 0x80
 800debc:	2101      	movs	r1, #1
 800debe:	4804      	ldr	r0, [pc, #16]	; (800ded0 <USBD_LL_Init+0x90>)
 800dec0:	f7f6 fb0c 	bl	80044dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	200021f0 	.word	0x200021f0

0800ded4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dedc:	2300      	movs	r3, #0
 800dede:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dee0:	2300      	movs	r3, #0
 800dee2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800deea:	4618      	mov	r0, r3
 800deec:	f7f5 fbf6 	bl	80036dc <HAL_PCD_Start>
 800def0:	4603      	mov	r3, r0
 800def2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800def4:	7bbb      	ldrb	r3, [r7, #14]
 800def6:	2b03      	cmp	r3, #3
 800def8:	d816      	bhi.n	800df28 <USBD_LL_Start+0x54>
 800defa:	a201      	add	r2, pc, #4	; (adr r2, 800df00 <USBD_LL_Start+0x2c>)
 800defc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df00:	0800df11 	.word	0x0800df11
 800df04:	0800df17 	.word	0x0800df17
 800df08:	0800df1d 	.word	0x0800df1d
 800df0c:	0800df23 	.word	0x0800df23
    case HAL_OK :
      usb_status = USBD_OK;
 800df10:	2300      	movs	r3, #0
 800df12:	73fb      	strb	r3, [r7, #15]
    break;
 800df14:	e00b      	b.n	800df2e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df16:	2303      	movs	r3, #3
 800df18:	73fb      	strb	r3, [r7, #15]
    break;
 800df1a:	e008      	b.n	800df2e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df1c:	2301      	movs	r3, #1
 800df1e:	73fb      	strb	r3, [r7, #15]
    break;
 800df20:	e005      	b.n	800df2e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df22:	2303      	movs	r3, #3
 800df24:	73fb      	strb	r3, [r7, #15]
    break;
 800df26:	e002      	b.n	800df2e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800df28:	2303      	movs	r3, #3
 800df2a:	73fb      	strb	r3, [r7, #15]
    break;
 800df2c:	bf00      	nop
  }
  return usb_status;
 800df2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df30:	4618      	mov	r0, r3
 800df32:	3710      	adds	r7, #16
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	4608      	mov	r0, r1
 800df42:	4611      	mov	r1, r2
 800df44:	461a      	mov	r2, r3
 800df46:	4603      	mov	r3, r0
 800df48:	70fb      	strb	r3, [r7, #3]
 800df4a:	460b      	mov	r3, r1
 800df4c:	70bb      	strb	r3, [r7, #2]
 800df4e:	4613      	mov	r3, r2
 800df50:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df52:	2300      	movs	r3, #0
 800df54:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df56:	2300      	movs	r3, #0
 800df58:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df60:	78bb      	ldrb	r3, [r7, #2]
 800df62:	883a      	ldrh	r2, [r7, #0]
 800df64:	78f9      	ldrb	r1, [r7, #3]
 800df66:	f7f5 ffb1 	bl	8003ecc <HAL_PCD_EP_Open>
 800df6a:	4603      	mov	r3, r0
 800df6c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df6e:	7bbb      	ldrb	r3, [r7, #14]
 800df70:	2b03      	cmp	r3, #3
 800df72:	d817      	bhi.n	800dfa4 <USBD_LL_OpenEP+0x6c>
 800df74:	a201      	add	r2, pc, #4	; (adr r2, 800df7c <USBD_LL_OpenEP+0x44>)
 800df76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7a:	bf00      	nop
 800df7c:	0800df8d 	.word	0x0800df8d
 800df80:	0800df93 	.word	0x0800df93
 800df84:	0800df99 	.word	0x0800df99
 800df88:	0800df9f 	.word	0x0800df9f
    case HAL_OK :
      usb_status = USBD_OK;
 800df8c:	2300      	movs	r3, #0
 800df8e:	73fb      	strb	r3, [r7, #15]
    break;
 800df90:	e00b      	b.n	800dfaa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df92:	2303      	movs	r3, #3
 800df94:	73fb      	strb	r3, [r7, #15]
    break;
 800df96:	e008      	b.n	800dfaa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df98:	2301      	movs	r3, #1
 800df9a:	73fb      	strb	r3, [r7, #15]
    break;
 800df9c:	e005      	b.n	800dfaa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df9e:	2303      	movs	r3, #3
 800dfa0:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa2:	e002      	b.n	800dfaa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa8:	bf00      	nop
  }
  return usb_status;
 800dfaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3710      	adds	r7, #16
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dfce:	78fa      	ldrb	r2, [r7, #3]
 800dfd0:	4611      	mov	r1, r2
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7f5 ffe2 	bl	8003f9c <HAL_PCD_EP_Close>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dfdc:	7bbb      	ldrb	r3, [r7, #14]
 800dfde:	2b03      	cmp	r3, #3
 800dfe0:	d816      	bhi.n	800e010 <USBD_LL_CloseEP+0x5c>
 800dfe2:	a201      	add	r2, pc, #4	; (adr r2, 800dfe8 <USBD_LL_CloseEP+0x34>)
 800dfe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfe8:	0800dff9 	.word	0x0800dff9
 800dfec:	0800dfff 	.word	0x0800dfff
 800dff0:	0800e005 	.word	0x0800e005
 800dff4:	0800e00b 	.word	0x0800e00b
    case HAL_OK :
      usb_status = USBD_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	73fb      	strb	r3, [r7, #15]
    break;
 800dffc:	e00b      	b.n	800e016 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dffe:	2303      	movs	r3, #3
 800e000:	73fb      	strb	r3, [r7, #15]
    break;
 800e002:	e008      	b.n	800e016 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e004:	2301      	movs	r3, #1
 800e006:	73fb      	strb	r3, [r7, #15]
    break;
 800e008:	e005      	b.n	800e016 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e00a:	2303      	movs	r3, #3
 800e00c:	73fb      	strb	r3, [r7, #15]
    break;
 800e00e:	e002      	b.n	800e016 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e010:	2303      	movs	r3, #3
 800e012:	73fb      	strb	r3, [r7, #15]
    break;
 800e014:	bf00      	nop
  }
  return usb_status;
 800e016:	7bfb      	ldrb	r3, [r7, #15]
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3710      	adds	r7, #16
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	460b      	mov	r3, r1
 800e02a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e02c:	2300      	movs	r3, #0
 800e02e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e030:	2300      	movs	r3, #0
 800e032:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e03a:	78fa      	ldrb	r2, [r7, #3]
 800e03c:	4611      	mov	r1, r2
 800e03e:	4618      	mov	r0, r3
 800e040:	f7f6 f889 	bl	8004156 <HAL_PCD_EP_SetStall>
 800e044:	4603      	mov	r3, r0
 800e046:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e048:	7bbb      	ldrb	r3, [r7, #14]
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d816      	bhi.n	800e07c <USBD_LL_StallEP+0x5c>
 800e04e:	a201      	add	r2, pc, #4	; (adr r2, 800e054 <USBD_LL_StallEP+0x34>)
 800e050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e054:	0800e065 	.word	0x0800e065
 800e058:	0800e06b 	.word	0x0800e06b
 800e05c:	0800e071 	.word	0x0800e071
 800e060:	0800e077 	.word	0x0800e077
    case HAL_OK :
      usb_status = USBD_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73fb      	strb	r3, [r7, #15]
    break;
 800e068:	e00b      	b.n	800e082 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e06a:	2303      	movs	r3, #3
 800e06c:	73fb      	strb	r3, [r7, #15]
    break;
 800e06e:	e008      	b.n	800e082 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e070:	2301      	movs	r3, #1
 800e072:	73fb      	strb	r3, [r7, #15]
    break;
 800e074:	e005      	b.n	800e082 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e076:	2303      	movs	r3, #3
 800e078:	73fb      	strb	r3, [r7, #15]
    break;
 800e07a:	e002      	b.n	800e082 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e07c:	2303      	movs	r3, #3
 800e07e:	73fb      	strb	r3, [r7, #15]
    break;
 800e080:	bf00      	nop
  }
  return usb_status;
 800e082:	7bfb      	ldrb	r3, [r7, #15]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3710      	adds	r7, #16
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	460b      	mov	r3, r1
 800e096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e098:	2300      	movs	r3, #0
 800e09a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0a6:	78fa      	ldrb	r2, [r7, #3]
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7f6 f8b5 	bl	800421a <HAL_PCD_EP_ClrStall>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e0b4:	7bbb      	ldrb	r3, [r7, #14]
 800e0b6:	2b03      	cmp	r3, #3
 800e0b8:	d816      	bhi.n	800e0e8 <USBD_LL_ClearStallEP+0x5c>
 800e0ba:	a201      	add	r2, pc, #4	; (adr r2, 800e0c0 <USBD_LL_ClearStallEP+0x34>)
 800e0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c0:	0800e0d1 	.word	0x0800e0d1
 800e0c4:	0800e0d7 	.word	0x0800e0d7
 800e0c8:	0800e0dd 	.word	0x0800e0dd
 800e0cc:	0800e0e3 	.word	0x0800e0e3
    case HAL_OK :
      usb_status = USBD_OK;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0d4:	e00b      	b.n	800e0ee <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e0da:	e008      	b.n	800e0ee <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e0:	e005      	b.n	800e0ee <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e6:	e002      	b.n	800e0ee <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e0e8:	2303      	movs	r3, #3
 800e0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e0ec:	bf00      	nop
  }
  return usb_status;
 800e0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3710      	adds	r7, #16
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	460b      	mov	r3, r1
 800e102:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e10a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e10c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e110:	2b00      	cmp	r3, #0
 800e112:	da0b      	bge.n	800e12c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e114:	78fb      	ldrb	r3, [r7, #3]
 800e116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e11a:	68f9      	ldr	r1, [r7, #12]
 800e11c:	4613      	mov	r3, r2
 800e11e:	00db      	lsls	r3, r3, #3
 800e120:	1a9b      	subs	r3, r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	440b      	add	r3, r1
 800e126:	333e      	adds	r3, #62	; 0x3e
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	e00b      	b.n	800e144 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e12c:	78fb      	ldrb	r3, [r7, #3]
 800e12e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e132:	68f9      	ldr	r1, [r7, #12]
 800e134:	4613      	mov	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	1a9b      	subs	r3, r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	440b      	add	r3, r1
 800e13e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e142:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e144:	4618      	mov	r0, r3
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b084      	sub	sp, #16
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	460b      	mov	r3, r1
 800e15a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e160:	2300      	movs	r3, #0
 800e162:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e16a:	78fa      	ldrb	r2, [r7, #3]
 800e16c:	4611      	mov	r1, r2
 800e16e:	4618      	mov	r0, r3
 800e170:	f7f5 fe87 	bl	8003e82 <HAL_PCD_SetAddress>
 800e174:	4603      	mov	r3, r0
 800e176:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e178:	7bbb      	ldrb	r3, [r7, #14]
 800e17a:	2b03      	cmp	r3, #3
 800e17c:	d816      	bhi.n	800e1ac <USBD_LL_SetUSBAddress+0x5c>
 800e17e:	a201      	add	r2, pc, #4	; (adr r2, 800e184 <USBD_LL_SetUSBAddress+0x34>)
 800e180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e184:	0800e195 	.word	0x0800e195
 800e188:	0800e19b 	.word	0x0800e19b
 800e18c:	0800e1a1 	.word	0x0800e1a1
 800e190:	0800e1a7 	.word	0x0800e1a7
    case HAL_OK :
      usb_status = USBD_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	73fb      	strb	r3, [r7, #15]
    break;
 800e198:	e00b      	b.n	800e1b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e19a:	2303      	movs	r3, #3
 800e19c:	73fb      	strb	r3, [r7, #15]
    break;
 800e19e:	e008      	b.n	800e1b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e1a4:	e005      	b.n	800e1b2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1a6:	2303      	movs	r3, #3
 800e1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800e1aa:	e002      	b.n	800e1b2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b0:	bf00      	nop
  }
  return usb_status;
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3710      	adds	r7, #16
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	607a      	str	r2, [r7, #4]
 800e1c6:	603b      	str	r3, [r7, #0]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e1da:	7af9      	ldrb	r1, [r7, #11]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	f7f5 ff7c 	bl	80040dc <HAL_PCD_EP_Transmit>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e1e8:	7dbb      	ldrb	r3, [r7, #22]
 800e1ea:	2b03      	cmp	r3, #3
 800e1ec:	d816      	bhi.n	800e21c <USBD_LL_Transmit+0x60>
 800e1ee:	a201      	add	r2, pc, #4	; (adr r2, 800e1f4 <USBD_LL_Transmit+0x38>)
 800e1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f4:	0800e205 	.word	0x0800e205
 800e1f8:	0800e20b 	.word	0x0800e20b
 800e1fc:	0800e211 	.word	0x0800e211
 800e200:	0800e217 	.word	0x0800e217
    case HAL_OK :
      usb_status = USBD_OK;
 800e204:	2300      	movs	r3, #0
 800e206:	75fb      	strb	r3, [r7, #23]
    break;
 800e208:	e00b      	b.n	800e222 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e20a:	2303      	movs	r3, #3
 800e20c:	75fb      	strb	r3, [r7, #23]
    break;
 800e20e:	e008      	b.n	800e222 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e210:	2301      	movs	r3, #1
 800e212:	75fb      	strb	r3, [r7, #23]
    break;
 800e214:	e005      	b.n	800e222 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e216:	2303      	movs	r3, #3
 800e218:	75fb      	strb	r3, [r7, #23]
    break;
 800e21a:	e002      	b.n	800e222 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e21c:	2303      	movs	r3, #3
 800e21e:	75fb      	strb	r3, [r7, #23]
    break;
 800e220:	bf00      	nop
  }
  return usb_status;
 800e222:	7dfb      	ldrb	r3, [r7, #23]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3718      	adds	r7, #24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	607a      	str	r2, [r7, #4]
 800e236:	603b      	str	r3, [r7, #0]
 800e238:	460b      	mov	r3, r1
 800e23a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e23c:	2300      	movs	r3, #0
 800e23e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e24a:	7af9      	ldrb	r1, [r7, #11]
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	f7f5 feee 	bl	8004030 <HAL_PCD_EP_Receive>
 800e254:	4603      	mov	r3, r0
 800e256:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e258:	7dbb      	ldrb	r3, [r7, #22]
 800e25a:	2b03      	cmp	r3, #3
 800e25c:	d816      	bhi.n	800e28c <USBD_LL_PrepareReceive+0x60>
 800e25e:	a201      	add	r2, pc, #4	; (adr r2, 800e264 <USBD_LL_PrepareReceive+0x38>)
 800e260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e264:	0800e275 	.word	0x0800e275
 800e268:	0800e27b 	.word	0x0800e27b
 800e26c:	0800e281 	.word	0x0800e281
 800e270:	0800e287 	.word	0x0800e287
    case HAL_OK :
      usb_status = USBD_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	75fb      	strb	r3, [r7, #23]
    break;
 800e278:	e00b      	b.n	800e292 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e27a:	2303      	movs	r3, #3
 800e27c:	75fb      	strb	r3, [r7, #23]
    break;
 800e27e:	e008      	b.n	800e292 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e280:	2301      	movs	r3, #1
 800e282:	75fb      	strb	r3, [r7, #23]
    break;
 800e284:	e005      	b.n	800e292 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e286:	2303      	movs	r3, #3
 800e288:	75fb      	strb	r3, [r7, #23]
    break;
 800e28a:	e002      	b.n	800e292 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e28c:	2303      	movs	r3, #3
 800e28e:	75fb      	strb	r3, [r7, #23]
    break;
 800e290:	bf00      	nop
  }
  return usb_status;
 800e292:	7dfb      	ldrb	r3, [r7, #23]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3718      	adds	r7, #24
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2ae:	78fa      	ldrb	r2, [r7, #3]
 800e2b0:	4611      	mov	r1, r2
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7f5 fefa 	bl	80040ac <HAL_PCD_EP_GetRxCount>
 800e2b8:	4603      	mov	r3, r0
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3708      	adds	r7, #8
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
	...

0800e2c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e2d0:	78fb      	ldrb	r3, [r7, #3]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <HAL_PCDEx_LPM_Callback+0x18>
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d01f      	beq.n	800e31a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e2da:	e03b      	b.n	800e354 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6a1b      	ldr	r3, [r3, #32]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d007      	beq.n	800e2f4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e2e4:	f000 f854 	bl	800e390 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2e8:	4b1c      	ldr	r3, [pc, #112]	; (800e35c <HAL_PCDEx_LPM_Callback+0x98>)
 800e2ea:	691b      	ldr	r3, [r3, #16]
 800e2ec:	4a1b      	ldr	r2, [pc, #108]	; (800e35c <HAL_PCDEx_LPM_Callback+0x98>)
 800e2ee:	f023 0306 	bic.w	r3, r3, #6
 800e2f2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	6812      	ldr	r2, [r2, #0]
 800e302:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e306:	f023 0301 	bic.w	r3, r3, #1
 800e30a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e312:	4618      	mov	r0, r3
 800e314:	f7fe faae 	bl	800c874 <USBD_LL_Resume>
    break;
 800e318:	e01c      	b.n	800e354 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	6812      	ldr	r2, [r2, #0]
 800e328:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e32c:	f043 0301 	orr.w	r3, r3, #1
 800e330:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fe fa85 	bl	800c848 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a1b      	ldr	r3, [r3, #32]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d005      	beq.n	800e352 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e346:	4b05      	ldr	r3, [pc, #20]	; (800e35c <HAL_PCDEx_LPM_Callback+0x98>)
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	4a04      	ldr	r2, [pc, #16]	; (800e35c <HAL_PCDEx_LPM_Callback+0x98>)
 800e34c:	f043 0306 	orr.w	r3, r3, #6
 800e350:	6113      	str	r3, [r2, #16]
    break;
 800e352:	bf00      	nop
}
 800e354:	bf00      	nop
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	e000ed00 	.word	0xe000ed00

0800e360 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e360:	b480      	push	{r7}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e368:	4b03      	ldr	r3, [pc, #12]	; (800e378 <USBD_static_malloc+0x18>)
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	370c      	adds	r7, #12
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr
 800e376:	bf00      	nop
 800e378:	200001f0 	.word	0x200001f0

0800e37c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]

}
 800e384:	bf00      	nop
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e394:	f7f1 ff64 	bl	8000260 <SystemClock_Config>
}
 800e398:	bf00      	nop
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <__libc_init_array>:
 800e39c:	b570      	push	{r4, r5, r6, lr}
 800e39e:	4d0d      	ldr	r5, [pc, #52]	; (800e3d4 <__libc_init_array+0x38>)
 800e3a0:	4c0d      	ldr	r4, [pc, #52]	; (800e3d8 <__libc_init_array+0x3c>)
 800e3a2:	1b64      	subs	r4, r4, r5
 800e3a4:	10a4      	asrs	r4, r4, #2
 800e3a6:	2600      	movs	r6, #0
 800e3a8:	42a6      	cmp	r6, r4
 800e3aa:	d109      	bne.n	800e3c0 <__libc_init_array+0x24>
 800e3ac:	4d0b      	ldr	r5, [pc, #44]	; (800e3dc <__libc_init_array+0x40>)
 800e3ae:	4c0c      	ldr	r4, [pc, #48]	; (800e3e0 <__libc_init_array+0x44>)
 800e3b0:	f000 f820 	bl	800e3f4 <_init>
 800e3b4:	1b64      	subs	r4, r4, r5
 800e3b6:	10a4      	asrs	r4, r4, #2
 800e3b8:	2600      	movs	r6, #0
 800e3ba:	42a6      	cmp	r6, r4
 800e3bc:	d105      	bne.n	800e3ca <__libc_init_array+0x2e>
 800e3be:	bd70      	pop	{r4, r5, r6, pc}
 800e3c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3c4:	4798      	blx	r3
 800e3c6:	3601      	adds	r6, #1
 800e3c8:	e7ee      	b.n	800e3a8 <__libc_init_array+0xc>
 800e3ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3ce:	4798      	blx	r3
 800e3d0:	3601      	adds	r6, #1
 800e3d2:	e7f2      	b.n	800e3ba <__libc_init_array+0x1e>
 800e3d4:	0800e4b0 	.word	0x0800e4b0
 800e3d8:	0800e4b0 	.word	0x0800e4b0
 800e3dc:	0800e4b0 	.word	0x0800e4b0
 800e3e0:	0800e4b4 	.word	0x0800e4b4

0800e3e4 <memset>:
 800e3e4:	4402      	add	r2, r0
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	4293      	cmp	r3, r2
 800e3ea:	d100      	bne.n	800e3ee <memset+0xa>
 800e3ec:	4770      	bx	lr
 800e3ee:	f803 1b01 	strb.w	r1, [r3], #1
 800e3f2:	e7f9      	b.n	800e3e8 <memset+0x4>

0800e3f4 <_init>:
 800e3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f6:	bf00      	nop
 800e3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3fa:	bc08      	pop	{r3}
 800e3fc:	469e      	mov	lr, r3
 800e3fe:	4770      	bx	lr

0800e400 <_fini>:
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e402:	bf00      	nop
 800e404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e406:	bc08      	pop	{r3}
 800e408:	469e      	mov	lr, r3
 800e40a:	4770      	bx	lr
